<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java泛型之类型擦除</title>
    <url>/2022/03/16/Java%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/</url>
    <content><![CDATA[<h2 id="Java泛型之类型擦除"><a href="#Java泛型之类型擦除" class="headerlink" title="Java泛型之类型擦除"></a>Java泛型之类型擦除</h2><p>在网关开发过程中，经常要应对多种任务数据抽取出公共方法来处理，这时候就会用到泛型，泛型的概念：</p>
<blockquote>
<p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。<br>泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，以提高代码的重用率。</p>
<p>Java 泛型的参数只可以代表类，不能代表个别对象。由于 Java 泛型的类型参数之实际类型在编译时会被消除，所以无法在运行时得知其类型参数的类型。Java 编译器在编译泛型时会自动加入类型转换的编码，故运行速度不会因为使用泛型而加快。</p>
</blockquote>
<p>Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。</p>
<p>如在代码中定义<code>List&lt;Object&gt;</code>和<code>List&lt;String&gt;</code>等类型，在编译后都会变成<code>List</code>，JVM看到的只是<code>List</code>，而由泛型附加的类型信息对JVM是看不到的。JVM并不知道泛型的存在，因为泛型在编译阶段就已经被处理成普通的类和方法，处理机制是通过类型擦除。</p>
<p>擦除规则：</p>
<p>若泛型类型没有指定具体类型，用Object作为原始类型；<br>若有限定类型&lt; T exnteds XClass &gt;，使用XClass作为原始类型；<br>若有多个限定&lt; T exnteds XClass1 &amp; XClass2 &gt;，使用第一个边界类型XClass1作为原始类型；类型擦除引起的问题及解决方法</p>
<p>因为种种原因，Java不能实现真正的泛型，只能使用类型擦除来实现伪泛型，这样虽然不会有类型膨胀问题，但是也引起来许多新问题，所以，SUN对这些问题做出了种种限制，避免我们发生各种错误。</p>
<h4 id="1-先检查再编译以及编译的对象和引用传递问题"><a href="#1-先检查再编译以及编译的对象和引用传递问题" class="headerlink" title="1. 先检查再编译以及编译的对象和引用传递问题"></a>1. 先检查再编译以及编译的对象和引用传递问题</h4><p>既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量String会在编译的时候变为Object类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</p>
<p>Java编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static  void main(String[] args) &#123;  </span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();  </span><br><span class="line">    list.add(&quot;123&quot;);  </span><br><span class="line">    list.add(123);//编译错误  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在上面的程序中，使用<code>add</code>方法添加一个整型，在IDE中，直接会报错，说明这就是在编译之前的检查，因为如果是在编译之后检查，类型擦除后，原始类型为<code>Object</code>，是应该允许任意引用类型添加的。可实际上却不是这样的，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</p>
<p>那么，这个类型检查是针对谁的呢？我们先看看参数化类型和原始类型的兼容。</p>
<p>以 ArrayList举例子，以前的写法:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  </span><br></pre></td></tr></table></figure></div>

<p>现在的写法:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure></div>

<p>如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">//第一种 情况</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//第二种 情况</span></span><br></pre></td></tr></table></figure></div>

<p>这样是没有错误的，不过会有个编译时警告。</p>
<h4 id="2-自动类型转换"><a href="#2-自动类型转换" class="headerlink" title="2. 自动类型转换"></a>2. 自动类型转换</h4><p>因为类型擦除的问题，所以所有的泛型类型变量最后都会被替换为原始类型。</p>
<p>既然都被替换为原始类型，那么为什么我们在获取的时候，不需要进行强制类型转换呢？</p>
<p>看下<code>ArrayList.get()</code>方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;  </span><br><span class="line"></span><br><span class="line">    RangeCheck(index);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，在<code>return</code>之前，会根据泛型变量进行强转。假设泛型类型变量为<code>Date</code>，虽然泛型信息会被擦除掉，但是会将<code>(E) elementData[index]</code>，编译为<code>(Date) elementData[index]</code>。所以我们不用自己进行强转。当存取一个泛型域时也会自动插入强制类型转换。</p>
<h4 id="3-泛型类型变量不能是基本数据类型"><a href="#3-泛型类型变量不能是基本数据类型" class="headerlink" title="3. 泛型类型变量不能是基本数据类型"></a>3. 泛型类型变量不能是基本数据类型</h4><p>不能用类型参数替换基本类型。就比如，没有<code>ArrayList&lt;double&gt;</code>，只有<code>ArrayList&lt;Double&gt;</code>。因为当类型擦除后，<code>ArrayList</code>的原始类型变为<code>Object</code>，但是<code>Object</code>类型不能存储<code>double</code>值，只能引用<code>Double</code>的值。</p>
<h4 id="4-编译时集合的instanceof"><a href="#4-编译时集合的instanceof" class="headerlink" title="4. 编译时集合的instanceof"></a>4. 编译时集合的instanceof</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure></div>

<p>因为类型擦除之后，<code>ArrayList&lt;String&gt;</code>只剩下原始类型，泛型信息<code>String</code>不存在了。</p>
<p>那么，编译时进行类型查询的时候使用下面的方法是错误的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( arrayList <span class="keyword">instanceof</span> ArrayList&lt;String&gt;)</span><br></pre></td></tr></table></figure></div>

<h4 id="5-泛型在静态方法和静态类中的问题"><a href="#5-泛型在静态方法和静态类中的问题" class="headerlink" title="5. 泛型在静态方法和静态类中的问题"></a>5. 泛型在静态方法和静态类中的问题</h4><p>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数</p>
<p>举例说明：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T one;   <span class="comment">//编译错误    </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//编译错误    </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</p>
<p><a class="link"   href="https://www.cnblogs.com/wuqinglong/p/9456193.html" >https://www.cnblogs.com/wuqinglong/p/9456193.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/2022/03/09/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>在从Java 8开始，引入了函数式编程接口与Lambda表达式，可以让我们简化某些匿名内部类，编写更少的代码来实现功能，使用Lambda表达式可以简化匿名内部类的书写，但Lambda表达式并不能取代所有的匿名内部类，只能用来取代函数接口的简写，例如在创建一个线程时，常见的写法是这样：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Thread(new Runnable()&#123;// 接口名</span><br><span class="line">	@Override</span><br><span class="line">	public void run()&#123;// 方法名</span><br><span class="line">		System.out.println(&quot;Thread run()&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure></div>

<p>上述代码给Tread类传递了一个匿名的Runnable对象，重载Runnable接口的run()方法来实现相应逻辑。使用lambda表达式可以简化为如下形式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Thread(</span><br><span class="line">		() -&gt; System.out.println(&quot;Thread run()&quot;)// 省略接口名和方法名</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure></div>

<p>还是上面说的，使用Lambda的依据是必须有相应的函数式接口，函数式接口也是Java interface的一种，即内部只有一个抽象方法的接口，需要满足：</p>
<ul>
<li>一个函数式接口只有一个抽象方法(single abstract method)；</li>
<li>Object类中的public abstract method不会被视为单一的抽象方法；</li>
<li>函数式接口可以有默认方法和静态方法；</li>
<li>函数式接口可以用@FunctionalInterface注解进行修饰。</li>
</ul>
<p>这一点跟Java是强类型语言吻合，也就是不能在代码的任何地方写Lambda表达式。实际上<em>Lambda的类型就是对应函数接口的类型</em>。Lambda表达式另一个依据是类型推断机制，在上下文信息足够的情况下，编译器可以推断出参数表的类型，而不需要显式指名。</p>
<p>自定义函数接口很容易，只需要编写一个只有一个抽象方法的接口即可。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface ConsumerInterface&lt;T&gt;&#123;</span><br><span class="line">	void accept(T t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面代码中的@FunctionalInterface是可选的，但加上该标注编译器会帮你检查接口是否符合函数接口规范。就像加入@Override标注会检查是否重载了函数一样。</p>
<p>有了上述接口定义，就可以写出类似如下的代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ConsumerInterface&lt;String&gt; consumer = str -&gt; System.out.println(str);</span><br></pre></td></tr></table></figure></div>

<p>Java内部也提供了一些可以直接使用的函数接口</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Consumer&lt;T&gt;     消费型接口 </span><br><span class="line">void  accept(T t) ,提供的是无返回值的抽象方法</span><br><span class="line"></span><br><span class="line">2. Supplier &lt;T&gt;  供给型接口</span><br><span class="line">T  get()  ,  提供的是有返无参的抽象方法</span><br><span class="line"></span><br><span class="line">3. Function&lt;T,R&gt; 函数型接口    T  是参数类型,R是返回值类型</span><br><span class="line">R apply(T t)   提供的是 有参 有返的抽象方法</span><br><span class="line"></span><br><span class="line">4.Predicate &lt;T&gt; 断言型接口 </span><br><span class="line">boolean test(T t)  提供的有参有返回的方法,返回的是boolean类型的返回值</span><br></pre></td></tr></table></figure></div>



<p>这里要解释下什么是函数式编程</p>
<p>实际上，函数式编程没有一个严格的官方定义。严格上来讲，函数式编程中的“函数”，并不是指我们编程语言中的“函数”概念，而是指数学“函数”或者“表达式”（例如：y&#x3D;f(x)）。不过，在编程实现的时候，对于数学“函数”或“表达式”，我们一般习惯性地将它们设计成函数。所以，如果不深究的话，函数式编程中的“函数”也可以理解为编程语言中的“函数”。</p>
<p>每个编程范式都有自己独特的地方，这就是它们会被抽象出来作为一种范式的原因。面向对象编程最大的特点是：以类、对象作为组织代码的单元以及它的四大特性。面向过程编程最大的特点是：以函数作为组织代码的单元，数据与方法相分离。那函数式编程最独特的地方又在哪里呢？实际上，函数式编程最独特的地方在于它的编程思想。函数式编程认为程序可以用一系列数学函数或表达式的组合来表示。函数式编程是程序面向数学的更底层的抽象，将计算过程描述为表达式。不过，真的可以把任何程序都表示成一组数学表达式吗？</p>
<p>理论上讲是可以的。但是，并不是所有的程序都适合这么做。函数式编程有它自己适合的应用场景，比如科学计算、数据处理、统计分析等。在这些领域，程序往往比较容易用数学表达式来表示，比起非函数式编程，实现同样的功能，函数式编程可以用很少的代码就能搞定。但是，对于强业务相关的大型业务系统开发来说，费劲吧啦地将它抽象成数学表达式，硬要用函数式编程来实现，显然是自讨苦吃。相反，在这种应用场景下，面向对象编程更加合适，写出来的代码更加可读、可维护。</p>
<h5 id="再具体到编程实现，函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。"><a href="#再具体到编程实现，函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。" class="headerlink" title="再具体到编程实现，函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。"></a>再具体到编程实现，函数式编程跟面向过程编程一样，也是以函数作为组织代码的单元。不过，它跟面向过程编程的区别在于，它的函数是无状态的。何为无状态？简单点讲就是，函数内部涉及的变量都是局部变量，不会像面向对象编程那样，共享类成员变量，也不会像面向过程编程那样，共享全局变量。函数的执行结果只与入参有关，跟其他任何外部变量无关。同样的入参，不管怎么执行，得到的结果都是一样的。这实际上就是数学函数或数学表达式的基本要求。</h5><p>类似在断言中使用的就是将函数作为参数进行传递，函数本身并无状态</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">lbsWrapper.next(this::advPredicate, advWrapper);</span><br><span class="line"></span><br><span class="line">public boolean advPredicate(Param param)&#123;</span><br><span class="line">	FeedsShowControl showControl = 	    param.getParamByName(FeedsProcessEnum.SHOW_CONTROL.getName());</span><br><span class="line">	return showControl.getShowAdv();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>雪花算法</title>
    <url>/2022/03/21/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>分布式系统中，有一些需要使用全局唯一ID的场景，这种时候为了防止ID冲突可以使用36位的UUID，但是UUID有一些缺点，首先他相对比较长，另外UUID一般是无序的。</p>
<p>有些时候我们希望能使用一种简单一些的ID，并且希望ID能够按照时间有序生成。</p>
<p>而twitter的snowflake解决了这种需求，最初Twitter把存储系统从MySQL迁移到Cassandra，因为Cassandra没有顺序ID生成机制，所以开发了这样一套全局唯一ID生成服务。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><code>Snowflake</code>生成的是Long类型的ID，一个Long类型占8个字节，每个字节占8比特，也就是说一个Long类型占64个比特。 </p>
<p>Snowflake ID组成结构： <code>正数位</code>（占1比特）+ <code>时间戳</code>（占41比特）+ <code>机器ID</code>（占5比特）+ <code>数据中心</code>（占5比特）+ <code>自增值</code>（占12比特），总共64比特组成的一个Long类型。 </p>
<p>snowflake的结构如下(每部分用-分开):</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000</span><br></pre></td></tr></table></figure></div>

<ul>
<li>第一个bit位（1bit）：Java中long的最高位是符号位代表正负，正数是0，负数是1，一般生成ID都为正数，所以默认为0。</li>
<li>时间戳部分（41bit）：毫秒级的时间，不建议存当前时间戳，而是用（当前时间戳 - 固定开始时间戳）的差值，可以使产生的ID从更小的值开始；41位的时间戳可以使用69年，(1L &lt;&lt; 41) &#x2F; (1000L * 60 * 60 * 24 * 365) &#x3D; 69年</li>
<li>工作机器id（10bit）：也被叫做 <code>workId</code> ，这个可以灵活配置，机房或者机器号组合都可以。</li>
<li>序列号部分（12bit），自增值支持同一毫秒内同一个节点可以生成4096个ID</li>
</ul>
<p>一共加起来刚好64位，为一个Long型。(转换成字符串长度为18)</p>
<p>snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。据说：snowflake每秒能够产生26万个ID。根据这个算法的逻辑，只需要将这个算法用Java语言实现出来，封装为一个工具方法，那么各个业务应用可以直接使用该工具方法来获取分布式ID，只需保证每个业务应用有自己的工作机器id即可，而不需要单独去搭建一个获取分布式ID的应用。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SnowflakeIdUtils &#123;</span><br><span class="line"></span><br><span class="line">    // ==============================Fields===========================================</span><br><span class="line">    /** 开始时间截 (2015-01-01) */</span><br><span class="line">    private final long twepoch = 1420041600000L;</span><br><span class="line"></span><br><span class="line">    /** 机器id所占的位数 */</span><br><span class="line">    private final long workerIdBits = 5L;</span><br><span class="line"></span><br><span class="line">    /** 数据标识id所占的位数 */</span><br><span class="line">    private final long datacenterIdBits = 5L;</span><br><span class="line"></span><br><span class="line">    /** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span><br><span class="line">    private final long maxWorkerId = -1L ^ (-1L &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    /** 支持的最大数据标识id，结果是31 */</span><br><span class="line">    private final long maxDatacenterId = -1L ^ (-1L &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    /** 序列在id中占的位数 */</span><br><span class="line">    private final long sequenceBits = 12L;</span><br><span class="line"></span><br><span class="line">    /** 机器ID向左移12位 */</span><br><span class="line">    private final long workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    /** 数据标识id向左移17位(12+5) */</span><br><span class="line">    private final long datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    /** 时间截向左移22位(5+5+12) */</span><br><span class="line">    private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    /** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span><br><span class="line">    private final long sequenceMask = -1L ^ (-1L &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    /** 工作机器ID(0~31) */</span><br><span class="line">    private long workerId;</span><br><span class="line"></span><br><span class="line">    /** 数据中心ID(0~31) */</span><br><span class="line">    private long datacenterId;</span><br><span class="line"></span><br><span class="line">    /** 毫秒内序列(0~4095) */</span><br><span class="line">    private long sequence = 0L;</span><br><span class="line"></span><br><span class="line">    /** 上次生成ID的时间截 */</span><br><span class="line">    private long lastTimestamp = -1L;</span><br><span class="line"></span><br><span class="line">    //==============================Constructors=====================================</span><br><span class="line">    /**</span><br><span class="line">     * 构造函数</span><br><span class="line">     * @param workerId 工作ID (0~31)</span><br><span class="line">     * @param datacenterId 数据中心ID (0~31)</span><br><span class="line">     */</span><br><span class="line">    public SnowflakeIdUtils(long workerId, long datacenterId) &#123;</span><br><span class="line">        if (workerId &gt; maxWorkerId || workerId &lt; 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(String.format(&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        if (datacenterId &gt; maxDatacenterId || datacenterId &lt; 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(String.format(&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        this.workerId = workerId;</span><br><span class="line">        this.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ==============================Methods==========================================</span><br><span class="line">    /**</span><br><span class="line">     * 获得下一个ID (该方法是线程安全的)</span><br><span class="line">     * @return SnowflakeId</span><br><span class="line">     */</span><br><span class="line">    public synchronized long nextId() &#123;</span><br><span class="line">        long timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        //如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span><br><span class="line">        if (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                    String.format(&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //如果是同一时间生成的，则进行毫秒内序列</span><br><span class="line">        if (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + 1) &amp; sequenceMask;</span><br><span class="line">            //毫秒内序列溢出</span><br><span class="line">            if (sequence == 0) &#123;</span><br><span class="line">                //阻塞到下一个毫秒,获得新的时间戳</span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //时间戳改变，毫秒内序列重置</span><br><span class="line">        else &#123;</span><br><span class="line">            sequence = 0L;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //上次生成ID的时间截</span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        //移位并通过或运算拼到一起组成64位的ID</span><br><span class="line">        return ((timestamp - twepoch) &lt;&lt; timestampLeftShift) //</span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) //</span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) //</span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 阻塞到下一个毫秒，直到获得新的时间戳</span><br><span class="line">     * @param lastTimestamp 上次生成ID的时间截</span><br><span class="line">     * @return 当前时间戳</span><br><span class="line">     */</span><br><span class="line">    protected long tilNextMillis(long lastTimestamp) &#123;</span><br><span class="line">        long timestamp = timeGen();</span><br><span class="line">        while (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        return timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回以毫秒为单位的当前时间</span><br><span class="line">     * @return 当前时间(毫秒)</span><br><span class="line">     */</span><br><span class="line">    protected long timeGen() &#123;</span><br><span class="line">        return System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //==============================Test=============================================</span><br><span class="line">    /** 测试 */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SnowflakeIdUtils idWorker = new SnowflakeIdUtils(0, 0);</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            long id = idWorker.nextId();</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>自更新参数web接口预热工具</title>
    <url>/2023/05/13/%E8%87%AA%E6%9B%B4%E6%96%B0%E5%8F%82%E6%95%B0web%E6%8E%A5%E5%8F%A3%E9%A2%84%E7%83%AD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p>日常上线流程中经常需要对接口进行预热，因为服务器每次启动后都有一定次数访问失败，如果不处理将此请求直接抛出，会降低用户体验。当服务器数量较少时，我们可以在发布机器后，待机器启动使用本地hosts更改IP，请求对应服务器接口看（1.刷新接口，2.校验返回数据）</p>
<p>然而当服务器数量较多时，这样的验证过程非常麻烦，每次需要修改完hosts，再去ping一下看看修改成功没，再去请求接口，整个集群只能测试几台机器，不能完全覆盖，主要存在两个问题：</p>
<ol>
<li>可能存在上线后有机器没起来等问题，对于数据的校验不够完善，只能看看大致返回的量，看不出具体缺失数据。</li>
<li>还有接口请求数据不够全面，都是使用很早以前的访问参数，如用户pin，经纬度，活动ID，版本号，客户端等，不能及时更新。</li>
</ol>
<p><strong>公司内部其实有很多预热工具，但都是基于固定参数的形式，类似于postman使用一套参数反复请求刷新</strong></p>
<p>预热类型分为内部预热和外部预热</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/202305132220363.png"
                      alt="image-20230513222042998"
                ></p>
<blockquote>
<p> 由此想做自动预热和报文对比，减少人为干预成本，提高覆盖率，采用外部+内部预热的方式：最大程度减少对本地代码的入侵，同时还能全面覆盖服务器，并使用最新参数刷新接口。</p>
</blockquote>
<p>下面是自更新参数预热工具的交互流程图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/202305132150712.png"
                      alt="image.png"
                ></p>
<h2 id="服务端配置："><a href="#服务端配置：" class="headerlink" title="服务端配置："></a>服务端配置：</h2><p>这里开发了预热注解，在需要的地方加上注解，这里会拦截请求里的body+indexRequest参数，通过本地Cache缓存请求间隔次数，每隔一个小时保存一次，参数内容保存到本地缓存中，服务端不做多版本保存，每小时动态覆盖，再加上zk开关进行判断。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务预热的切面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartMockAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(StartMockAspect.class);</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BODY</span> <span class="operator">=</span> <span class="string">&quot;body&quot;</span>;</span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INDEX_REQUEST</span> <span class="operator">=</span> <span class="string">&quot;indexRequest&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ZkConfigManager zkConfigManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解的方式定位需要拦截的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot; @annotation(com.jd.o2o.app.common.mock.DeepHttpMock)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cache&lt;String, Integer&gt; NUM_CACHE = CacheBuilder.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">3600</span>, TimeUnit.SECONDS).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     * InetAddress host = InetAddress.getLocalHost();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handle</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//配置开关</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">startFlag</span> <span class="operator">=</span> zkConfigManager.getConfig(ZkConfigPathEnum.START_PARAMETER_ASPECT_SWITCH);</span><br><span class="line">            <span class="keyword">if</span> (Boolean.FALSE.equals(startFlag)) &#123;</span><br><span class="line">                <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取参数</span></span><br><span class="line">            <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> LocaleContextHandler.getLocaleContext().getIndexRequest();</span><br><span class="line">            <span class="keyword">if</span> (proceedingJoinPoint.getSignature() <span class="keyword">instanceof</span> MethodSignature) &#123;</span><br><span class="line">                <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> methodSignature.getMethod();</span><br><span class="line">                Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">bodyRequest</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">                <span class="type">DeepHttpMock</span> <span class="variable">monitor</span> <span class="operator">=</span> method.getAnnotation(DeepHttpMock.class);</span><br><span class="line">                <span class="keyword">if</span> (monitor == <span class="literal">null</span> || indexRequest == <span class="literal">null</span> || bodyRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (NUM_CACHE.get(monitor.pageSource(), () -&gt; -<span class="number">1</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    START_LOAD_REQUEST_MAP.put(monitor.pageSource(), ImmutableMap.of(BODY, bodyRequest, INDEX_REQUEST, indexRequest));</span><br><span class="line">                    NUM_CACHE.put(monitor.pageSource(), <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;StartMockAspect失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>外部脚本通过特定接口访问每次缓存的一份数据</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;testStartupParameters&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">testStartupParameters</span><span class="params">(String host)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> START_LOAD_REQUEST_MAP.getOrDefault(host, Collections.emptyMap());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="python服务"><a href="#python服务" class="headerlink" title="python服务"></a>python服务</h2><p>这里采用python的原因是</p>
<ol>
<li><p>定时抓取参数的方式比较简单，适合用脚本开发，</p>
</li>
<li><p>python能够快速完成接口请求及提供web服务，开发成本较低，</p>
</li>
<li><p>可以随时更新脚本调整代码</p>
</li>
</ol>
<blockquote>
<p> python共三个模块</p>
</blockquote>
<h3 id="start-parameters模块"><a href="#start-parameters模块" class="headerlink" title="start_parameters模块"></a>start_parameters模块</h3><ol>
<li>拉取集群下所有服务器IP</li>
<li>根据host与IP配置的接口，拉取对应服务器上缓存的接口参数</li>
<li>保存所有动态URL参数内容到文件中</li>
</ol>
<h3 id="server-verify模块"><a href="#server-verify模块" class="headerlink" title="server_verify模块"></a>server_verify模块</h3><ol>
<li>使用保存的动态参数，自动&#x2F;主动-&gt;预热触发的接口</li>
<li>使用保存的动态参数，进行新旧服务器接口的报文对比</li>
</ol>
<h3 id="web模块"><a href="#web模块" class="headerlink" title="web模块"></a>web模块</h3><ol>
<li>提供主动预热服务操作页面</li>
<li>手动选择报文对比接口列表</li>
</ol>
<h2 id="下面分为三类处理"><a href="#下面分为三类处理" class="headerlink" title="下面分为三类处理"></a>下面分为三类处理</h2><h3 id="自动服务预热："><a href="#自动服务预热：" class="headerlink" title="自动服务预热："></a>自动服务预热：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/202305132210486.png"
                      alt="img"
                ></p>
<h3 id="主动预热："><a href="#主动预热：" class="headerlink" title="主动预热："></a>主动预热：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/202305132212775.png"
                      alt="img"
                ></p>
<h3 id="报文对比："><a href="#报文对比：" class="headerlink" title="报文对比："></a>报文对比：</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/202305132222635.png"
                      alt="image-20230513222228067" style="zoom: 47%;" 
                >

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/Users/algorain/SynologyDrive/document/markdown/%E7%9F%A5%E8%AF%86%E8%8A%B1%E5%9B%AD/assets/image-20230513224102398.png"
                      alt="image-20230513224102398"
                ></p>
<p>部分可操作界面</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/202305132213121.png"
                      alt="image.png" style="zoom:50%;" 
                >

<p>通过引用自更新参数的预热工具，相比较传统固定参数的预热工具，上线之后服务器接口性能不再出现大幅度波动，有效提高接口可用率。</p>
<p>start_before.sh</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取实例IP</span></span><br><span class="line">function_app_ip()&#123;</span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;$def_host_ip&quot;</span> ]]; then</span><br><span class="line">echo $&#123;def_host_ip&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">echo `/sbin/ip addr sh | /<span class="built_in">bin</span>/grep -v <span class="string">&#x27;global secondary&#x27;</span> | /<span class="built_in">bin</span>/grep inet | /<span class="built_in">bin</span>/grep -v inet6 | /<span class="built_in">bin</span>/grep -v <span class="string">&#x27;127.0.0.1&#x27;</span> | /<span class="built_in">bin</span>/grep -v <span class="string">&#x27;lo:&#x27;</span> | /<span class="built_in">bin</span>/awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | /<span class="built_in">bin</span>/awk -<span class="string">F&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>| /usr/<span class="built_in">bin</span>/head -n <span class="number">1</span>`</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">echo <span class="string">&quot;开始请求预热&quot;</span> </span><br><span class="line">_app_ip=$(function_app_ip);</span><br><span class="line">echo <span class="string">&quot;操作机器IP:$_app_ip&quot;</span>  </span><br><span class="line">echo $(date +%Y-%m-%d\ %H:%M:%S)</span><br><span class="line">curl http://preheat.local/start?local=pdjhome.local\&amp;ip=$_app_ip</span><br></pre></td></tr></table></figure></div>

<p>这里是用来触发预热的任务，之后会通过python内部保存的参数URL来刷接口</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器脚本中需要预热的访问地址</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">startHandler</span>(tornado.web.RequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = self.get_argument(<span class="string">&#x27;ip&#x27;</span>)</span><br><span class="line">            local = self.get_argument(<span class="string">&#x27;local&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(ip, local, <span class="string">&quot;发送机器预热请求&quot;</span>)</span><br><span class="line">            <span class="comment"># 启动线程异步执行</span></span><br><span class="line">            thead_one = threading.Thread(target=server_verify.web_one_start, args=(ip, local))</span><br><span class="line">            thead_one.start()</span><br><span class="line">            self.write(<span class="string">&quot;发送机器预热请求&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self.write(<span class="string">&quot;参数错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([(<span class="string">r&quot;/add&quot;</span>, MainHandler),</span><br><span class="line">                                       (<span class="string">r&quot;/diff_result&quot;</span>, diffHandler),</span><br><span class="line">                                       (<span class="string">r&quot;/tool&quot;</span>, toolHandler),</span><br><span class="line">                                       (<span class="string">r&quot;/start&quot;</span>, startHandler),</span><br><span class="line">                                       (<span class="string">r&quot;/serverDiff&quot;</span>, PdjserviceHandler)],</span><br><span class="line">                                      static_path=os.path.join(os.path.dirname(__file__), <span class="string">&quot;static&quot;</span>), )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    application.listen(<span class="number">80</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>Untitled Post - 8</title>
    <url>/2019/03/31/1034/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第六章命令模式-读书笔记</title>
    <url>/2019/10/26/1082/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第六章命令模式-读书笔记"><a href="#《HeadFirst设计模式》第六章命令模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第六章命令模式-读书笔记"></a>《HeadFirst设计模式》第六章命令模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><h3 id="1-1-用餐厅来分析"><a href="#1-1-用餐厅来分析" class="headerlink" title="1.1 用餐厅来分析"></a>1.1 用餐厅来分析</h3><blockquote>
<p>从餐厅开始说起，以此来解释命令模式的流程。 订单封装了准备餐点的请求 女招待接受订单，然后调用订单的orderUp()方法 厨师准备餐点 这样，顾客和女招待是解耦的，一天内，不同的顾客有不同的订单，女招待知道所有的订单都支持orderUp()方法，每次调用这个方法就是了。 女招待和厨师也是解耦的，订单封装了餐点的细节，她只调用每个订单的方法即可，而厨师也是根据订单去做对应的餐点。他们之间不需要直接沟通。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191023073214000.png"
                     
                ></p>
<h3 id="1-2-回到遥控器"><a href="#1-2-回到遥控器" class="headerlink" title="1.2 回到遥控器"></a>1.2 回到遥控器</h3><p>这一章需要实现一个遥控器，遥控器上只有七个插槽，而厂商有很多的类，并且以后还会新增，所以需要根据类的特征去抽取共同点，这时就用到了命令模式，将”动作的请求者”从”动作的执行者“对象中解耦。 利用命令对象，把请求（例如打开电灯）封装成一个特定对象（例如客厅电灯对象）。所以，如果对每个按钮都存储一个命令对象，那么当按钮被按下的时候，就可以请命令对象做相关的工作。遥控器并不需要知道工作内容是什么，只要有个命令对象能和正确的对象沟通，把事情做好就可以了。所以，遥控器和电灯对象解耦了。 由于对象之间是如此的解耦，要描述这个模式实际的工作并不容易。 使用这个模式，我们能够创建一个API，将这些命令对象加载到按钮插槽，让遥控器的代码尽量保持简单。而把家电自动化的工作和进行该工作的对象一起封装在命令对象中。</p>
<h2 id="2-开始设计"><a href="#2-开始设计" class="headerlink" title="2.开始设计"></a>2.开始设计</h2><h3 id="2-1第一个命令对象"><a href="#2-1第一个命令对象" class="headerlink" title="2.1第一个命令对象"></a>2.1第一个命令对象</h3><p>实现命令接口，让所有的命令对象实现相同的包含一个方法的接口。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Command &#123;</span><br><span class="line">    public void execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>实现打开电灯的命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LightOnCommand implements Command &#123;</span><br><span class="line">    Light light;</span><br><span class="line">//    给构造器传入某个电灯，方便以后调用execute</span><br><span class="line">    public LightOnCommand(Light light)&#123;</span><br><span class="line">        this.light = light;</span><br><span class="line">    &#125;</span><br><span class="line">//    调用接受对象的on方法</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>灯的类</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Light &#123;</span><br><span class="line">        private String name;</span><br><span class="line">    public Light(String living_room) &#123;</span><br><span class="line">        this.name = living_room;</span><br><span class="line">    &#125;</span><br><span class="line">    public Light() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public void on()&#123;</span><br><span class="line">        System.out.println(&quot;打开灯&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void off()&#123;</span><br><span class="line">        System.out.println(&quot;关闭灯&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-使用命令对象"><a href="#2-2-使用命令对象" class="headerlink" title="2.2 使用命令对象"></a>2.2 使用命令对象</h3><p>假设只有一个遥控器，只有一个按钮和对应的插槽。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SimpleRemoteController &#123;</span><br><span class="line">//    插槽持有命令，而这个命令控制着一个装置</span><br><span class="line">    Command slot;</span><br><span class="line"></span><br><span class="line">    public SimpleRemoteController() &#123; &#125;</span><br><span class="line"></span><br><span class="line">//    用来设置插槽控制的命令，如果想要改变命令，可以多次调用</span><br><span class="line">    public void setCommand(Command command) &#123;</span><br><span class="line">        this.slot = command;</span><br><span class="line">    &#125;</span><br><span class="line">//    按下按钮，方法就会被调用</span><br><span class="line">    public void buttonWasPressed()&#123;</span><br><span class="line">        slot.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-3-测试遥控器"><a href="#2-3-测试遥控器" class="headerlink" title="2.3 测试遥控器"></a>2.3 测试遥控器</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RemoteControllerTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        实例化遥控器</span><br><span class="line">        SimpleRemoteController remote = new SimpleRemoteController();</span><br><span class="line">//        创建一个电灯对象，此对象就是请求接受者</span><br><span class="line">        Light light = new Light();</span><br><span class="line">//        创建命令，并将接收者传给它</span><br><span class="line">        LightOnCommand lightOn = new LightOnCommand(light);</span><br><span class="line">//        将命令传给调用者</span><br><span class="line">        remote.setCommand(lightOn);</span><br><span class="line">//        模拟按下按钮</span><br><span class="line">        remote.buttonWasPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3.设计模式"></a>3.设计模式</h2><h3 id="3-1-模式定义"><a href="#3-1-模式定义" class="headerlink" title="3.1 模式定义"></a>3.1 模式定义</h3><blockquote>
<p>命令模式：将请求封装成对象，以便使用不用的请求，队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>
</blockquote>
<p>现在,仔细看这个定义。我们知道一个命令对象通过在特定接收者上绑定一组动作来封装一个请求。要达到这一点,命令对象将动作和接收者包进对象中。这个对象只暴露出一个execute方法,当此方法被调用的时候,接收者就会进行这些动作。从外面来看,其他对象不知道究竟哪个接收者进行了哪些动作,只知道如果调用 execute方法,请求的目的就能达到。</p>
<h3 id="3-2-类图"><a href="#3-2-类图" class="headerlink" title="3.2 类图"></a>3.2 类图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191023224003672.png"
                     
                ></p>
<h2 id="4-开始实现"><a href="#4-开始实现" class="headerlink" title="4.开始实现"></a>4.开始实现</h2><h3 id="4-1-实现遥控器"><a href="#4-1-实现遥控器" class="headerlink" title="4.1 实现遥控器"></a>4.1 实现遥控器</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RemoteControl &#123;</span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化这两个开关的数组</span><br><span class="line">     */</span><br><span class="line">    public RemoteControl()&#123;</span><br><span class="line">        onCommands = new Command[7];</span><br><span class="line">        offCommands = new Command[7];</span><br><span class="line"></span><br><span class="line">        Command noCommand = new NoCommand();</span><br><span class="line">        for (int i = 0 ;i &lt; 7;i++)&#123;</span><br><span class="line">            onCommands[i] = noCommand;</span><br><span class="line">            offCommands[i] = noCommand;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 有三个命令，分别是插槽位置，开的命令，关的命令</span><br><span class="line">     * @param slot</span><br><span class="line">     * @param onCommand</span><br><span class="line">     * @param offCommand</span><br><span class="line">     */</span><br><span class="line">    public void setCommand(int slot ,Command onCommand,Command offCommand)&#123;</span><br><span class="line">        onCommands[slot] = onCommand;</span><br><span class="line">        offCommands[slot] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onButtonWasPushed(int slot)&#123;</span><br><span class="line">        onCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line">    public void offButtonWasPushed(int slot)&#123;</span><br><span class="line">        offCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuffer stringBuffer = new StringBuffer();</span><br><span class="line">        stringBuffer.append(&quot;\n-------Remote Control ------\n&quot;);</span><br><span class="line">        for (int i = 0 ;i &lt; onCommands.length;i++)&#123;</span><br><span class="line">            stringBuffer.append(&quot;[slot&quot;+i+&quot;]&quot;+onCommands[i].getClass().getName()+&quot;        &quot;</span><br><span class="line">            +offCommands[i].getClass().getName()+&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NoCommand implements Command &#123;</span><br><span class="line">    public void execute() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Nocommand对象是一个空对象( null object)的例子。当你不想返回一个有意义的对象时,空对象就很有用。客户也可以将处理nul的责任转移给空对象。举例来说,遥控器不可能一出厂就设置了有意义的命令对象,所以提供了 Nocommand对象作为代用品,当调用它的 execute0方法时,这种对象什么事情都不做。 在许多设计模式中,都会看到空对象的使用。甚至有些时候,空对象本身也被视为是种设计模式。</p>
</blockquote>
<h3 id="4-2实现命令"><a href="#4-2实现命令" class="headerlink" title="4.2实现命令"></a>4.2实现命令</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LightOffCommand implements Command &#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    public LightOffCommand(Light light) &#123;</span><br><span class="line">        this.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-3测试遥控器"><a href="#4-3测试遥控器" class="headerlink" title="4.3测试遥控器"></a>4.3测试遥控器</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RemoteLoader &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        RemoteControl remoteControl = new RemoteControl();</span><br><span class="line"></span><br><span class="line">        Light livingroomLight = new Light(&quot;Living Room&quot;);</span><br><span class="line">        Light kitchenLight = new Light(&quot;Kitchen&quot;);</span><br><span class="line">//        ceilingFan = new</span><br><span class="line"></span><br><span class="line">        LightOnCommand LivingRoomlightOnCommand = new LightOnCommand(livingroomLight);</span><br><span class="line">        LightOffCommand LivingRoomlightOffCommand = new LightOffCommand(livingroomLight);</span><br><span class="line">        LightOnCommand KitchenlightOnCommand = new LightOnCommand(livingroomLight);</span><br><span class="line">        LightOffCommand KitchenlightOffCommand = new LightOffCommand(kitchenLight);</span><br><span class="line"></span><br><span class="line">//        添加命令</span><br><span class="line">        remoteControl.setCommand(0,LivingRoomlightOnCommand,LivingRoomlightOffCommand);</span><br><span class="line"></span><br><span class="line">//        打印遥控器里的信息</span><br><span class="line">        System.out.println(remoteControl);</span><br><span class="line"></span><br><span class="line">//        执行开关</span><br><span class="line">        remoteControl.onButtonWasPushed(0);</span><br><span class="line">        remoteControl.offButtonWasPushed(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-4-查看我们的类图"><a href="#4-4-查看我们的类图" class="headerlink" title="4.4 查看我们的类图"></a>4.4 查看我们的类图</h3><p>经过以上代码的实现，基本完成了所需要的功能，这个时候看一下代码的UML图，这样可以更好的理解代码之间的继承关系。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191024065748724.png"
                     
                ></p>
<h2 id="5-添加撤销"><a href="#5-添加撤销" class="headerlink" title="5.添加撤销"></a>5.添加撤销</h2><p>好了,我们现在需要在遥控器上加上撤销的功能。这个功能使用起来就像是这样的:比方说客厅的电灯是关闭的,然后你按下遥控器上的开启按钮,自然电灯就被打开了。现在如果按下撤销按钮,那么上一个动作将被倒转,在这个例子里,电灯将被关闭。在进入更复杂的例子之前,先让撤销按钮能够处理电灯 在命令接口中加入undo方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Command &#123;</span><br><span class="line">    public void execute();</span><br><span class="line">    public void undo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>在打开灯的命令中，执行off操作</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LightOnCommand implements Command &#123;</span><br><span class="line">    Light light;</span><br><span class="line">//    给构造器传入某个电灯，方便以后调用execute</span><br><span class="line">    public LightOnCommand(Light light)&#123;</span><br><span class="line">        this.light = light;</span><br><span class="line">    &#125;</span><br><span class="line">//    调用接受对象的on方法</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void undo() &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在关闭灯的命令中，执行on方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class LightOffCommand implements Command &#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    public LightOffCommand(Light light) &#123;</span><br><span class="line">        this.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void undo() &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NoCommand implements Command &#123;</span><br><span class="line">    public void execute() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void undo() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对遥控器进行一些修改，每次按下按钮的时候，都记录下来按动的哪个，并且可以随时调用undo方法。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RemoteControl &#123;</span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line"></span><br><span class="line">    Command undoCommand;</span><br><span class="line">    /**</span><br><span class="line">     * 初始化这两个开关的数组</span><br><span class="line">     */</span><br><span class="line">    public RemoteControl()&#123;</span><br><span class="line">        onCommands = new Command[7];</span><br><span class="line">        offCommands = new Command[7];</span><br><span class="line"></span><br><span class="line">        Command noCommand = new NoCommand();</span><br><span class="line">        for (int i = 0 ;i &lt; 7;i++)&#123;</span><br><span class="line">            onCommands[i] = noCommand;</span><br><span class="line">            offCommands[i] = noCommand;</span><br><span class="line">        &#125;</span><br><span class="line">        undoCommand = noCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 有三个命令，分别是插槽位置，开的命令，关的命令</span><br><span class="line">     * @param slot</span><br><span class="line">     * @param onCommand</span><br><span class="line">     * @param offCommand</span><br><span class="line">     */</span><br><span class="line">    public void setCommand(int slot ,Command onCommand,Command offCommand)&#123;</span><br><span class="line">        onCommands[slot] = onCommand;</span><br><span class="line">        offCommands[slot] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onButtonWasPushed(int slot)&#123;</span><br><span class="line">        onCommands[slot].execute();</span><br><span class="line">        undoCommand = onCommands[slot];</span><br><span class="line">    &#125;</span><br><span class="line">    public void offButtonWasPushed(int slot)&#123;</span><br><span class="line">        offCommands[slot].execute();</span><br><span class="line">        undoCommand = offCommands[slot];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void undoButtonWasPushhed()&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuffer stringBuffer = new StringBuffer();</span><br><span class="line">        stringBuffer.append(&quot;\n-------Remote Control ------\n&quot;);</span><br><span class="line">        for (int i = 0 ;i &lt; onCommands.length;i++)&#123;</span><br><span class="line">            stringBuffer.append(&quot;[slot&quot;+i+&quot;]&quot;+onCommands[i].getClass().getName()+&quot;        &quot;</span><br><span class="line">            +offCommands[i].getClass().getName()+&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>书中还加入了，使用状态实现撤销，并实现了电扇撤销的功能，虽然比电灯要复杂一些，但总体思路相同。</p>
</blockquote>
<h2 id="6-命令模式的更多用途"><a href="#6-命令模式的更多用途" class="headerlink" title="6.命令模式的更多用途"></a>6.命令模式的更多用途</h2><h3 id="6-1-队列请求"><a href="#6-1-队列请求" class="headerlink" title="6.1 队列请求"></a>6.1 队列请求</h3><p>命令可以将运算块打包(一个接收者和一组动作), 然后将它传来传去,就像是一般的对象一样。现在即使在命令对象被创建许久之后,运算依然可以被调用。事实上,它甚至可以在不同的线程中被调用。我们可以利用这样的特性行生一些应用,例如:日程安排( Scheduler)、线程池、工作队列等。 想象有一个工作队列:你在某一端添加命令,然后另端则是线程。线程进行下面的动作:从队列中取出一个命令,调用它的 execute()方法,等待这个调用完成, 然后将此命令对象丢弃,再取出下一个命令</p>
<blockquote>
<p>请注意,工作队列类和进行计算的对象之间完全是解耦的。此刻线程可能在进行财务运算,下一刻却在读取网络数据。工作队列对象不在平到底做些什么,它们只知道取出命令对象,然后调用其execute方法。类似地,它们只要是实现命令模式的对象,就可以放入队列里,当线程可用时,就调用此对象的 execute方法。</p>
</blockquote>
<h3 id="6-2-日志请求"><a href="#6-2-日志请求" class="headerlink" title="6.2 日志请求"></a>6.2 日志请求</h3><p>某些应用需要我们将所有的动作都记录在日志中，并能在系统死机之后，重新调用这些动作恢复到之前的状态。通过新增两个方法（store（）、load），命令模式就能够支持这一点。在Java中，我们可以利用对象的序列化（Serialization）实现这些方法，但是一般认为序列化最好还是只用在对象的持久化上（persistence）要怎么做呢？当我们执行命令的时候，将历史记录储存在磁盘中。一旦系统死机，我们就可以将命令对象重新加载，并成批地依次调用这些对象的 execute（方法。这种日志的方式对于遥控器来说没有意义然而，有许多调用大型数据结构的动作的应用无法在每次改变发生时被快速地存储。通过使用记录日志，我们可以将上次检查点（checkpoint）之后的所有操作记录下来，如果系统出状况，从检查点开始应用这些操作。比方说，对于电子表格应用，我们可能想要实现的错误恢复方式是将电子表格的操作记录在日志中，而不是每次电子表格一有变化就记录整个电子表格。对更高级的应用而言，这些技巧可以被扩展应用到事务（ transaction）处理中，也就是说，一整群操作必须全部进行完成，或者没有进行任何的操作。</p>
]]></content>
      <categories>
        <category>Programme</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Untitled Post - 9</title>
    <url>/2019/03/31/1035/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 1</title>
    <url>/2017/07/27/688/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 2</title>
    <url>/2017/07/27/786/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 3</title>
    <url>/2017/07/27/787/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 4</title>
    <url>/2017/07/27/788/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 6</title>
    <url>/2017/07/27/790/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 5</title>
    <url>/2017/07/27/789/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Untitled Post - 7</title>
    <url>/2017/07/27/803/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>关于我的ACM</title>
    <url>/2017/03/22/acm-article69/</url>
    <content><![CDATA[<h2 id="关于ACM"><a href="#关于ACM" class="headerlink" title="关于ACM"></a>关于ACM</h2><hr>
<h2 id="以前做过的上千道ACM题一直放在笔记里，想着弄出一些好的例题放到博客里，毕竟也是学了一年的成果，不能就这样埋没掉。下面是关于我和ACM。"><a href="#以前做过的上千道ACM题一直放在笔记里，想着弄出一些好的例题放到博客里，毕竟也是学了一年的成果，不能就这样埋没掉。下面是关于我和ACM。" class="headerlink" title="以前做过的上千道ACM题一直放在笔记里，想着弄出一些好的例题放到博客里，毕竟也是学了一年的成果，不能就这样埋没掉。下面是关于我和ACM。"></a>以前做过的上千道ACM题一直放在笔记里，想着弄出一些好的例题放到博客里，毕竟也是学了一年的成果，不能就这样埋没掉。下面是关于我和ACM。</h2><h2 id="在我来到大学第一次痴迷于编程时，是因为ACM。没有其他复杂的原因，只是被那深奥而富有魅力的算法所吸引到，记得那时通宵的写题，心里疑惑，痛苦，失望，兴奋，凭借自己的毅力刷过每一道题，以至于现在想起来我都会感激那时候的自己，如果不是拼命的练习，我对编程的理解远没有现在这么深，基础也不会很扎实。每次看到有人问搞ACM有用么，我都会说有用，虽然那些深奥，复杂的算法在其他语言中暂时用不到，但会锻炼你编程的思维，加深你对编程的理解。如果你觉得封标准库里封装好的算法太过简单，可以-尝试的自己去写一个快排，二分法，我第一次看到那些算法才感受到编程之美，算法之美，我们还只是代码的搬运工，没有真正的学会使用代码。"><a href="#在我来到大学第一次痴迷于编程时，是因为ACM。没有其他复杂的原因，只是被那深奥而富有魅力的算法所吸引到，记得那时通宵的写题，心里疑惑，痛苦，失望，兴奋，凭借自己的毅力刷过每一道题，以至于现在想起来我都会感激那时候的自己，如果不是拼命的练习，我对编程的理解远没有现在这么深，基础也不会很扎实。每次看到有人问搞ACM有用么，我都会说有用，虽然那些深奥，复杂的算法在其他语言中暂时用不到，但会锻炼你编程的思维，加深你对编程的理解。如果你觉得封标准库里封装好的算法太过简单，可以-尝试的自己去写一个快排，二分法，我第一次看到那些算法才感受到编程之美，算法之美，我们还只是代码的搬运工，没有真正的学会使用代码。" class="headerlink" title="在我来到大学第一次痴迷于编程时，是因为ACM。没有其他复杂的原因，只是被那深奥而富有魅力的算法所吸引到，记得那时通宵的写题，心里疑惑，痛苦，失望，兴奋，凭借自己的毅力刷过每一道题，以至于现在想起来我都会感激那时候的自己，如果不是拼命的练习，我对编程的理解远没有现在这么深，基础也不会很扎实。每次看到有人问搞ACM有用么，我都会说有用，虽然那些深奥，复杂的算法在其他语言中暂时用不到，但会锻炼你编程的思维，加深你对编程的理解。如果你觉得封标准库里封装好的算法太过简单，可以 尝试的自己去写一个快排，二分法，我第一次看到那些算法才感受到编程之美，算法之美，我们还只是代码的搬运工，没有真正的学会使用代码。"></a>在我来到大学第一次痴迷于编程时，是因为ACM。没有其他复杂的原因，只是被那深奥而富有魅力的算法所吸引到，记得那时通宵的写题，心里疑惑，痛苦，失望，兴奋，凭借自己的毅力刷过每一道题，以至于现在想起来我都会感激那时候的自己，如果不是拼命的练习，我对编程的理解远没有现在这么深，基础也不会很扎实。每次看到有人问搞ACM有用么，我都会说有用，虽然那些深奥，复杂的算法在其他语言中暂时用不到，但会锻炼你编程的思维，加深你对编程的理解。如果你觉得封标准库里封装好的算法太过简单，可以 尝试的自己去写一个快排，二分法，我第一次看到那些算法才感受到编程之美，算法之美，我们还只是代码的搬运工，没有真正的学会使用代码。</h2><h2 id="还是要说一下学习的过程，刚开始只是写学校OJ的题，做到二三百道的时候题已经水到不要要的，于是买各种习题书，算法书，逛遍国内的著名OJ系统，UVA，POJ，ZOJ，HDU，NYOJ，是我常去的几个地方，但是大神太多，我做的那几道小水题根本排不上号，后来又参加了学校的以及外面的各种比赛，很反感潜规则，大学这么自由神圣的地方也总是被那些德智体美发展不全面的老师所祸害了，真是被恶心到了。我总觉得学编程是一种天赋，纵使我每天努力的写代码，研究算法也只是比其他人厉害一点点，但开心最重要，每次做出来题就感觉自己特别厉害，ACM的魅力就在于让你在限定的时间内去解决问题，那种紧张刺激的环境很锻炼人，你只有使自己冷静下来才能去解决问题。我现在找Bug的时候都会慢慢的一步一步去排查，不会手忙脚乱。这是对程序的一种把握。"><a href="#还是要说一下学习的过程，刚开始只是写学校OJ的题，做到二三百道的时候题已经水到不要要的，于是买各种习题书，算法书，逛遍国内的著名OJ系统，UVA，POJ，ZOJ，HDU，NYOJ，是我常去的几个地方，但是大神太多，我做的那几道小水题根本排不上号，后来又参加了学校的以及外面的各种比赛，很反感潜规则，大学这么自由神圣的地方也总是被那些德智体美发展不全面的老师所祸害了，真是被恶心到了。我总觉得学编程是一种天赋，纵使我每天努力的写代码，研究算法也只是比其他人厉害一点点，但开心最重要，每次做出来题就感觉自己特别厉害，ACM的魅力就在于让你在限定的时间内去解决问题，那种紧张刺激的环境很锻炼人，你只有使自己冷静下来才能去解决问题。我现在找Bug的时候都会慢慢的一步一步去排查，不会手忙脚乱。这是对程序的一种把握。" class="headerlink" title="还是要说一下学习的过程，刚开始只是写学校OJ的题，做到二三百道的时候题已经水到不要要的，于是买各种习题书，算法书，逛遍国内的著名OJ系统，UVA，POJ，ZOJ，HDU，NYOJ，是我常去的几个地方，但是大神太多，我做的那几道小水题根本排不上号，后来又参加了学校的以及外面的各种比赛，很反感潜规则，大学这么自由神圣的地方也总是被那些德智体美发展不全面的老师所祸害了，真是被恶心到了。我总觉得学编程是一种天赋，纵使我每天努力的写代码，研究算法也只是比其他人厉害一点点，但开心最重要，每次做出来题就感觉自己特别厉害，ACM的魅力就在于让你在限定的时间内去解决问题，那种紧张刺激的环境很锻炼人，你只有使自己冷静下来才能去解决问题。我现在找Bug的时候都会慢慢的一步一步去排查，不会手忙脚乱。这是对程序的一种把握。"></a>还是要说一下学习的过程，刚开始只是写学校OJ的题，做到二三百道的时候题已经水到不要要的，于是买各种习题书，算法书，逛遍国内的著名OJ系统，UVA，POJ，ZOJ，HDU，NYOJ，是我常去的几个地方，但是大神太多，我做的那几道小水题根本排不上号，后来又参加了学校的以及外面的各种比赛，很反感潜规则，大学这么自由神圣的地方也总是被那些德智体美发展不全面的老师所祸害了，真是被恶心到了。我总觉得学编程是一种天赋，纵使我每天努力的写代码，研究算法也只是比其他人厉害一点点，但开心最重要，每次做出来题就感觉自己特别厉害，ACM的魅力就在于让你在限定的时间内去解决问题，那种紧张刺激的环境很锻炼人，你只有使自己冷静下来才能去解决问题。我现在找Bug的时候都会慢慢的一步一步去排查，不会手忙脚乱。这是对程序的一种把握。</h2><h2 id="到后来我还是退出ACM，一年的学习已经收获了很多，老师的排挤让我对ACM不再那么痴迷，是时候去学一些其他的语言。但我不会放弃ACM，不会放弃刷题，算法是永远存在于编程中的，这也是一个程序员的基本功。"><a href="#到后来我还是退出ACM，一年的学习已经收获了很多，老师的排挤让我对ACM不再那么痴迷，是时候去学一些其他的语言。但我不会放弃ACM，不会放弃刷题，算法是永远存在于编程中的，这也是一个程序员的基本功。" class="headerlink" title="到后来我还是退出ACM，一年的学习已经收获了很多，老师的排挤让我对ACM不再那么痴迷，是时候去学一些其他的语言。但我不会放弃ACM，不会放弃刷题，算法是永远存在于编程中的，这也是一个程序员的基本功。"></a>到后来我还是退出ACM，一年的学习已经收获了很多，老师的排挤让我对ACM不再那么痴迷，是时候去学一些其他的语言。但我不会放弃ACM，不会放弃刷题，算法是永远存在于编程中的，这也是一个程序员的基本功。</h2>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>技术心得</tag>
        <tag>技术知识</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Debian系统中Apache内存占用太高的如何优化</title>
    <url>/2017/02/03/apache-article0013/</url>
    <content><![CDATA[<h4 id="这是为debian系统写的，centos和ubuntu可以去网上看更好的文章。"><a href="#这是为debian系统写的，centos和ubuntu可以去网上看更好的文章。" class="headerlink" title="这是为debian系统写的，centos和ubuntu可以去网上看更好的文章。"></a>这是为debian系统写的，centos和ubuntu可以去网上看更好的文章。</h4><h5 id="如题，记录今天大战apache的经过，在布置好服务器以后，网易蜂巢经常提醒我服务过载，内存消耗太大，经常就是70-–90-左右，我只是做个博客而已，怎么会消耗这么大，一开始我也没有管，因为我买的服务器只有640MB内存，以为是安装了插件的原因，把插件也停用了，但还是没有什么效果，有时候就是写个文章服务器都会宕机了，还得去蜂巢手动重启，很生气啊，看帖子里有很多是512MB的也不卡，我的怎么这么卡，直到今天再也忍不了了，我决定好好调查一下原因，作为一个程序员，不能被程序玩了啊。这是我一开始服务器的截图，已经又快要崩溃了"><a href="#如题，记录今天大战apache的经过，在布置好服务器以后，网易蜂巢经常提醒我服务过载，内存消耗太大，经常就是70-–90-左右，我只是做个博客而已，怎么会消耗这么大，一开始我也没有管，因为我买的服务器只有640MB内存，以为是安装了插件的原因，把插件也停用了，但还是没有什么效果，有时候就是写个文章服务器都会宕机了，还得去蜂巢手动重启，很生气啊，看帖子里有很多是512MB的也不卡，我的怎么这么卡，直到今天再也忍不了了，我决定好好调查一下原因，作为一个程序员，不能被程序玩了啊。这是我一开始服务器的截图，已经又快要崩溃了" class="headerlink" title="如题，记录今天大战apache的经过，在布置好服务器以后，网易蜂巢经常提醒我服务过载，内存消耗太大，经常就是70%–90%左右，我只是做个博客而已，怎么会消耗这么大，一开始我也没有管，因为我买的服务器只有640MB内存，以为是安装了插件的原因，把插件也停用了，但还是没有什么效果，有时候就是写个文章服务器都会宕机了，还得去蜂巢手动重启，很生气啊，看帖子里有很多是512MB的也不卡，我的怎么这么卡，直到今天再也忍不了了，我决定好好调查一下原因，作为一个程序员，不能被程序玩了啊。这是我一开始服务器的截图，已经又快要崩溃了"></a>如题，记录今天大战apache的经过，在布置好服务器以后，网易蜂巢经常提醒我服务过载，内存消耗太大，经常就是70%–90%左右，我只是做个博客而已，怎么会消耗这么大，一开始我也没有管，因为我买的服务器只有640MB内存，以为是安装了插件的原因，把插件也停用了，但还是没有什么效果，有时候就是写个文章服务器都会宕机了，还得去蜂巢手动重启，很生气啊，看帖子里有很多是512MB的也不卡，我的怎么这么卡，直到今天再也忍不了了，我决定好好调查一下原因，作为一个程序员，不能被程序玩了啊。这是我一开始服务器的截图，已经又快要崩溃了</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/235631250.png"
                     
                ></p>
<h5 id="然后用命令查了一下，发现果然消耗很大"><a href="#然后用命令查了一下，发现果然消耗很大" class="headerlink" title="然后用命令查了一下，发现果然消耗很大"></a>然后用命令查了一下，发现果然消耗很大</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#free m</span><br><span class="line">#top</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/235597109.png"
                     
                ></p>
<h5 id="没办法，只能干了，仔细看，mysql占用最多，但只有一个，而apache开启了10个进程，但是也不能贸然的直接关掉啊，我就先去google了apache内存占用太高怎么办，果然有结果，要去apache下找到httpd-conf文件，然后修改几个apache的参数就ok，然而我在我服务器里找了很久，把所有文件都翻了一遍也没有看到httpd-conf这个文件，很难过啊，再回去看google我发现文章大多是ubuntu下的apache，难道我的不是么，好吧，查一下服务器的系统吧，"><a href="#没办法，只能干了，仔细看，mysql占用最多，但只有一个，而apache开启了10个进程，但是也不能贸然的直接关掉啊，我就先去google了apache内存占用太高怎么办，果然有结果，要去apache下找到httpd-conf文件，然后修改几个apache的参数就ok，然而我在我服务器里找了很久，把所有文件都翻了一遍也没有看到httpd-conf这个文件，很难过啊，再回去看google我发现文章大多是ubuntu下的apache，难道我的不是么，好吧，查一下服务器的系统吧，" class="headerlink" title="没办法，只能干了，仔细看，mysql占用最多，但只有一个，而apache开启了10个进程，但是也不能贸然的直接关掉啊，我就先去google了apache内存占用太高怎么办，果然有结果，要去apache下找到httpd.conf文件，然后修改几个apache的参数就ok，然而我在我服务器里找了很久，把所有文件都翻了一遍也没有看到httpd.conf这个文件，很难过啊，再回去看google我发现文章大多是ubuntu下的apache，难道我的不是么，好吧，查一下服务器的系统吧，"></a>没办法，只能干了，仔细看，mysql占用最多，但只有一个，而apache开启了10个进程，但是也不能贸然的直接关掉啊，我就先去google了apache内存占用太高怎么办，果然有结果，要去apache下找到httpd.conf文件，然后修改几个apache的参数就ok，然而我在我服务器里找了很久，把所有文件都翻了一遍也没有看到httpd.conf这个文件，很难过啊，再回去看google我发现文章大多是ubuntu下的apache，难道我的不是么，好吧，查一下服务器的系统吧，</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># head -n 1 /etc/issue</span><br><span class="line">结果：</span><br><span class="line">Debian GNU/Linux 7 \n \l</span><br></pre></td></tr></table></figure></div>

<h5 id="好吧，我的果然不是ubuntu，而是debian，这下只能再去google一下debian系统的apache中httpd-conf在那里，竟然没有中文的，然后我打开了一个日文的文章，看了一下好像是-x2F-etc-x2F-apache2-x2F-apache2-conf就是apache的主配置文件，啊啊啊，我早应该想到的，打开看了一下，又懵了，这ubuntu还是不一样，里面有三组参数，没看清，三组都改了，重启服务器，apache直接启动不了了，吓到我了，看了一下日志"><a href="#好吧，我的果然不是ubuntu，而是debian，这下只能再去google一下debian系统的apache中httpd-conf在那里，竟然没有中文的，然后我打开了一个日文的文章，看了一下好像是-x2F-etc-x2F-apache2-x2F-apache2-conf就是apache的主配置文件，啊啊啊，我早应该想到的，打开看了一下，又懵了，这ubuntu还是不一样，里面有三组参数，没看清，三组都改了，重启服务器，apache直接启动不了了，吓到我了，看了一下日志" class="headerlink" title="好吧，我的果然不是ubuntu，而是debian，这下只能再去google一下debian系统的apache中httpd.conf在那里，竟然没有中文的，然后我打开了一个日文的文章，看了一下好像是&#x2F;etc&#x2F;apache2&#x2F;apache2.conf就是apache的主配置文件，啊啊啊，我早应该想到的，打开看了一下，又懵了，这ubuntu还是不一样，里面有三组参数，没看清，三组都改了，重启服务器，apache直接启动不了了，吓到我了，看了一下日志"></a>好吧，我的果然不是ubuntu，而是debian，这下只能再去google一下debian系统的apache中httpd.conf在那里，竟然没有中文的，然后我打开了一个日文的文章，看了一下好像是&#x2F;etc&#x2F;apache2&#x2F;apache2.conf就是apache的主配置文件，啊啊啊，我早应该想到的，打开看了一下，又懵了，这ubuntu还是不一样，里面有三组参数，没看清，三组都改了，重启服务器，apache直接启动不了了，吓到我了，看了一下日志</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apache2: apr_sockaddr_info_get() failed for blog-923452-9d04bc01-f63fj</span><br><span class="line">apache2: Could not reliably determine the server&#x27;s fully qualified domain name, using 127.0.0.1 for ServerName</span><br><span class="line">apache2: apr_sockaddr_info_get() failed for blog-923452-9d04bc01-f63fj</span><br><span class="line">apache2: Could not reliably determine the server&#x27;s fully qualified domain name, using 127.0.0.1 for ServerName</span><br><span class="line">Restarting web server: apache2.</span><br></pre></td></tr></table></figure></div>

<h5 id="没看懂，然后把以前备份的apache2-conf安装上，重启，apache启动了，看来是我改错了，再重新改吧，在这里提醒一下，做这种事情一定要提前备份，不然改错了就完蛋了，就这样我认真的改了两次，终于发现只能修改最后一组，对应的参数改成这样"><a href="#没看懂，然后把以前备份的apache2-conf安装上，重启，apache启动了，看来是我改错了，再重新改吧，在这里提醒一下，做这种事情一定要提前备份，不然改错了就完蛋了，就这样我认真的改了两次，终于发现只能修改最后一组，对应的参数改成这样" class="headerlink" title="没看懂，然后把以前备份的apache2.conf安装上，重启，apache启动了，看来是我改错了，再重新改吧，在这里提醒一下，做这种事情一定要提前备份，不然改错了就完蛋了，就这样我认真的改了两次，终于发现只能修改最后一组，对应的参数改成这样"></a>没看懂，然后把以前备份的apache2.conf安装上，重启，apache启动了，看来是我改错了，再重新改吧，在这里提醒一下，<strong>做这种事情一定要提前备份，不然改错了就完蛋了</strong>，就这样我认真的改了两次，终于发现只能修改最后一组，对应的参数改成这样</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   StartServers 1</span><br><span class="line">*   MinSpareServers 1</span><br><span class="line">*   MaxSpareServers 5</span><br><span class="line">*   ServerLimit      10</span><br><span class="line">*   MaxClients       10</span><br></pre></td></tr></table></figure></div>

<h5 id="一定要看好名字，只修改最后一组的这几个参数，重启，发现果然有效果，把apache启动的子进程数改小了以后只启动了几个，看图"><a href="#一定要看好名字，只修改最后一组的这几个参数，重启，发现果然有效果，把apache启动的子进程数改小了以后只启动了几个，看图" class="headerlink" title="一定要看好名字，只修改最后一组的这几个参数，重启，发现果然有效果，把apache启动的子进程数改小了以后只启动了几个，看图"></a>一定要看好名字，只修改最后一组的这几个参数，重启，发现果然有效果，把apache启动的子进程数改小了以后只启动了几个，看图</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/242475640.png"
                     
                ></p>
<h5 id="内存少了100多MB，很开心，网站也快了些，没有那么卡了，"><a href="#内存少了100多MB，很开心，网站也快了些，没有那么卡了，" class="headerlink" title="内存少了100多MB，很开心，网站也快了些，没有那么卡了，"></a>内存少了100多MB，很开心，网站也快了些，没有那么卡了，</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/242501906.png"
                     
                ></p>
<h5 id="就这样，我的apache终于弄好了，关于修改的apache参数的含义有必要发一下，毕竟是学计算机的"><a href="#就这样，我的apache终于弄好了，关于修改的apache参数的含义有必要发一下，毕竟是学计算机的" class="headerlink" title="就这样，我的apache终于弄好了，关于修改的apache参数的含义有必要发一下，毕竟是学计算机的"></a>就这样，我的apache终于弄好了，关于修改的apache参数的含义有必要发一下，毕竟是学计算机的</h5><p>这几个参数意思如下：</p>
<ul>
<li>StartServers 8<ul>
<li>启动时默认启动的进程数</li>
</ul>
</li>
<li>MinSpareServers 5<ul>
<li>MinSpareServers指令设置空闲子进程的最小数量。所谓空闲子进程是指没有正在处理请求的子进程。如果当前空闲子进程数少于MinSpareServers ，那么Apache将以第一秒一个，第二秒两个，第三秒四个，按指数递增个数的速度产生新的子进程（最大32个&#x2F;秒）。</li>
</ul>
</li>
<li>MaxSpareServers 10<ul>
<li>MaxSpareServers指令设置空闲子进程的最大数量。所谓空闲子进程是指没有正在处理请求的子进程。如果当前有超过MaxSpareServers数量的空闲子进程，那么父进程将杀死多余的子进程。</li>
</ul>
</li>
<li>ServerLimit      256<ul>
<li>配置的apache最大的并发响应数，对应的是apache的进程数</li>
</ul>
</li>
<li>MaxClients       256<ul>
<li>设定Apache可同时处理的请求数量</li>
<li>MaxClients不得大于ServerLimit参数。</li>
</ul>
</li>
<li>MaxRequestsPerChild  4000<ul>
<li>每个子进程理多少个请求后将自动销毁。到达MaxRequestsPerChild的限制后，子进程将会结束。如果MaxRequestsPerChild为”0″，子进程将永远不会结束</li>
</ul>
</li>
</ul>
<h5 id="有兴趣的可以继续研究，这是我参考的两篇文章，"><a href="#有兴趣的可以继续研究，这是我参考的两篇文章，" class="headerlink" title="有兴趣的可以继续研究，这是我参考的两篇文章，"></a>有兴趣的可以继续研究，这是我参考的两篇文章，</h5><p>》》》<a class="link"   href="http://d.hatena.ne.jp/pasela/20090205/debian_apache"  title="这是那篇日本的文章ぱせらんメモ">这是那篇日本的文章ぱせらんメモ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="https://www.hrwhisper.me/optimizing-apache-for-low-memory-ram-vps/"  title="apache 在低配置服务器下的优化">apache 在低配置服务器下的优化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="下面这篇文章里有对apache服务器其他优化方法的详细介绍，等我服务器内存在不够的时候我会再优化一次。"><a href="#下面这篇文章里有对apache服务器其他优化方法的详细介绍，等我服务器内存在不够的时候我会再优化一次。" class="headerlink" title="下面这篇文章里有对apache服务器其他优化方法的详细介绍，等我服务器内存在不够的时候我会再优化一次。"></a>下面这篇文章里有对apache服务器其他优化方法的详细介绍，等我服务器内存在不够的时候我会再优化一次。</h5><p>》》》<a class="link"   href="https://www.asmodeus.cn/archives/128"  title="APACHE内存占用过高解决方案">APACHE内存占用过高解决方案 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>About</title>
    <url>/2017/07/27/about/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>好玩的API调用之---IP地址查询API</title>
    <url>/2017/04/25/api-article73/</url>
    <content><![CDATA[<p>好玩的API调用之—IP地址查询API</p>
<h3 id="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"><a href="#平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。" class="headerlink" title="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"></a>平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。</h3><h2 id="第一个专题就做关于IP地址查询的，这个在网站里应该用的挺多，比如留言什么的，后台都会记录下访问者的IP地址，如果我想知道这个IP地址来自哪里就需要调API来查询了。我使用的是webXml提供的API。"><a href="#第一个专题就做关于IP地址查询的，这个在网站里应该用的挺多，比如留言什么的，后台都会记录下访问者的IP地址，如果我想知道这个IP地址来自哪里就需要调API来查询了。我使用的是webXml提供的API。" class="headerlink" title="第一个专题就做关于IP地址查询的，这个在网站里应该用的挺多，比如留言什么的，后台都会记录下访问者的IP地址，如果我想知道这个IP地址来自哪里就需要调API来查询了。我使用的是webXml提供的API。"></a>第一个专题就做关于IP地址查询的，这个在网站里应该用的挺多，比如留言什么的，后台都会记录下访问者的IP地址，如果我想知道这个IP地址来自哪里就需要调API来查询了。我使用的是webXml提供的API。</h2><h3 id="这是网址，最简单的get调用方法，最后面的string是用查询的IP地址，"><a href="#这是网址，最简单的get调用方法，最后面的string是用查询的IP地址，" class="headerlink" title="这是网址，最简单的get调用方法，最后面的string是用查询的IP地址，"></a>这是网址，最简单的get调用方法，最后面的string是用查询的IP地址，</h3><p><a class="link"   href="http://ws.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx/getCountryCityByIp?theIpAddress=string" >http://ws.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx/getCountryCityByIp?theIpAddress=string <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web4.jpg"
                     
                ></p>
<h2 id="想要详细了解的其他方法的如post请求的看下图"><a href="#想要详细了解的其他方法的如post请求的看下图" class="headerlink" title="想要详细了解的其他方法的如post请求的看下图"></a>想要详细了解的其他方法的如post请求的看下图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web5.jpg"
                     
                ></p>
<h2 id="这是查询指定IP地址的方法，还可以直接查看当IP地址"><a href="#这是查询指定IP地址的方法，还可以直接查看当IP地址" class="headerlink" title="这是查询指定IP地址的方法，还可以直接查看当IP地址"></a>这是查询指定IP地址的方法，还可以直接查看当IP地址</h2><h3 id="1-js方法-lt-script-type-quot-text-javascript-quot-src-quot-http-ip-chinaz-com-getip-aspx-http-ip-chinaz-com-getip-aspx-quot-gt-lt-script-gt-，可以实时的显示当前IP地址所在地，使用效果可以点击我博客上方的扩展功能。"><a href="#1-js方法-lt-script-type-quot-text-javascript-quot-src-quot-http-ip-chinaz-com-getip-aspx-http-ip-chinaz-com-getip-aspx-quot-gt-lt-script-gt-，可以实时的显示当前IP地址所在地，使用效果可以点击我博客上方的扩展功能。" class="headerlink" title="1. js方法 &lt;script type=&quot;text/javascript&quot; src=&quot;[http://ip.chinaz.com/getip.aspx](http://ip.chinaz.com/getip.aspx)&quot;&gt;&lt;/script&gt;，可以实时的显示当前IP地址所在地，使用效果可以点击我博客上方的扩展功能。"></a>1. js方法 <code>&lt;script type=&quot;text/javascript&quot; src=&quot;[http://ip.chinaz.com/getip.aspx](http://ip.chinaz.com/getip.aspx)&quot;&gt;&lt;/script&gt;</code>，可以实时的显示当前IP地址所在地，使用效果可以点击我博客上方的扩展功能。</h3><h3 id="2-也可以直接访问-http-ip-chinaz-com-getip-aspx这个网址，然后获取所得到的数据。"><a href="#2-也可以直接访问-http-ip-chinaz-com-getip-aspx这个网址，然后获取所得到的数据。" class="headerlink" title="2. 也可以直接访问 http://ip.chinaz.com/getip.aspx这个网址，然后获取所得到的数据。"></a>2. 也可以直接访问 <code>http://ip.chinaz.com/getip.aspx</code>这个网址，然后获取所得到的数据。</h3>]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩的API调用之---星座运势的API与爬虫爬取</title>
    <url>/2017/04/25/api-article74/</url>
    <content><![CDATA[<p>好玩的API调用之—星座运势API与爬虫</p>
<h3 id="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"><a href="#平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。" class="headerlink" title="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"></a>平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。</h3><h2 id="第二个专题是关于星座运势查询的，平时无聊的时候会用到这个，平时放在网站里显示一下也是可以的，以前我是直接Python爬星座屋网站里的数据去分析的，后来发现聚合数据提供这个API，而且调用的方法也很简单，今天就把这两个方法写出来，有需要的可以自己参考着做。"><a href="#第二个专题是关于星座运势查询的，平时无聊的时候会用到这个，平时放在网站里显示一下也是可以的，以前我是直接Python爬星座屋网站里的数据去分析的，后来发现聚合数据提供这个API，而且调用的方法也很简单，今天就把这两个方法写出来，有需要的可以自己参考着做。" class="headerlink" title="第二个专题是关于星座运势查询的，平时无聊的时候会用到这个，平时放在网站里显示一下也是可以的，以前我是直接Python爬星座屋网站里的数据去分析的，后来发现聚合数据提供这个API，而且调用的方法也很简单，今天就把这两个方法写出来，有需要的可以自己参考着做。"></a>第二个专题是关于星座运势查询的，平时无聊的时候会用到这个，平时放在网站里显示一下也是可以的，以前我是直接Python爬星座屋网站里的数据去分析的，后来发现聚合数据提供这个API，而且调用的方法也很简单，今天就把这两个方法写出来，有需要的可以自己参考着做。</h2><h2 id="1-这是星座屋的网站"><a href="#1-这是星座屋的网站" class="headerlink" title="1. 这是星座屋的网站"></a>1. 这是星座屋的网站</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web6.jpg"
                     
                ></p>
<h3 id="然后用Python写个爬虫直接爬就可以了，我直接放出代码，不做解释了"><a href="#然后用Python写个爬虫直接爬就可以了，我直接放出代码，不做解释了" class="headerlink" title="然后用Python写个爬虫直接爬就可以了，我直接放出代码，不做解释了"></a>然后用Python写个爬虫直接爬就可以了，我直接放出代码，不做解释了</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import sys</span><br><span class="line">import MySQLdb</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( &quot;utf-8&quot; )</span><br><span class="line">import urllib2</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line">def download(url,headers):</span><br><span class="line">    try:</span><br><span class="line">        request = urllib2.Request(url,headers=headers)</span><br><span class="line">        html = urllib2.urlopen(request).read()</span><br><span class="line">        # html = urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line">        print e.code   #可以打印出来错误代号如404。</span><br><span class="line">        print e.reason  #可以捕获异常</span><br><span class="line">        html = None</span><br><span class="line">    return html</span><br><span class="line">def save(html):</span><br><span class="line">    f = open(&#x27;thefile.txt&#x27;, &#x27;w&#x27;)</span><br><span class="line">    f.write(html)</span><br><span class="line">    f.close()</span><br><span class="line">def read_file():</span><br><span class="line">    f = open(&#x27;thefile.txt&#x27;, &#x27;r&#x27;)</span><br><span class="line">    html = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    return html</span><br><span class="line">def get_html(url):</span><br><span class="line">    User_agent = &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0&#x27;</span><br><span class="line">    headers = &#123;&#x27;User_agent&#x27;: User_agent&#125;</span><br><span class="line">    html = download(url, headers)</span><br><span class="line">    save(html)</span><br><span class="line">def constellation():</span><br><span class="line">    url = &#x27;http://www.xzw.com/fortune/pisces/1.html&#x27;</span><br><span class="line">    get_html(url)</span><br><span class="line">    html = read_file()</span><br><span class="line">    soup = BeautifulSoup(html)</span><br><span class="line">    # print soup.find_all(&#x27;dl&#x27;)</span><br><span class="line">    html2 = soup.find(&#x27;div&#x27;, class_=&#x27;c_cont&#x27;)</span><br><span class="line">    html2 = str(html2)</span><br><span class="line">    soup = BeautifulSoup(html2)</span><br><span class="line">    text = &#x27;双鱼座明日运势：&#x27; + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;整体运势：&#x27; + soup.find_all(&#x27;span&#x27;)[0].string + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;事业学业：&#x27; + soup.find_all(&#x27;span&#x27;)[2].string + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;健康运势：&#x27; + soup.find_all(&#x27;span&#x27;)[4].string + &#x27;\n&#x27;</span><br><span class="line">    return text</span><br><span class="line">    # html = urllib2.urlopen(url)</span><br><span class="line">    # print html</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    weather_text = weather()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="2-先在聚合数据里注册，然后再提交身份证照片进行个人认证，很烦的，最后在免费数据里找到星座运势，就是这样的"><a href="#2-先在聚合数据里注册，然后再提交身份证照片进行个人认证，很烦的，最后在免费数据里找到星座运势，就是这样的" class="headerlink" title="2.先在聚合数据里注册，然后再提交身份证照片进行个人认证，很烦的，最后在免费数据里找到星座运势，就是这样的"></a>2.先在聚合数据里注册，然后再提交身份证照片进行个人认证，很烦的，最后在免费数据里找到星座运势，就是这样的</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web7.jpg"
                     
                ></p>
<h3 id="然后点击申请数据，再进行一遍验证，不过很快就通过了，在控制台找的自己的key，我是使用Python来处理数据的，下面是代码，把key直接换成你的就可以，至于类型，根据需要切换today，tomorrow，week，year等。"><a href="#然后点击申请数据，再进行一遍验证，不过很快就通过了，在控制台找的自己的key，我是使用Python来处理数据的，下面是代码，把key直接换成你的就可以，至于类型，根据需要切换today，tomorrow，week，year等。" class="headerlink" title="然后点击申请数据，再进行一遍验证，不过很快就通过了，在控制台找的自己的key，我是使用Python来处理数据的，下面是代码，把key直接换成你的就可以，至于类型，根据需要切换today，tomorrow，week，year等。"></a>然后点击申请数据，再进行一遍验证，不过很快就通过了，在控制台找的自己的key，我是使用Python来处理数据的，下面是代码，把key直接换成你的就可以，至于类型，根据需要切换today，tomorrow，week，year等。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( &quot;utf-8&quot; )</span><br><span class="line">import urllib2</span><br><span class="line">import json</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">def download(url):</span><br><span class="line">    html = urllib2.urlopen(url)</span><br><span class="line">    return html.read()</span><br><span class="line">#星座运势api的调取</span><br><span class="line">def constellation():</span><br><span class="line">    today_url = &#x27;http://web.juhe.cn:8080/constellation/getAll?consName=双鱼座&amp;type=today&amp;key=&#x27;</span><br><span class="line">    tomorrow_url = &#x27;http://web.juhe.cn:8080/constellation/getAll?consName=双鱼座&amp;type=tomorrow&amp;key=&#x27;</span><br><span class="line">    html = download(tomorrow_url)</span><br><span class="line">    json_html = json.loads(html)</span><br><span class="line">    text = &#x27;&#x27;</span><br><span class="line">    text = text + str(json_html[&#x27;name&#x27;]) + &#x27; &#x27; + str(json_html[&#x27;datetime&#x27;]) + &#x27; 明日运势 \n&#x27;;</span><br><span class="line">    text = text + &#x27;综合指数：&#x27; + str(json_html[&#x27;all&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;幸运色：&#x27; + str(json_html[&#x27;color&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;健康指数：&#x27; + str(json_html[&#x27;health&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;爱情指数：&#x27; + str(json_html[&#x27;love&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;财运指数：&#x27; + str(json_html[&#x27;money&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;幸运数字：&#x27; + str(json_html[&#x27;number&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    text = text + &#x27;明日概述：&#x27; + str(json_html[&#x27;summary&#x27;]) + &#x27;\n&#x27;</span><br><span class="line">    print text</span><br><span class="line">    return text</span><br><span class="line">def main():</span><br><span class="line">    text = constellation()</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩的API调用之---三种翻译API调用</title>
    <url>/2017/04/25/api-article75/</url>
    <content><![CDATA[<p>好玩的API调用之—三种翻译API调用</p>
<h3 id="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"><a href="#平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。" class="headerlink" title="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"></a>平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。</h3><h2 id="第二个专题是关于翻译功能的API调用，这个功能提供的网站有很多，我一开始是用爬虫爬有道翻译网站来实现翻译功能，后来发现有道是提供API的，这就很尴尬了，在写有道翻译爬虫的时候我还在想为什么网易的网站这么好爬，越来人家根本不在乎我这些小用户，后来发现了webXML也提供这个服务，这次就写这三个吧。"><a href="#第二个专题是关于翻译功能的API调用，这个功能提供的网站有很多，我一开始是用爬虫爬有道翻译网站来实现翻译功能，后来发现有道是提供API的，这就很尴尬了，在写有道翻译爬虫的时候我还在想为什么网易的网站这么好爬，越来人家根本不在乎我这些小用户，后来发现了webXML也提供这个服务，这次就写这三个吧。" class="headerlink" title="第二个专题是关于翻译功能的API调用，这个功能提供的网站有很多，我一开始是用爬虫爬有道翻译网站来实现翻译功能，后来发现有道是提供API的，这就很尴尬了，在写有道翻译爬虫的时候我还在想为什么网易的网站这么好爬，越来人家根本不在乎我这些小用户，后来发现了webXML也提供这个服务，这次就写这三个吧。"></a>第二个专题是关于翻译功能的API调用，这个功能提供的网站有很多，我一开始是用爬虫爬有道翻译网站来实现翻译功能，后来发现有道是提供API的，这就很尴尬了，在写有道翻译爬虫的时候我还在想为什么网易的网站这么好爬，越来人家根本不在乎我这些小用户，后来发现了webXML也提供这个服务，这次就写这三个吧。</h2><h2 id="1-关于有道翻译的爬虫我以前在博客里发过，这里不做解释，感觉挺傻的，就好像明明开着门，我却非要翻墙进去。"><a href="#1-关于有道翻译的爬虫我以前在博客里发过，这里不做解释，感觉挺傻的，就好像明明开着门，我却非要翻墙进去。" class="headerlink" title="1.关于有道翻译的爬虫我以前在博客里发过，这里不做解释，感觉挺傻的，就好像明明开着门，我却非要翻墙进去。"></a>1.关于有道翻译的爬虫我以前在博客里发过，这里不做解释，感觉挺傻的，就好像明明开着门，我却非要翻墙进去。</h2><h3 id="网址戳这里：http-www-rain1024-com-2017-02-05-python-article23"><a href="#网址戳这里：http-www-rain1024-com-2017-02-05-python-article23" class="headerlink" title="网址戳这里：http://www.rain1024.com/2017/02/05/python-article23/"></a>网址戳这里：<a class="link"   href="http://www.rain1024.com/2017/02/05/python-article23/" >http://www.rain1024.com/2017/02/05/python-article23/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="2-有道API的网址http-fanyi-youdao-com-openapi-path-data-mode，需要先申请一个key，很快的。然后可以直接调用了，下面是官网给的调用方法和返回数据格式，直接使用get请求就可以，返回的翻译结果很详细。我直接贴图，不写了。"><a href="#2-有道API的网址http-fanyi-youdao-com-openapi-path-data-mode，需要先申请一个key，很快的。然后可以直接调用了，下面是官网给的调用方法和返回数据格式，直接使用get请求就可以，返回的翻译结果很详细。我直接贴图，不写了。" class="headerlink" title="2.有道API的网址http://fanyi.youdao.com/openapi?path=data-mode，需要先申请一个key，很快的。然后可以直接调用了，下面是官网给的调用方法和返回数据格式，直接使用get请求就可以，返回的翻译结果很详细。我直接贴图，不写了。"></a>2.有道API的网址<a class="link"   href="http://fanyi.youdao.com/openapi?path=data-mode" >http://fanyi.youdao.com/openapi?path=data-mode <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，需要先申请一个key，很快的。然后可以直接调用了，下面是官网给的调用方法和返回数据格式，直接使用get请求就可以，返回的翻译结果很详细。我直接贴图，不写了。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web8.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web9.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web10.jpg"
                     
                ></p>
<h2 id="3-webXML的网址在这里：http-ws-webxml-com-cn-WebServices-TranslatorWebService-asmx-getEnCnTwoWayTranslator-Word-string，比起有道，webXML不需要申请，直接使用get请求就可以调用，把后面的string改成自己要翻译的单词或汉语就可以，但它只返回XML格式数据，而且翻译内容比较简单，这是效果图，有需要post请求的可以参考下图。"><a href="#3-webXML的网址在这里：http-ws-webxml-com-cn-WebServices-TranslatorWebService-asmx-getEnCnTwoWayTranslator-Word-string，比起有道，webXML不需要申请，直接使用get请求就可以调用，把后面的string改成自己要翻译的单词或汉语就可以，但它只返回XML格式数据，而且翻译内容比较简单，这是效果图，有需要post请求的可以参考下图。" class="headerlink" title="3. webXML的网址在这里：http://ws.webxml.com.cn//WebServices/TranslatorWebService.asmx/getEnCnTwoWayTranslator?Word=string，比起有道，webXML不需要申请，直接使用get请求就可以调用，把后面的string改成自己要翻译的单词或汉语就可以，但它只返回XML格式数据，而且翻译内容比较简单，这是效果图，有需要post请求的可以参考下图。"></a>3. webXML的网址在这里：<a class="link"   href="http://ws.webxml.com.cn//WebServices/TranslatorWebService.asmx/getEnCnTwoWayTranslator?Word=string" >http://ws.webxml.com.cn//WebServices/TranslatorWebService.asmx/getEnCnTwoWayTranslator?Word=string <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，比起有道，webXML不需要申请，直接使用get请求就可以调用，把后面的string改成自己要翻译的单词或汉语就可以，但它只返回XML格式数据，而且翻译内容比较简单，这是效果图，有需要post请求的可以参考下图。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web11.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web12.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩的API调用之---天气预报的API调用与爬虫</title>
    <url>/2017/04/26/api-article76/</url>
    <content><![CDATA[<p>好玩的API调用之—天气预报的API调用与爬虫</p>
<h3 id="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"><a href="#平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。" class="headerlink" title="平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。"></a>平时写程序经常需要用到一些服务，像翻译，天气预报，星座什么的，我一般都是用Python写个爬虫去提供这些服务的网站爬数据，但是有些网站对爬虫有很多限制，一些关键字会定时更改，就像中国天气网经常变更HTML标签的class值，这就需要时常维护爬虫，而聚合数据API只对普通用户提供一个免费API接口，简直垃圾，而网上的一些网站其实有开放的API供开发者调用，所以我想着把自己发现的好玩的API和自己写的爬虫写个博客专题供大家参考，我会继续补充和维护。</h3><h2 id="第四个专题是关于天气预报的API调用与爬虫，聚合数据里的天气预报接口还收费，真是lj，我一开始用爬虫爬中国天气网里的数据进行分析，后来发现了和风天气这个良心网站，不仅提供免费的接口，而且天气预报数据也很多很丰富。今天就写中国天气网的爬虫和和风天气的api调用。"><a href="#第四个专题是关于天气预报的API调用与爬虫，聚合数据里的天气预报接口还收费，真是lj，我一开始用爬虫爬中国天气网里的数据进行分析，后来发现了和风天气这个良心网站，不仅提供免费的接口，而且天气预报数据也很多很丰富。今天就写中国天气网的爬虫和和风天气的api调用。" class="headerlink" title="第四个专题是关于天气预报的API调用与爬虫，聚合数据里的天气预报接口还收费，真是lj，我一开始用爬虫爬中国天气网里的数据进行分析，后来发现了和风天气这个良心网站，不仅提供免费的接口，而且天气预报数据也很多很丰富。今天就写中国天气网的爬虫和和风天气的api调用。"></a>第四个专题是关于天气预报的API调用与爬虫，聚合数据里的天气预报接口还收费，真是lj，我一开始用爬虫爬中国天气网里的数据进行分析，后来发现了和风天气这个良心网站，不仅提供免费的接口，而且天气预报数据也很多很丰富。今天就写中国天气网的爬虫和和风天气的api调用。</h2><h2 id="1-中国天气网的网址-http-www-weather-com-cn-，先在里面找到自己的城市，然后把网址复制下来，就像我的是呼和浩特市http-www-weather-com-cn-weather1d-101080101-shtml，就是下图这样的。"><a href="#1-中国天气网的网址-http-www-weather-com-cn-，先在里面找到自己的城市，然后把网址复制下来，就像我的是呼和浩特市http-www-weather-com-cn-weather1d-101080101-shtml，就是下图这样的。" class="headerlink" title="1.中国天气网的网址 http://www.weather.com.cn/ ，先在里面找到自己的城市，然后把网址复制下来，就像我的是呼和浩特市http://www.weather.com.cn/weather1d/101080101.shtml，就是下图这样的。"></a>1.中国天气网的网址 <a class="link"   href="http://www.weather.com.cn/" >http://www.weather.com.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，先在里面找到自己的城市，然后把网址复制下来，就像我的是呼和浩特市<a class="link"   href="http://www.weather.com.cn/weather1d/101080101.shtml" >http://www.weather.com.cn/weather1d/101080101.shtml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，就是下图这样的。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web17.jpg"
                     
                ></p>
<h2 id="下面是我爬虫的代码，就不做详细解释。"><a href="#下面是我爬虫的代码，就不做详细解释。" class="headerlink" title="下面是我爬虫的代码，就不做详细解释。"></a>下面是我爬虫的代码，就不做详细解释。</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( &quot;utf-8&quot; )</span><br><span class="line">import urllib2</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line">def download(url,headers):</span><br><span class="line">    try:</span><br><span class="line">        request = urllib2.Request(url,headers=headers)</span><br><span class="line">        html = urllib2.urlopen(request).read()</span><br><span class="line">        # html = urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line">        print e.code   #可以打印出来错误代号如404。</span><br><span class="line">        print e.reason  #可以捕获异常</span><br><span class="line">        html = None</span><br><span class="line">    return html</span><br><span class="line">def save(html):</span><br><span class="line">    f = open(&#x27;thefile.txt&#x27;, &#x27;w&#x27;)</span><br><span class="line">    f.write(html)</span><br><span class="line">    f.close()</span><br><span class="line">def read_file():</span><br><span class="line">    f = open(&#x27;thefile.txt&#x27;, &#x27;r&#x27;)</span><br><span class="line">    html = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    return html</span><br><span class="line">def get_html(url):</span><br><span class="line">    User_agent = &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0&#x27;</span><br><span class="line">    headers = &#123;&#x27;User_agent&#x27;: User_agent&#125;</span><br><span class="line">    html = download(url, headers)</span><br><span class="line">    save(html)</span><br><span class="line">def weather():</span><br><span class="line">    url = &#x27;http://www.weather.com.cn/weather/101080101.shtml&#x27;</span><br><span class="line">    get_html(url)</span><br><span class="line">    html = read_file()</span><br><span class="line">    soup = BeautifulSoup(html)</span><br><span class="line">    text = &quot;&quot;</span><br><span class="line">    text = text + &quot;明天的天气是：&quot; + soup.find(&#x27;li&#x27;, class_=&#x27;sky skyid lv1&#x27;).p.string + &quot;\n&quot;</span><br><span class="line">    text = text + &quot;最高温度：&quot; + soup.find(&#x27;li&#x27;, class_=&#x27;sky skyid lv1&#x27;).span.string + &quot;最低温度：&quot; + soup.find(&#x27;li&#x27;,</span><br><span class="line">                                                                                                      class_=&#x27;sky skyid lv1&#x27;).i.string + &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">    # print soup.find(&#x27;li&#x27;,class_=&#x27;sky skyid lv2&#x27;).p.string</span><br><span class="line">    # print soup.find(&#x27;li&#x27;,class_=&#x27;sky skyid lv2&#x27;).span.string</span><br><span class="line">    # print soup.find(&#x27;li&#x27;,class_=&#x27;sky skyid lv2&#x27;).i.string</span><br><span class="line">    html = soup.find(&#x27;li&#x27;, class_=&#x27;sky skyid lv1&#x27;)</span><br><span class="line">    html2 = soup.find_all(&#x27;div&#x27;, class_=&#x27;hide&#x27;)[1]</span><br><span class="line">    soup = BeautifulSoup(str(html))</span><br><span class="line">    text = text + &quot;明天的风是：&quot; + soup.find_all(&#x27;i&#x27;)[1].string + &#x27;\n&#x27;</span><br><span class="line">    # print soup.find_all(&#x27;i&#x27;)[1].string</span><br><span class="line">    soup = BeautifulSoup(str(html2))</span><br><span class="line">    text = text + &quot;而紫外线指数是：&quot; + soup.find_all(&#x27;span&#x27;)[0].string + &quot;  建议：&quot; + soup.find_all(&#x27;p&#x27;)[0].string + &#x27;\n&#x27;</span><br><span class="line">    text = text + &quot;当然还有感冒指数：&quot; + soup.find_all(&#x27;span&#x27;)[1].string + &quot;  建议：&quot; + soup.find_all(&#x27;p&#x27;)[1].string + &#x27;\n&#x27;</span><br><span class="line">    text = text + &quot;最后是穿衣指数：&quot; + soup.find_all(&#x27;span&#x27;)[2].string + &quot;  &quot; + soup.find_all(&#x27;p&#x27;)[2].string + &#x27;\n&#x27;</span><br><span class="line">     # print soup.find_all(&#x27;span&#x27;)[1].string</span><br><span class="line">    # print soup.find_all(&#x27;span&#x27;)[0].string</span><br><span class="line">    # print soup.find_all(&#x27;p&#x27;)[0].string</span><br><span class="line">    return text</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    weather_text = weather()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="2-打开和风网站，网址是这个https-www-heweather-com，然后注册账号，找到自己的KEY，再打开这个API说明。"><a href="#2-打开和风网站，网址是这个https-www-heweather-com，然后注册账号，找到自己的KEY，再打开这个API说明。" class="headerlink" title="2.打开和风网站，网址是这个https://www.heweather.com，然后注册账号，找到自己的KEY，再打开这个API说明。"></a>2.打开和风网站，网址是这个<a class="link"   href="https://www.heweather.com/" >https://www.heweather.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，然后注册账号，找到自己的KEY，再打开这个API说明。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web16.jpg"
                     
                ></p>
<h2 id="可以自己参考API这几种数据，我只使用的3-10天气预报和生活指数，还有天气图片。因为和风网站返回的是json格式数据，如下图。"><a href="#可以自己参考API这几种数据，我只使用的3-10天气预报和生活指数，还有天气图片。因为和风网站返回的是json格式数据，如下图。" class="headerlink" title="可以自己参考API这几种数据，我只使用的3-10天气预报和生活指数，还有天气图片。因为和风网站返回的是json格式数据，如下图。"></a>可以自己参考API这几种数据，我只使用的3-10天气预报和生活指数，还有天气图片。因为和风网站返回的是json格式数据，如下图。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web13.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web14.jpg"
                     
                ></p>
<h2 id="我是使用Python做数据的解析，各种数据已经提取出来，后面都有注释，下面是代码"><a href="#我是使用Python做数据的解析，各种数据已经提取出来，后面都有注释，下面是代码" class="headerlink" title="我是使用Python做数据的解析，各种数据已经提取出来，后面都有注释，下面是代码"></a>我是使用Python做数据的解析，各种数据已经提取出来，后面都有注释，下面是代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( &quot;utf-8&quot; )</span><br><span class="line">import urllib2</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">def download(url):</span><br><span class="line">    html = urllib2.urlopen(url)</span><br><span class="line">    return html.read()</span><br><span class="line">def weather():</span><br><span class="line">    # all全部的天气数据</span><br><span class="line">    all_url = &#x27;https://free-api.heweather.com/v5/weather?city=CN101080101&amp;key=5c043b56de9f4371b0c7f8bee8f5b75e&#x27;</span><br><span class="line">    # 3天预报</span><br><span class="line">    forecast_url = &#x27;https://free-api.heweather.com/v5/forecast?city=CN101080101&amp;key=5c043b56de9f4371b0c7f8bee8f5b75e&#x27;</span><br><span class="line">    #生活指数</span><br><span class="line">    sugg_url = &#x27;https://free-api.heweather.com/v5/suggestion?city=CN101080101&amp;key=5c043b56de9f4371b0c7f8bee8f5b75e&#x27;</span><br><span class="line">    # 天气图标</span><br><span class="line">    photo_url = &#x27;https://cdn.heweather.com/cond_icon/100.png&#x27;</span><br><span class="line"></span><br><span class="line">    #天气情况的内容提取------------开始</span><br><span class="line">    html = download(forecast_url)</span><br><span class="line">    max_tmp = re.findall(&#x27;max&quot;:&quot;(.*?)&quot;&#x27;, html)[0]  #最高温度</span><br><span class="line">    min_tmp = re.findall(&#x27;min&quot;:&quot;(.*?)&quot;&#x27;, html)[0]  #最低温度</span><br><span class="line">    photo = re.findall(&#x27;code_d&quot;:&quot;(.*?)&quot;&#x27;, html)[0] #天气图片</span><br><span class="line">    txt_d = re.findall(&#x27;txt_d&quot;:&quot;(.*?)&quot;&#x27;, html)[0] #天气情况</span><br><span class="line">    dir = re.findall(&#x27;dir&quot;:&quot;(.*?)&quot;&#x27;, html)[0]  # 风向</span><br><span class="line">    sc = re.findall(&#x27;sc&quot;:&quot;(.*?)&quot;&#x27;, html)[0]  # 风力</span><br><span class="line">    print max_tmp,min_tmp,photo,txt_d,dir,sc</span><br><span class="line"></span><br><span class="line">    #生活指数等内容的提取-----------开始</span><br><span class="line">    html = download(sugg_url)</span><br><span class="line">    brf = re.findall(&#x27;brf&quot;:&quot;(.*?)&quot;&#x27;, html)</span><br><span class="line">    txt = re.findall(&#x27;txt&quot;:&quot;(.*?)&quot;&#x27;, html)</span><br><span class="line">    comf_brf = brf[0]#舒适度指数</span><br><span class="line">    comf_txt = txt[0]</span><br><span class="line">    cw_brf = brf[1]#洗车指数</span><br><span class="line">    cw_txt = txt[1]</span><br><span class="line">    drsg_brf = brf[2]#穿衣指数</span><br><span class="line">    drsg_txt = txt[2]</span><br><span class="line">    flu_brf = brf[3]#感冒指数</span><br><span class="line">    flu_txt = txt[3]</span><br><span class="line">    sport_brf = brf[4]#运动指数</span><br><span class="line">    sport_txt = txt[4]</span><br><span class="line">    trav_brf = brf[5]#旅游指数</span><br><span class="line">    trav_txt = txt[5]</span><br><span class="line">    uv_brf = brf[6]# 紫外线指数</span><br><span class="line">    uv_txt = txt[6]</span><br><span class="line">    print comf_brf,comf_txt</span><br><span class="line">    print cw_brf,cw_txt</span><br><span class="line">    print drsg_brf,drsg_txt</span><br><span class="line">    print flu_brf,flu_txt</span><br><span class="line">    print sport_brf,sport_txt</span><br><span class="line">    print trav_brf,trav_txt</span><br><span class="line">    print uv_brf,uv_txt</span><br><span class="line">    # brf = brf[0].decode(&#x27;utf-8&#x27;)</span><br><span class="line">    # dict_html = dict(result)</span><br><span class="line">    # print dict_html</span><br><span class="line">    #json格式无法提取</span><br><span class="line">    # json_html = json.loads(html)</span><br><span class="line">    # print json_html</span><br><span class="line">    # html = str(json_html[&#x27;HeWeather5&#x27;])</span><br><span class="line">    # json_html = json.loads(html)</span><br><span class="line">    # print json_html[&#x27;basic&#x27;]</span><br><span class="line">def main():</span><br><span class="line">    weather()</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<h2 id="数据处理以后的效果"><a href="#数据处理以后的效果" class="headerlink" title="数据处理以后的效果"></a>数据处理以后的效果</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web15.jpg"
                     
                ></p>
<h2 id="最后还有webServer也提供服务，但需要注册，返回的数据也没有和风天气返回的数据丰富，所以我没使用，有兴趣的可以参考。这是网址http-webservice-36wu-com-weatherService-asmx"><a href="#最后还有webServer也提供服务，但需要注册，返回的数据也没有和风天气返回的数据丰富，所以我没使用，有兴趣的可以参考。这是网址http-webservice-36wu-com-weatherService-asmx" class="headerlink" title="最后还有webServer也提供服务，但需要注册，返回的数据也没有和风天气返回的数据丰富，所以我没使用，有兴趣的可以参考。这是网址http://webservice.36wu.com/weatherService.asmx"></a>最后还有webServer也提供服务，但需要注册，返回的数据也没有和风天气返回的数据丰富，所以我没使用，有兴趣的可以参考。这是网址<a class="link"   href="http://webservice.36wu.com/weatherService.asmx" >http://webservice.36wu.com/weatherService.asmx <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web18.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>扩展功能</tag>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI与RPC的区别</title>
    <url>/2019/05/27/aritcle151/</url>
    <content><![CDATA[<h1 id="Java-RMI与RPC的区别"><a href="#Java-RMI与RPC的区别" class="headerlink" title="Java RMI与RPC的区别"></a>Java RMI与RPC的区别</h1><p>一：RPC 远程过程调用 RPC（Remote Procedure Call Protocol）远程过程调用协议，通过网络从远程计算机上请求调用某种服务。 一次RPC调用的过程大概有10步： 1.执行客户端调用语句，传送参数 2.调用本地系统发送网络消息 3.消息传送到远程主机 4.服务器得到消息并取得参数 5.根据调用请求以及参数执行远程过程（服务） 6.执行过程完毕，将结果返回服务器句柄 7.服务器句柄返回结果，调用远程主机的系统网络服务发送结果 8.消息传回本地主机 9.客户端句柄由本地主机的网络服务接收消息 10.客户端接收到调用语句返回的结果数据 二：RMI 远程方法调用 RMI:远程方法调用(Remote Method Invocation)。能够让在客户端 <strong>Java</strong> 虚拟机上的对象像调用本地对象一样调用服务端java 虚拟机中的对象上的方法。 RMI远程调用步骤： 1，客户调用客户端辅助对象stub上的方法 2，客户端辅助对象stub打包调用信息（变量，方法名），通过网络发送给服务端辅助对象skeleton 3，服务端辅助对象skeleton将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象 4，调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象skeleton 5，服务端辅助对象将结果打包，发送给客户端辅助对象stub 6，客户端辅助对象将返回值解包，返回给调用者 7，客户获得返回值 三：RPC与RMI的区别 1：方法调用方式不同： <strong>RMI中是通过在客户端的Stub对象作为远程接口进行远程方法的调用</strong> 。 <strong>每个远程方法都具有方法签名</strong> 。如果一个方法在服务器上执行，但是 <strong>没有相匹配的签名被添加到这个远程接口(stub)上，那么这个新方法就不能被RMI客户方所调用</strong> 。 <strong>RPC中是通过网络服务协议向远程主机发送请求</strong> ，请求包含了一个参数集和一个文本值，通常形成“classname.methodname(参数集)”的形式。RPC远程主机就去搜索与之相匹配的类和方法，找到后就执行方法并把结果编码，通过网络协议发回。 2：适用语言范围不同： RMI只用于Java； RPC是网络服务协议，与操作系统和语言无关。 3：调用结果的返回形式不同： Java是面向对象的，所以RMI的调用结果可以是对象类型或者基本数据类型；</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RMI的结果统一由 **外部数据表示 (External Data Representation, XDR) 语言** 表示，这种语言抽象了字节序类和数据类型结构之间的差异。</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>关于扩展功能新增Markdown编辑器说明</title>
    <url>/2017/06/08/article-84/</url>
    <content><![CDATA[<p>关于扩展功能新增Markdown编辑器说明</p>
<h1 id="欢迎使用-Rain-Markdown-编辑器"><a href="#欢迎使用-Rain-Markdown-编辑器" class="headerlink" title="欢迎使用 Rain Markdown 编辑器"></a>欢迎使用 Rain Markdown 编辑器</h1><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><h3 id="Markdown-是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体-或者-斜体-某些文字，更棒的是，它还可以"><a href="#Markdown-是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体-或者-斜体-某些文字，更棒的是，它还可以" class="headerlink" title="Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以"></a>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</h3><blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<h2 id="所以我在扩展功能中添加了在线编辑Markdown的功能，可以在-我的博客-菜单栏中点击，也可以直接点击-Rain-Markdown-编辑器-跳转过去，本次更新只是添加了基本的编辑功能，后期会根据需要添加一些用户的概念，实现md文档的保存。"><a href="#所以我在扩展功能中添加了在线编辑Markdown的功能，可以在-我的博客-菜单栏中点击，也可以直接点击-Rain-Markdown-编辑器-跳转过去，本次更新只是添加了基本的编辑功能，后期会根据需要添加一些用户的概念，实现md文档的保存。" class="headerlink" title="所以我在扩展功能中添加了在线编辑Markdown的功能，可以在 我的博客 菜单栏中点击，也可以直接点击 Rain Markdown 编辑器 跳转过去，本次更新只是添加了基本的编辑功能，后期会根据需要添加一些用户的概念，实现md文档的保存。"></a>所以我在扩展功能中添加了在线编辑Markdown的功能，可以在 <a class="link"   href="http://www.rain1024.com/" >我的博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 菜单栏中点击，也可以直接点击 <a class="link"   href="http://www.rain1024.com/function/index.php?c=text" >Rain Markdown 编辑器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 跳转过去，本次更新只是添加了基本的编辑功能，后期会根据需要添加一些用户的概念，实现md文档的保存。</h2><h2 id="如下图"><a href="#如下图" class="headerlink" title="如下图"></a>如下图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/md1.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Git以及几种远程库的介绍</title>
    <url>/2017/06/05/article-git83/</url>
    <content><![CDATA[<p>关于Git以及几种远程库的介绍</p>
<h2 id="网上关于Git的介绍和教程有很多，我只是会基本的使用，但对Git这个功能很感兴趣，经过两天的研究，把我使用的一些基本操作和会使用的几个远程仓库写出来，以供参考。"><a href="#网上关于Git的介绍和教程有很多，我只是会基本的使用，但对Git这个功能很感兴趣，经过两天的研究，把我使用的一些基本操作和会使用的几个远程仓库写出来，以供参考。" class="headerlink" title="网上关于Git的介绍和教程有很多，我只是会基本的使用，但对Git这个功能很感兴趣，经过两天的研究，把我使用的一些基本操作和会使用的几个远程仓库写出来，以供参考。"></a>网上关于Git的介绍和教程有很多，我只是会基本的使用，但对Git这个功能很感兴趣，经过两天的研究，把我使用的一些基本操作和会使用的几个远程仓库写出来，以供参考。</h2><h2 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h2><h3 id="我对Git的理解是可以不断保存开发进度的一个控制软件，只要这个文件夹设置为git仓库，我以后对代码做出的任何更改，都是可以追查，撤销的，不怕发生什么不可逆转的错误。"><a href="#我对Git的理解是可以不断保存开发进度的一个控制软件，只要这个文件夹设置为git仓库，我以后对代码做出的任何更改，都是可以追查，撤销的，不怕发生什么不可逆转的错误。" class="headerlink" title="我对Git的理解是可以不断保存开发进度的一个控制软件，只要这个文件夹设置为git仓库，我以后对代码做出的任何更改，都是可以追查，撤销的，不怕发生什么不可逆转的错误。"></a>我对Git的理解是可以不断保存开发进度的一个控制软件，只要这个文件夹设置为git仓库，我以后对代码做出的任何更改，都是可以追查，撤销的，不怕发生什么不可逆转的错误。</h3><h3 id="具体的教程可以参考菜鸟教程，和廖雪峰git教程，这里我只列举出我常使用的命令语句"><a href="#具体的教程可以参考菜鸟教程，和廖雪峰git教程，这里我只列举出我常使用的命令语句" class="headerlink" title="具体的教程可以参考菜鸟教程，和廖雪峰git教程，这里我只列举出我常使用的命令语句"></a>具体的教程可以参考<a class="link"   href="http://www.runoob.com/git/git-tutorial.html" >菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，和<a class="link"   href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" >廖雪峰git教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这里我只列举出我常使用的命令语句</h3><ul>
<li>git init (新建仓库)</li>
<li>git add (添加要放到工作区的文件，如果是.，则表示所有文件)</li>
<li>git status (显示当前文件的状态，是否提交，或者是否在工作区，-s显示简略信息)</li>
<li>git commit -m “” (将工作区的文件保存到仓储，双引号里是这次更改的说明，必写)</li>
<li>git clone [url] (使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。)</li>
<li>git diff (执行 git diff 来查看执行 git status 的结果的详细信息。)</li>
<li><ul>
<li>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</li>
</ul>
</li>
<li><ul>
<li>尚未缓存的改动：git diff</li>
</ul>
</li>
<li><ul>
<li>查看已缓存的改动： git diff –cached</li>
</ul>
</li>
<li><ul>
<li>查看已缓存的与未缓存的所有改动：git diff HEAD</li>
</ul>
</li>
<li><ul>
<li>显示摘要而非整个 diff：git diff –stat</li>
</ul>
</li>
<li>git rm (会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。)</li>
<li>git remote add origin git@server-name:path&#x2F;repo-name.git (关联一个远程库)</li>
<li>git push -u origin master (关联后，第一次推送需要使用这个命令)</li>
<li>git push origin master (向远程库推送)</li>
<li>git pull –rebase origin master (如果第一次推送时远程库内容不为空，则使用这个命令将远程库的内容同步到本地，也可以在push后加-f，强制推送)</li>
</ul>
<h2 id="远程库介绍"><a href="#远程库介绍" class="headerlink" title="远程库介绍"></a>远程库介绍</h2><h3 id="关于远程库，使用的最多的应该就是GitHub了，但GitHub只有公有仓库，而且访问有些慢，以及网站偶尔会被墙了，所以我一些私有的代码就放到其他两个仓库里，分别是码云和阿里仓库。"><a href="#关于远程库，使用的最多的应该就是GitHub了，但GitHub只有公有仓库，而且访问有些慢，以及网站偶尔会被墙了，所以我一些私有的代码就放到其他两个仓库里，分别是码云和阿里仓库。" class="headerlink" title="关于远程库，使用的最多的应该就是GitHub了，但GitHub只有公有仓库，而且访问有些慢，以及网站偶尔会被墙了，所以我一些私有的代码就放到其他两个仓库里，分别是码云和阿里仓库。"></a>关于远程库，使用的最多的应该就是GitHub了，但GitHub只有公有仓库，而且访问有些慢，以及网站偶尔会被墙了，所以我一些私有的代码就放到其他两个仓库里，分别是码云和阿里仓库。</h3><h3 id="码云还是很有名的，中国的开源社区，每个用户提供1000个项目，每个项目好像是最大1G，应该足够用了，又不是当网盘使用，项目可以自定公有私有，而且码云还有APP可以使用，码云除了提供最基础的-Git-代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull-Request、打包下载任意版本、Issue、Wiki-、保护分支、代码质量检测、PaaS-项目演示等方便管理、开发、协作、共享的功能。"><a href="#码云还是很有名的，中国的开源社区，每个用户提供1000个项目，每个项目好像是最大1G，应该足够用了，又不是当网盘使用，项目可以自定公有私有，而且码云还有APP可以使用，码云除了提供最基础的-Git-代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull-Request、打包下载任意版本、Issue、Wiki-、保护分支、代码质量检测、PaaS-项目演示等方便管理、开发、协作、共享的功能。" class="headerlink" title="码云还是很有名的，中国的开源社区，每个用户提供1000个项目，每个项目好像是最大1G，应该足够用了，又不是当网盘使用，项目可以自定公有私有，而且码云还有APP可以使用，码云除了提供最基础的 Git 代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull Request、打包下载任意版本、Issue、Wiki 、保护分支、代码质量检测、PaaS 项目演示等方便管理、开发、协作、共享的功能。"></a>码云还是很有名的，中国的开源社区，每个用户提供1000个项目，每个项目好像是最大1G，应该足够用了，又不是当网盘使用，项目可以自定公有私有，而且码云还有APP可以使用，码云除了提供最基础的 Git 代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull Request、打包下载任意版本、Issue、Wiki 、保护分支、代码质量检测、PaaS 项目演示等方便管理、开发、协作、共享的功能。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/git2.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/git3.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/git1.jpg"
                     
                ></p>
<h3 id="阿里仓库，是我在买云主机是看到的，每人应该是有50G的存储空间，使用起来还可以，但是有些慢，很访问阿里云的控制台一样慢，而且里面的界面全是英文，我很奇怪，再其他的和GitHub一样，我只是拿它作为存储文件的库，代码库还是用码云比较好。"><a href="#阿里仓库，是我在买云主机是看到的，每人应该是有50G的存储空间，使用起来还可以，但是有些慢，很访问阿里云的控制台一样慢，而且里面的界面全是英文，我很奇怪，再其他的和GitHub一样，我只是拿它作为存储文件的库，代码库还是用码云比较好。" class="headerlink" title="阿里仓库，是我在买云主机是看到的，每人应该是有50G的存储空间，使用起来还可以，但是有些慢，很访问阿里云的控制台一样慢，而且里面的界面全是英文，我很奇怪，再其他的和GitHub一样，我只是拿它作为存储文件的库，代码库还是用码云比较好。"></a>阿里仓库，是我在买云主机是看到的，每人应该是有50G的存储空间，使用起来还可以，但是有些慢，很访问阿里云的控制台一样慢，而且里面的界面全是英文，我很奇怪，再其他的和GitHub一样，我只是拿它作为存储文件的库，代码库还是用码云比较好。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/git4.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/git5.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/git6.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员：放下技术情节，与你的同伴一起进步</title>
    <url>/2017/01/29/article0007/</url>
    <content><![CDATA[<p>原标题：技术人员应真正学会的第二课程 如果说掌握一门赖以生计的技术是技术人员要学会的第一课的话， 那么， 我觉得， 技术人员要真正学会的第二课，不是技术，而是业务、交流与协作，学会关心其他工作伙伴的工作情况和进展。 为什么这么说呢？ 因为技术人员太容易陷入“孤岛”状态，更注重自己的工作任务的完成，忽视其他工作伙伴的工作，甚至一无所知。 我就一直犯这样的错误。我敢说，对内心我还是比较明白清楚的，但是对外面所发生的事情实在是知之甚少，这不是好的状态。 一个开明、开放的程序员不应该囿于自己狭隘的小天地，而是更广阔地去看待工作和职业，和同伴一起进步和成功。 <strong>为什么要关心业务？</strong> 很多技术人员都立志成为系统架构师， 那是<a class="link"   href="http://www.kuqin.com/" >编程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>领域的“圣杯级职业”。问题是， 系统架构本身是为了业务需求和扩展而服务的，必须充分理解业务需求和未来的发展趋势，深入理解系统所涉及的数据及分布， 才能作出更可靠的设计决策。如果对业务知之甚少，以为仅靠书上说的那一套，或者以前的零碎经验，就能够胜任的话，那这个项目多半要失败的。 因此，即使立志要成为系统架构师，也要对业务有很深的理解。 其次， 技术的发挥必须有用武之地。如果没有足够强度和有挑战性的业务需求和扩展， 足够多的问题的磨炼，技术的提升又从何谈起？ 仅仅靠阅读那些技术书籍吗？ 那只能提供一个指导的作用罢了；真正还是要在实战中得到提高。 如果一个技术人员对业务不感兴趣，只对技术感兴趣， 那会发生什么事情呢？ 他将只能满足于使用自己所熟悉的技术去完成上面分派下来的任务； 也许今天是做一个系统A， 明天是做另外一个类似的系统B。 他对系统涉及的各种业务都不甚了解，也不清楚行业领域的发展状况， 就只能局限于使用技术来做各种具体的功能，无法提出中肯的建议。他的职业发展将严重耦合于所掌握的技术。如果该技术保持比较长久的生命力，那么， 他还能兵来将挡水来土淹， 但无论如何，也只能局限于成为这门技术的“高级工程师”而已；如果该技术开始被淘汰，那就悲剧了。 換一种方式。如果一个技术人员很关心业务。 那么，经过一段时间的磨练之后，他能够提出中肯的意见，知晓行业领域的发展状况， 在深入理解业务的基础上，同时发展相应的技术专长， 做一个在业务和技术方面并行发展的技术人员。 他的职业发展将不是完全耦合于特定的某种开发技术，而具备了更大的灵活性。 你知道吗？ 三国时期，我最佩服的是徐元直先生。 他是一个技术和业务同样精通的人才； 技术方面， 作战思想丰富， 业务方面， 实际指挥作战和应变能力都很强， 这样的人才， 难怪即使不献一策， 曹操这样的人物也愿意留他在帐下， 让他无功受禄，—— 能够不让他为竞争对手所用就已经是大功一件了。 <strong>放下技术情结</strong> 技术人员要学会放下心中的“技术情结”。 因为我也是技术人员，也有技术崇拜的倾向， 也能够感受到这种情结带来的益处和束缚。 “技术情结” 表现在哪里呢？ 你期望能够尽可能多尽可能深入地掌握各种技术，这给你带来一种很好的安全感，因为有了强有力的依靠，—— 你对自己的能力充分自信； 但也束缚了一个人的发展： 他的内心容易更加依赖于自己的能力，而对别人的能力抱有怀疑，难以与别人形成优势互补和良好搭档，很难发挥出超出自己能力的能量。 是的， 你学了 C, java, python , Lisp , …., 还可以列出更长，你还想掌握并发编程，软件架构等等，你的同事却只会C， java 或 python , 会敲入一些命令， 这样你就舒服了吗？ 感到优越了吗？ 高枕无忧了吗？ 成为核心骨干了吗？ 技术是学无止境的， 一个人的精力却有限，就算一个人在某个领域里非常精通，那么同时也可能意味着这个人在其它方面是孤陋寡闻，“技术牛人” 和 “科学大师” 一样， 可能只是一个美妙的光环，是程序员给自己套上的铁链。不要妄想一揽子全抓在手里， 确立自己的专长， 善于与别人优势互补，良好协作才是。敢于舍弃 “技术情结” 给自己带来的安全感， 才能走出更广阔的空间。 <strong>技术人员的通病</strong> 大多数技术人员，包括我在内， 都不甚明了自己究竟能够利用计算机做什么。 我们只是年复一年日复一日地学习和使用某种编程语言和技术来写程序，以为这就是利用计算机的唯一的正统方式。你用过MATLAB吗， 一种很强悍的科学计算软件？ 那里一条命令， 就顶一个编程人员几个月的努力。作为一名计算机专业人士， 学习了那么多专业知识，难道仅仅只是为了掌握一两门编程语言和技术来写点程序养家糊口吗？ 如果一个程序员懂得去使用一些专业软件，学习一些信息处理、统计分析方法， 那么， 他所能提供的价值可能远远超过一个普通开发者所能提供的价值。具备编程能力和对编程技术的领悟，是技术人员拥有的特别优势， 但并不意味着一个技术人员能够干的活就只是编程。只是，大多数技术人员，由于各种原因，就把自己定位在一名普通的程序开发人员身上， 跳不出“开发人员”的视角。 我们总是沉迷于重新发明轮子，以及被迫重新发明轮子，用不同的编程语言，或者用同一套技术框架，搭完了管理系统ABCDEFG，再搭HIJKLMN，以及OPQRSTUVWXYZ， 感觉很有成就感吧？ 不懂尊重和利用别人已有的工作成果，低水平重复建设，耗费大量的时间、精力、人力和资源成本去做那些没有太大意义的事情； 总是沉迷于争论语言、技术之间的孰优孰劣，却甚少关心哪些事当做不当做，甚少关心做那些关键重要的事情有哪些方案以及孰优孰劣；总是沉迷于某款科技产品的宣传和特性，甚少关心环境问题和儿童失学问题，如果说程序员有什么可怜可恨之处，那绝对不在于这一族自甘被孤立，难以为人所理解， 而在于他们自身的心态就将自己锁在了井底之中，还自以为很与众不同。 假设你不再为公司编程，而为自己写程序， 你知道自己该干些什么吗？ 你会感到迷茫吗？ 如果我们连自己该干什么能干什么都不清楚， 那么徒有一身武艺，又有什么用呢？ 大多数技术人员，包括我在内，都还不懂得主动与工作伙伴良好协作，只是因为工作关系而不自觉地交流和协作。不信，在你工作之余的时候，你会主动邀请别人一起来编程，共同去做一个有用的产品， 还是埋头去学习技术，孤立地去做一些技术实验，来掌握所谓的某门开发技术？ 一个技术人员对于另一个技术人员的认可往往起始于对其技术能力的是否认可。技术人员面试的时候通常会更关注： 他掌握了哪些技术？ 对这些技术的掌握程度如何？ 而不是这个人利用自己的技术能力和所学做了哪些影响卓著的事情。这就导致了： 技术人员往往更关注自己的技术能力的发展，而忽视其他能力的培养。 因此，大多数技术人员，包括我在内， 都有四个通病： 一，不清楚自己究竟能够利用计算机做什么，不懂得如何充分利用计算机的真正威力； 二. 不能主动与别人优势互补和良好协作； 三。放不下技术情结； 四. 局限于狭隘的自我优越感，以及伴随而生的强迫症。这四个通病导致一个人永远局限于只见一叶不见林的狭隘视角。 <strong>真正优秀的技术人才</strong> 作为一名技术人员，你对公司的业务发展能够提出自己的建议吗？ 你有能力说服工作伙伴和主管来采纳你的提议吗？ 能够集思广益，融众人之所长吗？ 我认为，一个真正优秀的技术人才，应当具备这种多方面的能力，除了技术专长，他具备说服能力，集思广益， 能够有力地推动事情的发展。企业也应当提供机会，让技术人员参与更广阔的工作，而不仅仅是写代码和完成需求功能。 我相信，从企业聘用人才的角度来说，它们更看重一名技术人才究竟产生了怎样的影响。只是当大量技术人员没有什么可证明自己做过有影响力的事情的情况下，才不得不求其次，去聘用那些在技术能力上有更高造诣的技术人员； 从技术人员的角度来说，因为他没有什么可以证明自己确实做过有影响力的事情，只好倚靠有限的技术水平为自己寻一个差强人意的安身之所。我觉得， 那些没有做过有影响力的事情的技术人员，相比那些利用自己所学做过有价值的事情的人来说，其职业高度就已经低了一个档次，尽管后者可能在技术能力上要差一些。 事实上，我敢断言： 中国不缺技术能力优秀的人才，虽然技术级别与国外还差一两个档次， 但还是人才济济的。确实有很多人依然努力成为最好的技术人才，致力于引进国外先进技术。中国缺少的是那些懂得利用计算机能力创造价值、服务和效益的技术人才。 这种技术人才必须能够放下技术情结，以更开放、开明的心态去与其他的人良好协作，优势互补， 一个真正优秀的产品往往是多个人共同协作完成，孤胆英雄的年代已经过去。即便是一个黑客，如果他能与另一个黑客强强联合， 也能产生出比自己一个人更强大的能量。要知道，苹果至少也是由乔布斯和沃兹尼亚克两个人初创起来的。 <strong>要一起进步和成功</strong></p>
<p>最后， 如果一个技术人员通过重重磨难终于成为了很牛级的人物，而他的亲友早已埋没于尘世中，过着一般的日子， 他的成功又有多大意义呢？ 应该聚合所有人的才智和经验，一起创造共赢的结局才对，缺了谁都不行。人生苦短，正是因为一路上有了亲友的陪伴， 才不会寂寞， 人生才不至于苍白。不要只顾着自己一个人往前走路， 把亲友们抛在看不见的后面。 转载自<a class="link"   href="http://www.kuqin.com/itlife/20130723/334668.html" >http://www.kuqin.com/itlife/20130723/334668.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Thought</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
      </tags>
  </entry>
  <entry>
    <title>宽带速率的解释与换算</title>
    <url>/2017/02/04/article0018/</url>
    <content><![CDATA[<blockquote>
<h3 id="关于宽带速率的换算引发的思考"><a href="#关于宽带速率的换算引发的思考" class="headerlink" title="关于宽带速率的换算引发的思考"></a>关于宽带速率的换算引发的思考</h3></blockquote>
<h5 id="平时我们在购买宽带是经常都是说百兆光纤什么的，我一开始以为是真的100mb-x2F-s，后来发现我家宽带是50兆的，但下载速率最高也只有6-7mb-x2F-s，后来明白了，宽带宣传是所用的名称为-50mbps-而不是我们所想的50mb-x2F-s，也就是说运营商用的单位是字节Byte-平时我们所说的什么下载速度都是比特bit。不知道这是不是一种忽悠，如果没有学习过专业的知识很难分清这两种单位简称都是mb的概念，所以今天就好好研究一下。"><a href="#平时我们在购买宽带是经常都是说百兆光纤什么的，我一开始以为是真的100mb-x2F-s，后来发现我家宽带是50兆的，但下载速率最高也只有6-7mb-x2F-s，后来明白了，宽带宣传是所用的名称为-50mbps-而不是我们所想的50mb-x2F-s，也就是说运营商用的单位是字节Byte-平时我们所说的什么下载速度都是比特bit。不知道这是不是一种忽悠，如果没有学习过专业的知识很难分清这两种单位简称都是mb的概念，所以今天就好好研究一下。" class="headerlink" title="平时我们在购买宽带是经常都是说百兆光纤什么的，我一开始以为是真的100mb&#x2F;s，后来发现我家宽带是50兆的，但下载速率最高也只有6-7mb&#x2F;s，后来明白了，宽带宣传是所用的名称为 50mbps 而不是我们所想的50mb&#x2F;s，也就是说运营商用的单位是字节Byte,平时我们所说的什么下载速度都是比特bit。不知道这是不是一种忽悠，如果没有学习过专业的知识很难分清这两种单位简称都是mb的概念，所以今天就好好研究一下。"></a>平时我们在购买宽带是经常都是说百兆光纤什么的，我一开始以为是真的100mb&#x2F;s，后来发现我家宽带是50兆的，但下载速率最高也只有6-7mb&#x2F;s，后来明白了，宽带宣传是所用的名称为 50mbps 而不是我们所想的50mb&#x2F;s，也就是说运营商用的单位是字节Byte,平时我们所说的什么下载速度都是比特bit。不知道这是不是一种忽悠，如果没有学习过专业的知识很难分清这两种单位简称都是mb的概念，所以今天就好好研究一下。</h5><ul>
<li><p>在计算机科学中，<strong>bit</strong>是表示信息的最小单位，叫做二进制位；一般用0和1表示。Byte叫做字节，由8个位（8bit）组成一个字节(1Byte)，用于表示计算机中的一个字符。bit与Byte之间可以进行换算，其换算关系为：1Byte&#x3D;8bit（或简写为：1B&#x3D;8b）；在实际应用中一般用简称，即1bit简写为1b(注意是小写英文字母b)，1Byte简写为1B（注意是大写英文字母B）。这就很奇怪了，买的时候说大B，给我们用的时候说小b。</p>
</li>
<li><p>在计算机网络或者是网络运营商中，一般，宽带速率的单位用bps(或b&#x2F;s)表示；bps表示比特每秒即表示每秒钟传输多少位信息，是bit per second的缩写。在实际所说的1M带宽的意思是1Mbps（是兆比特每秒Mbps不是兆字节每秒MBps）。 换算公式：<strong>1B&#x3D;8b 1B&#x2F;s&#x3D;8b&#x2F;s(或1Bps&#x3D;8bps</strong> 实际书写规范中B应表示Byte(字节)，b应表示bit(比特)，但在平时的实际书写中有的把bit 和Byte都混写为b ，如把Mb&#x2F;s和MB&#x2F;s都混写为Mb&#x2F;s，导致人们在实际计算中因单位的混淆而出错。</p>
</li>
</ul>
<h5 id="所以我先算一下50兆宽带也就是50MB，需要选换算一下，1MB-x3D-1024KB，（50-1024）-x3D-51200KB字节，1Byte-x3D-8bit，正常使用速率大概为（51200）-x2F-8-x3D-6400Kb比特，也就是每秒有（6400-x2F-1024）-x3D-6-24Mb-x2F-s的下载速度，有兴趣的可以对照着算自己家的，或者直接参考下面的表格"><a href="#所以我先算一下50兆宽带也就是50MB，需要选换算一下，1MB-x3D-1024KB，（50-1024）-x3D-51200KB字节，1Byte-x3D-8bit，正常使用速率大概为（51200）-x2F-8-x3D-6400Kb比特，也就是每秒有（6400-x2F-1024）-x3D-6-24Mb-x2F-s的下载速度，有兴趣的可以对照着算自己家的，或者直接参考下面的表格" class="headerlink" title="所以我先算一下50兆宽带也就是50MB，需要选换算一下，1MB &#x3D; 1024KB，（50*1024） &#x3D; 51200KB字节，1Byte&#x3D; 8bit，正常使用速率大概为（51200）&#x2F;8 &#x3D; 6400Kb比特，也就是每秒有（6400&#x2F;1024） &#x3D; 6.24Mb&#x2F;s的下载速度，有兴趣的可以对照着算自己家的，或者直接参考下面的表格."></a>所以我先算一下50兆宽带也就是50MB，需要选换算一下，1MB &#x3D; 1024KB，（50*1024） &#x3D; 51200KB字节，1Byte&#x3D; 8bit，正常使用速率大概为（51200）&#x2F;8 &#x3D; 6400Kb比特，也就是每秒有（6400&#x2F;1024） &#x3D; 6.24Mb&#x2F;s的下载速度，有兴趣的可以对照着算自己家的，或者直接参考下面的表格.</h5><ul>
<li>但这只是理论上的速度,是用户申请的宽带业务速率指技术上所能达到的最大理论速率值。<strong>在网络概论里学到的，数据传输效率的有效率是数据&#x2F;总数据，还有去掉各种协议的头部，IP,TCP等为12%。</strong>但用户上网时还受到用户电脑软硬件的配置、所浏览网站的地址、终端网站带宽等情况的影响。因此，用户上网时的速率通常低于理论速率值。 理论上，2M，即2Mb&#x2F;s，宽带理论速率是 256KB&#x2F;S。实际速率大约为103–200KB&#x2F;S。（其原 因是受用户计算机性能、网络设备质量、资源使用情况、网络高峰期、网站服务能力、线路衰耗、信号衰减等多因素的影响而造成的）。4M，即4Mb&#x2F;s宽带理论速率是 512KB&#x2F;S 实际速率大约为200—440KB&#x2F;S。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/wangluo1.png"
                     
                ></li>
</ul>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>网络概论</tag>
      </tags>
  </entry>
  <entry>
    <title>聊天室增加聊天机器人功能</title>
    <url>/2017/09/07/article100/</url>
    <content><![CDATA[<h2 id="关于增加聊天机器人功能的说明"><a href="#关于增加聊天机器人功能的说明" class="headerlink" title="关于增加聊天机器人功能的说明"></a>关于增加聊天机器人功能的说明</h2><h3 id="昨天增加了聊天机器人的功能，以前如果有人进入聊天室，因为我不是经常在，大多说几句话就退出了，这次可以和聊天室里的机器人聊天，还能测试聊天室里的bug，机器人如下图。"><a href="#昨天增加了聊天机器人的功能，以前如果有人进入聊天室，因为我不是经常在，大多说几句话就退出了，这次可以和聊天室里的机器人聊天，还能测试聊天室里的bug，机器人如下图。" class="headerlink" title="昨天增加了聊天机器人的功能，以前如果有人进入聊天室，因为我不是经常在，大多说几句话就退出了，这次可以和聊天室里的机器人聊天，还能测试聊天室里的bug，机器人如下图。"></a>昨天增加了聊天机器人的功能，以前如果有人进入聊天室，因为我不是经常在，大多说几句话就退出了，这次可以和聊天室里的机器人聊天，还能测试聊天室里的bug，机器人如下图。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web47.jpg"
                     
                > ﻿## 简介</p>
<h2 id="Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。"><a href="#Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。" class="headerlink" title="Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。"></a>Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。</h2><h2 id="整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。"><a href="#整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。" class="headerlink" title="整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。"></a>整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。</h2><h1 id="聊天室我已经放到服务器里，有想要尝试的可以直接访问chat-rain1024-com"><a href="#聊天室我已经放到服务器里，有想要尝试的可以直接访问chat-rain1024-com" class="headerlink" title="聊天室我已经放到服务器里，有想要尝试的可以直接访问chat.rain1024.com"></a>聊天室我已经放到服务器里，有想要尝试的可以直接访问<a href="chat.rain1024.com">chat.rain1024.com</a></h1><h2 id="开发日志"><a href="#开发日志" class="headerlink" title="开发日志"></a>开发日志</h2><h4 id="更新说明：1-修改了遍历数据库数量的操作，以前是直接提取出来所有数据，然后计算，得到的数量就直接作为最大id，但是如果有id被删除，这样就会出错，这个bug现在被修改为获取列表中最后一个数据的id值，2-修改了登录时添加用户后没有得到id的bug，以前一直没有发现，今天调试的时候才发现，我以为在添加数据后就会返回所添加数据的id，但其实返回的是boolean值，用于判断是否添加成功，现在已经修改了，直接在添加后查找到这条数据，3-将轮询的时间加长，4-添加了用户进入时的欢迎语，并可以自行根据在线时长和状态判断，5-最最关键的是加入了聊天机器人的功能，当然只是接口，但也修改了很久的这个接口，聊天时可以选择和机器人说话，机器人能够自动回复，这个功能很强大，很好玩"><a href="#更新说明：1-修改了遍历数据库数量的操作，以前是直接提取出来所有数据，然后计算，得到的数量就直接作为最大id，但是如果有id被删除，这样就会出错，这个bug现在被修改为获取列表中最后一个数据的id值，2-修改了登录时添加用户后没有得到id的bug，以前一直没有发现，今天调试的时候才发现，我以为在添加数据后就会返回所添加数据的id，但其实返回的是boolean值，用于判断是否添加成功，现在已经修改了，直接在添加后查找到这条数据，3-将轮询的时间加长，4-添加了用户进入时的欢迎语，并可以自行根据在线时长和状态判断，5-最最关键的是加入了聊天机器人的功能，当然只是接口，但也修改了很久的这个接口，聊天时可以选择和机器人说话，机器人能够自动回复，这个功能很强大，很好玩" class="headerlink" title="更新说明：1.修改了遍历数据库数量的操作，以前是直接提取出来所有数据，然后计算，得到的数量就直接作为最大id，但是如果有id被删除，这样就会出错，这个bug现在被修改为获取列表中最后一个数据的id值，2.修改了登录时添加用户后没有得到id的bug，以前一直没有发现，今天调试的时候才发现，我以为在添加数据后就会返回所添加数据的id，但其实返回的是boolean值，用于判断是否添加成功，现在已经修改了，直接在添加后查找到这条数据，3.将轮询的时间加长，4.添加了用户进入时的欢迎语，并可以自行根据在线时长和状态判断，5.最最关键的是加入了聊天机器人的功能，当然只是接口，但也修改了很久的这个接口，聊天时可以选择和机器人说话，机器人能够自动回复，这个功能很强大，很好玩"></a>更新说明：1.修改了遍历数据库数量的操作，以前是直接提取出来所有数据，然后计算，得到的数量就直接作为最大id，但是如果有id被删除，这样就会出错，这个bug现在被修改为获取列表中最后一个数据的id值，2.修改了登录时添加用户后没有得到id的bug，以前一直没有发现，今天调试的时候才发现，我以为在添加数据后就会返回所添加数据的id，但其实返回的是boolean值，用于判断是否添加成功，现在已经修改了，直接在添加后查找到这条数据，3.将轮询的时间加长，4.添加了用户进入时的欢迎语，并可以自行根据在线时长和状态判断，5.最最关键的是加入了聊天机器人的功能，当然只是接口，但也修改了很久的这个接口，聊天时可以选择和机器人说话，机器人能够自动回复，这个功能很强大，很好玩</h4><h4 id="更新说明：1-重写了请求函数，增加了html转义的安全验证，2-增加了留言板功能，3-可以修改头像了"><a href="#更新说明：1-重写了请求函数，增加了html转义的安全验证，2-增加了留言板功能，3-可以修改头像了" class="headerlink" title="更新说明：1.重写了请求函数，增加了html转义的安全验证，2.增加了留言板功能，3.可以修改头像了"></a>更新说明：1.重写了请求函数，增加了html转义的安全验证，2.增加了留言板功能，3.可以修改头像了</h4><h4 id="2-增加了公告栏，可以显示聊天室的注意事项，和更新说明等内容，方便交流，3-增加了留言板，有问题可以随时留言，4-有用户登录时，会发邮件通知我，方便了对聊天室的关注，因为这几天我都忘了，没想到真的有人用聊天室，所以没来得及修改bug"><a href="#2-增加了公告栏，可以显示聊天室的注意事项，和更新说明等内容，方便交流，3-增加了留言板，有问题可以随时留言，4-有用户登录时，会发邮件通知我，方便了对聊天室的关注，因为这几天我都忘了，没想到真的有人用聊天室，所以没来得及修改bug" class="headerlink" title="2.增加了公告栏，可以显示聊天室的注意事项，和更新说明等内容，方便交流，3.增加了留言板，有问题可以随时留言，4.有用户登录时，会发邮件通知我，方便了对聊天室的关注，因为这几天我都忘了，没想到真的有人用聊天室，所以没来得及修改bug"></a>2.增加了公告栏，可以显示聊天室的注意事项，和更新说明等内容，方便交流，3.增加了留言板，有问题可以随时留言，4.有用户登录时，会发邮件通知我，方便了对聊天室的关注，因为这几天我都忘了，没想到真的有人用聊天室，所以没来得及修改bug</h4><h4 id="更新说明：本次修复了js中提取json时的evel函数，这个函数会导致游览器报错，2"><a href="#更新说明：本次修复了js中提取json时的evel函数，这个函数会导致游览器报错，2" class="headerlink" title="更新说明：本次修复了js中提取json时的evel函数，这个函数会导致游览器报错，2"></a>更新说明：本次修复了js中提取json时的evel函数，这个函数会导致游览器报错，2</h4><h4 id="更新了说明文档"><a href="#更新了说明文档" class="headerlink" title="更新了说明文档"></a>更新了说明文档</h4><h4 id="更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次"><a href="#更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次" class="headerlink" title="更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次"></a>更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次</h4><h4 id="更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录"><a href="#更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录" class="headerlink" title="更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录"></a>更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录</h4><h4 id="项目开始开发，基础的thinkphp框架"><a href="#项目开始开发，基础的thinkphp框架" class="headerlink" title="项目开始开发，基础的thinkphp框架"></a>项目开始开发，基础的thinkphp框架</h4><h2 id="聊天室截图"><a href="#聊天室截图" class="headerlink" title="聊天室截图"></a>聊天室截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php24.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php25.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>聊天室</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建微信订阅号后台服务教程</title>
    <url>/2017/09/25/article101/</url>
    <content><![CDATA[<p> </p>
<h1 id="搭建微信订阅号后台服务"><a href="#搭建微信订阅号后台服务" class="headerlink" title="搭建微信订阅号后台服务"></a>搭建微信订阅号后台服务</h1><h2 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h2><blockquote>
<p>任务时间：20min ~ 40min</p>
</blockquote>
<p>微信公众平台需要配置服务器地址 URL 访问，在实验开始之前，我们要准备域名。</p>
<h3 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h3><p>如果您还没有域名，可以<a class="link"   href="https://dnspod.qcloud.com/?fromSource=lab"  title="null">在腾讯云上选购 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，过程可以参考下面的视频。</p>
<ul>
<li><em>视频 - 在腾讯云上购买域名</em></li>
</ul>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;您的 CVM IP 地址&gt;</span><br></pre></td></tr></table></figure></div>

<p>在腾讯云购买的域名，可以_到控制台添加解析记录_，过程可参考下面的视频：</p>
<ul>
<li><em>视频 - 如何在腾讯云上解析域名</em></li>
</ul>
<p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效 [<a href="#stage-1-step-2-replace">?</a>]，如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.yourmpdomain.com</span><br></pre></td></tr></table></figure></div>

<p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>
<blockquote>
<p>注意替换下面命令中的 <code>www.yourmpdomain.com</code> 为您自己的注册的域名</p>
</blockquote>
<h2 id="申请微信个人订阅号"><a href="#申请微信个人订阅号" class="headerlink" title="申请微信个人订阅号"></a>申请微信个人订阅号</h2><blockquote>
<p>任务时间：5min ~ 10min</p>
</blockquote>
<p>在开始搭建我们的订阅号服务器之前，需要先拿到订阅号相关信息。</p>
<h3 id="注册开发者账号"><a href="#注册开发者账号" class="headerlink" title="注册开发者账号"></a>注册开发者账号</h3><p>如果你还不是微信订阅号开发者，请先在微信公众平台注册：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mp.weixin.qq.com</span><br></pre></td></tr></table></figure></div>

<p>具体注册流程可参考如下视频：</p>
<ul>
<li><em>视频 - 注册开发者账号</em></li>
</ul>
<p>若您已注册，请点击下一步。</p>
<h3 id="获取微信订阅号公众平台认证字段信息"><a href="#获取微信订阅号公众平台认证字段信息" class="headerlink" title="获取微信订阅号公众平台认证字段信息"></a>获取微信订阅号公众平台认证字段信息</h3><p>我们需要获取3个字段：AppID Token EncodingAESKey。</p>
<p>登录微信公众平台，依次进入 <code>开发</code> - <code>基本配置</code> 可以拿到 AppID。</p>
<p>在<code>基本配置</code> - <code>服务器配置</code> - <code>修改配置</code> 表单中：</p>
<p>URL 填第一步申请的域名;</p>
<p>Token 用户根据提示填写，用于后面校验服务端合法性;</p>
<p>EncodingAESKey 点击<code>随机生成</code>按钮来生成。</p>
<p>当点击表单<code>提交</code>按钮时，微信会通过 Token 来校验 URL 的合法性，这个我们在后面步骤实现，此界面暂时保留不关闭。</p>
<p>AppID Token EncodingAESKey 这3个参数具体的获取步骤也可以参照下面的视频</p>
<ul>
<li><em>视频 - 获取微信订阅号信息</em></li>
</ul>
<h2 id="搭建-HTTP-服务"><a href="#搭建-HTTP-服务" class="headerlink" title="搭建 HTTP 服务"></a>搭建 HTTP 服务</h2><blockquote>
<p>任务时间：15min ~ 30min</p>
</blockquote>
<p>下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器</p>
<h3 id="安装-NodeJS-和-NPM"><a href="#安装-NodeJS-和-NPM" class="headerlink" title="安装 NodeJS 和 NPM"></a>安装 NodeJS 和 NPM</h3><p>使用下面的命令安装 NodeJS 和 NPM</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x  sudo bash -</span><br><span class="line">yum install nodejs -y</span><br></pre></td></tr></table></figure></div>

<p>安装完成后，使用下面的命令测试安装结果</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></div>

<h3 id="编写-HTTP-Server-源码"><a href="#编写-HTTP-Server-源码" class="headerlink" title="编写 HTTP Server 源码"></a>编写 HTTP Server 源码</h3><h4 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h4><p>使用下面的命令在服务器创建一个工作目录：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/release/weapp</span><br></pre></td></tr></table></figure></div>

<p>进入此工作目录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/release/weapp</span><br></pre></td></tr></table></figure></div>

<h4 id="创建-package-json"><a href="#创建-package-json" class="headerlink" title="创建 package.json"></a>创建 package.json</h4><p>在刚才创建的工作目录_创建 package.json_，添加我们服务器包的名称和版本号，可参考下面的示例。</p>
<h5 id="示例代码：-x2F-data-x2F-release-x2F-weapp-x2F-package-json"><a href="#示例代码：-x2F-data-x2F-release-x2F-weapp-x2F-package-json" class="headerlink" title="示例代码：&#x2F;data&#x2F;release&#x2F;weapp&#x2F;package.json"></a>示例代码：&#x2F;data&#x2F;release&#x2F;weapp&#x2F;package.json</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;weapp&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>完成后，使用 <code>Ctrl + S</code> 保存文件</p>
<h4 id="添加-Server-源码"><a href="#添加-Server-源码" class="headerlink" title="添加 Server 源码"></a>添加 Server 源码</h4><p>在工作目录_创建 app.js_，使用 Express.js 来监听 <code>5050</code> 端口[<a href="#stage-3-step-2-5050">?</a>]，可参考下面的示例代码(注：请将 <code>app.js</code> 文件中的<code>token</code>&#x2F;<code>appid</code>&#x2F;<code>encodingAESKey</code>等配置项替换为您的订阅号对应的取值)。</p>
<h5 id="示例代码：-x2F-data-x2F-release-x2F-weapp-x2F-app-js"><a href="#示例代码：-x2F-data-x2F-release-x2F-weapp-x2F-app-js" class="headerlink" title="示例代码：&#x2F;data&#x2F;release&#x2F;weapp&#x2F;app.js"></a>示例代码：&#x2F;data&#x2F;release&#x2F;weapp&#x2F;app.js</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引用 express 来支持 HTTP Server 的实现</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line"></span><br><span class="line">// 引用微信公共平台自动回复消息接口服务中间件</span><br><span class="line">var wechat = require(&#x27;wechat&#x27;);</span><br><span class="line"></span><br><span class="line">// 创建一个 express 实例</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 配置微信公众平台参数，在教程第二步中获取</span><br><span class="line">var config = &#123;</span><br><span class="line">    token: &#x27;your token&#x27;, // 填第二步中获取的 `token`</span><br><span class="line">    appid: &#x27;your appid&#x27;, // 填第二步中获取的 `appid`</span><br><span class="line">    encodingAESKey: &#x27;your encodingAESKey&#x27;, // 填第二步中获取的 `encodingAESKey`</span><br><span class="line">    checkSignature: true // 可选，默认为true。由于微信公众平台接口调试工具在明文模式下不发送签名，所以如要使用该测试工具，请将其设置为false </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(express.query());</span><br><span class="line"></span><br><span class="line">app.use(&#x27;/&#x27;, wechat(config, function (req, res, next) &#123;</span><br><span class="line">    res.reply(&#123;</span><br><span class="line">        content: &#x27;你好，Hello World!&#x27;,</span><br><span class="line">        type: &#x27;text&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">// 监听端口，等待连接</span><br><span class="line">const port = 5050;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line">// 输出服务器启动日志</span><br><span class="line">console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>本实验会以 5050 端口的打开作为实验步骤完成的依据，为了后面的实验步骤顺利进行，请不要使用其它端口号</p>
</blockquote>
<h3 id="运行-HTTP-服务"><a href="#运行-HTTP-服务" class="headerlink" title="运行 HTTP 服务"></a>运行 HTTP 服务</h3><h4 id="安装-PM2"><a href="#安装-PM2" class="headerlink" title="安装 PM2"></a>安装 PM2</h4><p>在开始之前，我们先来安装 [<a href="#stage-3-step-3-PM2">PM2</a>]</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install pm2 --global</span><br></pre></td></tr></table></figure></div>

<p>PM2 安装时间可能稍长，请耐心等候 [<a href="#stage-3-step-3-slow">?</a>]</p>
<h4 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h4><p>我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/release/weapp</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure></div>

<h4 id="安装-Wechat"><a href="#安装-Wechat" class="headerlink" title="安装 Wechat"></a>安装 Wechat</h4><p>我们的服务器源码里使用到了 Wechat 模块，下面的命令使用 NPM 来安装 Wechat</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/release/weapp</span><br><span class="line">npm install wechat --save</span><br></pre></td></tr></table></figure></div>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>安装完成后，使用 PM2 来启动 HTTP 服务</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/release/weapp</span><br><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure></div>

<p>现在，您的 HTTP 服务已经在 [http:&#x2F;&#x2F;&lt;您的 CVM IP 地址&gt;:5050](<a href="http://xn--">http://xn--</a>&lt; cvm ip &gt;-yp49ackh32qjw5g:5050&#x2F; “null”) 运行</p>
<p>要查看服务输出的日志，可以使用下面的命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 logs</span><br></pre></td></tr></table></figure></div>

<p>如果要重启服务，可以使用下面的命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 restart app</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>我们使用 PM2 来进行 Node 进程的运行、监控和管理</p>
</blockquote>
<blockquote>
<p>NPM 仓库在国内访问速度可能不太理想，如果实在太慢可以尝试使用 CNPM 的 Registry 进行安装：<code>npm install pm2 -g --registry=https://r.cnpmjs.org/</code></p>
</blockquote>
<h2 id="搭建-nginx-对外服务"><a href="#搭建-nginx-对外服务" class="headerlink" title="搭建 nginx 对外服务"></a>搭建 nginx 对外服务</h2><blockquote>
<p>任务时间：15min ~ 30min</p>
</blockquote>
<p>NodeJs只是侦听的机器上的 <code>5050</code> 端口，我们使用 <code>nginx</code> 侦听 <code>80</code> 端口提供对外域名服务</p>
<h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure></div>

<p>安装完成后，使用 <code>nginx</code> 命令启动 Nginx：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></div>

<p>此时，访问 <a href="http://xn--<-t33er8oszphj1b/" title="null">http:&#x2F;&#x2F;&lt;您的域名&gt;</a> 可以看到 Nginx 的测试页面 [<a href="#stage-4-step-1-help">?</a>]</p>
<blockquote>
<p>如果无法访问，请重试用 <code>nginx -s reload</code> 命令重启 Nginx</p>
</blockquote>
<h3 id="配置-HTTP-反向代理"><a href="#配置-HTTP-反向代理" class="headerlink" title="配置 HTTP 反向代理"></a>配置 HTTP 反向代理</h3><p>外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。</p>
<p>Nginx 配置目录在 _&#x2F;etc&#x2F;nginx&#x2F;conf.d_，我们在该目录创建 <em>wechat.conf</em></p>
<h5 id="示例代码：-x2F-etc-x2F-nginx-x2F-conf-d-x2F-wechat-conf"><a href="#示例代码：-x2F-etc-x2F-nginx-x2F-conf-d-x2F-wechat-conf" class="headerlink" title="示例代码：&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;wechat.conf"></a>示例代码：&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;wechat.conf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.example.com; # 改为第一步申请的域名</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:5050;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>按 <code>Ctrl + S</code> 保存配置文件，让 Nginx 重新加载配置使其生效：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></div>

<p>在浏览器通过 http 的方式访问你解析的域名来测试 HTTP 是否成功启动</p>
<h2 id="使用Server端回复微信消息"><a href="#使用Server端回复微信消息" class="headerlink" title="使用Server端回复微信消息"></a>使用Server端回复微信消息</h2><blockquote>
<p>任务时间：1min ~ 5min</p>
</blockquote>
<h3 id="提交服务端配置"><a href="#提交服务端配置" class="headerlink" title="提交服务端配置"></a>提交服务端配置</h3><p>我们将第二步微信公众平台中保留的表单提交，同时将 <code>基本配置</code> - <code>服务器配置</code> 启用</p>
<h3 id="关注、发送与消息回复"><a href="#关注、发送与消息回复" class="headerlink" title="关注、发送与消息回复"></a>关注、发送与消息回复</h3><p>首先通过二维码关注微信订阅号</p>
<p>在聊天界面向微信公众号发送一条消息</p>
<p>最终我们会回到一条 <code>你好，Hello World!</code> 的回复</p>
<h3 id="大功搞成"><a href="#大功搞成" class="headerlink" title="大功搞成"></a>大功搞成</h3><p>恭喜！您已经完成了搭建微信订阅号后台服务的实验内容！您可以留用或者_购买 Linux 版本的 CVM_ 继续学习。</p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>服务器</tag>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>蒙古文词典检索系统</title>
    <url>/2017/10/26/article104/</url>
    <content><![CDATA[<h1 id="蒙古文词典检索系统"><a href="#蒙古文词典检索系统" class="headerlink" title="蒙古文词典检索系统"></a>蒙古文词典检索系统</h1><h3 id="这套系统是作为一个蒙文搜索站，可以使用中文，拉丁文作为检索条件来搜索对应的蒙文，在搜索时还有智能的辅助提示列表，能够弹出相关的搜索内容。由于信息量比较大，所以在搜索的时候辅助提示可能会出现卡顿，这个问题以后会通过修改数据库，或增加缓存等方式解决。有尝试的可以访问下面的网址进行搜索。"><a href="#这套系统是作为一个蒙文搜索站，可以使用中文，拉丁文作为检索条件来搜索对应的蒙文，在搜索时还有智能的辅助提示列表，能够弹出相关的搜索内容。由于信息量比较大，所以在搜索的时候辅助提示可能会出现卡顿，这个问题以后会通过修改数据库，或增加缓存等方式解决。有尝试的可以访问下面的网址进行搜索。" class="headerlink" title="这套系统是作为一个蒙文搜索站，可以使用中文，拉丁文作为检索条件来搜索对应的蒙文，在搜索时还有智能的辅助提示列表，能够弹出相关的搜索内容。由于信息量比较大，所以在搜索的时候辅助提示可能会出现卡顿，这个问题以后会通过修改数据库，或增加缓存等方式解决。有尝试的可以访问下面的网址进行搜索。"></a>这套系统是作为一个蒙文搜索站，可以使用中文，拉丁文作为检索条件来搜索对应的蒙文，在搜索时还有智能的辅助提示列表，能够弹出相关的搜索内容。由于信息量比较大，所以在搜索的时候辅助提示可能会出现卡顿，这个问题以后会通过修改数据库，或增加缓存等方式解决。有尝试的可以访问下面的网址进行搜索。</h3><h3 id="网址menggu-rain1024-com"><a href="#网址menggu-rain1024-com" class="headerlink" title="网址menggu.rain1024.com"></a><a class="link"   href="http://menggu.rain1024.com/" >网址menggu.rain1024.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php/php31.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php/php32.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php/php33.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>给哈斯老师做词典搜索时的一些些思考</title>
    <url>/2017/10/18/article102/</url>
    <content><![CDATA[<p>给哈斯老师做词典搜索时，关于数据的显示方式，用id值出错的思考 html, body {font-size: 12pt;}body {font-family: Helvetica, ‘Hiragino Sans GB’, ‘微软雅黑’, ‘Microsoft YaHei UI’, SimSun, SimHei, arial, sans-serif;line-height: 1.6;margin: 0 auto;padding: 20px 16px;padding: 1.25rem 1rem;}h1, h2, h3, h4, h5, h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}h1 {font-size:20pt;font-size:1.67rem;}h2 {font-size:18pt;font-size:1.5rem;}h3 {font-size:15pt;font-size:1.25rem;}h4 {font-size:14pt;font-size:1.17rem;}h5 {font-size:12pt;font-size:1rem;}h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}div, p, ul, ol, dl, li {margin:0;}blockquote, table, pre, code {margin:8px 0;}ul, ol {padding-left:32px;padding-left:2rem;}ol.wiz-list-level1 &gt; li {list-style-type:decimal;}ol.wiz-list-level2 &gt; li {list-style-type:lower-latin;}ol.wiz-list-level3 &gt; li {list-style-type:lower-roman;}blockquote {padding:0 12px;padding:0 0.75rem;}blockquote &gt; :first-child {margin-top:0;}blockquote &gt; :last-child {margin-bottom:0;}img {border:0;max-width:100%;height:auto !important;margin:2px 0;}table {border-collapse:collapse;border:1px solid #bbbbbb;}td, th {padding:4px 8px;border-collapse:collapse;border:1px solid #bbbbbb;min-height:28px;word-break:break-all;box-sizing: border-box;}.wiz-hide {display:none !important;}    </p>
<p>给哈斯老师做了一个蒙文搜索站，提供蒙文的搜索和后台的一些管理功 能，就是增删改查，虽然这种东西做了无数遍，但每一次都能发现一些自己的问题，也能更熟练的，更深入理解编程的思想，每个操作更加灵活，机智，便于扩展，好开发，这一次也是有很多收获，比如1.数据量比较大，22万条，虽然检索的时候很慢，2.22万条数据是不能一次都提取出来的，PHP有内存限制，会导致内存溢出，这个问题我以前一直没有注意，3. 在做分页处理的时候，我是使用自己写的接口，一开始挺好，后来就出现了问题，使用id作为数据的提取特征是一个很大的问题，id是不断变化的，刚刚想到一个好的方法，就是直接用thinkphp提供的分页接口，一切都OK，效率上去了，问题也解决了，还好写，不会出错，这就是我的一点收获，要记到笔记里，作为一丝丝经验了。。。。</p>
<p> &#x2F;**<br>   * 使用id来获取值的确会错，刚刚出现了一个bug，就是222506以后的所有数据在本页面中不显示，是因为我删除了一个数据，所以<br>    * id的连续性出现中断，导致if判断里直接break了，<br>   *<br>   * 这里的这个问题我不想重新在用别的方法去写一遍了，就用最简单的方法，挑选够10条数据就OK，不去判断什么，这样肯定是有问题的<br>    * ，而且以后会很严重，那就是如果删除的数据多了，用page来获取目标开始id就失效了，页面也就链接不上了，但目前先这样吧，<br>  *<br>   * 更好的解决方法有很多，1，不删除数据，设置一个state字段，修改字段的值就行，但是这样使用page获取目标开始id也会出错<br>   * 2. 不使用id来作为目标开始数，而用确切的位置来定位，但用什么定位我也没有想到什么好的方法，以后遇到不可避免的开发时，再去研究吧<br>    *&#x2F;<br>   for ($i&#x3D;$page*10-10+1;$i&lt;&#x3D;$page*10;$i++){<br>       &#x2F;**<br>       * 如果数据的条数发生改变，这种方法就会出现bug，所以用下面的判断null比较好一些<br>        * 并且还能用这个来判断页数，确定是不是最后一页<br>        *&#x2F;<br>&#x2F;&#x2F;       if ($i&gt;222506){<br>&#x2F;&#x2F;          break;<br>&#x2F;&#x2F;      }<br>        $data &#x3D; D(‘Cmdic1’)-&gt;get_Cmdic1Info(array(‘id’&#x3D;&gt;$i));<br>        if ($data[‘id’]&#x3D;&#x3D;’’){<br>           continue;<br>      }</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Rain.文件床--免费的文件暂存器</title>
    <url>/2017/10/25/article103/</url>
    <content><![CDATA[<h1 id="Rain-文件床–免费的文件暂存器"><a href="#Rain-文件床–免费的文件暂存器" class="headerlink" title="Rain.文件床–免费的文件暂存器"></a>Rain.文件床–免费的文件暂存器</h1><h3 id="特点：可保存七天，文件可预览，上传方便。"><a href="#特点：可保存七天，文件可预览，上传方便。" class="headerlink" title="特点：可保存七天，文件可预览，上传方便。"></a>特点：可保存七天，文件可预览，上传方便。</h3><h2 id="文件床-网址filebed-rain1024-com"><a href="#文件床-网址filebed-rain1024-com" class="headerlink" title="文件床-网址filebed.rain1024.com"></a><a class="link"   href="http://filebed.rain1024.com/" >文件床-网址filebed.rain1024.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="如题，平时经常使用图床，对写文档有很大的帮助。偶尔需要保存一些文件，或者共享一些文件时，只能使用网盘，邮箱或其他云什么的，这些都需要登录，无疑使整个过程繁琐了很多，我只是想暂时保存这个文件，等到了需要的时候再下载下来。所以我想到了做一个文件床，可以上传各种文件，当然也包括图片，页面非常简单，就是上传模块，文件列表模块，随时上传，随时下载，方便使用。网上也肯定有这样功能的网站，但我还是想自己写一个，用自己的域名来访问，还可以自己管理。"><a href="#如题，平时经常使用图床，对写文档有很大的帮助。偶尔需要保存一些文件，或者共享一些文件时，只能使用网盘，邮箱或其他云什么的，这些都需要登录，无疑使整个过程繁琐了很多，我只是想暂时保存这个文件，等到了需要的时候再下载下来。所以我想到了做一个文件床，可以上传各种文件，当然也包括图片，页面非常简单，就是上传模块，文件列表模块，随时上传，随时下载，方便使用。网上也肯定有这样功能的网站，但我还是想自己写一个，用自己的域名来访问，还可以自己管理。" class="headerlink" title="如题，平时经常使用图床，对写文档有很大的帮助。偶尔需要保存一些文件，或者共享一些文件时，只能使用网盘，邮箱或其他云什么的，这些都需要登录，无疑使整个过程繁琐了很多，我只是想暂时保存这个文件，等到了需要的时候再下载下来。所以我想到了做一个文件床，可以上传各种文件，当然也包括图片，页面非常简单，就是上传模块，文件列表模块，随时上传，随时下载，方便使用。网上也肯定有这样功能的网站，但我还是想自己写一个，用自己的域名来访问，还可以自己管理。"></a>如题，平时经常使用图床，对写文档有很大的帮助。偶尔需要保存一些文件，或者共享一些文件时，只能使用网盘，邮箱或其他云什么的，这些都需要登录，无疑使整个过程繁琐了很多，我只是想暂时保存这个文件，等到了需要的时候再下载下来。所以我想到了做一个文件床，可以上传各种文件，当然也包括图片，页面非常简单，就是上传模块，文件列表模块，随时上传，随时下载，方便使用。网上也肯定有这样功能的网站，但我还是想自己写一个，用自己的域名来访问，还可以自己管理。</h3><h3 id="关于使用：访问filebed-rain1024-com这个网址，就会看到上传框，选择你要上传的文件，这时上传框里会出现你的文件，大部分文件都是可以预览的，然后提交，这时你再下拉就会看到文件列表里有你刚刚上传的文件了，每个文件后面都有三个小图标，目前只支持下载，修改和删除需要在后台完成。上传的文件可以保存七天，七天以后就会过期，上传大小为3M以内。"><a href="#关于使用：访问filebed-rain1024-com这个网址，就会看到上传框，选择你要上传的文件，这时上传框里会出现你的文件，大部分文件都是可以预览的，然后提交，这时你再下拉就会看到文件列表里有你刚刚上传的文件了，每个文件后面都有三个小图标，目前只支持下载，修改和删除需要在后台完成。上传的文件可以保存七天，七天以后就会过期，上传大小为3M以内。" class="headerlink" title="关于使用：访问filebed.rain1024.com这个网址，就会看到上传框，选择你要上传的文件，这时上传框里会出现你的文件，大部分文件都是可以预览的，然后提交，这时你再下拉就会看到文件列表里有你刚刚上传的文件了，每个文件后面都有三个小图标，目前只支持下载，修改和删除需要在后台完成。上传的文件可以保存七天，七天以后就会过期，上传大小为3M以内。"></a>关于使用：访问filebed.rain1024.com这个网址，就会看到上传框，选择你要上传的文件，这时上传框里会出现你的文件，大部分文件都是可以预览的，然后提交，这时你再下拉就会看到文件列表里有你刚刚上传的文件了，每个文件后面都有三个小图标，目前只支持下载，修改和删除需要在后台完成。上传的文件可以保存七天，七天以后就会过期，上传大小为3M以内。</h3><h3 id="关于后台：后台模块是用来管理上传的文件的，目前支持对文件的的有效期延长，使文件过期，置顶文件，删除文件等操作，效果如下图，功能会随着开发逐步完善，请关注开发日志。"><a href="#关于后台：后台模块是用来管理上传的文件的，目前支持对文件的的有效期延长，使文件过期，置顶文件，删除文件等操作，效果如下图，功能会随着开发逐步完善，请关注开发日志。" class="headerlink" title="关于后台：后台模块是用来管理上传的文件的，目前支持对文件的的有效期延长，使文件过期，置顶文件，删除文件等操作，效果如下图，功能会随着开发逐步完善，请关注开发日志。"></a>关于后台：后台模块是用来管理上传的文件的，目前支持对文件的的有效期延长，使文件过期，置顶文件，删除文件等操作，效果如下图，功能会随着开发逐步完善，请关注开发日志。</h3><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php27.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php28.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php29.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php30.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
        <category>Self</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>自然语言处理之蒙古文词网生成系统</title>
    <url>/2017/11/10/article105/</url>
    <content><![CDATA[<h1 id="自然语言处理之蒙古文词网生成系统"><a href="#自然语言处理之蒙古文词网生成系统" class="headerlink" title="自然语言处理之蒙古文词网生成系统"></a>自然语言处理之蒙古文词网生成系统</h1><h2 id="蒙古文词网生成系统，是根据WordNet词网所建立的，在用户输入关键词后可以进行选择词网树的根部级别和底部级别，然后系统会根据用户的输入，再依托大量的算法，在数据库中生成该关键词的词网二叉树结构，最后以树状图的形式显示到网页中，使用方便简单，便于设计与分析语义。"><a href="#蒙古文词网生成系统，是根据WordNet词网所建立的，在用户输入关键词后可以进行选择词网树的根部级别和底部级别，然后系统会根据用户的输入，再依托大量的算法，在数据库中生成该关键词的词网二叉树结构，最后以树状图的形式显示到网页中，使用方便简单，便于设计与分析语义。" class="headerlink" title="蒙古文词网生成系统，是根据WordNet词网所建立的，在用户输入关键词后可以进行选择词网树的根部级别和底部级别，然后系统会根据用户的输入，再依托大量的算法，在数据库中生成该关键词的词网二叉树结构，最后以树状图的形式显示到网页中，使用方便简单，便于设计与分析语义。"></a>蒙古文词网生成系统，是根据WordNet词网所建立的，在用户输入关键词后可以进行选择词网树的根部级别和底部级别，然后系统会根据用户的输入，再依托大量的算法，在数据库中生成该关键词的词网二叉树结构，最后以树状图的形式显示到网页中，使用方便简单，便于设计与分析语义。</h2><h2 id="上面是关于系统的介绍，其实在后台的算法远非那么简单，我用了四天的时间，四十多个小时，通过各种研究，分析设计，推演了无数遍语义二叉树的生成过程，写了好几个算法终于将二叉树生成，并转化为树状结构树，这个过程中我体会到了算法的强大与编程之美，各种生硬的数据在算法的推动下生成了连接的结构，上千行的代码量也是在不知不觉中完成的，我惊叹于这个过程的巧妙，为此我还写了大量的注释，记录下这个完美的思考过程。"><a href="#上面是关于系统的介绍，其实在后台的算法远非那么简单，我用了四天的时间，四十多个小时，通过各种研究，分析设计，推演了无数遍语义二叉树的生成过程，写了好几个算法终于将二叉树生成，并转化为树状结构树，这个过程中我体会到了算法的强大与编程之美，各种生硬的数据在算法的推动下生成了连接的结构，上千行的代码量也是在不知不觉中完成的，我惊叹于这个过程的巧妙，为此我还写了大量的注释，记录下这个完美的思考过程。" class="headerlink" title="上面是关于系统的介绍，其实在后台的算法远非那么简单，我用了四天的时间，四十多个小时，通过各种研究，分析设计，推演了无数遍语义二叉树的生成过程，写了好几个算法终于将二叉树生成，并转化为树状结构树，这个过程中我体会到了算法的强大与编程之美，各种生硬的数据在算法的推动下生成了连接的结构，上千行的代码量也是在不知不觉中完成的，我惊叹于这个过程的巧妙，为此我还写了大量的注释，记录下这个完美的思考过程。"></a>上面是关于系统的介绍，其实在后台的算法远非那么简单，我用了四天的时间，四十多个小时，通过各种研究，分析设计，推演了无数遍语义二叉树的生成过程，写了好几个算法终于将二叉树生成，并转化为树状结构树，这个过程中我体会到了算法的强大与编程之美，各种生硬的数据在算法的推动下生成了连接的结构，上千行的代码量也是在不知不觉中完成的，我惊叹于这个过程的巧妙，为此我还写了大量的注释，记录下这个完美的思考过程。</h2><h3 id="由于算法的复杂，不将测试系统放出，以免系统奔溃。"><a href="#由于算法的复杂，不将测试系统放出，以免系统奔溃。" class="headerlink" title="由于算法的复杂，不将测试系统放出，以免系统奔溃。"></a>由于算法的复杂，不将测试系统放出，以免系统奔溃。</h3><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php34.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php43.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php36.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php37.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php38.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php39.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php40.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php35.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php41.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php42.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>WordNet</tag>
        <tag>自然语言</tag>
        <tag>词网</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python开发的教务管理系统</title>
    <url>/2017/11/15/article106/</url>
    <content><![CDATA[<h1 id="使用python开发的教务管理系统"><a href="#使用python开发的教务管理系统" class="headerlink" title="使用python开发的教务管理系统"></a>使用python开发的教务管理系统</h1><h3 id="我调用了Flask框架来构建整个web环境，第一次使用flask，还是很好用的一个轻量级框架，函数名就对应操作，非常方便，还有模板的显示，渲染功能都特别简单实用，一看就会，这个教务系统是给同学写的期末作业，所以功能很少，连接数据库只进行了查询操作。剩下的页面全部用来显示。下面是效果图。"><a href="#我调用了Flask框架来构建整个web环境，第一次使用flask，还是很好用的一个轻量级框架，函数名就对应操作，非常方便，还有模板的显示，渲染功能都特别简单实用，一看就会，这个教务系统是给同学写的期末作业，所以功能很少，连接数据库只进行了查询操作。剩下的页面全部用来显示。下面是效果图。" class="headerlink" title="我调用了Flask框架来构建整个web环境，第一次使用flask，还是很好用的一个轻量级框架，函数名就对应操作，非常方便，还有模板的显示，渲染功能都特别简单实用，一看就会，这个教务系统是给同学写的期末作业，所以功能很少，连接数据库只进行了查询操作。剩下的页面全部用来显示。下面是效果图。"></a>我调用了Flask框架来构建整个web环境，第一次使用flask，还是很好用的一个轻量级框架，函数名就对应操作，非常方便，还有模板的显示，渲染功能都特别简单实用，一看就会，这个教务系统是给同学写的期末作业，所以功能很少，连接数据库只进行了查询操作。剩下的页面全部用来显示。下面是效果图。</h3><h3 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a><a class="link"   href="https://gitee.com/rainweb/PythonGouJianDeJiaoWuXiTong.git" >代码链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="使用的时候讲template解压，并与code-py放在同一级别的目录下才可使用"><a href="#使用的时候讲template解压，并与code-py放在同一级别的目录下才可使用" class="headerlink" title="使用的时候讲template解压，并与code.py放在同一级别的目录下才可使用"></a>使用的时候讲template解压，并与code.py放在同一级别的目录下才可使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/python/python43.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/python/python44.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/python/python45.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/python/python46.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/python/python47.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于阿里腾讯京东美团云提供的学生云主机总结</title>
    <url>/2017/12/04/article107/</url>
    <content><![CDATA[<h1 id="关于阿里腾讯京东美团云提供的学生云主机总结"><a href="#关于阿里腾讯京东美团云提供的学生云主机总结" class="headerlink" title="关于阿里腾讯京东美团云提供的学生云主机总结"></a>关于阿里腾讯京东美团云提供的学生云主机总结</h1><h2 id="目前市面上的云服务商很多，阿里云，腾讯云，百度云，-网易云，新浪云，联通沃云，华为云，京东云，美团云，滴滴云，又拍云，七牛云，等等一大堆云服务，但是提供学生优惠的并不多，以前我写过一篇过于阿里云和腾讯云学生优惠的总结，当时腾讯云的学生优惠又停止了，但不久又开放了，而阿里云的学生主机一直都有，最近突然发现京东云和美团云也上线了学生优惠套餐，价格和性能都差不多，所以写一篇文章推荐一下，"><a href="#目前市面上的云服务商很多，阿里云，腾讯云，百度云，-网易云，新浪云，联通沃云，华为云，京东云，美团云，滴滴云，又拍云，七牛云，等等一大堆云服务，但是提供学生优惠的并不多，以前我写过一篇过于阿里云和腾讯云学生优惠的总结，当时腾讯云的学生优惠又停止了，但不久又开放了，而阿里云的学生主机一直都有，最近突然发现京东云和美团云也上线了学生优惠套餐，价格和性能都差不多，所以写一篇文章推荐一下，" class="headerlink" title="目前市面上的云服务商很多，阿里云，腾讯云，百度云， 网易云，新浪云，联通沃云，华为云，京东云，美团云，滴滴云，又拍云，七牛云，等等一大堆云服务，但是提供学生优惠的并不多，以前我写过一篇过于阿里云和腾讯云学生优惠的总结，当时腾讯云的学生优惠又停止了，但不久又开放了，而阿里云的学生主机一直都有，最近突然发现京东云和美团云也上线了学生优惠套餐，价格和性能都差不多，所以写一篇文章推荐一下，"></a>目前市面上的云服务商很多，阿里云，腾讯云，百度云， 网易云，新浪云，联通沃云，华为云，京东云，美团云，滴滴云，又拍云，七牛云，等等一大堆云服务，但是提供学生优惠的并不多，以前我写过一篇过于阿里云和腾讯云学生优惠的总结，当时腾讯云的学生优惠又停止了，但不久又开放了，而阿里云的学生主机一直都有，最近突然发现京东云和美团云也上线了学生优惠套餐，价格和性能都差不多，所以写一篇文章推荐一下，</h2><h2 id="1-阿里云"><a href="#1-阿里云" class="headerlink" title="1. 阿里云"></a>1. 阿里云</h2><h3 id="云服务器是每个月9-9元，年付的话118元，还送对象存储OSS-40G存储-50G下行流量，-xin域名-¥83代金券。"><a href="#云服务器是每个月9-9元，年付的话118元，还送对象存储OSS-40G存储-50G下行流量，-xin域名-¥83代金券。" class="headerlink" title="云服务器是每个月9.9元，年付的话118元，还送对象存储OSS 40G存储 50G下行流量，.xin域名 ¥83代金券。"></a>云服务器是每个月9.9元，年付的话118元，还送对象存储OSS 40G存储 50G下行流量，.xin域名 ¥83代金券。</h3><h3 id="主机性能"><a href="#主机性能" class="headerlink" title="主机性能"></a>主机性能</h3><h3 id="1核CPU-Intel-Xeon-E5-2682-v4"><a href="#1核CPU-Intel-Xeon-E5-2682-v4" class="headerlink" title="1核CPU Intel Xeon E5-2682 v4"></a>1核CPU Intel Xeon E5-2682 v4</h3><h3 id="2G内存-DDR4"><a href="#2G内存-DDR4" class="headerlink" title="2G内存 DDR4"></a>2G内存 DDR4</h3><h3 id="1M-带宽-VPC专有网络-I-x2F-O-优化"><a href="#1M-带宽-VPC专有网络-I-x2F-O-优化" class="headerlink" title="1M 带宽 VPC专有网络, I&#x2F;O 优化"></a>1M 带宽 VPC专有网络, I&#x2F;O 优化</h3><h3 id="40G-系统盘-高效云盘"><a href="#40G-系统盘-高效云盘" class="headerlink" title="**40G***系统盘* 高效云盘"></a>**40G***系统盘* 高效云盘</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/more/more1.jpg"
                     
                ></p>
<h2 id="2-腾讯云"><a href="#2-腾讯云" class="headerlink" title="2. 腾讯云"></a>2. 腾讯云</h2><h3 id="腾讯云的学生主机有三种，体验版，学习版，创业版"><a href="#腾讯云的学生主机有三种，体验版，学习版，创业版" class="headerlink" title="腾讯云的学生主机有三种，体验版，学习版，创业版"></a>腾讯云的学生主机有三种，体验版，学习版，创业版</h3><h3 id="体验版：10元每月云服务器-1G1核，1M带宽-，系统盘（Linux-50G-x2F-Windows-50G）"><a href="#体验版：10元每月云服务器-1G1核，1M带宽-，系统盘（Linux-50G-x2F-Windows-50G）" class="headerlink" title="体验版：10元每月云服务器 1G1核，1M带宽 ，系统盘（Linux 50G&#x2F;Windows 50G）"></a>体验版：10元每月云服务器 1G1核，1M带宽 ，系统盘（Linux 50G&#x2F;Windows 50G）</h3><h3 id="学习版：60元每月云服务器-2G2核，1M带宽-，系统盘（Linux-50G-x2F-Windows-50G）"><a href="#学习版：60元每月云服务器-2G2核，1M带宽-，系统盘（Linux-50G-x2F-Windows-50G）" class="headerlink" title="学习版：60元每月云服务器 2G2核，1M带宽 ，系统盘（Linux 50G&#x2F;Windows 50G）"></a>学习版：60元每月云服务器 2G2核，1M带宽 ，系统盘（Linux 50G&#x2F;Windows 50G）</h3><h3 id="创业版：10元每月云服务器-4G4核，1M带宽-，系统盘（Linux-50G-x2F-Windows-50G）"><a href="#创业版：10元每月云服务器-4G4核，1M带宽-，系统盘（Linux-50G-x2F-Windows-50G）" class="headerlink" title="创业版：10元每月云服务器 4G4核，1M带宽 ，系统盘（Linux 50G&#x2F;Windows 50G）"></a>创业版：10元每月云服务器 4G4核，1M带宽 ，系统盘（Linux 50G&#x2F;Windows 50G）</h3><h4 id="以上都送-对象存储-50GB存储空间，加16元可选-cn域名一年使用权"><a href="#以上都送-对象存储-50GB存储空间，加16元可选-cn域名一年使用权" class="headerlink" title="以上都送 对象存储 50GB存储空间，加16元可选.cn域名一年使用权"></a>以上都送 对象存储 50GB存储空间，加16元可选.cn域名一年使用权</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/more/more2.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/more/more3.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/more/more4.jpg"
                     
                ></p>
<h2 id="3-京东云"><a href="#3-京东云" class="headerlink" title="3. 京东云"></a>3. 京东云</h2><h3 id="云服务器是8-8元每月，一年是88元"><a href="#云服务器是8-8元每月，一年是88元" class="headerlink" title="云服务器是8.8元每月，一年是88元"></a>云服务器是8.8元每月，一年是88元</h3><h3 id="性能方面：1核CPU"><a href="#性能方面：1核CPU" class="headerlink" title="性能方面：1核CPU"></a>性能方面：1核CPU</h3><h3 id="最新一代Intel-Xeon-E5-CPU"><a href="#最新一代Intel-Xeon-E5-CPU" class="headerlink" title="最新一代Intel Xeon-E5 CPU"></a>最新一代Intel Xeon-E5 CPU</h3><h3 id="2G内存-DDR4-高速读取内存"><a href="#2G内存-DDR4-高速读取内存" class="headerlink" title="2G内存 DDR4 高速读取内存"></a>2G内存 DDR4 高速读取内存</h3><h3 id="1M带宽-BGP弹性IP"><a href="#1M带宽-BGP弹性IP" class="headerlink" title="1M带宽 BGP弹性IP"></a>1M带宽 BGP弹性IP</h3><p>### 非windows系统 30G系统盘 windows系统 40G系统盘 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/more/more5.jpg"
                     
                ></p>
<h2 id="4-美团云"><a href="#4-美团云" class="headerlink" title="4.美团云"></a>4.美团云</h2><h3 id="云主机一个月8-8元"><a href="#云主机一个月8-8元" class="headerlink" title="云主机一个月8.8元"></a>云主机一个月8.8元</h3><h3 id="性能：1核CPU-1G内存-1M带宽-50G"><a href="#性能：1核CPU-1G内存-1M带宽-50G" class="headerlink" title="性能：1核CPU 1G内存 1M带宽 50G"></a>性能：1核CPU 1G内存 1M带宽 50G</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/more/more6.jpg"
                     
                ></p>
<h2 id="综上介绍：阿里云和京东云的服务器性能还是可以的，腾讯和美团都是普通的主机，腾讯云的体验版学生主机应该是性价比很低的，10元还是1G1核的，当然只是一个介绍，目前我了解到的只有这些。"><a href="#综上介绍：阿里云和京东云的服务器性能还是可以的，腾讯和美团都是普通的主机，腾讯云的体验版学生主机应该是性价比很低的，10元还是1G1核的，当然只是一个介绍，目前我了解到的只有这些。" class="headerlink" title="综上介绍：阿里云和京东云的服务器性能还是可以的，腾讯和美团都是普通的主机，腾讯云的体验版学生主机应该是性价比很低的，10元还是1G1核的，当然只是一个介绍，目前我了解到的只有这些。"></a>综上介绍：阿里云和京东云的服务器性能还是可以的，腾讯和美团都是普通的主机，腾讯云的体验版学生主机应该是性价比很低的，10元还是1G1核的，当然只是一个介绍，目前我了解到的只有这些。</h2>]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用邮箱作为登录验证机制的想法</title>
    <url>/2017/12/18/article108/</url>
    <content><![CDATA[<h2 id="关于使用邮箱作为登录验证机制的想法"><a href="#关于使用邮箱作为登录验证机制的想法" class="headerlink" title="关于使用邮箱作为登录验证机制的想法"></a>关于使用邮箱作为登录验证机制的想法</h2><h3 id="在写chat的后台时，我放弃了使用密码登录的想法，这样的安全性是很低的，虽然开发速度快，但如果出现问题，后果也是很严重的，如果这次的接口能够写好，以后服务器上的程序也都可以"><a href="#在写chat的后台时，我放弃了使用密码登录的想法，这样的安全性是很低的，虽然开发速度快，但如果出现问题，后果也是很严重的，如果这次的接口能够写好，以后服务器上的程序也都可以" class="headerlink" title="在写chat的后台时，我放弃了使用密码登录的想法，这样的安全性是很低的，虽然开发速度快，但如果出现问题，后果也是很严重的，如果这次的接口能够写好，以后服务器上的程序也都可以"></a>在写chat的后台时，我放弃了使用密码登录的想法，这样的安全性是很低的，虽然开发速度快，但如果出现问题，后果也是很严重的，如果这次的接口能够写好，以后服务器上的程序也都可以</h3><h3 id="使用这种机制来进行登录验证，现在的想法和注意是："><a href="#使用这种机制来进行登录验证，现在的想法和注意是：" class="headerlink" title="使用这种机制来进行登录验证，现在的想法和注意是："></a>使用这种机制来进行登录验证，现在的想法和注意是：</h3><ol>
<li>请求的验证码必须设置次数，以及频率，每次请求的间隔为一个小时，这个间隔是指未登录成功的间隔，如果登录了就不算，可以随时登录</li>
<li>封锁的一个小时内，如果被恶意攻击封锁了，如何保证正常的登录不受影响，先暂时对IP地址进行封锁，不影响其他IP地址的登录实现。</li>
<li>登录code设置为8位的无规则组合密码，然后存入session中</li>
<li>输入的验证码只验证一次，如果错误则封锁IP一小时。</li>
<li>在没有请求验证码时是不能进行验证的，也就是直接判断session是否设置了，在验证完了以后，session也要及时删掉</li>
<li>设计专门的数据表来存储信息</li>
<li>先将信息存储在session中</li>
<li>判断验证码时应该只判断一次，如果错误，就进行封锁</li>
<li>添加校验码作为判断的第一道，防止恶性邮件请求</li>
</ol>
<h3 id="gt-使用前的注意：必须有Email发送模块，ajax请求功能也得实现，代码是用PHP实现的，其他语言也是类似"><a href="#gt-使用前的注意：必须有Email发送模块，ajax请求功能也得实现，代码是用PHP实现的，其他语言也是类似" class="headerlink" title="&gt; 使用前的注意：必须有Email发送模块，ajax请求功能也得实现，代码是用PHP实现的，其他语言也是类似"></a>&gt; 使用前的注意：必须有Email发送模块，ajax请求功能也得实现，代码是用PHP实现的，其他语言也是类似</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php44.jpg"
                     
                ></p>
<h2 id="Controller文件里的代码"><a href="#Controller文件里的代码" class="headerlink" title="Controller文件里的代码"></a>Controller文件里的代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function send_email_code()&#123;</span><br><span class="line">        /** 为了防止恶意请求，设置校验码进行第一道过滤 */</span><br><span class="line">        $p_code = request(&#x27;get&#x27;,&#x27;str&#x27;,&#x27;p_code&#x27;,0);</span><br><span class="line">        if ($p_code==&#x27;641351484&#x27;)&#123;</span><br><span class="line">            /** 先对有没有请求发送邮件进行判断 */</span><br><span class="line">            if (!session(&#x27;?email&#x27;))&#123;</span><br><span class="line">                $email[&#x27;code&#x27;] = rand(1000,9999);</span><br><span class="line">                $email[&#x27;ip&#x27;] = ip_select($_SERVER[&#x27;REMOTE_ADDR&#x27;]);</span><br><span class="line">                $email[&#x27;time&#x27;] = time();</span><br><span class="line">                $email[&#x27;state&#x27;] = 1;</span><br><span class="line">//            sendMail(&#x27;nylrain@163.com&#x27;,&#x27;聊天室后台登录验证码&#x27;,&#x27;请求发起的IP地址：&#x27;.$email[&#x27;ip&#x27;].&#x27;  验证码：&#x27;.$email[&#x27;code&#x27;]);</span><br><span class="line">                session(&#x27;email&#x27;,$email);</span><br><span class="line">                echo &#x27;1&#x27;; /** 验证码已经发送 */</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $email = session(&#x27;email&#x27;);</span><br><span class="line">                $now_time = time()-$email[&#x27;time&#x27;];</span><br><span class="line">                /** 判断请求时间是否超过一个小时*/</span><br><span class="line">                if ($now_time&gt;=3600)&#123;</span><br><span class="line">                    session(&#x27;email&#x27;,null);</span><br><span class="line">                    $this-&gt;send_email_code();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    echo &#x27;2&#x27;;/** 验证码已发送，请勿重复请求 */</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &#x27;3&#x27;; /** 校验码错误 */</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public function validate()&#123;</span><br><span class="line">        $code = request(&#x27;get&#x27;,&#x27;int&#x27;,&#x27;code&#x27;,0);</span><br><span class="line">        if (!session(&#x27;?email&#x27;))&#123;</span><br><span class="line">            echo &#x27;4&#x27;;/** 请先发送验证码 */</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $email = session(&#x27;email&#x27;);</span><br><span class="line">            if ($email[&#x27;state&#x27;]==1)&#123;</span><br><span class="line">                if ($code==$email[&#x27;code&#x27;])&#123;</span><br><span class="line">                    $admin[&#x27;time&#x27;] = date(&#x27;Y-m-d&#x27;);</span><br><span class="line">                    $admin[&#x27;ip&#x27;] = $email[&#x27;ip&#x27;];</span><br><span class="line">                    session(&#x27;email&#x27;,null);</span><br><span class="line">                    session(&#x27;admin&#x27;,$admin);</span><br><span class="line">                    echo &#x27;1&#x27;;/** 验证成功 */</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    session(&#x27;email.state&#x27;,0);</span><br><span class="line">                    echo &#x27;2&#x27;;/** 验证失败 */</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo &#x27;3&#x27;;/** 您的验证次数过多已被封锁 */</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 登出操作</span><br><span class="line">     */</span><br><span class="line">    public function logout() &#123;</span><br><span class="line">//        Session::set();</span><br><span class="line">        session(&#x27;admin&#x27;, null);</span><br><span class="line">        $this-&gt;redirect(&#x27;/admin.php?c=index&#x27;);</span><br><span class="line">        exit();</span><br><span class="line">//        $this-&gt;get_session();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="HTML文件中的显示和验证"><a href="#HTML文件中的显示和验证" class="headerlink" title="HTML文件中的显示和验证"></a>HTML文件中的显示和验证</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;tpl-login&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;tpl-login-content&quot;&gt;</span><br><span class="line">                &lt;!--&lt;div class=&quot;tpl-login-logo&quot;&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/div&gt;--&gt;</span><br><span class="line">                &lt;label  style=&quot;color: #00FF00&quot; id=&quot;state&quot;&gt;</span><br><span class="line">                &lt;/label&gt;</span><br><span class="line">                &lt;form class=&quot;am-form tpl-form-line-form&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;am-form-group&quot;&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;p_code&quot; id=&quot;p_code&quot; class=&quot;tpl-form-input&quot;</span><br><span class="line">                               id=&quot;user-email&quot; placeholder=&quot;请输入校验码&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;am-form-group&quot;&gt;</span><br><span class="line">                        &lt;input type=&quot;text&quot; value=&quot;&quot; name=&quot;code&quot; id=&quot;code&quot; class=&quot;tpl-form-input&quot;</span><br><span class="line">                               id=&quot;user-name&quot; placeholder=&quot;请输入邮箱验证码&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;!--&lt;div class=&quot;am-form-group&quot;&gt;--&gt;</span><br><span class="line">                        &lt;!--&lt;input type=&quot;password&quot; class=&quot;tpl-form-input&quot; id=&quot;user-name&quot; placeholder=&quot;请输入密码&quot;&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;/div&gt;--&gt;</span><br><span class="line">                    &lt;div class=&quot;am-form-group tpl-login-remember-me&quot;&gt;</span><br><span class="line">                        &lt;!--&lt;input id=&quot;remember-me&quot; type=&quot;checkbox&quot;&gt;--&gt;</span><br><span class="line">                        &lt;label for=&quot;remember-me&quot; onclick=&quot;send_email_code()&quot;&gt;发送邮箱验证码&lt;/label&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;am-form-group&quot;&gt;</span><br><span class="line">                        &lt;button type=&quot;button&quot; onclick=&quot;validate()&quot; class=&quot;am-btn am-btn-primary  am-btn-block tpl-btn-bg-color-success  tpl-login-btn&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        function send_email_code()&#123;</span><br><span class="line">            p_code = document.getElementById(&#x27;p_code&#x27;).value;</span><br><span class="line">            $.getJSON(&quot;/admin.php?c=login&amp;a=send_email_code&amp;p_code=&quot;+p_code,function(data)&#123;</span><br><span class="line">                if (data==1)&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;验证码已经发送&#x27;;</span><br><span class="line">                &#125;else if (data==2)&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;验证码已发送，请勿重复请求&#x27;;</span><br><span class="line">                &#125;else if (data==3)&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;校验码错误&#x27;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        function validate()&#123;</span><br><span class="line">            code = document.getElementById(&#x27;code&#x27;).value;</span><br><span class="line">            $.getJSON(&quot;/admin.php?c=login&amp;a=validate&amp;code=&quot;+code,function(data)&#123;</span><br><span class="line">                if (data==1)&#123;</span><br><span class="line">                    location.href = &#x27;/admin.php?c=index&#x27;;</span><br><span class="line">                &#125;else if (data==2)&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;验证失败&#x27;;</span><br><span class="line">                &#125;else if (data==4)&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;请先发送验证码&#x27;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    document.getElementById(&quot;state&quot;).innerHTML = &#x27;您的验证次数过多已被封锁&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>HTML</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
        <tag>技术知识</tag>
        <tag>扩展功能</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>CSDN个人博客阅读评论信息的爬取</title>
    <url>/2017/12/20/article109/</url>
    <content><![CDATA[<h1 id="CSDN个人博客阅读评论信息的爬取"><a href="#CSDN个人博客阅读评论信息的爬取" class="headerlink" title="CSDN个人博客阅读评论信息的爬取"></a>CSDN个人博客阅读评论信息的爬取</h1><h3 id="用来爬取CSDN上个人博客的信息，包括阅读次数，评论数等等"><a href="#用来爬取CSDN上个人博客的信息，包括阅读次数，评论数等等" class="headerlink" title="用来爬取CSDN上个人博客的信息，包括阅读次数，评论数等等"></a>用来爬取CSDN上个人博客的信息，包括阅读次数，评论数等等</h3><h1 id="因为CSDN更换了界面，原来的爬虫已经失效，所以我重新写了一个爬虫，可以精准的爬取到每篇文章阅读次数和评论次数的变化，并将总结出来的信息发送到邮箱里，"><a href="#因为CSDN更换了界面，原来的爬虫已经失效，所以我重新写了一个爬虫，可以精准的爬取到每篇文章阅读次数和评论次数的变化，并将总结出来的信息发送到邮箱里，" class="headerlink" title="因为CSDN更换了界面，原来的爬虫已经失效，所以我重新写了一个爬虫，可以精准的爬取到每篇文章阅读次数和评论次数的变化，并将总结出来的信息发送到邮箱里，"></a>因为CSDN更换了界面，原来的爬虫已经失效，所以我重新写了一个爬虫，可以精准的爬取到每篇文章阅读次数和评论次数的变化，并将总结出来的信息发送到邮箱里，</h1><h1 id="项目中有两个文件，csdn-old-py是旧版CSDN界面的爬虫，使用了BeautifulSoup来进行爬取信息，它的功能也是将每日博客信息的变化值总结下来发送到邮箱里，csdn-new-py是新版的爬虫，全部使用re来提取信息，并添加了评论次数的检测。"><a href="#项目中有两个文件，csdn-old-py是旧版CSDN界面的爬虫，使用了BeautifulSoup来进行爬取信息，它的功能也是将每日博客信息的变化值总结下来发送到邮箱里，csdn-new-py是新版的爬虫，全部使用re来提取信息，并添加了评论次数的检测。" class="headerlink" title="项目中有两个文件，csdn_old.py是旧版CSDN界面的爬虫，使用了BeautifulSoup来进行爬取信息，它的功能也是将每日博客信息的变化值总结下来发送到邮箱里，csdn_new.py是新版的爬虫，全部使用re来提取信息，并添加了评论次数的检测。"></a>项目中有两个文件，csdn_old.py是旧版CSDN界面的爬虫，使用了BeautifulSoup来进行爬取信息，它的功能也是将每日博客信息的变化值总结下来发送到邮箱里，csdn_new.py是新版的爬虫，全部使用re来提取信息，并添加了评论次数的检测。</h1><h1 id="代码说明："><a href="#代码说明：" class="headerlink" title="代码说明："></a>代码说明：</h1><h2 id="1-需要配置对应的数据库文件，因为里面保存了博客前一日的全部信息"><a href="#1-需要配置对应的数据库文件，因为里面保存了博客前一日的全部信息" class="headerlink" title="1.需要配置对应的数据库文件，因为里面保存了博客前一日的全部信息"></a>1.需要配置对应的数据库文件，因为里面保存了博客前一日的全部信息</h2><h2 id="2-需要发送邮件，必须有对应的邮箱账号和密码才能使用"><a href="#2-需要发送邮件，必须有对应的邮箱账号和密码才能使用" class="headerlink" title="2.需要发送邮件，必须有对应的邮箱账号和密码才能使用"></a>2.需要发送邮件，必须有对应的邮箱账号和密码才能使用</h2><h2 id="3-我的代码是放到服务器上每天定时运行的，没有服务器的同学可以联系我，也可以放到我的服务器上。"><a href="#3-我的代码是放到服务器上每天定时运行的，没有服务器的同学可以联系我，也可以放到我的服务器上。" class="headerlink" title="3.我的代码是放到服务器上每天定时运行的，没有服务器的同学可以联系我，也可以放到我的服务器上。"></a>3.我的代码是放到服务器上每天定时运行的，没有服务器的同学可以联系我，也可以放到我的服务器上。</h2><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/python/python48.jpg"
                     
                ></p>
<h1 id="Gitee上的地址https-gitee-com-rainweb-CSND"><a href="#Gitee上的地址https-gitee-com-rainweb-CSND" class="headerlink" title="Gitee上的地址https://gitee.com/rainweb/CSND"></a><a class="link"   href="https://gitee.com/rainweb/CSND" >Gitee上的地址https://gitee.com/rainweb/CSND <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><h1 id="csdn-new-py"><a href="#csdn-new-py" class="headerlink" title="csdn_new.py"></a>csdn_new.py</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( &quot;utf-8&quot; )</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">import MySQLdb</span><br><span class="line">import datetime</span><br><span class="line">import time</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line">def email(text ,toemail):</span><br><span class="line">    sender = &quot;&quot;   #发送方的邮箱</span><br><span class="line">    password = &quot;&quot;         #邮箱的授权码</span><br><span class="line">    receiver = toemail  #接收方的邮箱</span><br><span class="line">    data_time = time.strftime(&quot;%Y-%m-%d&quot;)</span><br><span class="line">    subject = data_time + &quot;日的CSDN博客报告&quot;   #title邮件标题</span><br><span class="line">    words = text   #text邮件内容</span><br><span class="line">    smtpserver = &#x27;smtp.exmail.qq.com&#x27;</span><br><span class="line">    msg = MIMEText(words, &#x27;plain&#x27;, &#x27;utf-8&#x27;)#中文需参数‘utf-8&#x27;，单字节字符不需要</span><br><span class="line">    msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;) #邮件标题</span><br><span class="line">    msg[&#x27;from&#x27;] = sender #发信人地址</span><br><span class="line">    msg[&#x27;to&#x27;] = receiver #收信人地址</span><br><span class="line">    smtp = smtplib.SMTP_SSL(&quot;smtp.exmail.qq.com&quot;, 465)</span><br><span class="line">    smtp.connect(&#x27;smtp.exmail.qq.com&#x27;)</span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line">    smtp.sendmail(sender, receiver, msg.as_string())</span><br><span class="line">    smtp.quit()</span><br><span class="line">    print data_time + &quot;的邮件发送成功!&quot;</span><br><span class="line"># 实现下载HTML网页源码的函数，url为地址</span><br><span class="line">def DownLoad_Html(url):</span><br><span class="line">    try:</span><br><span class="line">        html = urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line">        print e.code  # 可以打印出来错误代号如404。</span><br><span class="line">        print e.reason  # 可以捕获异常</span><br><span class="line">        html = None</span><br><span class="line">    return html</span><br><span class="line">def operator_SQL(flag,update=None):</span><br><span class="line">    # 将获取的数据存入数据库中</span><br><span class="line">    try:</span><br><span class="line">        conn = MySQLdb.connect(</span><br><span class="line">            host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">            port=3306,</span><br><span class="line">            user=&#x27;root&#x27;,</span><br><span class="line">            passwd=&#x27;root&#x27;,</span><br><span class="line">            # user=&#x27;&#x27;,</span><br><span class="line">            # passwd=&#x27;&#x27;,</span><br><span class="line">            db=&#x27;test&#x27;,</span><br><span class="line">            charset=&#x27;utf8&#x27;,</span><br><span class="line">        )</span><br><span class="line">    except:</span><br><span class="line">        conn = MySQLdb.connect(</span><br><span class="line">            host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">            port=3306,</span><br><span class="line">            # user=&#x27;root&#x27;,</span><br><span class="line">            # passwd=&#x27;root&#x27;,</span><br><span class="line">            user=&#x27;&#x27;,</span><br><span class="line">            passwd=&#x27;&#x27;,</span><br><span class="line">            db=&#x27;test&#x27;,</span><br><span class="line">            charset=&#x27;utf8&#x27;,</span><br><span class="line">        )</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    if flag == 1:</span><br><span class="line">        res = cur.execute(&quot;select * from csdn_article&quot;)</span><br><span class="line">        cur.execute(</span><br><span class="line">            &#x27;insert into csdn_article values(&quot;%s&quot;,&quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;)&#x27; % (res + 1, update[0], update[1], update[2],update[3], 0 ))</span><br><span class="line">    elif flag == 2:</span><br><span class="line">        cur.execute(&quot;update csdn_article set article_read=&quot;+str(update[1])+&quot; where article_id = &quot;+str(update[0]))</span><br><span class="line">        cur.execute(&quot;update csdn_article set change_read=&quot; + str(update[3]) + &quot;  where article_id = &quot; + str(update[0]))</span><br><span class="line">    elif flag == 3:</span><br><span class="line">        res = cur.execute(&quot;select article_read from csdn_article where article_id=&quot;+str(update))</span><br><span class="line">        if res == 1:</span><br><span class="line">            res = cur.fetchmany(res)[0][0]</span><br><span class="line">        elif res == 0:</span><br><span class="line">            res = -1</span><br><span class="line">        return res</span><br><span class="line">    elif flag == 4:</span><br><span class="line">        res = cur.execute(&quot;select article_comment from csdn_article where article_id=&quot; + str(update))</span><br><span class="line">        if res == 1:</span><br><span class="line">            res = cur.fetchmany(res)[0][0]</span><br><span class="line">        return res</span><br><span class="line">    elif flag == 5:</span><br><span class="line">        cur.execute(</span><br><span class="line">            &quot;update csdn_article set article_comment=&quot; + str(update[1]) + &quot;  where article_id = &quot; + str(update[0]))</span><br><span class="line">        # sql_list = list(cur.fetchmany(res))</span><br><span class="line">        # print sql_list[1].count(435)</span><br><span class="line">        # if 435 in sql_list:</span><br><span class="line">        #     print &#x27;432432443242&#x27;</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">def main():</span><br><span class="line">    starttime = datetime.datetime.now()</span><br><span class="line">    article_all_list = []</span><br><span class="line">    text = &#x27;&#x27;</span><br><span class="line">    comment_num = 0</span><br><span class="line">    read_num = 0</span><br><span class="line">    for i in range(1, 10000):</span><br><span class="line">        url = &#x27;http://blog.csdn.net/rain_web/svc/getarticles?pageindex=&#x27; + str(i) + &#x27;&amp;pagesize=1&amp;categoryId=0&amp;&#x27;</span><br><span class="line">        html = DownLoad_Html(url)</span><br><span class="line">        if html == &#x27;&#x27;:</span><br><span class="line">            break</span><br><span class="line">        title = re.findall(&#x27;_blank&quot;&gt;(.*?)&lt;&#x27;, html)</span><br><span class="line">        read = re.findall(&#x27;span&gt;(.*?)&lt;&#x27;, html)</span><br><span class="line">        id = re.findall(&#x27;details/(.*?)&quot;&#x27;, html)</span><br><span class="line">        article_title = title[0]</span><br><span class="line">        article_read = int(read[0])</span><br><span class="line">        article_comment = int(read[1])</span><br><span class="line">        article_id = id[0]</span><br><span class="line">        # 然后将每一篇文章里的数据放入一个列表里，再将这个列表放到大的列表里</span><br><span class="line">        article_list = []</span><br><span class="line">        article_list.append(article_id)</span><br><span class="line">        article_list.append(article_read)</span><br><span class="line">        article_list.append(article_title)</span><br><span class="line">        article_list.append(article_comment)</span><br><span class="line">        # 用于判断有没有阅读次数的改变，如果没有，则在评论次数前加标题</span><br><span class="line">        flag = 0</span><br><span class="line">        # 对每个值去数据库里查找，如果存在就进行比较，不相同则记录下来，并去数据库中修改，如果不存在，则插入这条数据</span><br><span class="line">        read = operator_SQL(3, article_id)</span><br><span class="line">        # 阅读次数 -1 代表数据不存在，插入数据</span><br><span class="line">        if read == -1:</span><br><span class="line">            operator_SQL(1, article_list)</span><br><span class="line">        # 如果数据库中阅读次数和爬取的阅读次数不同</span><br><span class="line">        elif read != article_read:</span><br><span class="line">            # 将阅读次数的差值记录下来</span><br><span class="line">            article_list.append(article_read - read)</span><br><span class="line">            # print article_list[3]</span><br><span class="line">            # 修改阅读次数</span><br><span class="line">            operator_SQL(2, article_list)</span><br><span class="line">            # article_all_list.append(article_list)</span><br><span class="line">            text = text + &#x27;文章：&#x27; + article_title + &#x27;：总阅读次数为：&#x27; + str(article_read) + &#x27;；比昨天增加了：&#x27; + str(</span><br><span class="line">                article_read - read) + &#x27;次。&#x27; + &#x27;\n&#x27;</span><br><span class="line">            read_num = read_num + 1</span><br><span class="line">            # break</span><br><span class="line">        comment = operator_SQL(4, article_id)</span><br><span class="line">        if comment != article_comment:</span><br><span class="line">            # 修改次数</span><br><span class="line">            comment_list = []</span><br><span class="line">            comment_list.append(article_id)</span><br><span class="line">            comment_list.append(article_comment)</span><br><span class="line">            operator_SQL(5, comment_list)</span><br><span class="line">            comment_num = comment_num + 1</span><br><span class="line">            text = text + &#x27;文章：&#x27; + article_title + &#x27;：评论次数为：&#x27; + str(article_comment) + &quot;；比昨天增加了：&quot; + str(</span><br><span class="line">                article_comment - comment) + &#x27;次。&#x27; + &#x27;\n&#x27;</span><br><span class="line">    text = &quot;您今天的CSDN博客信息报告如下：&quot; + &#x27;\n今日有&#x27; + str(read_num) + \</span><br><span class="line">           &#x27;篇文章的阅读数发生了变化\n&#x27; + &#x27;今日有&#x27; + str(comment_num) + &#x27;篇文章的评论数发生了变化\n&#x27; + text</span><br><span class="line">    endtime = datetime.datetime.now()</span><br><span class="line">    text = text + &#x27;\n本次爬虫运行时间为：&#x27; + str((endtime - starttime).seconds) + &#x27;秒&#x27;</span><br><span class="line">    print text</span><br><span class="line">    email(text, &#x27;nylrain@163.com&#x27;)</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP调用百度AI接口人脸识别-语音技术-文本识别-图像识别</title>
    <url>/2018/01/16/article110/</url>
    <content><![CDATA[<h1 id="Rain-AI系统基于百度人工智能接口二次开发"><a href="#Rain-AI系统基于百度人工智能接口二次开发" class="headerlink" title="Rain-AI系统基于百度人工智能接口二次开发"></a>Rain-AI系统基于百度人工智能接口二次开发</h1><h2 id="百度云免费开放了大量的人工智能接口，并且配置了详尽的说明文档和SDK，我用PHP将其中大部分接口封装好，只要在config里的rain-function-php中添加自己的密钥就可以使用，我还添加了使用记录功能，用户每次使用都会在数据库中记录IP等各种信息，还有对每日使用次数也进行了限制，你可以自由更改所需要限制的次数，根据这两个数据库请自行开发后台程序，就可以监测用户使用情况，界面UI也修改了很多遍，可以完美使用。对上传的图片进行了压缩，压缩类功能在config中的image里。"><a href="#百度云免费开放了大量的人工智能接口，并且配置了详尽的说明文档和SDK，我用PHP将其中大部分接口封装好，只要在config里的rain-function-php中添加自己的密钥就可以使用，我还添加了使用记录功能，用户每次使用都会在数据库中记录IP等各种信息，还有对每日使用次数也进行了限制，你可以自由更改所需要限制的次数，根据这两个数据库请自行开发后台程序，就可以监测用户使用情况，界面UI也修改了很多遍，可以完美使用。对上传的图片进行了压缩，压缩类功能在config中的image里。" class="headerlink" title="百度云免费开放了大量的人工智能接口，并且配置了详尽的说明文档和SDK，我用PHP将其中大部分接口封装好，只要在config里的rain_function.php中添加自己的密钥就可以使用，我还添加了使用记录功能，用户每次使用都会在数据库中记录IP等各种信息，还有对每日使用次数也进行了限制，你可以自由更改所需要限制的次数，根据这两个数据库请自行开发后台程序，就可以监测用户使用情况，界面UI也修改了很多遍，可以完美使用。对上传的图片进行了压缩，压缩类功能在config中的image里。"></a>百度云免费开放了大量的人工智能接口，并且配置了详尽的说明文档和SDK，我用PHP将其中大部分接口封装好，只要在config里的rain_function.php中添加自己的密钥就可以使用，我还添加了使用记录功能，用户每次使用都会在数据库中记录IP等各种信息，还有对每日使用次数也进行了限制，你可以自由更改所需要限制的次数，根据这两个数据库请自行开发后台程序，就可以监测用户使用情况，界面UI也修改了很多遍，可以完美使用。对上传的图片进行了压缩，压缩类功能在config中的image里。</h2><h2 id="里面已经包含的功能有人脸检测，人脸对比，语音合成，文字识别，动物识别，植物识别，车辆识别，Logo识别，自然语言处理的情感分析，词法分析，文本对比，评论观点抽取，DNN模型等八个功能。"><a href="#里面已经包含的功能有人脸检测，人脸对比，语音合成，文字识别，动物识别，植物识别，车辆识别，Logo识别，自然语言处理的情感分析，词法分析，文本对比，评论观点抽取，DNN模型等八个功能。" class="headerlink" title="里面已经包含的功能有人脸检测，人脸对比，语音合成，文字识别，动物识别，植物识别，车辆识别，Logo识别，自然语言处理的情感分析，词法分析，文本对比，评论观点抽取，DNN模型等八个功能。"></a>里面已经包含的功能有人脸检测，人脸对比，语音合成，文字识别，动物识别，植物识别，车辆识别，Logo识别，自然语言处理的情感分析，词法分析，文本对比，评论观点抽取，DNN模型等八个功能。</h2><h2 id="这个项目是使用原生PHP写的，效率让人担忧，所以今后不再维护，我最近在用thinkphp进行重写，到时候全面采用ajax请求，会提高很多效率，敬请期待。"><a href="#这个项目是使用原生PHP写的，效率让人担忧，所以今后不再维护，我最近在用thinkphp进行重写，到时候全面采用ajax请求，会提高很多效率，敬请期待。" class="headerlink" title="这个项目是使用原生PHP写的，效率让人担忧，所以今后不再维护，我最近在用thinkphp进行重写，到时候全面采用ajax请求，会提高很多效率，敬请期待。"></a>这个项目是使用原生PHP写的，效率让人担忧，所以今后不再维护，我最近在用thinkphp进行重写，到时候全面采用ajax请求，会提高很多效率，敬请期待。</h2><h2 id="下面是使用效果图"><a href="#下面是使用效果图" class="headerlink" title="下面是使用效果图"></a>下面是使用效果图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php45.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php46.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php47.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php48.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php49.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php50.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php51.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php52.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php53.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php54.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php55.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php56.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php57.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php58.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php59.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php60.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp5调用七牛云SDK上传文件的详细步骤</title>
    <url>/2018/01/19/article111/</url>
    <content><![CDATA[<h1 id="thinkphp5调用七牛云SDK上传文件的详细步骤"><a href="#thinkphp5调用七牛云SDK上传文件的详细步骤" class="headerlink" title="thinkphp5调用七牛云SDK上传文件的详细步骤"></a>thinkphp5调用七牛云SDK上传文件的详细步骤</h1><h3 id="今天需要将图片上传到七牛云上，在网上搜了些教程，都不怎么全，有的还缺东西，所以我把自己弄成功的步骤写出来，希望能帮到其他人，这个文章只适合thinkphp5，其他版本的请参考其他文档，文档中需要的七牛云PHP-SDK，请在七牛云官方下载，或者点我的文件床下载也可以，地址是http-filebed-rain1024-com"><a href="#今天需要将图片上传到七牛云上，在网上搜了些教程，都不怎么全，有的还缺东西，所以我把自己弄成功的步骤写出来，希望能帮到其他人，这个文章只适合thinkphp5，其他版本的请参考其他文档，文档中需要的七牛云PHP-SDK，请在七牛云官方下载，或者点我的文件床下载也可以，地址是http-filebed-rain1024-com" class="headerlink" title="今天需要将图片上传到七牛云上，在网上搜了些教程，都不怎么全，有的还缺东西，所以我把自己弄成功的步骤写出来，希望能帮到其他人，这个文章只适合thinkphp5，其他版本的请参考其他文档，文档中需要的七牛云PHP-SDK，请在七牛云官方下载，或者点我的文件床下载也可以，地址是http://filebed.rain1024.com/"></a>今天需要将图片上传到七牛云上，在网上搜了些教程，都不怎么全，有的还缺东西，所以我把自己弄成功的步骤写出来，希望能帮到其他人，这个文章只适合thinkphp5，其他版本的请参考其他文档，文档中需要的七牛云PHP-SDK，请在七牛云官方下载，或者点我的文件床下载也可以，地址是<a class="link"   href="http://filebed.rain1024.com/" >http://filebed.rain1024.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="1-先在verdor里新建一个文件夹：-Qiniu"><a href="#1-先在verdor里新建一个文件夹：-Qiniu" class="headerlink" title="1.先在verdor里新建一个文件夹： Qiniu"></a>1.先在verdor里新建一个文件夹： Qiniu</h3><h3 id="2-将SDK压缩包中的文件全部解压到Qiniu文件夹中"><a href="#2-将SDK压缩包中的文件全部解压到Qiniu文件夹中" class="headerlink" title="2.将SDK压缩包中的文件全部解压到Qiniu文件夹中"></a>2.将SDK压缩包中的文件全部解压到Qiniu文件夹中</h3><h3 id="3-在Controller中，引用类"><a href="#3-在Controller中，引用类" class="headerlink" title="3.在Controller中，引用类"></a>3.在Controller中，引用类</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor(&#x27;Qiniu.autoload&#x27;);</span><br><span class="line">use Qiniu\Auth as Auth;</span><br><span class="line">use Qiniu\Storage\BucketManager;</span><br><span class="line">use Qiniu\Storage\UploadManager;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-在config-php中添加配置"><a href="#4-在config-php中添加配置" class="headerlink" title="4.在config.php中添加配置"></a>4.在config.php中添加配置</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;ACCESSKEY&#x27; =&gt; &#x27;&#x27;,//你的accessKey</span><br><span class="line">&#x27;SECRETKEY&#x27; =&gt; &#x27;&#x27;,//你的secretKey</span><br><span class="line">&#x27;BUCKET&#x27; =&gt; &#x27;&#x27;,//上传的空间</span><br><span class="line">&#x27;DOMAIN&#x27;=&gt;&#x27;&#x27;,//空间绑定的域名</span><br></pre></td></tr></table></figure></div>

<h3 id="5-上传操作的函数"><a href="#5-上传操作的函数" class="headerlink" title="5.上传操作的函数"></a>5.上传操作的函数</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file = request()-&gt;file(&#x27;image&#x27;);</span><br><span class="line">// 要上传图片的本地路径</span><br><span class="line">$filePath = $file-&gt;getRealPath();</span><br><span class="line">$ext = pathinfo($file-&gt;getInfo(&#x27;name&#x27;), PATHINFO_EXTENSION);  //后缀</span><br><span class="line">//获取当前控制器名称</span><br><span class="line">$controllerName = &#x27;index&#x27;;</span><br><span class="line">// 上传到七牛后保存的文件名</span><br><span class="line">$key =substr(md5($file-&gt;getRealPath()) , 0, 5). date(&#x27;YmdHis&#x27;) . rand(0, 9999) . &#x27;.&#x27; . $ext;</span><br><span class="line">// 需要填写你的 Access Key 和 Secret Key</span><br><span class="line">$accessKey = config(&#x27;ACCESSKEY&#x27;);</span><br><span class="line">$secretKey = config(&#x27;SECRETKEY&#x27;);</span><br><span class="line">// 构建鉴权对象</span><br><span class="line">$auth = new Auth($accessKey, $secretKey);</span><br><span class="line">// 要上传的空间</span><br><span class="line">$bucket = config(&#x27;BUCKET&#x27;);</span><br><span class="line">$domain = config(&#x27;DOMAINImage&#x27;);</span><br><span class="line">$token = $auth-&gt;uploadToken($bucket);</span><br><span class="line">// 初始化 UploadManager 对象并进行文件的上传</span><br><span class="line">$uploadMgr = new UploadManager();</span><br><span class="line">// 调用 UploadManager 的 putFile 方法进行文件的上传</span><br><span class="line">list($ret, $err) = $uploadMgr-&gt;putFile($token, $key, $filePath);</span><br><span class="line">if ($err !== null) &#123;</span><br><span class="line">    echo [&quot;err&quot;=&gt;1,&quot;msg&quot;=&gt;$err,&quot;data&quot;=&gt;&quot;&quot;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //返回图片的完整URL</span><br><span class="line">    var_dump($ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>基于文字识别---实现点击图片任意位置文字即可翻译的功能</title>
    <url>/2018/01/19/article112/</url>
    <content><![CDATA[<h1 id="基于文字识别—实现点击图片任意位置文字即可翻译的功能"><a href="#基于文字识别—实现点击图片任意位置文字即可翻译的功能" class="headerlink" title="基于文字识别—实现点击图片任意位置文字即可翻译的功能"></a>基于文字识别—实现点击图片任意位置文字即可翻译的功能</h1><h3 id="文字识别功能是基于百度接口的，以前只是做了一个简单的识别，将识别出的文字显示出来，后来想能不能直接点击图片上的文字，然后将文字读取出来，用语音读出文字，或者去翻译文字，这样无疑更加方便，实用，快捷。"><a href="#文字识别功能是基于百度接口的，以前只是做了一个简单的识别，将识别出的文字显示出来，后来想能不能直接点击图片上的文字，然后将文字读取出来，用语音读出文字，或者去翻译文字，这样无疑更加方便，实用，快捷。" class="headerlink" title="文字识别功能是基于百度接口的，以前只是做了一个简单的识别，将识别出的文字显示出来，后来想能不能直接点击图片上的文字，然后将文字读取出来，用语音读出文字，或者去翻译文字，这样无疑更加方便，实用，快捷。"></a>文字识别功能是基于百度接口的，以前只是做了一个简单的识别，将识别出的文字显示出来，后来想能不能直接点击图片上的文字，然后将文字读取出来，用语音读出文字，或者去翻译文字，这样无疑更加方便，实用，快捷。</h3><h3 id="我的想法是，先将整个图片中的文字识别出来，然后在图片上写一个相应大小的div遮罩层，再在每行文字上形成一个遮罩层，当点击图片上的文字时，其实点击的就是图片上的div层，然后将div中所包含的数据传到后端处理，实现效果如下图"><a href="#我的想法是，先将整个图片中的文字识别出来，然后在图片上写一个相应大小的div遮罩层，再在每行文字上形成一个遮罩层，当点击图片上的文字时，其实点击的就是图片上的div层，然后将div中所包含的数据传到后端处理，实现效果如下图" class="headerlink" title="我的想法是，先将整个图片中的文字识别出来，然后在图片上写一个相应大小的div遮罩层，再在每行文字上形成一个遮罩层，当点击图片上的文字时，其实点击的就是图片上的div层，然后将div中所包含的数据传到后端处理，实现效果如下图"></a>我的想法是，先将整个图片中的文字识别出来，然后在图片上写一个相应大小的div遮罩层，再在每行文字上形成一个遮罩层，当点击图片上的文字时，其实点击的就是图片上的div层，然后将div中所包含的数据传到后端处理，实现效果如下图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/html/html10.png"
                     
                ></p>
<h3 id="实现前，需要将数据转换，获得每行数据的left，top，height，width的属性值，然后用js获取图片大小，然后将div设置为相同大小，具体操作看代码，在形成遮罩层的代码比较麻烦"><a href="#实现前，需要将数据转换，获得每行数据的left，top，height，width的属性值，然后用js获取图片大小，然后将div设置为相同大小，具体操作看代码，在形成遮罩层的代码比较麻烦" class="headerlink" title="实现前，需要将数据转换，获得每行数据的left，top，height，width的属性值，然后用js获取图片大小，然后将div设置为相同大小，具体操作看代码，在形成遮罩层的代码比较麻烦"></a>实现前，需要将数据转换，获得每行数据的left，top，height，width的属性值，然后用js获取图片大小，然后将div设置为相同大小，具体操作看代码，在形成遮罩层的代码比较麻烦</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;img_zhezhao&quot; style=&quot;position: relative;&quot;  &gt;</span><br><span class="line">                &lt;img src=&quot;&#123;$image_src&#125;&quot; id=&quot;img_s&quot;  alt=&quot;&quot; align=&quot;left&quot;&gt;</span><br><span class="line">                &#123;volist name=&quot;result&quot; id=&quot;line&quot;&#125;</span><br><span class="line">                &lt;div style=&quot;height: &#123;$line.height&#125;px;width: &#123;$line.width&#125;px;border:1px solid green;position: absolute; top: 1px; left: 0px;margin-left: &#123;$line.left&#125;px;margin-top: &#123;$line.top&#125;px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &#123;/volist&#125;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="下面是使用效果，"><a href="#下面是使用效果，" class="headerlink" title="下面是使用效果，"></a>下面是使用效果，</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/html/html6.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/html/html7.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/html/html8.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/html/html9.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>AI</tag>
        <tag>文字识别</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java开发的图书管理系统</title>
    <url>/2018/03/21/article113/</url>
    <content><![CDATA[<h1 id="使用Java开发的图书管理系统"><a href="#使用Java开发的图书管理系统" class="headerlink" title="使用Java开发的图书管理系统"></a>使用Java开发的图书管理系统</h1><h2 id="如题，用Java开发而成，具备基础功能，读者可以注册登录，登录时会判断账号类型再分别跳到各自对应的页面，读者可以查找，借阅，还书，查看历史借阅记录，修改个人资料，密码等，管理员可以修改添加图书，修改添加读者，修改添加分类，管理借阅信息等等。"><a href="#如题，用Java开发而成，具备基础功能，读者可以注册登录，登录时会判断账号类型再分别跳到各自对应的页面，读者可以查找，借阅，还书，查看历史借阅记录，修改个人资料，密码等，管理员可以修改添加图书，修改添加读者，修改添加分类，管理借阅信息等等。" class="headerlink" title="如题，用Java开发而成，具备基础功能，读者可以注册登录，登录时会判断账号类型再分别跳到各自对应的页面，读者可以查找，借阅，还书，查看历史借阅记录，修改个人资料，密码等，管理员可以修改添加图书，修改添加读者，修改添加分类，管理借阅信息等等。"></a>如题，用Java开发而成，具备基础功能，读者可以注册登录，登录时会判断账号类型再分别跳到各自对应的页面，读者可以查找，借阅，还书，查看历史借阅记录，修改个人资料，密码等，管理员可以修改添加图书，修改添加读者，修改添加分类，管理借阅信息等等。</h2><p><a class="link"   href="https://github.com/rainweb521/java_book_management" >项目在GitHub上的链接地址https://github.com/rainweb521/java_book_management <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://gitee.com/rainweb/book_management_system" >项目在码云上的链接地址https://gitee.com/rainweb/book_management_system <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="具体功能如下图"><a href="#具体功能如下图" class="headerlink" title="具体功能如下图"></a>具体功能如下图</h2><h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java46.jpg"
                     
                ></p>
<h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java47.jpg"
                     
                ></p>
<h2 id="读者登录页面"><a href="#读者登录页面" class="headerlink" title="读者登录页面"></a>读者登录页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java48.jpg"
                     
                ></p>
<h2 id="读者资料修改页面"><a href="#读者资料修改页面" class="headerlink" title="读者资料修改页面"></a>读者资料修改页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java49.jpg"
                     
                ></p>
<h2 id="读者图书查询页面"><a href="#读者图书查询页面" class="headerlink" title="读者图书查询页面"></a>读者图书查询页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java50.jpg"
                     
                ></p>
<h2 id="读者当前借阅信息页面"><a href="#读者当前借阅信息页面" class="headerlink" title="读者当前借阅信息页面"></a>读者当前借阅信息页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java51.jpg"
                     
                ></p>
<h2 id="读者历史借阅信息显示页面"><a href="#读者历史借阅信息显示页面" class="headerlink" title="读者历史借阅信息显示页面"></a>读者历史借阅信息显示页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java52.jpg"
                     
                ></p>
<h2 id="管理员登录页面"><a href="#管理员登录页面" class="headerlink" title="管理员登录页面"></a>管理员登录页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java53.jpg"
                     
                ></p>
<h2 id="管理员管理图书信息页面"><a href="#管理员管理图书信息页面" class="headerlink" title="管理员管理图书信息页面"></a>管理员管理图书信息页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java54.jpg"
                     
                ></p>
<h2 id="管理员添加图书页面"><a href="#管理员添加图书页面" class="headerlink" title="管理员添加图书页面"></a>管理员添加图书页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java55.jpg"
                     
                ></p>
<h2 id="管理员管理用户界面"><a href="#管理员管理用户界面" class="headerlink" title="管理员管理用户界面"></a>管理员管理用户界面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java56.jpg"
                     
                ></p>
<h2 id="管理员添加读者信息的页面"><a href="#管理员添加读者信息的页面" class="headerlink" title="管理员添加读者信息的页面"></a>管理员添加读者信息的页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java57.jpg"
                     
                ></p>
<h2 id="管理员管理图书分类的页面"><a href="#管理员管理图书分类的页面" class="headerlink" title="管理员管理图书分类的页面"></a>管理员管理图书分类的页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java58.jpg"
                     
                ></p>
<h2 id="管理员管理图书借阅信息的页面"><a href="#管理员管理图书借阅信息的页面" class="headerlink" title="管理员管理图书借阅信息的页面"></a>管理员管理图书借阅信息的页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java59.jpg"
                     
                ></p>
<h2 id="管理员管理已还书信息的页面"><a href="#管理员管理已还书信息的页面" class="headerlink" title="管理员管理已还书信息的页面"></a>管理员管理已还书信息的页面</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://gitee.com/rainweb/book_management_system/raw/master/WebContent/static/img/java60.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP使用summernote编辑器</title>
    <url>/2018/03/22/article114/</url>
    <content><![CDATA[<h1 id="PHP使用summernote编辑器"><a href="#PHP使用summernote编辑器" class="headerlink" title="PHP使用summernote编辑器"></a>PHP使用summernote编辑器</h1><h2 id="summernote是一个很好用的编辑器，简单大方，基本功能都有，我只记录使用图片上传接口和获取内容接口功能的演示，其他的功能暂时还没有用到，下面是summernote编辑器的样子"><a href="#summernote是一个很好用的编辑器，简单大方，基本功能都有，我只记录使用图片上传接口和获取内容接口功能的演示，其他的功能暂时还没有用到，下面是summernote编辑器的样子" class="headerlink" title="summernote是一个很好用的编辑器，简单大方，基本功能都有，我只记录使用图片上传接口和获取内容接口功能的演示，其他的功能暂时还没有用到，下面是summernote编辑器的样子"></a>summernote是一个很好用的编辑器，简单大方，基本功能都有，我只记录使用图片上传接口和获取内容接口功能的演示，其他的功能暂时还没有用到，下面是summernote编辑器的样子</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php61.jpg"
                     
                ></p>
<h2 id="1-summernote界面的代码"><a href="#1-summernote界面的代码" class="headerlink" title="1.summernote界面的代码"></a>1.summernote界面的代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;图集内容上传&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=&quot;http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.3/summernote.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.3/summernote.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/public/static/assets/css/amazeui.min.css&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;width: 80%;margin: auto;&quot; &gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;/index.php/admin/picture/form&quot; id=&quot;myform&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;summernote&quot; &gt;123&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;content&quot; id=&quot;content&quot; value=&quot;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;am-form-group&quot; align=&quot;center&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;am-u-sm-12&quot; &gt;</span><br><span class="line">            &lt;button  type=&quot;button&quot; class=&quot;am-btn am-btn-default am-btn-danger&quot; onclick=&quot;submit_content()&quot;&gt;保存内容&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function submit_content()&#123;</span><br><span class="line">        var content = $(&#x27;#summernote&#x27;).summernote(&#x27;code&#x27;);</span><br><span class="line">        document.getElementById(&#x27;content&#x27;).value = content;</span><br><span class="line">        document.getElementById(&#x27;myform&#x27;).submit();</span><br><span class="line">    &#125;</span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        var summernote = $(&#x27;#summernote&#x27;).summernote(&#123;</span><br><span class="line">            maxHeight: 500,</span><br><span class="line">            minHeight: 400,</span><br><span class="line">            lang: &#x27;zh-CN&#x27;,</span><br><span class="line">            focus: true,</span><br><span class="line">            callbacks:&#123;</span><br><span class="line">                onImageUpload: function(files,editor,$editable)&#123;</span><br><span class="line">                    sendFile(files);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    //选择图片时把图片上传到服务器再读取服务器指定的存储位置显示在富文本区域内</span><br><span class="line">    function sendFile(files, editor, $editable) &#123;</span><br><span class="line">        var formdata = new FormData();</span><br><span class="line">        formdata.append(&quot;file&quot;, $(&#x27;.note-image-input&#x27;)[0].files[0]);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            data : formdata,</span><br><span class="line">            type : &quot;POST&quot;,</span><br><span class="line">            url : &quot;/index.php/admin/picture/upload_image&quot;, //图片上传出来的url，返回的是图片上传后的路径，http格式</span><br><span class="line">            cache : false,</span><br><span class="line">            contentType : false,</span><br><span class="line">            processData : false,</span><br><span class="line">            dataType : &quot;json&quot;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">//                alert(data);</span><br><span class="line">                //data是返回的hash,key之类的值，key是定义的文件名</span><br><span class="line">                $(&#x27;#summernote&#x27;).summernote(&#x27;insertImage&#x27;, data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error:function()&#123;</span><br><span class="line">                alert(&quot;上传失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="var-content-39-summernote-39-summernote-39-code-39-这段代码可以获取到编辑器中的内容"><a href="#var-content-39-summernote-39-summernote-39-code-39-这段代码可以获取到编辑器中的内容" class="headerlink" title="var content = $(&#39;#summernote&#39;).summernote(&#39;code&#39;);这段代码可以获取到编辑器中的内容"></a><code>var content = $(&#39;#summernote&#39;).summernote(&#39;code&#39;);</code>这段代码可以获取到编辑器中的内容</h2><h2 id="sendfile函数中，url表示图片上传到PHP函数的地址，返回值为json格式的图片地址"><a href="#sendfile函数中，url表示图片上传到PHP函数的地址，返回值为json格式的图片地址" class="headerlink" title="sendfile函数中，url表示图片上传到PHP函数的地址，返回值为json格式的图片地址"></a>sendfile函数中，url表示图片上传到PHP函数的地址，返回值为json格式的图片地址</h2><h2 id="下面是thinkphp5中的代码"><a href="#下面是thinkphp5中的代码" class="headerlink" title="下面是thinkphp5中的代码"></a>下面是thinkphp5中的代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function upload_image($name)&#123;</span><br><span class="line">        $image = \request()-&gt;file($name);</span><br><span class="line">        if($image)&#123;</span><br><span class="line">            /**</span><br><span class="line">             * //判断图片文件的格式</span><br><span class="line">             * 判断图片大小 最大为10mb</span><br><span class="line">             */</span><br><span class="line">            $info = $image-&gt;validate([&#x27;size&#x27;=&gt;10000000,&#x27;ext&#x27;=&gt;&#x27;jpg,png,jpeg&#x27;])-&gt;move(ROOT_PATH . &#x27;public&#x27; . DS . &#x27;uploads&#x27;);</span><br><span class="line">//             echo $info-&gt;getSize();</span><br><span class="line">//        $info-&gt;getExtension()   //判断图片文件的格式</span><br><span class="line">//        $info-&gt;getSize()&gt;10000000 //判断图片文件的格式</span><br><span class="line">            if($info)&#123;</span><br><span class="line">                $image_src = &#x27;/public/uploads/&#x27;.$info-&gt;getSaveName();</span><br><span class="line">                return $image_src;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return &#x27;0&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return &#x27;0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>在内网使用windows server搭建WAMP环境</title>
    <url>/2018/04/29/article115/</url>
    <content><![CDATA[<h1 id="在内网使用windows-server搭建WAMP环境"><a href="#在内网使用windows-server搭建WAMP环境" class="headerlink" title="在内网使用windows server搭建WAMP环境"></a>在内网使用windows server搭建WAMP环境</h1><h2 id="下面的操作流程，可以供在学校内网搭建服务器的同学使用，因为内网连外网需要通过校园网来登录账号，而外网的例如阿里云则不存在这些问题，因为它们就是暴露在外网的。"><a href="#下面的操作流程，可以供在学校内网搭建服务器的同学使用，因为内网连外网需要通过校园网来登录账号，而外网的例如阿里云则不存在这些问题，因为它们就是暴露在外网的。" class="headerlink" title="下面的操作流程，可以供在学校内网搭建服务器的同学使用，因为内网连外网需要通过校园网来登录账号，而外网的例如阿里云则不存在这些问题，因为它们就是暴露在外网的。"></a>下面的操作流程，可以供在学校内网搭建服务器的同学使用，因为内网连外网需要通过校园网来登录账号，而外网的例如阿里云则不存在这些问题，因为它们就是暴露在外网的。</h2><h2 id="前几天老师在学校服务器上给我申请了一个云服务器空间，来做实验用，机器的的配置还是很可观的，8核16G内存，做实验是绰绰有余。负责服务器的老师在问我要什么系统时，我想当然的说，centos7，但安装好以后我是懵逼的，面对命令行界面来搭建开发环境本来没有问题，但这是内网，连外网需要登录校园卡账号，平时都是在游览器里输入的，换成了命令行，简直不知从何做起。"><a href="#前几天老师在学校服务器上给我申请了一个云服务器空间，来做实验用，机器的的配置还是很可观的，8核16G内存，做实验是绰绰有余。负责服务器的老师在问我要什么系统时，我想当然的说，centos7，但安装好以后我是懵逼的，面对命令行界面来搭建开发环境本来没有问题，但这是内网，连外网需要登录校园卡账号，平时都是在游览器里输入的，换成了命令行，简直不知从何做起。" class="headerlink" title="前几天老师在学校服务器上给我申请了一个云服务器空间，来做实验用，机器的的配置还是很可观的，8核16G内存，做实验是绰绰有余。负责服务器的老师在问我要什么系统时，我想当然的说，centos7，但安装好以后我是懵逼的，面对命令行界面来搭建开发环境本来没有问题，但这是内网，连外网需要登录校园卡账号，平时都是在游览器里输入的，换成了命令行，简直不知从何做起。"></a>前几天老师在学校服务器上给我申请了一个云服务器空间，来做实验用，机器的的配置还是很可观的，8核16G内存，做实验是绰绰有余。负责服务器的老师在问我要什么系统时，我想当然的说，centos7，但安装好以后我是懵逼的，面对命令行界面来搭建开发环境本来没有问题，但这是内网，连外网需要登录校园卡账号，平时都是在游览器里输入的，换成了命令行，简直不知从何做起。</h2><h2 id="我想到了安装一个界面，但，没网。自己又在云服务器里各种折腾，最后删掉了原来的主机，安装了一个windows-server2008，默默的接受了这个现实，接下来，我找到了自己最常用的宝塔面板，然后用笔记本远程连接服务器，安装宝塔，这些操作官方给的都很简单了，就是比Linux里多了一个IIS服务器，想着先试试，后来放了系统发现有问题，和本机运行不一样，又切换成了Apache，至于MySQL，ftp都可以选择性的安装，宝塔在windows里是一个程序界面，也可以在浏览器中打开，就是对应的IP-端口号888，建议在浏览器中操作，功能比较齐全，程序里比较简单，有些软件不能安装。在网页里有一个软件管理菜单，有很多功能，比如宝塔一键部署源码，还有各种PHP版本，DNS，又拍云，七牛，阿里的接口，Tomcat，Redis，Memcached，MongoDB等很多好用的功能，只可惜windows版本不支持gitlab。"><a href="#我想到了安装一个界面，但，没网。自己又在云服务器里各种折腾，最后删掉了原来的主机，安装了一个windows-server2008，默默的接受了这个现实，接下来，我找到了自己最常用的宝塔面板，然后用笔记本远程连接服务器，安装宝塔，这些操作官方给的都很简单了，就是比Linux里多了一个IIS服务器，想着先试试，后来放了系统发现有问题，和本机运行不一样，又切换成了Apache，至于MySQL，ftp都可以选择性的安装，宝塔在windows里是一个程序界面，也可以在浏览器中打开，就是对应的IP-端口号888，建议在浏览器中操作，功能比较齐全，程序里比较简单，有些软件不能安装。在网页里有一个软件管理菜单，有很多功能，比如宝塔一键部署源码，还有各种PHP版本，DNS，又拍云，七牛，阿里的接口，Tomcat，Redis，Memcached，MongoDB等很多好用的功能，只可惜windows版本不支持gitlab。" class="headerlink" title="我想到了安装一个界面，但，没网。自己又在云服务器里各种折腾，最后删掉了原来的主机，安装了一个windows server2008，默默的接受了这个现实，接下来，我找到了自己最常用的宝塔面板，然后用笔记本远程连接服务器，安装宝塔，这些操作官方给的都很简单了，就是比Linux里多了一个IIS服务器，想着先试试，后来放了系统发现有问题，和本机运行不一样，又切换成了Apache，至于MySQL，ftp都可以选择性的安装，宝塔在windows里是一个程序界面，也可以在浏览器中打开，就是对应的IP+端口号888，建议在浏览器中操作，功能比较齐全，程序里比较简单，有些软件不能安装。在网页里有一个软件管理菜单，有很多功能，比如宝塔一键部署源码，还有各种PHP版本，DNS，又拍云，七牛，阿里的接口，Tomcat，Redis，Memcached，MongoDB等很多好用的功能，只可惜windows版本不支持gitlab。"></a>我想到了安装一个界面，但，没网。自己又在云服务器里各种折腾，最后删掉了原来的主机，安装了一个windows server2008，默默的接受了这个现实，接下来，我找到了自己最常用的宝塔面板，然后用笔记本远程连接服务器，安装宝塔，这些操作官方给的都很简单了，就是比Linux里多了一个IIS服务器，想着先试试，后来放了系统发现有问题，和本机运行不一样，又切换成了Apache，至于MySQL，ftp都可以选择性的安装，宝塔在windows里是一个程序界面，也可以在浏览器中打开，就是对应的IP+端口号888，建议在浏览器中操作，功能比较齐全，程序里比较简单，有些软件不能安装。在网页里有一个软件管理菜单，有很多功能，比如宝塔一键部署源码，还有各种PHP版本，DNS，又拍云，七牛，阿里的接口，Tomcat，Redis，Memcached，MongoDB等很多好用的功能，只可惜windows版本不支持gitlab。</h2><h2 id="自此，环境就搭建完了，建议安装一个KOD可道云，网页版的，当云盘或者在线编辑器很好使，而且内网的网速足够快，上百MB的传输速度，不花流量，超越各种云盘。我们学校的校园网支持外网用VPN接入，回家也可以使用，只是网速就随外网宽带速率了。我还打算弄一个内网穿透，这样不用VPN，在任意地方都可以访问这台服务器，能折腾的事情有很多，以后再慢慢做。博客先更到这里。"><a href="#自此，环境就搭建完了，建议安装一个KOD可道云，网页版的，当云盘或者在线编辑器很好使，而且内网的网速足够快，上百MB的传输速度，不花流量，超越各种云盘。我们学校的校园网支持外网用VPN接入，回家也可以使用，只是网速就随外网宽带速率了。我还打算弄一个内网穿透，这样不用VPN，在任意地方都可以访问这台服务器，能折腾的事情有很多，以后再慢慢做。博客先更到这里。" class="headerlink" title="自此，环境就搭建完了，建议安装一个KOD可道云，网页版的，当云盘或者在线编辑器很好使，而且内网的网速足够快，上百MB的传输速度，不花流量，超越各种云盘。我们学校的校园网支持外网用VPN接入，回家也可以使用，只是网速就随外网宽带速率了。我还打算弄一个内网穿透，这样不用VPN，在任意地方都可以访问这台服务器，能折腾的事情有很多，以后再慢慢做。博客先更到这里。"></a>自此，环境就搭建完了，建议安装一个KOD可道云，网页版的，当云盘或者在线编辑器很好使，而且内网的网速足够快，上百MB的传输速度，不花流量，超越各种云盘。我们学校的校园网支持外网用VPN接入，回家也可以使用，只是网速就随外网宽带速率了。我还打算弄一个内网穿透，这样不用VPN，在任意地方都可以访问这台服务器，能折腾的事情有很多，以后再慢慢做。博客先更到这里。</h2>]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
        <tag>技术知识</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>SendEmail--邮件分发管理系统</title>
    <url>/2018/05/01/article116/</url>
    <content><![CDATA[<h1 id="SendEmail–邮件分发管理系统"><a href="#SendEmail–邮件分发管理系统" class="headerlink" title="SendEmail–邮件分发管理系统"></a>SendEmail–邮件分发管理系统</h1><h2 id="这是一个一直很想做的项目，需求就是发送邮件，以前在博客上发过各种编程语言如何发送邮件的代码，无一例外都需要配置各种参数，Python还好，有库可以直接用，但Java和PHP就得导入包，还可能出各种错，当好不容易解决了这个项目里的问题，下个项目也需要发送邮件的时候，就又开始了新的一波折腾。而且还有一个问题，就是安全性，发送邮件需要配置邮箱密码或者授权码，每个项目都配置一遍，难免会有疏漏，如果密码泄露出去就不太好了。"><a href="#这是一个一直很想做的项目，需求就是发送邮件，以前在博客上发过各种编程语言如何发送邮件的代码，无一例外都需要配置各种参数，Python还好，有库可以直接用，但Java和PHP就得导入包，还可能出各种错，当好不容易解决了这个项目里的问题，下个项目也需要发送邮件的时候，就又开始了新的一波折腾。而且还有一个问题，就是安全性，发送邮件需要配置邮箱密码或者授权码，每个项目都配置一遍，难免会有疏漏，如果密码泄露出去就不太好了。" class="headerlink" title="这是一个一直很想做的项目，需求就是发送邮件，以前在博客上发过各种编程语言如何发送邮件的代码，无一例外都需要配置各种参数，Python还好，有库可以直接用，但Java和PHP就得导入包，还可能出各种错，当好不容易解决了这个项目里的问题，下个项目也需要发送邮件的时候，就又开始了新的一波折腾。而且还有一个问题，就是安全性，发送邮件需要配置邮箱密码或者授权码，每个项目都配置一遍，难免会有疏漏，如果密码泄露出去就不太好了。"></a>这是一个一直很想做的项目，需求就是发送邮件，以前在博客上发过各种编程语言如何发送邮件的代码，无一例外都需要配置各种参数，Python还好，有库可以直接用，但Java和PHP就得导入包，还可能出各种错，当好不容易解决了这个项目里的问题，下个项目也需要发送邮件的时候，就又开始了新的一波折腾。而且还有一个问题，就是安全性，发送邮件需要配置邮箱密码或者授权码，每个项目都配置一遍，难免会有疏漏，如果密码泄露出去就不太好了。</h2><h2 id="所以我想做一个这样的东西，邮件发送只在一个系统完成，其他地方需要发送邮件了，直接调用系统所开放的接口，每个接口分配一个授权码，授权码可以设置失效期，使用次数，固定IP等等，当授权码泄露了直接在系统中关闭掉就可以，安全方便，还可以查看已经发送的邮件，发送请求的IP地址，把这些都整合在一起。这个功能其他云服务商也有提供，但我就是不想用，就想自己写一个，-以前没时间都在拖，今天终于下决心开始写了。"><a href="#所以我想做一个这样的东西，邮件发送只在一个系统完成，其他地方需要发送邮件了，直接调用系统所开放的接口，每个接口分配一个授权码，授权码可以设置失效期，使用次数，固定IP等等，当授权码泄露了直接在系统中关闭掉就可以，安全方便，还可以查看已经发送的邮件，发送请求的IP地址，把这些都整合在一起。这个功能其他云服务商也有提供，但我就是不想用，就想自己写一个，-以前没时间都在拖，今天终于下决心开始写了。" class="headerlink" title="所以我想做一个这样的东西，邮件发送只在一个系统完成，其他地方需要发送邮件了，直接调用系统所开放的接口，每个接口分配一个授权码，授权码可以设置失效期，使用次数，固定IP等等，当授权码泄露了直接在系统中关闭掉就可以，安全方便，还可以查看已经发送的邮件，发送请求的IP地址，把这些都整合在一起。这个功能其他云服务商也有提供，但我就是不想用，就想自己写一个， 以前没时间都在拖，今天终于下决心开始写了。"></a>所以我想做一个这样的东西，邮件发送只在一个系统完成，其他地方需要发送邮件了，直接调用系统所开放的接口，每个接口分配一个授权码，授权码可以设置失效期，使用次数，固定IP等等，当授权码泄露了直接在系统中关闭掉就可以，安全方便，还可以查看已经发送的邮件，发送请求的IP地址，把这些都整合在一起。这个功能其他云服务商也有提供，但我就是不想用，就想自己写一个， 以前没时间都在拖，今天终于下决心开始写了。</h2><h2 id="这些功能只是我初步的一个设想，慢慢的会完善，如果有关注到这个项目的同学，有好的想法可以联系我，QQ：641351484"><a href="#这些功能只是我初步的一个设想，慢慢的会完善，如果有关注到这个项目的同学，有好的想法可以联系我，QQ：641351484" class="headerlink" title="这些功能只是我初步的一个设想，慢慢的会完善，如果有关注到这个项目的同学，有好的想法可以联系我，QQ：641351484"></a>这些功能只是我初步的一个设想，慢慢的会完善，如果有关注到这个项目的同学，有好的想法可以联系我，QQ：641351484</h2><h2 id="项目开发我会放到GitHub和码云上，有兴趣的可以关注"><a href="#项目开发我会放到GitHub和码云上，有兴趣的可以关注" class="headerlink" title="项目开发我会放到GitHub和码云上，有兴趣的可以关注"></a>项目开发我会放到GitHub和码云上，有兴趣的可以关注</h2><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a><a class="link"   href="https://github.com/rainweb521/SendEmail" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="码云"><a href="#码云" class="headerlink" title="码云"></a><a class="link"   href="https://gitee.com/rainweb/sendemail" >码云 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="放一个设想图"><a href="#放一个设想图" class="headerlink" title="放一个设想图"></a>放一个设想图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdn.net/20180501205242929?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JhaW5fd2Vi/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>中学化学教学管理系统</title>
    <url>/2018/05/08/article117/</url>
    <content><![CDATA[<h1 id="中学化学教学管理系统"><a href="#中学化学教学管理系统" class="headerlink" title="中学化学教学管理系统"></a>中学化学教学管理系统</h1><h2 id="如题，这个项目是给朋友做的一个，开发周期拖了好久，今天终于修改了大部分的bug，基本完成了全部功能，当然比当初设想的要简单了很多，删减掉一些不好实现，比较麻烦的功能。项目大致就是一个在线教学系统，由前台和后台组成，前台用户可以登录注册，游览各种分类里的视频，登录后可以在视频下面评论，用户个人主页里可以查看评论，本来是想加入系统回复的功能，后来删除掉不想写了，用户还可以改各种信息，等等。后台是管理员的，包括首页一些简单信息的展示，用户的增删改查，实验的上传与编辑，评论的游览，比较简单，适合初学者进行练习，代码我放到了GitHub和码云上了，有兴趣的可以关注，"><a href="#如题，这个项目是给朋友做的一个，开发周期拖了好久，今天终于修改了大部分的bug，基本完成了全部功能，当然比当初设想的要简单了很多，删减掉一些不好实现，比较麻烦的功能。项目大致就是一个在线教学系统，由前台和后台组成，前台用户可以登录注册，游览各种分类里的视频，登录后可以在视频下面评论，用户个人主页里可以查看评论，本来是想加入系统回复的功能，后来删除掉不想写了，用户还可以改各种信息，等等。后台是管理员的，包括首页一些简单信息的展示，用户的增删改查，实验的上传与编辑，评论的游览，比较简单，适合初学者进行练习，代码我放到了GitHub和码云上了，有兴趣的可以关注，" class="headerlink" title="如题，这个项目是给朋友做的一个，开发周期拖了好久，今天终于修改了大部分的bug，基本完成了全部功能，当然比当初设想的要简单了很多，删减掉一些不好实现，比较麻烦的功能。项目大致就是一个在线教学系统，由前台和后台组成，前台用户可以登录注册，游览各种分类里的视频，登录后可以在视频下面评论，用户个人主页里可以查看评论，本来是想加入系统回复的功能，后来删除掉不想写了，用户还可以改各种信息，等等。后台是管理员的，包括首页一些简单信息的展示，用户的增删改查，实验的上传与编辑，评论的游览，比较简单，适合初学者进行练习，代码我放到了GitHub和码云上了，有兴趣的可以关注，"></a>如题，这个项目是给朋友做的一个，开发周期拖了好久，今天终于修改了大部分的bug，基本完成了全部功能，当然比当初设想的要简单了很多，删减掉一些不好实现，比较麻烦的功能。项目大致就是一个在线教学系统，由前台和后台组成，前台用户可以登录注册，游览各种分类里的视频，登录后可以在视频下面评论，用户个人主页里可以查看评论，本来是想加入系统回复的功能，后来删除掉不想写了，用户还可以改各种信息，等等。后台是管理员的，包括首页一些简单信息的展示，用户的增删改查，实验的上传与编辑，评论的游览，比较简单，适合初学者进行练习，代码我放到了GitHub和码云上了，有兴趣的可以关注，</h2><h1 id="GitHub代码链接-https-github-com-rainweb521"><a href="#GitHub代码链接-https-github-com-rainweb521" class="headerlink" title="GitHub代码链接 https://github.com/rainweb521/"></a><a class="link"   href="https://github.com/rainweb521/Chemical-teaching-management-system" >GitHub代码链接 https://github.com/rainweb521/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><h1 id="码云代码链接"><a href="#码云代码链接" class="headerlink" title="码云代码链接"></a><a class="link"   href="https://gitee.com/rainweb/edu" >码云代码链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><h1 id="下面是项目的运行效果图。"><a href="#下面是项目的运行效果图。" class="headerlink" title="下面是项目的运行效果图。"></a>下面是项目的运行效果图。</h1><h1 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/1.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/2.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/3.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/4.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/5.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/6.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/7.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/8.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/9.jpg"
                      alt="这里写图片描述"
                ></p>
<h1 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/10.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/11.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/12.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/13.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/14.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/15.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/edu/16.jpg"
                      alt="这里写图片描述"
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>关于自然语言处理学习</title>
    <url>/2018/05/09/article118/</url>
    <content><![CDATA[<h1 id="自然语言处理学习"><a href="#自然语言处理学习" class="headerlink" title="自然语言处理学习"></a>自然语言处理学习</h1><h3 id="自然语言处理是计算机科学领域与人工智能领域的中的一个重要方向。它研究实现人与计算机之间用自然语言进行有效通信的各种理论和方法，涉及所有用计算机对自然语言进行的操作"><a href="#自然语言处理是计算机科学领域与人工智能领域的中的一个重要方向。它研究实现人与计算机之间用自然语言进行有效通信的各种理论和方法，涉及所有用计算机对自然语言进行的操作" class="headerlink" title="自然语言处理是计算机科学领域与人工智能领域的中的一个重要方向。它研究实现人与计算机之间用自然语言进行有效通信的各种理论和方法，涉及所有用计算机对自然语言进行的操作"></a>自然语言处理是计算机科学领域与人工智能领域的中的一个重要方向。它研究实现人与计算机之间用自然语言进行有效通信的各种理论和方法，涉及所有用计算机对自然语言进行的操作</h3><h3 id="基于《python自然语言处理》一书的学习过程分享，我想更精简的提取出书中有用的东西，使其能快速上手使用。特此放到GitHub上不断更新。"><a href="#基于《python自然语言处理》一书的学习过程分享，我想更精简的提取出书中有用的东西，使其能快速上手使用。特此放到GitHub上不断更新。" class="headerlink" title="基于《python自然语言处理》一书的学习过程分享，我想更精简的提取出书中有用的东西，使其能快速上手使用。特此放到GitHub上不断更新。"></a>基于《python自然语言处理》一书的学习过程分享，我想更精简的提取出书中有用的东西，使其能快速上手使用。特此放到GitHub上不断更新。</h3><h3 id="按照书中的顺序"><a href="#按照书中的顺序" class="headerlink" title="按照书中的顺序"></a>按照书中的顺序</h3><h3 id="1-语言处理的基础"><a href="#1-语言处理的基础" class="headerlink" title="1. 语言处理的基础"></a>1. 语言处理的基础</h3><h3 id="2-结构化程序设计"><a href="#2-结构化程序设计" class="headerlink" title="2. 结构化程序设计"></a>2. 结构化程序设计</h3><h3 id="3-语言处理的基本原理（标注，分类，提取）"><a href="#3-语言处理的基本原理（标注，分类，提取）" class="headerlink" title="3. 语言处理的基本原理（标注，分类，提取）"></a>3. 语言处理的基本原理（标注，分类，提取）</h3><h3 id="4-句子解析，句法结构识别，句意表达方法"><a href="#4-句子解析，句法结构识别，句意表达方法" class="headerlink" title="4. 句子解析，句法结构识别，句意表达方法"></a>4. 句子解析，句法结构识别，句意表达方法</h3><h3 id="所谓“自然语言”，是指人们日常交流使用的语言。相对于编程语言和数学符号这样的人工语言自然语言随着一代代的传递而不断演化因而很难用明确的规则来确定。从广义上讲，“自然语言处理（-Natural-Language-Processing，NLP）包含所有用计算机对自然语言进行的操作，从最简单的通过计词汇出现的频率来比较不同的写作风格到最复杂的完全“理解”人所说的话，或至少达到能对人的话语作出有效反应的程度，NLP的技术应用日益广泛。例如-手机和手持电脑对输入法联想提示和手写识别的支持-网络搜索引擎能搜索到非结构化文本中的信息-机器翻译能把中文文本翻译成西班牙文。在应用领域，包括从事人机交互、商业信息分析、Web软件开发。"><a href="#所谓“自然语言”，是指人们日常交流使用的语言。相对于编程语言和数学符号这样的人工语言自然语言随着一代代的传递而不断演化因而很难用明确的规则来确定。从广义上讲，“自然语言处理（-Natural-Language-Processing，NLP）包含所有用计算机对自然语言进行的操作，从最简单的通过计词汇出现的频率来比较不同的写作风格到最复杂的完全“理解”人所说的话，或至少达到能对人的话语作出有效反应的程度，NLP的技术应用日益广泛。例如-手机和手持电脑对输入法联想提示和手写识别的支持-网络搜索引擎能搜索到非结构化文本中的信息-机器翻译能把中文文本翻译成西班牙文。在应用领域，包括从事人机交互、商业信息分析、Web软件开发。" class="headerlink" title="所谓“自然语言”，是指人们日常交流使用的语言。相对于编程语言和数学符号这样的人工语言自然语言随着一代代的传递而不断演化因而很难用明确的规则来确定。从广义上讲，“自然语言处理（ Natural Language Processing，NLP）包含所有用计算机对自然语言进行的操作，从最简单的通过计词汇出现的频率来比较不同的写作风格到最复杂的完全“理解”人所说的话，或至少达到能对人的话语作出有效反应的程度，NLP的技术应用日益广泛。例如:手机和手持电脑对输入法联想提示和手写识别的支持:网络搜索引擎能搜索到非结构化文本中的信息:机器翻译能把中文文本翻译成西班牙文。在应用领域，包括从事人机交互、商业信息分析、Web软件开发。"></a>所谓“自然语言”，是指人们日常交流使用的语言。相对于编程语言和数学符号这样的人工语言自然语言随着一代代的传递而不断演化因而很难用明确的规则来确定。从广义上讲，“自然语言处理（ Natural Language Processing，NLP）包含所有用计算机对自然语言进行的操作，从最简单的通过计词汇出现的频率来比较不同的写作风格到最复杂的完全“理解”人所说的话，或至少达到能对人的话语作出有效反应的程度，NLP的技术应用日益广泛。例如:手机和手持电脑对输入法联想提示和手写识别的支持:网络搜索引擎能搜索到非结构化文本中的信息:机器翻译能把中文文本翻译成西班牙文。在应用领域，包括从事人机交互、商业信息分析、Web软件开发。</h3><h3 id="教程基于-Python编程语言及名为自然语言工具包（-Natural-Language-ToolkitNLTK）的开源库。"><a href="#教程基于-Python编程语言及名为自然语言工具包（-Natural-Language-ToolkitNLTK）的开源库。" class="headerlink" title="教程基于 Python编程语言及名为自然语言工具包（ Natural Language ToolkitNLTK）的开源库。"></a>教程基于 Python编程语言及名为自然语言工具包（ Natural Language ToolkitNLTK）的开源库。</h3><h2 id="关于我对自然语言了解，其实以前不清楚这个方向，是在找了学校的导师后才知道有这样一个方向，和大多数人一样一开始不清楚自然语言代指什么，如何处理，它的运用场景在哪里，后来在百度云里看到自然语言处理接口，包括基础写的情感分析，文章分类，到中文词向量，CNN模型建立，更感受到这门学科的庞大。后来一直在和老师做蒙古文的自然语言处理，接触一些皮毛，并未深入的学习。最近看到《python自然语言处理》这本书有了兴趣，想看一遍，对其能有所了解，会简单的运用一些。"><a href="#关于我对自然语言了解，其实以前不清楚这个方向，是在找了学校的导师后才知道有这样一个方向，和大多数人一样一开始不清楚自然语言代指什么，如何处理，它的运用场景在哪里，后来在百度云里看到自然语言处理接口，包括基础写的情感分析，文章分类，到中文词向量，CNN模型建立，更感受到这门学科的庞大。后来一直在和老师做蒙古文的自然语言处理，接触一些皮毛，并未深入的学习。最近看到《python自然语言处理》这本书有了兴趣，想看一遍，对其能有所了解，会简单的运用一些。" class="headerlink" title="关于我对自然语言了解，其实以前不清楚这个方向，是在找了学校的导师后才知道有这样一个方向，和大多数人一样一开始不清楚自然语言代指什么，如何处理，它的运用场景在哪里，后来在百度云里看到自然语言处理接口，包括基础写的情感分析，文章分类，到中文词向量，CNN模型建立，更感受到这门学科的庞大。后来一直在和老师做蒙古文的自然语言处理，接触一些皮毛，并未深入的学习。最近看到《python自然语言处理》这本书有了兴趣，想看一遍，对其能有所了解，会简单的运用一些。"></a>关于我对自然语言了解，其实以前不清楚这个方向，是在找了学校的导师后才知道有这样一个方向，和大多数人一样一开始不清楚自然语言代指什么，如何处理，它的运用场景在哪里，后来在百度云里看到自然语言处理接口，包括基础写的情感分析，文章分类，到中文词向量，CNN模型建立，更感受到这门学科的庞大。后来一直在和老师做蒙古文的自然语言处理，接触一些皮毛，并未深入的学习。最近看到《python自然语言处理》这本书有了兴趣，想看一遍，对其能有所了解，会简单的运用一些。</h2>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>自然语言</tag>
      </tags>
  </entry>
  <entry>
    <title>基于蒙古文的五畜网站</title>
    <url>/2018/05/12/article119/</url>
    <content><![CDATA[<h1 id="基于蒙古文的五畜网站"><a href="#基于蒙古文的五畜网站" class="headerlink" title="基于蒙古文的五畜网站"></a>基于蒙古文的五畜网站</h1><h2 id="这又是一个毕业设计，主题是介绍蒙古族的五种动物，马，牛，绵羊，骆驼，山羊，分为前台和后台，前台用户需要登录或注册后才能查看五种动物的信息，每种动物都有单独的页面，信息展示是以目录的信息，在数据库里数据以树状形式存储，每个目录下分别对应着子节点，子节点又对应一堆子节点，动物的每个属性都是一个目录，点进去以后会有详细的介绍子目录或者是解释，每个目录都有对应的图片和音乐可以显示播放，用户还可以留言，这就是前台的大致功能。后台的功能就是管理用户，管理留言，管理五种动物的数据，以为数据都是以树状形式存储，所以有一些些麻烦，后台就是对动物的每个子目录可以修改音乐，图片，或者在子目录下再添加一个子目录，等等功能，整个网站都截图了，下面可以浏览，我还写了一些开发日志，放在页面最后，供参考。"><a href="#这又是一个毕业设计，主题是介绍蒙古族的五种动物，马，牛，绵羊，骆驼，山羊，分为前台和后台，前台用户需要登录或注册后才能查看五种动物的信息，每种动物都有单独的页面，信息展示是以目录的信息，在数据库里数据以树状形式存储，每个目录下分别对应着子节点，子节点又对应一堆子节点，动物的每个属性都是一个目录，点进去以后会有详细的介绍子目录或者是解释，每个目录都有对应的图片和音乐可以显示播放，用户还可以留言，这就是前台的大致功能。后台的功能就是管理用户，管理留言，管理五种动物的数据，以为数据都是以树状形式存储，所以有一些些麻烦，后台就是对动物的每个子目录可以修改音乐，图片，或者在子目录下再添加一个子目录，等等功能，整个网站都截图了，下面可以浏览，我还写了一些开发日志，放在页面最后，供参考。" class="headerlink" title="这又是一个毕业设计，主题是介绍蒙古族的五种动物，马，牛，绵羊，骆驼，山羊，分为前台和后台，前台用户需要登录或注册后才能查看五种动物的信息，每种动物都有单独的页面，信息展示是以目录的信息，在数据库里数据以树状形式存储，每个目录下分别对应着子节点，子节点又对应一堆子节点，动物的每个属性都是一个目录，点进去以后会有详细的介绍子目录或者是解释，每个目录都有对应的图片和音乐可以显示播放，用户还可以留言，这就是前台的大致功能。后台的功能就是管理用户，管理留言，管理五种动物的数据，以为数据都是以树状形式存储，所以有一些些麻烦，后台就是对动物的每个子目录可以修改音乐，图片，或者在子目录下再添加一个子目录，等等功能，整个网站都截图了，下面可以浏览，我还写了一些开发日志，放在页面最后，供参考。"></a>这又是一个毕业设计，主题是介绍蒙古族的五种动物，马，牛，绵羊，骆驼，山羊，分为前台和后台，前台用户需要登录或注册后才能查看五种动物的信息，每种动物都有单独的页面，信息展示是以目录的信息，在数据库里数据以树状形式存储，每个目录下分别对应着子节点，子节点又对应一堆子节点，动物的每个属性都是一个目录，点进去以后会有详细的介绍子目录或者是解释，每个目录都有对应的图片和音乐可以显示播放，用户还可以留言，这就是前台的大致功能。后台的功能就是管理用户，管理留言，管理五种动物的数据，以为数据都是以树状形式存储，所以有一些些麻烦，后台就是对动物的每个子目录可以修改音乐，图片，或者在子目录下再添加一个子目录，等等功能，整个网站都截图了，下面可以浏览，我还写了一些开发日志，放在页面最后，供参考。</h2><h2 id="网站前台的页面全部都是蒙文的"><a href="#网站前台的页面全部都是蒙文的" class="headerlink" title="网站前台的页面全部都是蒙文的"></a>网站前台的页面全部都是蒙文的</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/1.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/2.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/3.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/4.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/5.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/6.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/7.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/8.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/9.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/10.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/11.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/12.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/13.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/14.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/15.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/16.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/17.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/18.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/19.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/20.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/wuchu/21.jpg"
                      alt="这里写图片描述"
                > 开发日志 1.完成了在首页的未登录不准查看信息的过滤设置，使用layer弹出作为过滤，可以选择跳转到登录和注册页面，也可以关闭弹窗，以login_state作为判断关键 2.使用框架重写了temege页面和seach页面，使查找效率更高，还可以过滤关键字，加强安全性验证保护 3.在删除时，删除后id已经失效，不能够继续访问，应该找寻到它的上一级id的值,所以在删除成功前，使用当前id查找数据，然后用数据中的ParentId来查找上级id，以便在删除后能定位到上层目录中 4.在主页信息中，根目录是不能出现修改和删除按钮的，因为根目录id为1，但没有id为1的数据 5.更新说明：隔了很久才更新，做了很多改变，注册登录全部改成了蒙文，竖向显示，登录进去的状态显示也是蒙文的，在首页添加了 团队介绍，动物里还添加了音乐功能，可以播放音乐，后台里面，添加了上传音乐的功能，等等 6.修复了用户无法删除的功能，添加了留言板，以及后台显示留言板内容</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>人脸识别门禁系统</title>
    <url>/2018/05/26/article122/</url>
    <content><![CDATA[<h1 id="人脸识别门禁系统"><a href="#人脸识别门禁系统" class="headerlink" title="人脸识别门禁系统"></a>人脸识别门禁系统</h1><h2 id="可以在线实时的检测人脸，是实时的不需要上传图片，对于已经录入人脸库的，可以显示通过，支持后台注册人脸，以及管理人脸库的信息，后期还会加入每日检测历史记录。"><a href="#可以在线实时的检测人脸，是实时的不需要上传图片，对于已经录入人脸库的，可以显示通过，支持后台注册人脸，以及管理人脸库的信息，后期还会加入每日检测历史记录。" class="headerlink" title="可以在线实时的检测人脸，是实时的不需要上传图片，对于已经录入人脸库的，可以显示通过，支持后台注册人脸，以及管理人脸库的信息，后期还会加入每日检测历史记录。"></a>可以在线实时的检测人脸，是实时的不需要上传图片，对于已经录入人脸库的，可以显示通过，支持后台注册人脸，以及管理人脸库的信息，后期还会加入每日检测历史记录。</h2><h2 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a><a class="link"   href="https://github.com/rainweb521/Face-recognition-access-control" >GitHub地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h3 id="下面是效果图"><a href="#下面是效果图" class="headerlink" title="下面是效果图"></a>下面是效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/face/1.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/face/2.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/face/3.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/face/4.jpg"
                      alt="这里写图片描述"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/more/face/5.jpg"
                      alt="这里写图片描述"
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>AI</tag>
        <tag>人脸识别</tag>
      </tags>
  </entry>
  <entry>
    <title>在Echarts中设置Tree的子节点点击事件</title>
    <url>/2018/05/20/article121/</url>
    <content><![CDATA[<h1 id="在Echarts中设置Tree的子节点点击事件"><a href="#在Echarts中设置Tree的子节点点击事件" class="headerlink" title="在Echarts中设置Tree的子节点点击事件"></a>在Echarts中设置Tree的子节点点击事件</h1><h2 id="今天用echarts做一个树形图，需要在点击某个子节点的时候，能够弹出这个节点的信息或者查询到其他数据，在百度上查了一下，有很多有的方法和我下载的echarts源码都不一样，最后自己试了很久才找到方法，特此写出来，有需要的同学可以参考一下，和网上大多数方法不一样，但我用的确实是echarts的源码，下面是代码-适合直接调用json文件的，不是数据写在HTML中的"><a href="#今天用echarts做一个树形图，需要在点击某个子节点的时候，能够弹出这个节点的信息或者查询到其他数据，在百度上查了一下，有很多有的方法和我下载的echarts源码都不一样，最后自己试了很久才找到方法，特此写出来，有需要的同学可以参考一下，和网上大多数方法不一样，但我用的确实是echarts的源码，下面是代码-适合直接调用json文件的，不是数据写在HTML中的" class="headerlink" title="今天用echarts做一个树形图，需要在点击某个子节点的时候，能够弹出这个节点的信息或者查询到其他数据，在百度上查了一下，有很多有的方法和我下载的echarts源码都不一样，最后自己试了很久才找到方法，特此写出来，有需要的同学可以参考一下，和网上大多数方法不一样，但我用的确实是echarts的源码，下面是代码,适合直接调用json文件的，不是数据写在HTML中的"></a>今天用echarts做一个树形图，需要在点击某个子节点的时候，能够弹出这个节点的信息或者查询到其他数据，在百度上查了一下，有很多有的方法和我下载的echarts源码都不一样，最后自己试了很久才找到方法，特此写出来，有需要的同学可以参考一下，和网上大多数方法不一样，但我用的确实是echarts的源码，下面是代码,适合直接调用json文件的，不是数据写在HTML中的</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"> myChart.on(&quot;click&quot;, clickFun);</span><br><span class="line"> function clickFun(param) &#123;</span><br><span class="line">    if (typeof param.seriesIndex == &#x27;undefined&#x27;) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (param.type == &#x27;click&#x27;) &#123;</span><br><span class="line">        alert(param.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="下面是完整的代码"><a href="#下面是完整的代码" class="headerlink" title="下面是完整的代码"></a>下面是完整的代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html style=&quot;height: 100%&quot;&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body style=&quot;height: 100%; margin: 0&quot;&gt;</span><br><span class="line">       &lt;div id=&quot;container&quot; style=&quot;height: 100%&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;script type=&quot;text/javascript&quot; src=&quot;/public/echarts.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">       &lt;script type=&quot;text/javascript&quot; src=&quot;/public/jquery-3.3.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">       &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var dom = document.getElementById(&quot;container&quot;);</span><br><span class="line">var myChart = echarts.init(dom);</span><br><span class="line">var app = &#123;&#125;;</span><br><span class="line">option = null;</span><br><span class="line">myChart.showLoading();</span><br><span class="line">$.get(&#x27;/public/tree.json&#x27;, function (data) &#123;</span><br><span class="line">    myChart.on(&quot;click&quot;, clickFun);</span><br><span class="line">    myChart.hideLoading();</span><br><span class="line">    myChart.setOption(</span><br><span class="line">        option = &#123;</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: &#x27;item&#x27;,</span><br><span class="line">            triggerOn: &#x27;mousemove&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        series:[</span><br><span class="line">            &#123;</span><br><span class="line">                name:&#x27;树图&#x27;,</span><br><span class="line">                type: &#x27;tree&#x27;,</span><br><span class="line">                data: [data],</span><br><span class="line">                left: &#x27;2%&#x27;,</span><br><span class="line">                right: &#x27;2%&#x27;,</span><br><span class="line">                top: &#x27;12%&#x27;,</span><br><span class="line">                bottom: &#x27;20%&#x27;,</span><br><span class="line">                symbol: &#x27;emptyCircle&#x27;,</span><br><span class="line">                orient: &#x27;vertical&#x27;,</span><br><span class="line">                expandAndCollapse: true,</span><br><span class="line">                label: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        position: &#x27;top&#x27;,</span><br><span class="line">                        rotate: -90,</span><br><span class="line">                        verticalAlign: &#x27;middle&#x27;,</span><br><span class="line">                        align: &#x27;right&#x27;,</span><br><span class="line">                        fontSize: 12</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                leaves: &#123;</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        normal: &#123;</span><br><span class="line">                            position: &#x27;bottom&#x27;,</span><br><span class="line">                            rotate: -90,</span><br><span class="line">                            verticalAlign: &#x27;middle&#x27;,</span><br><span class="line">                            align: &#x27;left&#x27;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                animationDurationUpdate: 750</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">;</span><br><span class="line">if (option &amp;&amp; typeof option === &quot;object&quot;) &#123;</span><br><span class="line">    myChart.setOption(option, true);</span><br><span class="line">&#125;</span><br><span class="line">//关键点！</span><br><span class="line">function clickFun(param) &#123;</span><br><span class="line">    if (typeof param.seriesIndex == &#x27;undefined&#x27;) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (param.type == &#x27;click&#x27;) &#123;</span><br><span class="line">        alert(param.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Programme</category>
        <category>programme</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>关于MySQL百万级数据量查询的优化（PHP版）</title>
    <url>/2018/05/17/article120/</url>
    <content><![CDATA[<h1 id="关于MySQL百万级数据量查询的优化（PHP版）"><a href="#关于MySQL百万级数据量查询的优化（PHP版）" class="headerlink" title="关于MySQL百万级数据量查询的优化（PHP版）"></a>关于MySQL百万级数据量查询的优化（PHP版）</h1><h2 id="最近在开发一个销售数据统计的网站时，客户提供的数据量在百万级以上，这些数据作为基础数据，从中提取，组合出各种类型的字段进行计算汇总，之前没有遇到过这么大的数据量。开始只是用最普通的方法来查询，当测试数据有19万条的时候，整个查询数据异常的慢，完全查询的汇总甚至要两分多，自此开始了各种优化。"><a href="#最近在开发一个销售数据统计的网站时，客户提供的数据量在百万级以上，这些数据作为基础数据，从中提取，组合出各种类型的字段进行计算汇总，之前没有遇到过这么大的数据量。开始只是用最普通的方法来查询，当测试数据有19万条的时候，整个查询数据异常的慢，完全查询的汇总甚至要两分多，自此开始了各种优化。" class="headerlink" title="最近在开发一个销售数据统计的网站时，客户提供的数据量在百万级以上，这些数据作为基础数据，从中提取，组合出各种类型的字段进行计算汇总，之前没有遇到过这么大的数据量。开始只是用最普通的方法来查询，当测试数据有19万条的时候，整个查询数据异常的慢，完全查询的汇总甚至要两分多，自此开始了各种优化。"></a>最近在开发一个销售数据统计的网站时，客户提供的数据量在百万级以上，这些数据作为基础数据，从中提取，组合出各种类型的字段进行计算汇总，之前没有遇到过这么大的数据量。开始只是用最普通的方法来查询，当测试数据有19万条的时候，整个查询数据异常的慢，完全查询的汇总甚至要两分多，自此开始了各种优化。</h2><h2 id="1-程序的优化"><a href="#1-程序的优化" class="headerlink" title="1. 程序的优化"></a>1. 程序的优化</h2><h3 id="以最简单的一张表，需要汇总计算出二十多种数据，查询条件就是上传数据的日期，一开始打算用for，每个数据汇总都用一遍for，当计算到第三个数据，直接就崩了，所以只好构建一个复杂的算法，将二十多种数据的查询全部放在一起，时间复杂度立马降低，但全部查询仍需要2分钟，然后减少数据表查询结果获取到的字段数，尽量只要关键的几个。但这些，都无太大卵用"><a href="#以最简单的一张表，需要汇总计算出二十多种数据，查询条件就是上传数据的日期，一开始打算用for，每个数据汇总都用一遍for，当计算到第三个数据，直接就崩了，所以只好构建一个复杂的算法，将二十多种数据的查询全部放在一起，时间复杂度立马降低，但全部查询仍需要2分钟，然后减少数据表查询结果获取到的字段数，尽量只要关键的几个。但这些，都无太大卵用" class="headerlink" title="以最简单的一张表，需要汇总计算出二十多种数据，查询条件就是上传数据的日期，一开始打算用for，每个数据汇总都用一遍for，当计算到第三个数据，直接就崩了，所以只好构建一个复杂的算法，将二十多种数据的查询全部放在一起，时间复杂度立马降低，但全部查询仍需要2分钟，然后减少数据表查询结果获取到的字段数，尽量只要关键的几个。但这些，都无太大卵用"></a>以最简单的一张表，需要汇总计算出二十多种数据，查询条件就是上传数据的日期，一开始打算用for，每个数据汇总都用一遍for，当计算到第三个数据，直接就崩了，所以只好构建一个复杂的算法，将二十多种数据的查询全部放在一起，时间复杂度立马降低，但全部查询仍需要2分钟，然后减少数据表查询结果获取到的字段数，尽量只要关键的几个。但这些，都无太大卵用</h3><h2 id="2-最关键的到了，优化数据库，"><a href="#2-最关键的到了，优化数据库，" class="headerlink" title="2. 最关键的到了，优化数据库，"></a>2. 最关键的到了，优化数据库，</h2><h3 id="1-我首先将数据表的字段大小都进行了修改，以前都是用默认的char（255），现在全部根据大小改到varchar（20），关于char和varchar的区别网上有很多说法，这里不进行叙述，"><a href="#1-我首先将数据表的字段大小都进行了修改，以前都是用默认的char（255），现在全部根据大小改到varchar（20），关于char和varchar的区别网上有很多说法，这里不进行叙述，" class="headerlink" title="1. 我首先将数据表的字段大小都进行了修改，以前都是用默认的char（255），现在全部根据大小改到varchar（20），关于char和varchar的区别网上有很多说法，这里不进行叙述，"></a>1. 我首先将数据表的字段大小都进行了修改，以前都是用默认的char（255），现在全部根据大小改到varchar（20），关于char和varchar的区别网上有很多说法，这里不进行叙述，</h3><h3 id="2-还有能用数字就不用字符，因为MySQL中数字只对比一次，而字符串会一个一个的对比，"><a href="#2-还有能用数字就不用字符，因为MySQL中数字只对比一次，而字符串会一个一个的对比，" class="headerlink" title="2. 还有能用数字就不用字符，因为MySQL中数字只对比一次，而字符串会一个一个的对比，"></a>2. 还有能用数字就不用字符，因为MySQL中数字只对比一次，而字符串会一个一个的对比，</h3><h3 id="3-删除掉包含汉字的字段，尽量使用id代替，"><a href="#3-删除掉包含汉字的字段，尽量使用id代替，" class="headerlink" title="3. 删除掉包含汉字的字段，尽量使用id代替，"></a>3. 删除掉包含汉字的字段，尽量使用id代替，</h3><h3 id="4-为某个经常查询的字段设置索引"><a href="#4-为某个经常查询的字段设置索引" class="headerlink" title="4. 为某个经常查询的字段设置索引"></a>4. 为某个经常查询的字段设置索引</h3><h2 id="经过这些优化，速度提升很多了，我在查看网上方法的时候发现，越来mysql的查找是从头开始找，越在后面的数据，查找到的时间用的就越长，这个我测试了一下，查询第三天的要2秒，第五天的就4秒，所以我想出一个新的办法，每次上传数据时记录下起始位置，查找的时候直接去指定位置查，简直一查就准，第五天的数据0秒查完，简直是无敌的方法，但它也有局限性，数据最好固定，不然会打破位置范围造成数据丢失。下面是我测试的结果"><a href="#经过这些优化，速度提升很多了，我在查看网上方法的时候发现，越来mysql的查找是从头开始找，越在后面的数据，查找到的时间用的就越长，这个我测试了一下，查询第三天的要2秒，第五天的就4秒，所以我想出一个新的办法，每次上传数据时记录下起始位置，查找的时候直接去指定位置查，简直一查就准，第五天的数据0秒查完，简直是无敌的方法，但它也有局限性，数据最好固定，不然会打破位置范围造成数据丢失。下面是我测试的结果" class="headerlink" title="经过这些优化，速度提升很多了，我在查看网上方法的时候发现，越来mysql的查找是从头开始找，越在后面的数据，查找到的时间用的就越长，这个我测试了一下，查询第三天的要2秒，第五天的就4秒，所以我想出一个新的办法，每次上传数据时记录下起始位置，查找的时候直接去指定位置查，简直一查就准，第五天的数据0秒查完，简直是无敌的方法，但它也有局限性，数据最好固定，不然会打破位置范围造成数据丢失。下面是我测试的结果"></a>经过这些优化，速度提升很多了，我在查看网上方法的时候发现，越来mysql的查找是从头开始找，越在后面的数据，查找到的时间用的就越长，这个我测试了一下，查询第三天的要2秒，第五天的就4秒，所以我想出一个新的办法，每次上传数据时记录下起始位置，查找的时候直接去指定位置查，简直一查就准，第五天的数据0秒查完，简直是无敌的方法，但它也有局限性，数据最好固定，不然会打破位置范围造成数据丢失。下面是我测试的结果</h2><p>300天的数据（包含9天有效的）：2分22秒 10天的数据（包含9天有效的）：26秒 优化sql字段大小类型后，10天的数据（包含9天有效的）：24秒 优化sql字段大小类型后，300天的数据（包含9天有效的）：51秒 加索引后的300天数据：2分28秒 优化sql字段大小类型后，加索引后的300天数据：26秒 优化sql字段大小类型后，加索引后的10天数据：24秒 优化sql字段大小类型后，加索引后，指定查找的位置，查找某一天数据，0秒，原本两秒，不加索引，不优化4秒</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>我与百度AI-在AI社区的发帖</title>
    <url>/2018/06/01/article123/</url>
    <content><![CDATA[<p>关注百度AI很久了，自己是学计算机的，所以对深度学习这块一直在学习，但做不到百度AI这个全面，完善，当百度第一次提出人脸识别免费时，我就想做一个能够将百度AI里所有功能都实现出来的网站，方便调用，调试，因为百度本身虽然提供了测试，但没有集中起来，用某些功能就需要去具体的找，有的可能还找不到，我做这个能更方便大家了解，使用百度的AI。 Rain-AI 2017年12月左右开始用PHP做这个，为了快速开发，就没有使用Java，并且是直接用的原生PHP，基本实现了大部分功能， github的地址<a class="link"   href="https://github.com/rainweb521/AI-Face-Sound-OCR-Image" >https://github.com/rainweb521/AI-Face-Sound-OCR-Image <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 但开始使用后，我发现原生的PHP在上传照片时对安全，效率上有很多问题，所以决定用thinkphp5进行重写，重写完成后，在一些基本模块功能里，使用了ajax技术，加速了页面的加载，也方便了用户的测试使用，网站更实用了，开发一直在持续，以后我会将thinkphp的代码开源出来，方便大家的使用，最近百度AI新增了文章标签，文章分类，我也进行对应的更新，还上线了活体检测功能，并且网站中每一项功能的使用都有每日次数限制，毕竟网站的服务器太小。 地址是ai.rain1024.com <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2018/06/TIM%E6%88%AA%E5%9B%BE20180601111733-300x146.png"
                     
                > 智能语音识别APP 这个是给爸爸做的一个APP，有些字他不认识，我就用PHP做了一个web，并封装成APP，可以识别出图片中的文字，并将每行文字框起来，点击对应的文件框，就可以调用语音功能并读出来，还有身份证识别，驾驶证，车牌，车辆等，都可以将识别结果用语音读出来。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2018/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180601111604-169x300.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2018/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180601111608-169x300.jpg"
                     
                > 图书馆人脸识别门禁系统 这是最近学校给立项的一个项目，为图书馆开发人脸识别门禁系统，基础的开发我已经完成，可以直接在游览器中实时的对人脸进行检测，识别，对比，当然使用的核心技术还是百度的人脸库，这个项目让我更加实际的感受到百度AI对生活的影响。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2018/05/2-300x143.jpg"
                     
                > 以上这些就是我和百度AI的故事，比较普通，就是一个学生所力所能及做的东西，不深奥，不复杂，确实实际际的影响着我的生活。 邮箱<a class="link"   href="mailto:&#110;&#x79;&#x6c;&#114;&#x61;&#x69;&#110;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;" >&#110;&#x79;&#x6c;&#114;&#x61;&#x69;&#110;&#x40;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 我的博客rain1024.com，github是github.rain1024.com，希望大家能够关注，为我所做的提出意见或建议</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>基于人脸识别的单点登录技术</title>
    <url>/2018/06/05/article124/</url>
    <content><![CDATA[<h1 id="基于人脸识别的单点登录技术"><a href="#基于人脸识别的单点登录技术" class="headerlink" title="基于人脸识别的单点登录技术"></a>基于人脸识别的单点登录技术</h1><h2 id="与传统的身份鉴定方式相比，人脸识别的最大特点就是更具安全、保密和方便性。此外，人脸识别速度快，不易被察觉，与其他生物识别技术相比，人脸识别属于一种自动识别技术，一秒时间内可以识别好几次。以前做过密码登录，邮箱验证码登录，但这些操作都比较繁琐，安全性也没有提高多少，所以我基于人脸识别对比技术，写了这样一个登录模块，这仅仅是一个模块，可以快速的嵌套到所开发的系统登录模块中，PHP或Java只要写出相应的ajax请求函数，就可以实时的识别和判断。"><a href="#与传统的身份鉴定方式相比，人脸识别的最大特点就是更具安全、保密和方便性。此外，人脸识别速度快，不易被察觉，与其他生物识别技术相比，人脸识别属于一种自动识别技术，一秒时间内可以识别好几次。以前做过密码登录，邮箱验证码登录，但这些操作都比较繁琐，安全性也没有提高多少，所以我基于人脸识别对比技术，写了这样一个登录模块，这仅仅是一个模块，可以快速的嵌套到所开发的系统登录模块中，PHP或Java只要写出相应的ajax请求函数，就可以实时的识别和判断。" class="headerlink" title="与传统的身份鉴定方式相比，人脸识别的最大特点就是更具安全、保密和方便性。此外，人脸识别速度快，不易被察觉，与其他生物识别技术相比，人脸识别属于一种自动识别技术，一秒时间内可以识别好几次。以前做过密码登录，邮箱验证码登录，但这些操作都比较繁琐，安全性也没有提高多少，所以我基于人脸识别对比技术，写了这样一个登录模块，这仅仅是一个模块，可以快速的嵌套到所开发的系统登录模块中，PHP或Java只要写出相应的ajax请求函数，就可以实时的识别和判断。"></a>与传统的身份鉴定方式相比，人脸识别的最大特点就是更具安全、保密和方便性。此外，人脸识别速度快，不易被察觉，与其他生物识别技术相比，人脸识别属于一种自动识别技术，一秒时间内可以识别好几次。以前做过密码登录，邮箱验证码登录，但这些操作都比较繁琐，安全性也没有提高多少，所以我基于人脸识别对比技术，写了这样一个登录模块，这仅仅是一个模块，可以快速的嵌套到所开发的系统登录模块中，PHP或Java只要写出相应的ajax请求函数，就可以实时的识别和判断。</h2><h2 id="注：该模块仅适用于游览器中的实时镜头调用，web端和PC端都可以。"><a href="#注：该模块仅适用于游览器中的实时镜头调用，web端和PC端都可以。" class="headerlink" title="注：该模块仅适用于游览器中的实时镜头调用，web端和PC端都可以。"></a>注：该模块仅适用于游览器中的实时镜头调用，web端和PC端都可以。</h2><h3 id="关于模块编写时的一些想法："><a href="#关于模块编写时的一些想法：" class="headerlink" title="关于模块编写时的一些想法："></a>关于模块编写时的一些想法：</h3><ol>
<li>使用实时的摄像头采集照片</li>
<li>采集到照片后调用基本人脸检测</li>
<li>10秒检测时间，如果十秒内没有通过，则封锁此IP，或者封锁网站，不允许登录</li>
<li>通过后弹出提示框，显示人脸照片，没有对比不成功，则默认不提示</li>
<li>设置一个session，用于封锁登录，比对五次以后，session封锁，等待session失效后重新开始登录</li>
<li>设置邮箱通知，登录的照片发送到邮箱里</li>
</ol>
<h2 id="项目的GitHub地址https-github-com-rainweb521-Face-login"><a href="#项目的GitHub地址https-github-com-rainweb521-Face-login" class="headerlink" title="项目的GitHub地址https://github.com/rainweb521/Face-login"></a>项目的<a class="link"   href="https://github.com/rainweb521/Face-login" >GitHub地址https://github.com/rainweb521/Face-login <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="下面是效果图，检测效率很高，识别准确度也很多，我使用的是电脑自带摄像头。如果有问题可以联系我-x6e-121-108-114-x61-105-110-x40-49-54-51-x2e-99-111-109"><a href="#下面是效果图，检测效率很高，识别准确度也很多，我使用的是电脑自带摄像头。如果有问题可以联系我-x6e-121-108-114-x61-105-110-x40-49-54-51-x2e-99-111-109" class="headerlink" title="下面是效果图，检测效率很高，识别准确度也很多，我使用的是电脑自带摄像头。如果有问题可以联系我,&#x6e;&#121;&#108;&#114;&#x61;&#105;&#110;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#111;&#109;"></a>下面是效果图，检测效率很高，识别准确度也很多，我使用的是电脑自带摄像头。如果有问题可以联系我,<a class="link"   href="mailto:&#x6e;&#121;&#108;&#114;&#x61;&#105;&#110;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#111;&#109;" >&#x6e;&#121;&#108;&#114;&#x61;&#105;&#110;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/Face-login/master/1.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/Face-login/master/2.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/Face-login/master/3.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/Face-login/master/4.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>人脸识别</tag>
      </tags>
  </entry>
  <entry>
    <title>人事管理系统</title>
    <url>/2018/06/11/article125/</url>
    <content><![CDATA[<h1 id="人事管理系统"><a href="#人事管理系统" class="headerlink" title="人事管理系统"></a>人事管理系统</h1><h2 id="使用JavaEE开发，基于SpringMVC-Mybatis框架，该项目包含了用户管理、部门管理、职位管理、员工管理、公告管理、下载中心等多个模块-页面使用JQuery框架完成动态功能-用户管理、部门管理等模块包含了项目开发中常用的增删改查动作-下载中心包含了-Spring-MVC的文件上传、下载等功能"><a href="#使用JavaEE开发，基于SpringMVC-Mybatis框架，该项目包含了用户管理、部门管理、职位管理、员工管理、公告管理、下载中心等多个模块-页面使用JQuery框架完成动态功能-用户管理、部门管理等模块包含了项目开发中常用的增删改查动作-下载中心包含了-Spring-MVC的文件上传、下载等功能" class="headerlink" title="使用JavaEE开发，基于SpringMVC+Mybatis框架，该项目包含了用户管理、部门管理、职位管理、员工管理、公告管理、下载中心等多个模块,页面使用JQuery框架完成动态功能,用户管理、部门管理等模块包含了项目开发中常用的增删改查动作,下载中心包含了 Spring MVC的文件上传、下载等功能"></a>使用JavaEE开发，基于SpringMVC+Mybatis框架，该项目包含了用户管理、部门管理、职位管理、员工管理、公告管理、下载中心等多个模块,页面使用JQuery框架完成动态功能,用户管理、部门管理等模块包含了项目开发中常用的增删改查动作,下载中心包含了 Spring MVC的文件上传、下载等功能</h2><h2 id="系统功能介绍"><a href="#系统功能介绍" class="headerlink" title="系统功能介绍"></a>系统功能介绍</h2><p>用户管理的功能包括：添加用户，用户可以为管理员或者普通用户;查询用户，可以查询所有用户或根据用户名和用户状态进行模糊查询，删除用户，修改用户。 部门管理的功能包括：添加部门，查询部门，可以查询所有部门或根据部门名称进行模糊查询，删除部门，修改部门 职位管理的功能包括：添加职位，查询职位，可以查询所有职位或根据职位名称进行模糊查询，删除职位，修改职位 员工管理的功能包括：添加员工，查询员工，可以查询所有员工或根据员工姓名，身份证号，手机号，性别，职位，部门进行模查询，删除员工，修改员工。 公告管理的功能包括：添加公告，查询公告，可以查询所有公告或根据公告名称，公告内容进行模糊查询，删除公告，修改公告。 下载中心的功能包括：上传文件，查淘文件，可以查询所有文件或根据文件标题进行模糊查询，预览文件内容：删除文件，下载文件。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/Personnel-Management-System/master/WebContent/public/images/2.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/Personnel-Management-System/master/WebContent/public/images/1.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hadoop搭建HDFS伪分布式环境的安装步骤</title>
    <url>/2018/06/22/article126/</url>
    <content><![CDATA[<p>基于Hadoop搭建HDFS伪分布式环境的安装步骤 本次实验中，老师使用的是hadoop用户，我是直接使用root用户，所以没有sudo，环境变量也是&#x2F;etc&#x2F;profile，其他的基本一样。</p>
<ol>
<li>JDK安装</li>
</ol>
<p>查看已经上传的jdk文件，并安装 安装命令： yum localinstall -y jdk-8u171-linux-x64.rpm <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpslqz6j30fe0auwfc.jpg"
                     
                > 添加到系统环境变量： ~&#x2F;.bash_profile ​ export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171-amd64 ​ export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:$HOME&#x2F;bin <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsljn6j30fe0173yd.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsm2jwj30fe0au3yy.jpg"
                     
                > 使得环境变量生效：source ~&#x2F;.bash_profile ​ 验证java是否配置成功: java -version <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsk8k7j30fe056wet.jpg"
                     
                ></p>
<ol>
<li>安装SSH</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsk4gkj30fe04ndfz.jpg"
                     
                > 在安装ssh是出错，用xshell进行ssh连接，发现可以连通，所以不再安装 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpskjwtj30fe06274c.jpg"
                     
                ></p>
<ol>
<li>安装sshd的时候，发现服务中sshd服务以及启动，所以不安装了</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsp52oj30fe054weq.jpg"
                     
                ></p>
<ol>
<li>安装Hadoop</li>
</ol>
<p>下载并解压Hadoop， <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsngwzj30fe01qq2t.jpg"
                     
                > 已经下载并放到桌面上，直接解压，安装 解压：tar -zxvf Hadoop-2.6.0-cdh5.7.0.tar.gz <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsqmapj30fe0avabc.jpg"
                     
                > 查看目录，并进入&#x2F;etc&#x2F;Hadoop&#x2F; <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpss3hmj30fe09u0tm.jpg"
                     
                ></p>
<ol>
<li>修改配置文件</li>
</ol>
<p>hadoop配置文件的修改($HADDOP_HOME&#x2F;etc&#x2F;hadoop) hadoop-env.sh ​ export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_171-amd64 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpspuhkj30fe0aswfc.jpg"
                     
                > ​ core-site.xml ​  ​ fs.defaultFS ​ hdfs:&#x2F;&#x2F;localhost:9000 ​  ​ 由于hadoop伪分布式存储默认使用宿主系统的临时文件夹，会导致每次宿主系统重启后丢失，需要手动制定一个目录 ​  ​ hadoop.tmp.dir ​ &#x2F;home&#x2F;hadoop&#x2F;app&#x2F;tmp ​  ​ hdfs-site.xml ​  ​ dfs.replication ​ 1 ​  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsufetj30fe01zq2w.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpstog7j30fe0ap0te.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpstvqbj30fe0aodgk.jpg"
                     
                ></p>
<ol>
<li>给Hadoop配置环境变量</li>
</ol>
<p>添加环境变量： ​ export HADOOP_HOME&#x3D;&#x2F;home&#x2F;hadoop&#x2F;app&#x2F;hadoop-2.6.0-cdh5.7.0 ​ export PATH&#x3D;$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin:$PATH <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsuko8j30fe01qa9w.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsxdo6j30fe02n0sq.jpg"
                     
                > 使环境变量生效 source &#x2F;etc&#x2F;profile 查看Hadoop <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsybsqj30fe08gjrz.jpg"
                     
                ></p>
<ol>
<li>启动hdfs</li>
</ol>
<p>格式化分布式文件系统（仅第一次执行即可，不可重复执行）： ​ hdfs namenode -format <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpt2ts9j30fe0atq4l.jpg"
                     
                > 启动: start-dfs.sh <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsy8n3j30fe0awq48.jpg"
                     
                > 验证是否启动成功： ​ jps ​ NameNode ​ SecondaryNameNode ​ DataNode <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsyd6bj30fe02rgll.jpg"
                     
                > 浏览器访问方式：<a class="link"   href="http://localhost:50070/" >http://localhost:50070 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ww1.sinaimg.cn/mw690/006npsefly1fsjnpsztvxj30fe095q3a.jpg"
                     
                > 8) 关闭hdfs ​ stop-dfs.sh</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>新的征程</title>
    <url>/2018/06/24/article127/</url>
    <content><![CDATA[<h1 id="新的征程"><a href="#新的征程" class="headerlink" title="新的征程"></a>新的征程</h1><h2 id="今天和老师的聊天对自己的未来方向更加明确些，是做开发，还是继续读书，我会去争取，但不会那么肯定，技术对于我仿佛是全部，自己深深的喜爱这一行，从VB，C，C-，JAVA，PHP，Python，安卓，JS，R，接触了太多，迷茫了很多次，曾经的不知方向的迷茫，现在是选择方向的迷茫，原来决定抛弃PHP，Python，找一份Java的工作，但上了大数据课以后，又决定以Java为基础，学习大数据，行业的前景无限，人工智能是潮流，大数据也是基石，不断的选择就是为了深入技术，我不想浅尝辄止，停留在安逸区而不再努力，基础的业务开发终会被人超越，不断的挑战自己，学习更多，掌握更多。"><a href="#今天和老师的聊天对自己的未来方向更加明确些，是做开发，还是继续读书，我会去争取，但不会那么肯定，技术对于我仿佛是全部，自己深深的喜爱这一行，从VB，C，C-，JAVA，PHP，Python，安卓，JS，R，接触了太多，迷茫了很多次，曾经的不知方向的迷茫，现在是选择方向的迷茫，原来决定抛弃PHP，Python，找一份Java的工作，但上了大数据课以后，又决定以Java为基础，学习大数据，行业的前景无限，人工智能是潮流，大数据也是基石，不断的选择就是为了深入技术，我不想浅尝辄止，停留在安逸区而不再努力，基础的业务开发终会被人超越，不断的挑战自己，学习更多，掌握更多。" class="headerlink" title="今天和老师的聊天对自己的未来方向更加明确些，是做开发，还是继续读书，我会去争取，但不会那么肯定，技术对于我仿佛是全部，自己深深的喜爱这一行，从VB，C，C++，JAVA，PHP，Python，安卓，JS，R，接触了太多，迷茫了很多次，曾经的不知方向的迷茫，现在是选择方向的迷茫，原来决定抛弃PHP，Python，找一份Java的工作，但上了大数据课以后，又决定以Java为基础，学习大数据，行业的前景无限，人工智能是潮流，大数据也是基石，不断的选择就是为了深入技术，我不想浅尝辄止，停留在安逸区而不再努力，基础的业务开发终会被人超越，不断的挑战自己，学习更多，掌握更多。"></a>今天和老师的聊天对自己的未来方向更加明确些，是做开发，还是继续读书，我会去争取，但不会那么肯定，技术对于我仿佛是全部，自己深深的喜爱这一行，从VB，C，C++，JAVA，PHP，Python，安卓，JS，R，接触了太多，迷茫了很多次，曾经的不知方向的迷茫，现在是选择方向的迷茫，原来决定抛弃PHP，Python，找一份Java的工作，但上了大数据课以后，又决定以Java为基础，学习大数据，行业的前景无限，人工智能是潮流，大数据也是基石，不断的选择就是为了深入技术，我不想浅尝辄止，停留在安逸区而不再努力，基础的业务开发终会被人超越，不断的挑战自己，学习更多，掌握更多。</h2><h2 id="写的很乱，不知道要说什么，最近的事太多，让我不断的思考，这里想先理清思路，首先是实习，找一份北京的实习是肯定的，老师的意见是找一个大公司能见识到更多，不要在乎实习的工资，真正重要的是你第一份工作。第二是学习的方向，学习面试的内容，数据结构，算法，排序，基础知识，还有我的方向深入java，spring，大数据主流框架。"><a href="#写的很乱，不知道要说什么，最近的事太多，让我不断的思考，这里想先理清思路，首先是实习，找一份北京的实习是肯定的，老师的意见是找一个大公司能见识到更多，不要在乎实习的工资，真正重要的是你第一份工作。第二是学习的方向，学习面试的内容，数据结构，算法，排序，基础知识，还有我的方向深入java，spring，大数据主流框架。" class="headerlink" title="写的很乱，不知道要说什么，最近的事太多，让我不断的思考，这里想先理清思路，首先是实习，找一份北京的实习是肯定的，老师的意见是找一个大公司能见识到更多，不要在乎实习的工资，真正重要的是你第一份工作。第二是学习的方向，学习面试的内容，数据结构，算法，排序，基础知识，还有我的方向深入java，spring，大数据主流框架。"></a>写的很乱，不知道要说什么，最近的事太多，让我不断的思考，这里想先理清思路，首先是实习，找一份北京的实习是肯定的，老师的意见是找一个大公司能见识到更多，不要在乎实习的工资，真正重要的是你第一份工作。第二是学习的方向，学习面试的内容，数据结构，算法，排序，基础知识，还有我的方向深入java，spring，大数据主流框架。</h2><h2 id="这是前三年的总结，了解自己的实力，认清自己，不要骄傲，背起电脑继续前行，还有更多的技术等着我去学习。"><a href="#这是前三年的总结，了解自己的实力，认清自己，不要骄傲，背起电脑继续前行，还有更多的技术等着我去学习。" class="headerlink" title="这是前三年的总结，了解自己的实力，认清自己，不要骄傲，背起电脑继续前行，还有更多的技术等着我去学习。"></a>这是前三年的总结，了解自己的实力，认清自己，不要骄傲，背起电脑继续前行，还有更多的技术等着我去学习。</h2>]]></content>
      <categories>
        <category>Self</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次失败的阿里巴巴电话面试</title>
    <url>/2018/07/02/article128/</url>
    <content><![CDATA[<h1 id="记录一次失败的阿里巴巴电话面试"><a href="#记录一次失败的阿里巴巴电话面试" class="headerlink" title="记录一次失败的阿里巴巴电话面试"></a>记录一次失败的阿里巴巴电话面试</h1><h2 id="简历是6月份投的，抱着试试的心态根本没想有什么回应，今天下午却突然打过来电话，还以为是推荐云服务器，直接说要进行电话面试，需要半个小时左右，当时正在上课只好跑到楼道里，开始了一开始就不怎么充分的面试。"><a href="#简历是6月份投的，抱着试试的心态根本没想有什么回应，今天下午却突然打过来电话，还以为是推荐云服务器，直接说要进行电话面试，需要半个小时左右，当时正在上课只好跑到楼道里，开始了一开始就不怎么充分的面试。" class="headerlink" title="简历是6月份投的，抱着试试的心态根本没想有什么回应，今天下午却突然打过来电话，还以为是推荐云服务器，直接说要进行电话面试，需要半个小时左右，当时正在上课只好跑到楼道里，开始了一开始就不怎么充分的面试。"></a>简历是6月份投的，抱着试试的心态根本没想有什么回应，今天下午却突然打过来电话，还以为是推荐云服务器，直接说要进行电话面试，需要半个小时左右，当时正在上课只好跑到楼道里，开始了一开始就不怎么充分的面试。</h2><h2 id="先是让我进行两分钟左右的自我介绍，心态这时就不太稳了，以前有小公司打电话让自我介绍，我都是从容不迫，一条一条的说的很清楚很全面，坐在楼道里的我却有些忘记简历上的个人简介，先说奖学金就有些语言组织不清楚，没有概括全面，后来是做过的项目，竟然忘记了很多，简历写的都不记得真是有些奔溃，后来被打断了，问ACM得过第几名，学习成绩怎么样，在学校参加的哪些项目令你比较难忘，擅长什么语言，有没有参与开源项目，因为投的Java开发，就说下面开始技术的问题，我Java用的比较少，问我考Java行不行，我说尽量回答，第一个是Java为什么能处处运行，是JVM的问题，回答的比较卡，Java类的编译过程，抽象类和接口的区别，StringBuffer和StringBufferedReader的区别，Java内存的使用过程，堆栈什么的，当然这些问题我回答的都很差劲。"><a href="#先是让我进行两分钟左右的自我介绍，心态这时就不太稳了，以前有小公司打电话让自我介绍，我都是从容不迫，一条一条的说的很清楚很全面，坐在楼道里的我却有些忘记简历上的个人简介，先说奖学金就有些语言组织不清楚，没有概括全面，后来是做过的项目，竟然忘记了很多，简历写的都不记得真是有些奔溃，后来被打断了，问ACM得过第几名，学习成绩怎么样，在学校参加的哪些项目令你比较难忘，擅长什么语言，有没有参与开源项目，因为投的Java开发，就说下面开始技术的问题，我Java用的比较少，问我考Java行不行，我说尽量回答，第一个是Java为什么能处处运行，是JVM的问题，回答的比较卡，Java类的编译过程，抽象类和接口的区别，StringBuffer和StringBufferedReader的区别，Java内存的使用过程，堆栈什么的，当然这些问题我回答的都很差劲。" class="headerlink" title="先是让我进行两分钟左右的自我介绍，心态这时就不太稳了，以前有小公司打电话让自我介绍，我都是从容不迫，一条一条的说的很清楚很全面，坐在楼道里的我却有些忘记简历上的个人简介，先说奖学金就有些语言组织不清楚，没有概括全面，后来是做过的项目，竟然忘记了很多，简历写的都不记得真是有些奔溃，后来被打断了，问ACM得过第几名，学习成绩怎么样，在学校参加的哪些项目令你比较难忘，擅长什么语言，有没有参与开源项目，因为投的Java开发，就说下面开始技术的问题，我Java用的比较少，问我考Java行不行，我说尽量回答，第一个是Java为什么能处处运行，是JVM的问题，回答的比较卡，Java类的编译过程，抽象类和接口的区别，StringBuffer和StringBufferedReader的区别，Java内存的使用过程，堆栈什么的，当然这些问题我回答的都很差劲。"></a>先是让我进行两分钟左右的自我介绍，心态这时就不太稳了，以前有小公司打电话让自我介绍，我都是从容不迫，一条一条的说的很清楚很全面，坐在楼道里的我却有些忘记简历上的个人简介，先说奖学金就有些语言组织不清楚，没有概括全面，后来是做过的项目，竟然忘记了很多，简历写的都不记得真是有些奔溃，后来被打断了，问ACM得过第几名，学习成绩怎么样，在学校参加的哪些项目令你比较难忘，擅长什么语言，有没有参与开源项目，因为投的Java开发，就说下面开始技术的问题，我Java用的比较少，问我考Java行不行，我说尽量回答，第一个是Java为什么能处处运行，是JVM的问题，回答的比较卡，Java类的编译过程，抽象类和接口的区别，StringBuffer和StringBufferedReader的区别，Java内存的使用过程，堆栈什么的，当然这些问题我回答的都很差劲。</h2><h2 id="还有对自己的职业规划，我大一学的Java后来接触python，PHP，我想做Java开发，比较有技术，但最近在学习大数据对大数据很感兴趣，大数据技术门槛高，以后决定做大数据开发。"><a href="#还有对自己的职业规划，我大一学的Java后来接触python，PHP，我想做Java开发，比较有技术，但最近在学习大数据对大数据很感兴趣，大数据技术门槛高，以后决定做大数据开发。" class="headerlink" title="还有对自己的职业规划，我大一学的Java后来接触python，PHP，我想做Java开发，比较有技术，但最近在学习大数据对大数据很感兴趣，大数据技术门槛高，以后决定做大数据开发。"></a>还有对自己的职业规划，我大一学的Java后来接触python，PHP，我想做Java开发，比较有技术，但最近在学习大数据对大数据很感兴趣，大数据技术门槛高，以后决定做大数据开发。</h2><h2 id="之后就问大学了学过什么课，哪门课比较好，因为我有两门满分课就说了，还问数据结构有没有学过，大致的回答了一些课程但紧张的都想不起来，至于树，图这些结构的问题我都不敢接，再就是有没有技术上比较深入的项目，正好和导师做的有一个二叉树语义网，还有一个千万级并发的项目过程，说的时候也有些问题，没有阐述清自己的想法，我都怕是以为我在胡说，起来的问题想不起来了，时间也很快马上就半个小时了，最后问我有什么问题，我说如果这次失败能不能再投，这次准备很不充分，平时都做业务上的项目，算法，基础知识最近才学，他说可以的，然后没有然后，我觉得凉了，不过也有了经验，知道自己还是很菜的，该学的还有很多，等学好了再二战阿里。"><a href="#之后就问大学了学过什么课，哪门课比较好，因为我有两门满分课就说了，还问数据结构有没有学过，大致的回答了一些课程但紧张的都想不起来，至于树，图这些结构的问题我都不敢接，再就是有没有技术上比较深入的项目，正好和导师做的有一个二叉树语义网，还有一个千万级并发的项目过程，说的时候也有些问题，没有阐述清自己的想法，我都怕是以为我在胡说，起来的问题想不起来了，时间也很快马上就半个小时了，最后问我有什么问题，我说如果这次失败能不能再投，这次准备很不充分，平时都做业务上的项目，算法，基础知识最近才学，他说可以的，然后没有然后，我觉得凉了，不过也有了经验，知道自己还是很菜的，该学的还有很多，等学好了再二战阿里。" class="headerlink" title="之后就问大学了学过什么课，哪门课比较好，因为我有两门满分课就说了，还问数据结构有没有学过，大致的回答了一些课程但紧张的都想不起来，至于树，图这些结构的问题我都不敢接，再就是有没有技术上比较深入的项目，正好和导师做的有一个二叉树语义网，还有一个千万级并发的项目过程，说的时候也有些问题，没有阐述清自己的想法，我都怕是以为我在胡说，起来的问题想不起来了，时间也很快马上就半个小时了，最后问我有什么问题，我说如果这次失败能不能再投，这次准备很不充分，平时都做业务上的项目，算法，基础知识最近才学，他说可以的，然后没有然后，我觉得凉了，不过也有了经验，知道自己还是很菜的，该学的还有很多，等学好了再二战阿里。"></a>之后就问大学了学过什么课，哪门课比较好，因为我有两门满分课就说了，还问数据结构有没有学过，大致的回答了一些课程但紧张的都想不起来，至于树，图这些结构的问题我都不敢接，再就是有没有技术上比较深入的项目，正好和导师做的有一个二叉树语义网，还有一个千万级并发的项目过程，说的时候也有些问题，没有阐述清自己的想法，我都怕是以为我在胡说，起来的问题想不起来了，时间也很快马上就半个小时了，最后问我有什么问题，我说如果这次失败能不能再投，这次准备很不充分，平时都做业务上的项目，算法，基础知识最近才学，他说可以的，然后没有然后，我觉得凉了，不过也有了经验，知道自己还是很菜的，该学的还有很多，等学好了再二战阿里。</h2><h2 id="补充：面试的大哥语气全程很平和，感觉很有气魄，大厂的程序员真是不一般。"><a href="#补充：面试的大哥语气全程很平和，感觉很有气魄，大厂的程序员真是不一般。" class="headerlink" title="补充：面试的大哥语气全程很平和，感觉很有气魄，大厂的程序员真是不一般。"></a>补充：面试的大哥语气全程很平和，感觉很有气魄，大厂的程序员真是不一般。</h2>]]></content>
      <categories>
        <category>Technique</category>
        <category>Self</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机内存区域溢出测试</title>
    <url>/2018/07/04/article129/</url>
    <content><![CDATA[<h1 id="Java虚拟机内存区域溢出测试"><a href="#Java虚拟机内存区域溢出测试" class="headerlink" title="Java虚拟机内存区域溢出测试"></a>Java虚拟机内存区域溢出测试</h1><h3 id="测试内存溢出前，先配置Debug-configurations，在Arguments中的VM-arguments文本框中输入对应的虚拟机启动参数。然后在进行Run执行。这样可以让虚拟机在出现内存溢出异常时Dump当前的内存堆转储快照以便事后进行分析。"><a href="#测试内存溢出前，先配置Debug-configurations，在Arguments中的VM-arguments文本框中输入对应的虚拟机启动参数。然后在进行Run执行。这样可以让虚拟机在出现内存溢出异常时Dump当前的内存堆转储快照以便事后进行分析。" class="headerlink" title="测试内存溢出前，先配置Debug configurations，在Arguments中的VM arguments文本框中输入对应的虚拟机启动参数。然后在进行Run执行。这样可以让虚拟机在出现内存溢出异常时Dump当前的内存堆转储快照以便事后进行分析。"></a>测试内存溢出前，先配置Debug configurations，在Arguments中的VM arguments文本框中输入对应的虚拟机启动参数。然后在进行Run执行。这样可以让虚拟机在出现内存溢出异常时Dump当前的内存堆转储快照以便事后进行分析。</h3><h2 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * VM Args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"> * @author Rain</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class heapOOM &#123;</span><br><span class="line">    static class OOMObject&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            list.add(new OOMObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid4572.hprof ...</span><br><span class="line">Heap dump file created [28022194 bytes in 0.087 secs]</span><br></pre></td></tr></table></figure></div>

<h3 id="Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。因为Java堆用于存储对象实例，只要不断的创建对象，超过最大堆的容量限制必然溢出，当出现Java堆内存溢出时，异常堆栈信息提示：java-lang-OutOfMemoryError-Java-heap-space"><a href="#Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。因为Java堆用于存储对象实例，只要不断的创建对象，超过最大堆的容量限制必然溢出，当出现Java堆内存溢出时，异常堆栈信息提示：java-lang-OutOfMemoryError-Java-heap-space" class="headerlink" title="Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。因为Java堆用于存储对象实例，只要不断的创建对象，超过最大堆的容量限制必然溢出，当出现Java堆内存溢出时，异常堆栈信息提示：java.lang.OutOfMemoryError: Java heap space"></a>Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。因为Java堆用于存储对象实例，只要不断的创建对象，超过最大堆的容量限制必然溢出，当出现Java堆内存溢出时，异常堆栈信息提示：<code>java.lang.OutOfMemoryError: Java heap space</code></h3><h2 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * VM Args:-Xss128k</span><br><span class="line"> * @author Rain</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JavaVMStackSOF &#123;</span><br><span class="line">    private int stackLength = 1;</span><br><span class="line">    public void stackLeak()&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)throws Throwable&#123;</span><br><span class="line">        JavaVMStackSOF oom = new JavaVMStackSOF();</span><br><span class="line">        try&#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125;catch (Throwable e)&#123;</span><br><span class="line">            System.out.println(&quot;stack length:&quot;+oom.stackLength);</span><br><span class="line">            throw e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack length:19479</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br></pre></td></tr></table></figure></div>

<h3 id="因为内存分配原则，虚拟机栈和本机方法栈是最后分配内存的，每个线程分配到的栈容量越大，可以建立的线程数量自然越少，建立线程时就越容易把剩下的内存耗尽。如果使用虚拟机默认参数，栈深度在大多数情况下达到1000-2000完全没有问题，正常的方法调用和递归是够用了，但是在建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，就只能减少最大堆和减少栈容量来换取更多的线程。"><a href="#因为内存分配原则，虚拟机栈和本机方法栈是最后分配内存的，每个线程分配到的栈容量越大，可以建立的线程数量自然越少，建立线程时就越容易把剩下的内存耗尽。如果使用虚拟机默认参数，栈深度在大多数情况下达到1000-2000完全没有问题，正常的方法调用和递归是够用了，但是在建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，就只能减少最大堆和减少栈容量来换取更多的线程。" class="headerlink" title="因为内存分配原则，虚拟机栈和本机方法栈是最后分配内存的，每个线程分配到的栈容量越大，可以建立的线程数量自然越少，建立线程时就越容易把剩下的内存耗尽。如果使用虚拟机默认参数，栈深度在大多数情况下达到1000~2000完全没有问题，正常的方法调用和递归是够用了，但是在建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，就只能减少最大堆和减少栈容量来换取更多的线程。"></a>因为内存分配原则，虚拟机栈和本机方法栈是最后分配内存的，每个线程分配到的栈容量越大，可以建立的线程数量自然越少，建立线程时就越容易把剩下的内存耗尽。如果使用虚拟机默认参数，栈深度在大多数情况下达到1000~2000完全没有问题，正常的方法调用和递归是够用了，但是在建立过多线程导致的内存溢出，在不能减少线程数或者更换64位虚拟机的情况下，就只能减少最大堆和减少栈容量来换取更多的线程。</h3><h2 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">/**</span><br><span class="line"> * VM Args: -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class="line"> * @author Rain</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class RuntimeConstantPoolOOM &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        // 使用list保持着常量池引用，避免Full GC回收常量池行为</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">        // 10MB的permsize在integer范围内足够产生OOM </span><br><span class="line">        int i = 0;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            list.add(String.valueOf(i++).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="这段代码只有在JDK1-6版本运行才会报错，1-7以上逐步“去永久代”。"><a href="#这段代码只有在JDK1-6版本运行才会报错，1-7以上逐步“去永久代”。" class="headerlink" title="这段代码只有在JDK1.6版本运行才会报错，1.7以上逐步“去永久代”。"></a>这段代码只有在JDK1.6版本运行才会报错，1.7以上逐步“去永久代”。</h3><h3 id="除此之外还有借助CGLib使方法区出现内存溢出异常，本机直接内存溢出，先不进行代码演示。"><a href="#除此之外还有借助CGLib使方法区出现内存溢出异常，本机直接内存溢出，先不进行代码演示。" class="headerlink" title="除此之外还有借助CGLib使方法区出现内存溢出异常，本机直接内存溢出，先不进行代码演示。"></a>除此之外还有借助CGLib使方法区出现内存溢出异常，本机直接内存溢出，先不进行代码演示。</h3>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>《深入理解Java虚拟机》读书笔记1：Java技术体系、Java内存区域和内存溢出异常</title>
    <url>/2018/07/27/article130/</url>
    <content><![CDATA[<h1 id="《深入理解Java虚拟机》读书笔记1：Java技术体系、Java内存区域和内存溢出异常"><a href="#《深入理解Java虚拟机》读书笔记1：Java技术体系、Java内存区域和内存溢出异常" class="headerlink" title="《深入理解Java虚拟机》读书笔记1：Java技术体系、Java内存区域和内存溢出异常"></a>《深入理解Java虚拟机》读书笔记1：Java技术体系、Java内存区域和内存溢出异常</h1><p>国内JVM相关书籍NO.1，Java程序员必读。读书笔记第一部分对应原书的前两章，主要介绍了Java的技术体系、Java虚拟机的发展历史、Java运行时区域的划分、对象的创建和访问以及内存溢出的实战。</p>
<h1 id="Part-1-走进Java"><a href="#Part-1-走进Java" class="headerlink" title="Part 1: 走进Java"></a>Part 1: 走进Java</h1><h2 id="第一章-走进Java"><a href="#第一章-走进Java" class="headerlink" title="第一章 走进Java"></a>第一章 走进Java</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java的优点</p>
<ul>
<li>结构严谨、面向对象</li>
<li>摆脱平台的束缚，一次编写到处运行</li>
<li>提供了相对安全的内存管理和访问机制</li>
<li>实现了热点代码检测和运行时编译及优化</li>
<li>一套完善的应用程序接口以及无数的第三方类库</li>
</ul>
<h3 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h3><p>Sun官方所定义的Java技术体系包括：</p>
<ul>
<li>Java程序设计语言</li>
<li>各种硬件平台上的Java虚拟机</li>
<li>Class文件格式</li>
<li>Java API类库</li>
<li>来自商业机构和开源社区的第三方Java类库</li>
</ul>
<p>JDK是用于支持Java开发的最小环境，JRE是支持Java程序运行的标准环境，整个Java体系如下所示： <a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/java_tech_structure.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/java_tech_structure.png"
                      alt="Java技术体系"
                ></a></p>
<h3 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h3><p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/java_timeline.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/java_timeline.png"
                      alt="Java技术发展"
                ></a></p>
<ul>
<li>JDK 1.0: Java虚拟机、Applet、AWT等；</li>
<li>JDK 1.1：JAR文件格式、JDBC、JavaBeans、RMI、内部类、反射；</li>
<li>JDK 1.2：拆分为J2SE&#x2F;J2EE&#x2F;J2ME、内置JIT编译器、一系列Collections集合类；</li>
<li>JDK 1.3：JNDI服务、使用CORBA IIOP实现RMI通信协议、Java 2D改进；</li>
<li>JDK 1.4：正则表达式、异常链、NIO、日志类、XML解析器和XSLT转换器；</li>
<li>JDK 1.5：自动装箱、泛型、动态注解、枚举、可变参数、遍历循环、改进了Java内存模型、提供了java.util.concurrent并发包；</li>
<li>JDK 1.6：提供动态语言支持、提供编译API和微型HTTP服务器API、虚拟机优化（锁与同步、垃圾收集、类加载等）；</li>
<li>JDK 1.7：G1收集器、加强对Java语言的调用支持、升级类加载架构；</li>
<li>JDK 1.8：Lambda表达式等；</li>
</ul>
<h3 id="Java虚拟机发展史"><a href="#Java虚拟机发展史" class="headerlink" title="Java虚拟机发展史"></a>Java虚拟机发展史</h3><ul>
<li>Sun Classic&#x2F;Exact VM：Classic VM是第一款商用虚拟机，纯解析器方式来执行Java代码，如果要使用JIT编译器就必须进行外挂，解析器和编译器不能配合工作，编译器执行效率非常差；Exact VM是Sun虚拟机团队曾在Solaris平台发布的虚拟机，支持两级即时编译器、编译器和解释器混合工作、使用准确内存管理（虚拟机可以知道内存中某个位置的数据具体是什么类型），但很快就被HotSpot VM所取代；</li>
<li>Sun HotSpot VM：Sun JDK和OpenJDK所带的虚拟机，目前使用范围最广；继承了前两款虚拟机的优点，还支持热点代码探测技术（通过计数器找出最具编译价值的代码）；2006年Sun公司宣布JDK包括HotSpot VM开源，在此基础上建立OpenJDK；</li>
<li>Sun Mobile-Embedded VM&#x2F;Meta-Circular VM：还有一些Sun开发的面对移动和嵌入式发布的和实验性质的虚拟机；</li>
<li>BEA JRockit&#x2F;IBM J9 VM：JRockit VM号称是世界上最快的Java虚拟机，专注于服务器端应用，不包含解析器实现，全部靠即时编译器编译执行；J9 VM定位于HotSpot比较接近，主要目的是作为IBM公司各种Java产品的执行平台；</li>
<li>Azul VM&#x2F;BEA Liquid VM：特定硬件平台专有的高性能虚拟机；</li>
<li>Apache Harmony&#x2F;Google Android Dalvik VM：Apache Harmony包含自己的虚拟机和Java库，但没有通过TCK认证；Dalvik VM是Android平台的核心组成部分，其并没有遵循Java虚拟机规范，不能直接执行Class文件，使用的是寄存器架构而不是JVM常见的栈架构；</li>
<li>Microsoft JVM及其他：微软曾经是Java技术的铁杆支持者，开发过Windows下性能最好的Java虚拟机，但后来被Sun起诉终止其发展；</li>
</ul>
<h3 id="展望Java技术的未来"><a href="#展望Java技术的未来" class="headerlink" title="展望Java技术的未来"></a>展望Java技术的未来</h3><ul>
<li>模块化</li>
<li>混合语言</li>
<li>多核并行</li>
<li>进一步丰富语法</li>
<li>64位虚拟机</li>
</ul>
<h3 id="实战：自己编译JDK"><a href="#实战：自己编译JDK" class="headerlink" title="实战：自己编译JDK"></a>实战：自己编译JDK</h3><ul>
<li>下载OpenJDK：<a class="link"   href="https://jdk7.java.net/source.html" >https://jdk7.java.net/source.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>系统需求：Ubuntu 64位、5GB的磁盘、1G内存；</li>
<li>构建编译环境：需要Bootstrap JDK(JDK6以上)&#x2F;Ant(1.7.1以上)&#x2F;GCC。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential gawk m4 openjdk-6-jdk libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev x11proto-print-dev binutils libmotif3 libmotif-dev ant</span><br></pre></td></tr></table></figure></div>

<ul>
<li>进行编译：设置环境变量、make sanity检查、make编译、复制到JAVA_HOME、编辑env.sh</li>
</ul>
<h3 id="在IDE工具中进行源码调试"><a href="#在IDE工具中进行源码调试" class="headerlink" title="在IDE工具中进行源码调试"></a>在IDE工具中进行源码调试</h3><p>NetBeans（支持C&#x2F;C++开发的版本）</p>
<h3 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h3><p>本章介绍了Java技术体系的过去、现在以及未来的一些发展趋势，并独立编译一个OpenJDK 7的版本。</p>
<h1 id="Part-2-自动内存管理机制"><a href="#Part-2-自动内存管理机制" class="headerlink" title="Part 2 自动内存管理机制"></a>Part 2 自动内存管理机制</h1><h2 id="第二章-Java内存区域与内存溢出异常"><a href="#第二章-Java内存区域与内存溢出异常" class="headerlink" title="第二章 Java内存区域与内存溢出异常"></a>第二章 Java内存区域与内存溢出异常</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>对于Java程序员来说，在虚拟机自动内存管理机制下，不需要为new操作去写配对的delete&#x2F;free代码，不容易出现内存泄漏。但是如果出现内存泄漏问题，如果不了解虚拟机的机制，便难以定位。</p>
<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/jvm_runtime_data_area.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/jvm_runtime_data_area.png"
                      alt="运行时数据区域"
                ></a></p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul>
<li>一块较小的内存，可以看作是当前线程所执行的字节码的行号指示器；</li>
<li>在虚拟机概念模型（各种虚拟机实现可能不一样）中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令；</li>
<li>程序计数器是属于线程私有的内存；</li>
<li>如果执行的是Java方法，该计数器记录的是正在执行的虚拟机字节码指令的地址；如果是Native方法则为空；</li>
</ul>
<h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><ul>
<li>Java虚拟机栈也是线程私有的；</li>
<li>描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程；</li>
<li>局部变量表存放了编译器可知的各种基本数据类型、对象引用和returnAddress类型；其所需的内存空间在编辑期完成分配，不会再运行期改变；</li>
<li>可能存在两种异常：StackOverflowError和OutOfMemoryError；</li>
</ul>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><ul>
<li>与虚拟机栈非常相似，只不过是为虚拟机使用到的Native方法服务；</li>
<li>可能存在两种异常：StackOverflowError和OutOfMemoryError；</li>
</ul>
<h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><ul>
<li>Java堆是被所有线程共享的，在虚拟机启动时创建；</li>
<li>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这分配；</li>
<li>是垃圾收集器管理的主要区域，可以分为新生代和老年代；</li>
<li>可以物理不连续，只要逻辑上是连续的即可；</li>
<li>如果堆中没有内存完成实例分配也无法再扩展时，会抛出OutOfMemoryError异常；</li>
</ul>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><ul>
<li>是线程共享的区域；</li>
<li>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据；</li>
<li>该区域对于垃圾收集来说条件比较苛刻，但是还是非常有必要要进行回收处理；</li>
<li>当无法满足内存分配需求时，将抛出OutOfMemoryError异常；</li>
</ul>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul>
<li>是方法区的一部分；</li>
<li>Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放；</li>
<li>Java虚拟机规范要求较少，通常还会把翻译出来的直接引用也存储在此；</li>
<li>另外一个重要特征是具备动态性，可以在运行期间将新的常量放入池中，如String的intern方法；</li>
<li>可能存在的异常：OutOfMemoryError；</li>
</ul>
<h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><ul>
<li>并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域；</li>
<li>JDK 1.4的NIO引入了基于通道（Channel）和缓冲区（Buffer）的IO方法，可以使用Native函数库直接分配对外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作以提升性能；</li>
</ul>
<h3 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h3><p>进一步了解虚拟机内存中数据的其他细节，比如它们是如何创建、如何布局以及如何访问的。下面以虚拟机HotSpot和常用的内存区域Java堆为例，深入探讨HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程。</p>
<h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><ul>
<li>虚拟机遇到一条new指令时，先检查指令的参数是否能在常量池中定位到一个类的符号，并且检查这个符号引用代码的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程；</li>
<li>接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便完全确定，为对象分配空间等同于把一块确定大小的内存从Java堆中划分出来。在使用Serial、ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞（内存绝对规整，只要通过指针作为分界点标识）；而使用CMS这种基于Mark-Sweep算法收集器时，通常使用空闲列表（内存不规整，通过维护一个列表记录那块内存是可用的）；</li>
<li>另外一个需要考虑的并发下的线程安全问题，有两种方案：一是分配内存空间的动作进行同步处理（实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性）；二是为每个线程分配一小块内存（称为本地线程分配缓冲，TLAB），各个线程独立分配，只有TLAB用完需要分配新的才需要同步锁定，虚拟机通过-XX:+&#x2F;-UseTLAB参数来设定；</li>
<li>内存分配完后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头），这保证了对象的实例字段在Java代码中可以不赋值就直接使用，程序能访问到这些字段数据类型对应的零值；</li>
<li>接下来设置对象的对象头（Object Header）信息，包括对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象GC分代年龄等；</li>
<li>接着执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来；</li>
<li>HotSpot解释器的代码片段：略</li>
</ul>
<h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><ul>
<li>对象在内存中存储的布局可以分为3块区域：对象头（Object Header）、实例数据（Instance Data）和对齐填充（Padding）；</li>
<li>对象头包括两部分信息：第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等；另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例（并不是所有虚拟机都必须在对象数据上保留类型指针）。另外如果对象是一个Java数组，对象头中还必须有一块用于记录数组长度的数据。</li>
<li>实例数据部分是真正存储的有效信息，也是在代码中所定义的各种类型字段内容。无论是父类继承的还是子类中定义的都需要记录下来。这部分存储的顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。</li>
<li>对齐填充不是必然存在的，主要是由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍。</li>
</ul>
<h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><ul>
<li>栈上的reference类型在虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆栈对象的具体位置，目前主流的方式方式有句柄和直接直接两种。</li>
<li>通过句柄：Java堆中划出一块内存作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。其最大好处就是reference存储的是稳定的句柄地址，在对象被移到（垃圾收集时移到）只改变实例数据指针，而reference不需要修改；</li>
</ul>
<p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/object_access_reference_1.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/object_access_reference_1.png"
                      alt="通过句柄访问对象"
                ></a></p>
<ul>
<li>通过直接指针：Java堆对象的布局中必须考虑如果放置访问类型数据的相关信息，而reference中存在的直接就是对象地址。其最大好处在于速度更快，节省了一次指针定位的时机开销。HotSpot采用该方式进行对象访问，但其他语言和框架采用句柄的也非常常见。</li>
</ul>
<p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/object_access_reference_2.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/object_access_reference_2.png"
                      alt="通过直接指针访问对象"
                ></a></p>
<h3 id="实战：OutOfMemoryError异常"><a href="#实战：OutOfMemoryError异常" class="headerlink" title="实战：OutOfMemoryError异常"></a>实战：OutOfMemoryError异常</h3><ul>
<li>通过代码验证Java虚拟机规范中描述各个运行时区域存储的内容；</li>
<li>在实际遇到内存溢出异常时，能根据异常的信息快速判断是哪个区域内存溢出；</li>
</ul>
<h4 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h4><p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_jvm_heap.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_jvm_heap.png"
                      alt="Java堆溢出"
                ></a> 解决思路：先通过内存映像分析工具对dump出来的堆转储快照进行分析，先分清楚是内存泄漏还是内存溢出；如果是内存泄漏，进一步查看泄漏对象到GC Roots的引用链，从而确认为什么无法回收；如果是内存溢出，则应当检查虚拟机堆参数（-Xmx与-Xmx）或检查是否存在对象生命周期过长、持有状态时间过长的情况；</p>
<h4 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h4><ul>
<li>HotSpot不区分虚拟机栈和本地方法栈；</li>
<li>StackOverflowError和OutOfMemoryError存在互相重叠的地方；</li>
<li>栈容量由-Xss参数设定；</li>
</ul>
<p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/stackoverflow_jvm_stack.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/stackoverflow_jvm_stack.png"
                      alt="虚拟机栈溢出"
                ></a> 虚拟机的默认参数对于通常的方法调用（1000~2000层）完全够用，通常根据异常的堆栈日志就可以很容易定位问题。</p>
<h4 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h4><p>对于这个区域的测试，基本思路是运行时产生大量的类去填满方法区（比如使用反射和动态代理），这里我们借助CGLib直接操作字节码运行时产生大量的动态类（很对主流框架如Spring、Hibernate都会采用类似的字节码技术）。在这里需要特别注意垃圾回收的状况。 <a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_java_methodarea_part1.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_java_methodarea_part1.png"
                      alt="借助CGLib使方法区出现内存溢出异常1"
                ></a> <a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_java_methodarea_part2.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_java_methodarea_part2.png"
                      alt="借助CGLib使方法区出现内存溢出异常2"
                ></a></p>
<h4 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h4><p><a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_jvm_direct.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_jvm_direct.png"
                      alt="本机直接内存溢出1"
                ></a> <a href="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_jvm_direct_part2.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://oi46mo3on.bkt.clouddn.com/10_deep_in_jvm/outofmemory_jvm_direct_part2.png"
                      alt="本机直接内存溢出2"
                ></a> DirectMemory导致的内存溢出，在Heap Dump里不会看见明显的异常。如果发现OouOfMemory之后Dump文件很小，程序又使用了NIO，那就可以检查下是否这方面的原因。</p>
<h3 id="本章小结-1"><a href="#本章小结-1" class="headerlink" title="本章小结"></a>本章小结</h3><p>学习了虚拟机的内存是如何划分的，对象是如何创建、布局和访问的，哪部分区域、什么样的代码和操作可能导致内存的溢出异常。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MapReduce统计天气数据中的最高气温</title>
    <url>/2018/08/03/article131/</url>
    <content><![CDATA[<h1 id="使用MapReduce统计天气数据中的最高气温"><a href="#使用MapReduce统计天气数据中的最高气温" class="headerlink" title="使用MapReduce统计天气数据中的最高气温"></a>使用MapReduce统计天气数据中的最高气温</h1><h2 id="例子是从Hadoop权威指南上改写的，需要先将代码生成jar包，然后将测试样例和jar包上传到HDFS中，使用命令运行，最终会得出每年的最高气温统计结果，运行命令不写出来了。代码也很简单，就是分别写出map和reduce的操作，map中对数据进行一个分割，提取，将结果传给reduce进行统计。"><a href="#例子是从Hadoop权威指南上改写的，需要先将代码生成jar包，然后将测试样例和jar包上传到HDFS中，使用命令运行，最终会得出每年的最高气温统计结果，运行命令不写出来了。代码也很简单，就是分别写出map和reduce的操作，map中对数据进行一个分割，提取，将结果传给reduce进行统计。" class="headerlink" title="例子是从Hadoop权威指南上改写的，需要先将代码生成jar包，然后将测试样例和jar包上传到HDFS中，使用命令运行，最终会得出每年的最高气温统计结果，运行命令不写出来了。代码也很简单，就是分别写出map和reduce的操作，map中对数据进行一个分割，提取，将结果传给reduce进行统计。"></a>例子是从Hadoop权威指南上改写的，需要先将代码生成jar包，然后将测试样例和jar包上传到HDFS中，使用命令运行，最终会得出每年的最高气温统计结果，运行命令不写出来了。代码也很简单，就是分别写出map和reduce的操作，map中对数据进行一个分割，提取，将结果传给reduce进行统计。</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.mapreduce;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.LongWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line">import org.apache.hadoop.mapred.MapReduceBase;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Hadoop书上的最高气温判断</span><br><span class="line">*/</span><br><span class="line">public class MaxTemperature &#123;</span><br><span class="line">public static class MaxTemperatureMapper extends Mapper&lt;LongWritable,Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">private static final int MISSING = 9999;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">String line = value.toString();</span><br><span class="line">String year = line.substring(15,19);</span><br><span class="line">int airTemperature;</span><br><span class="line">if (line.charAt(87) == &#x27;+&#x27;) &#123;</span><br><span class="line">airTemperature = Integer.parseInt(line.substring(88,92));</span><br><span class="line">&#125;else&#123;</span><br><span class="line">airTemperature = Integer.parseInt(line.substring(87,92));</span><br><span class="line">&#125;</span><br><span class="line">String quality = line.substring(92,93);</span><br><span class="line">if (airTemperature!=MISSING&amp;&amp;quality.matches(&quot;[01459]&quot;))&#123;</span><br><span class="line">context.write(new Text(year), new IntWritable(airTemperature));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static class MaxTemperatureReducer extends Reducer&lt;Text ,IntWritable,Text,IntWritable&gt;&#123;</span><br><span class="line">@Override</span><br><span class="line">protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">int maxValue = Integer.MIN_VALUE;</span><br><span class="line">for (IntWritable value:values)&#123;</span><br><span class="line">maxValue = Math.max(maxValue,value.get());</span><br><span class="line">&#125;</span><br><span class="line">context.write(key,new IntWritable(maxValue));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException &#123;</span><br><span class="line">if (args.length!=2)&#123;</span><br><span class="line">System.err.println(&quot;Usage:MaxTEmperature&quot;);</span><br><span class="line">System.exit(-1);</span><br><span class="line">&#125;</span><br><span class="line">Job job = new Job();</span><br><span class="line">job.setJarByClass(MaxTemperature.class);</span><br><span class="line">job.setJobName(&quot;Max temperature&quot;);</span><br><span class="line"></span><br><span class="line">FileInputFormat.addInputPath(job,new Path(args[0]));</span><br><span class="line">FileOutputFormat.setOutputPath(job,new Path(args[1]));</span><br><span class="line"></span><br><span class="line">job.setMapperClass(MaxTemperatureMapper.class);</span><br><span class="line">job.setReducerClass(MaxTemperatureReducer.class);</span><br><span class="line"></span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">System.exit(job.waitForCompletion(true)?0:1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Hadoop</category>
        <category>hadoop</category>
        <category>MapReduce</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大数据的随记</title>
    <url>/2018/08/07/article132/</url>
    <content><![CDATA[<h1 id="关于大数据的随记"><a href="#关于大数据的随记" class="headerlink" title="关于大数据的随记"></a>关于大数据的随记</h1><h2 id="很久没有随意的写一些东西了，最近很忙，但不知道在忙什么，清除自己要学什么但学的却很无力，很乏味。初步把自己的方向定在大数据上，深入算法，了解Java，也许是换了Mac，最近浪费了很多的时间，做很多无意义的事情，书没有继续看下去，视频没有看完，题没有刷完，实习也没有认真的去找，庆幸自己还记得这些还记得顺便更一篇博客，也不算是毫无意义了。"><a href="#很久没有随意的写一些东西了，最近很忙，但不知道在忙什么，清除自己要学什么但学的却很无力，很乏味。初步把自己的方向定在大数据上，深入算法，了解Java，也许是换了Mac，最近浪费了很多的时间，做很多无意义的事情，书没有继续看下去，视频没有看完，题没有刷完，实习也没有认真的去找，庆幸自己还记得这些还记得顺便更一篇博客，也不算是毫无意义了。" class="headerlink" title="很久没有随意的写一些东西了，最近很忙，但不知道在忙什么，清除自己要学什么但学的却很无力，很乏味。初步把自己的方向定在大数据上，深入算法，了解Java，也许是换了Mac，最近浪费了很多的时间，做很多无意义的事情，书没有继续看下去，视频没有看完，题没有刷完，实习也没有认真的去找，庆幸自己还记得这些还记得顺便更一篇博客，也不算是毫无意义了。"></a>很久没有随意的写一些东西了，最近很忙，但不知道在忙什么，清除自己要学什么但学的却很无力，很乏味。初步把自己的方向定在大数据上，深入算法，了解Java，也许是换了Mac，最近浪费了很多的时间，做很多无意义的事情，书没有继续看下去，视频没有看完，题没有刷完，实习也没有认真的去找，庆幸自己还记得这些还记得顺便更一篇博客，也不算是毫无意义了。</h2><h2 id="在Mac里又重装了一遍大数据的环境，对这个流程更加了解，出现的一些问题能够自己去解决，重新写了代码，新建项目，一切都推掉再来一遍，这仿佛是程序员最爱干的事，也是学习最快的方法吧。在老师的灌输下，其实自己对大数据的理解并不是很深刻，Hadoop，HDFS，MapReduce，HBASE，HIVE，SPARK，Streaming，kafka，Scala，Yarn，Zookeeper，好多好多的名词，Hadoop生态环境的组件很多，各司其职，每个组件的概念，意义，用法，协同合作的过程，自己都不是很清楚，感觉在Hadoop中基于分布式存储的HDFS进行大数据分析计算会更加高效，快捷，比起用Python脚本来，数据量越大，优势也会更明显，而实时的流处理框架，日志消息实时处理，是我以前从未想到过能够实现的技术，大数据会是潮流，会是趋势，但我更希望能够通过大数据来切入自己想要深入的人工智能方向，把大数据作为基石，一个切入点，以算法作为护航，不断的去实现自己。"><a href="#在Mac里又重装了一遍大数据的环境，对这个流程更加了解，出现的一些问题能够自己去解决，重新写了代码，新建项目，一切都推掉再来一遍，这仿佛是程序员最爱干的事，也是学习最快的方法吧。在老师的灌输下，其实自己对大数据的理解并不是很深刻，Hadoop，HDFS，MapReduce，HBASE，HIVE，SPARK，Streaming，kafka，Scala，Yarn，Zookeeper，好多好多的名词，Hadoop生态环境的组件很多，各司其职，每个组件的概念，意义，用法，协同合作的过程，自己都不是很清楚，感觉在Hadoop中基于分布式存储的HDFS进行大数据分析计算会更加高效，快捷，比起用Python脚本来，数据量越大，优势也会更明显，而实时的流处理框架，日志消息实时处理，是我以前从未想到过能够实现的技术，大数据会是潮流，会是趋势，但我更希望能够通过大数据来切入自己想要深入的人工智能方向，把大数据作为基石，一个切入点，以算法作为护航，不断的去实现自己。" class="headerlink" title="在Mac里又重装了一遍大数据的环境，对这个流程更加了解，出现的一些问题能够自己去解决，重新写了代码，新建项目，一切都推掉再来一遍，这仿佛是程序员最爱干的事，也是学习最快的方法吧。在老师的灌输下，其实自己对大数据的理解并不是很深刻，Hadoop，HDFS，MapReduce，HBASE，HIVE，SPARK，Streaming，kafka，Scala，Yarn，Zookeeper，好多好多的名词，Hadoop生态环境的组件很多，各司其职，每个组件的概念，意义，用法，协同合作的过程，自己都不是很清楚，感觉在Hadoop中基于分布式存储的HDFS进行大数据分析计算会更加高效，快捷，比起用Python脚本来，数据量越大，优势也会更明显，而实时的流处理框架，日志消息实时处理，是我以前从未想到过能够实现的技术，大数据会是潮流，会是趋势，但我更希望能够通过大数据来切入自己想要深入的人工智能方向，把大数据作为基石，一个切入点，以算法作为护航，不断的去实现自己。"></a>在Mac里又重装了一遍大数据的环境，对这个流程更加了解，出现的一些问题能够自己去解决，重新写了代码，新建项目，一切都推掉再来一遍，这仿佛是程序员最爱干的事，也是学习最快的方法吧。在老师的灌输下，其实自己对大数据的理解并不是很深刻，Hadoop，HDFS，MapReduce，HBASE，HIVE，SPARK，Streaming，kafka，Scala，Yarn，Zookeeper，好多好多的名词，Hadoop生态环境的组件很多，各司其职，每个组件的概念，意义，用法，协同合作的过程，自己都不是很清楚，感觉在Hadoop中基于分布式存储的HDFS进行大数据分析计算会更加高效，快捷，比起用Python脚本来，数据量越大，优势也会更明显，而实时的流处理框架，日志消息实时处理，是我以前从未想到过能够实现的技术，大数据会是潮流，会是趋势，但我更希望能够通过大数据来切入自己想要深入的人工智能方向，把大数据作为基石，一个切入点，以算法作为护航，不断的去实现自己。</h2>]]></content>
      <categories>
        <category>Hadoop</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java调用HDFS的API进行文件基本操作</title>
    <url>/2018/08/12/article133/</url>
    <content><![CDATA[<h1 id="使用Java调用HDFS的API进行文件基本操作"><a href="#使用Java调用HDFS的API进行文件基本操作" class="headerlink" title="使用Java调用HDFS的API进行文件基本操作"></a>使用Java调用HDFS的API进行文件基本操作</h1><h2 id="本样例主要是代码，其中包括了Java进行上传，下载，删除，创建文件夹，遍历文件夹等操作，代码环境基于MacOS，IDEA，使用Maven来配置依赖包，后面我会放出代码，和pom-xml。Hadoop是2-6-CDH版本。代码中的hmaster是我配置的虚拟机IP地址，需要修改为你的虚拟机IP地址。"><a href="#本样例主要是代码，其中包括了Java进行上传，下载，删除，创建文件夹，遍历文件夹等操作，代码环境基于MacOS，IDEA，使用Maven来配置依赖包，后面我会放出代码，和pom-xml。Hadoop是2-6-CDH版本。代码中的hmaster是我配置的虚拟机IP地址，需要修改为你的虚拟机IP地址。" class="headerlink" title="本样例主要是代码，其中包括了Java进行上传，下载，删除，创建文件夹，遍历文件夹等操作，代码环境基于MacOS，IDEA，使用Maven来配置依赖包，后面我会放出代码，和pom.xml。Hadoop是2.6 CDH版本。代码中的hmaster是我配置的虚拟机IP地址，需要修改为你的虚拟机IP地址。"></a>本样例主要是代码，其中包括了Java进行上传，下载，删除，创建文件夹，遍历文件夹等操作，代码环境基于MacOS，IDEA，使用Maven来配置依赖包，后面我会放出代码，和pom.xml。Hadoop是2.6 CDH版本。代码中的hmaster是我配置的虚拟机IP地址，需要修改为你的虚拟机IP地址。</h2><p>HDFSUtil.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.hdfs;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.*;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.URI;</span><br><span class="line"></span><br><span class="line">public class HDFSUtil &#123;</span><br><span class="line"></span><br><span class="line">    FileSystem fs = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    这是先行运行的函数，在其他函数运行之前，将配置写好</span><br><span class="line">    @Before</span><br><span class="line">    public void init() throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        //读取classpath下的xxx-site.xml 配置文件，并解析其内容，封装到conf对象中</span><br><span class="line">//        可以将core-site.xml导入到项目中</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line"></span><br><span class="line">        //也可以在代码中对conf中的配置信息进行手动设置，会覆盖掉配置文件中的读取的值</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs://hmaster:9000/&quot;);</span><br><span class="line"></span><br><span class="line">        //根据配置信息，去获取一个具体文件系统的客户端操作实例对象</span><br><span class="line">        fs = FileSystem.get(new URI(&quot;hdfs://hmaster:9000/&quot;),conf,&quot;hadoop&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件，比较底层的写法</span><br><span class="line">     *</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void upload_old() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs://hmaster:9000/&quot;);</span><br><span class="line"></span><br><span class="line">        FileSystem fs = FileSystem.get(conf);</span><br><span class="line"></span><br><span class="line">        Path dst = new Path(&quot;hdfs://hmaster:9000/data/sample.txt&quot;);</span><br><span class="line"></span><br><span class="line">        FSDataOutputStream os = fs.create(dst);</span><br><span class="line"></span><br><span class="line">        FileInputStream is = new FileInputStream(&quot;/Users/rain/Downloads/sample.txt&quot;);</span><br><span class="line"></span><br><span class="line">        IOUtils.copy(is, os);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件，封装好的写法</span><br><span class="line">     * @throws Exception</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void upload() throws Exception, IOException&#123;</span><br><span class="line"></span><br><span class="line">//        前面为上传文件的路径，后面是HDFS中的路径和文件的新名称</span><br><span class="line">        fs.copyFromLocalFile(new Path(&quot;/Users/rain/Downloads/sample.txt&quot;), new Path(&quot;hdfs://hmaster:9000/data/test.txt&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载文件</span><br><span class="line">     * @throws Exception</span><br><span class="line">     * @throws IllegalArgumentException</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void download() throws Exception &#123;</span><br><span class="line">//      前面是HDFS中文件的路径，后面是要下载到本地的路径以及名称</span><br><span class="line">        fs.copyToLocalFile(new Path(&quot;hdfs://hmaster:9000/sample.txt&quot;), new Path(&quot;/Users/rain/Downloads/sample.txt&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查看文件信息</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws IllegalArgumentException</span><br><span class="line">     * @throws FileNotFoundException</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void listFiles() throws FileNotFoundException, IllegalArgumentException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        // listFiles列出的是文件信息，而且提供递归遍历</span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt; files = fs.listFiles(new Path(&quot;/data&quot;), true);</span><br><span class="line"></span><br><span class="line">        while(files.hasNext())&#123;</span><br><span class="line"></span><br><span class="line">            LocatedFileStatus file = files.next();</span><br><span class="line">            Path filePath = file.getPath();</span><br><span class="line">            String fileName = filePath.getName();</span><br><span class="line">            System.out.println(fileName);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;---------------------------------&quot;);</span><br><span class="line"></span><br><span class="line">        //listStatus 可以列出文件和文件夹的信息，但是不提供自带的递归遍历</span><br><span class="line">        FileStatus[] listStatus = fs.listStatus(new Path(&quot;/data&quot;));</span><br><span class="line">        for(FileStatus status: listStatus)&#123;</span><br><span class="line"></span><br><span class="line">            String name = status.getPath().getName();</span><br><span class="line">            System.out.println(name + (status.isDirectory()?&quot; is dir&quot;:&quot; is file&quot;));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建文件夹</span><br><span class="line">     * @throws Exception</span><br><span class="line">     * @throws IllegalArgumentException</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void mkdir() throws IllegalArgumentException, Exception &#123;</span><br><span class="line"></span><br><span class="line">        fs.mkdirs(new Path(&quot;/data/test&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除文件或文件夹</span><br><span class="line">     * @throws IOException</span><br><span class="line">     * @throws IllegalArgumentException</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void rm() throws IllegalArgumentException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        fs.delete(new Path(&quot;/data/test&quot;), true);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>pom.xml</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.rain.hadoop&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rain-hadoop&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;6&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;6&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;hadoop.version&gt;2.6.0-cdh5.7.0&lt;/hadoop.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;cloudera&lt;/id&gt;</span><br><span class="line">            &lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--添加依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.6.0-cdh5.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hbase-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.0-cdh5.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hbase-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.0-cdh5.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Hadoop</category>
        <category>hadoop</category>
        <category>HDFS</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MapReduce对日志数据进行简单的清理和总结</title>
    <url>/2018/09/19/article134/</url>
    <content><![CDATA[<h1 id="使用MapReduce和spark对日志数据进行简单的清理和总结"><a href="#使用MapReduce和spark对日志数据进行简单的清理和总结" class="headerlink" title="使用MapReduce和spark对日志数据进行简单的清理和总结"></a>使用MapReduce和spark对日志数据进行简单的清理和总结</h1><h2 id="首先使用MapReduce对日志进行分割，将time，ip，url提取出来，在用reduce进行一个整合，根据ip地址的出现次数，打印到hdfs中。在整合中我使用了bean结构来存储数据，bean继承了WritableComparable接口。"><a href="#首先使用MapReduce对日志进行分割，将time，ip，url提取出来，在用reduce进行一个整合，根据ip地址的出现次数，打印到hdfs中。在整合中我使用了bean结构来存储数据，bean继承了WritableComparable接口。" class="headerlink" title="首先使用MapReduce对日志进行分割，将time，ip，url提取出来，在用reduce进行一个整合，根据ip地址的出现次数，打印到hdfs中。在整合中我使用了bean结构来存储数据，bean继承了WritableComparable接口。"></a>首先使用MapReduce对日志进行分割，将time，ip，url提取出来，在用reduce进行一个整合，根据ip地址的出现次数，打印到hdfs中。在整合中我使用了bean结构来存储数据，bean继承了WritableComparable接口。</h2><h2 id="使用时先将BaiduLog和LogBean两个类导入项目，并配置相应的Maven依赖，然后导出项目的jar到虚拟机中，将日志文件上传到HDFS中，使用命令运行"><a href="#使用时先将BaiduLog和LogBean两个类导入项目，并配置相应的Maven依赖，然后导出项目的jar到虚拟机中，将日志文件上传到HDFS中，使用命令运行" class="headerlink" title="使用时先将BaiduLog和LogBean两个类导入项目，并配置相应的Maven依赖，然后导出项目的jar到虚拟机中，将日志文件上传到HDFS中，使用命令运行"></a>使用时先将BaiduLog和LogBean两个类导入项目，并配置相应的Maven依赖，然后导出项目的jar到虚拟机中，将日志文件上传到HDFS中，使用命令运行</h2><p><code>hadoop jar rain-hadoop-1.0-SNAPSHOT.jar com.rain.mapreduce.BaiduLog /data/baidu.log /data/log/clean5</code></p>
<h2 id="BaiduLog-java"><a href="#BaiduLog-java" class="headerlink" title="BaiduLog.java"></a>BaiduLog.java</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.LongWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line">import org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class BaiduLog &#123;</span><br><span class="line">    public static class BaiduLogMapper extends Mapper&lt;LongWritable,Text, Text, LogBean&gt; &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">//            super.map(key, value, context);</span><br><span class="line">            String log = value.toString();</span><br><span class="line">            String str = &quot;(cn.baidu.core.inteceptor.LogInteceptor:55)&quot;;</span><br><span class="line">            if (log.indexOf(str)!=-1)&#123;</span><br><span class="line">                String[] log_arr = log.split(str);</span><br><span class="line">                String time = log_arr[0].substring(1, 10);</span><br><span class="line">                String[] log_arr2 = log_arr[1].split(&quot;\t&quot;);</span><br><span class="line">                String ip = log_arr2[1];</span><br><span class="line">                String url = log_arr2[2];</span><br><span class="line">                if (url.equals(&quot;null&quot;))&#123;</span><br><span class="line">                    url = log_arr2[3];</span><br><span class="line">                &#125;</span><br><span class="line">                LogBean logbean = new LogBean(time,ip,url);</span><br><span class="line">                context.write(new Text(ip),logbean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class BaiduLogReducer extends Reducer&lt;Text,LogBean,IntWritable,Text&gt;&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected void reduce(Text key, Iterable&lt;LogBean&gt; values, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">//            super.reduce(key, values, context);</span><br><span class="line">            int sum = 0;</span><br><span class="line"></span><br><span class="line">            StringBuffer str = new StringBuffer();</span><br><span class="line">            int flag = 0;</span><br><span class="line">            for (LogBean logbean:values)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">                if (flag==0)&#123;</span><br><span class="line">                    str.append(logbean.toString());</span><br><span class="line">                    flag = 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(new IntWritable(sum),new Text(str.toString()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Configuration conf = new Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf, &quot;avg&quot;);</span><br><span class="line"></span><br><span class="line">        job.setJarByClass(BaiduLog.class);</span><br><span class="line">        job.setMapperClass(BaiduLog.BaiduLogMapper.class);</span><br><span class="line">        job.setReducerClass(BaiduLog.BaiduLogReducer.class);</span><br><span class="line"></span><br><span class="line">//        job.setCombinerClass(BaiduLog.BaiduLogReducer.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(LogBean.class);</span><br><span class="line"></span><br><span class="line">        FileInputFormat.addInputPath(job,new Path(args[0]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job,new Path(args[1]));</span><br><span class="line">        System.exit(job.waitForCompletion(true)?0:1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="LogBean-java"><a href="#LogBean-java" class="headerlink" title="LogBean.java"></a>LogBean.java</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.hadoop.io.Writable;</span><br><span class="line">import org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line">import java.io.DataInput;</span><br><span class="line">import java.io.DataOutput;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class LogBean implements WritableComparable&lt;LogBean&gt; &#123;</span><br><span class="line">    private String time;</span><br><span class="line">    private String ip;</span><br><span class="line">    private String url;</span><br><span class="line"></span><br><span class="line">    public LogBean() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LogBean(String time, String ip, String url) &#123;</span><br><span class="line">        this.time = time;</span><br><span class="line">        this.ip = ip;</span><br><span class="line">        this.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;LogBean&#123;&quot; +</span><br><span class="line">                &quot;time=&#x27;&quot; + time + &#x27; &#x27; +</span><br><span class="line">                &quot;, ip=&#x27;&quot; + ip + &#x27; &#x27; +</span><br><span class="line">                &quot;, url=&#x27;&quot; + url + &#x27; &#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTime() &#123;</span><br><span class="line">        return time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTime(String time) &#123;</span><br><span class="line">        this.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getIp() &#123;</span><br><span class="line">        return ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIp(String ip) &#123;</span><br><span class="line">        this.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUrl() &#123;</span><br><span class="line">        return url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUrl(String url) &#123;</span><br><span class="line">        this.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(LogBean o) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void write(DataOutput out) throws IOException &#123;</span><br><span class="line">        out.writeUTF(time);</span><br><span class="line">        out.writeUTF(ip);</span><br><span class="line">        out.writeUTF(url);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void readFields(DataInput in) throws IOException &#123;</span><br><span class="line">        time = in.readUTF();</span><br><span class="line">        ip = in.readUTF();</span><br><span class="line">        url = in.readUTF();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Hadoop</category>
        <category>hadoop</category>
        <category>MapReduce</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>HIVE函数大全</title>
    <url>/2018/10/08/article135/</url>
    <content><![CDATA[<h3 id="一、简单描述表结构，字段类型"><a href="#一、简单描述表结构，字段类型" class="headerlink" title="一、简单描述表结构，字段类型"></a>一、简单描述表结构，字段类型</h3><p>hive&gt;desc tabl_name;</p>
<h3 id="二，关系运算，等于，不等于，小于，大于，小于等于，大于等于"><a href="#二，关系运算，等于，不等于，小于，大于，小于等于，大于等于" class="headerlink" title="二，关系运算，等于，不等于，小于，大于，小于等于，大于等于"></a>二，关系运算，等于，不等于，小于，大于，小于等于，大于等于</h3><p>描述:如果表达式A为NULL,或者表达式B为NULL,返回NULL; hive&gt;select year from record where temperature&#x3D;0; hive&gt;select year from record where temperature&lt;&gt;0; hive&gt;select year from record where temperature&lt;0; hive&gt;select year from record where temperature&gt;0;</p>
<h3 id="三，空值判断-IS-NULL"><a href="#三，空值判断-IS-NULL" class="headerlink" title="三，空值判断: IS NULL"></a>三，空值判断: IS NULL</h3><p>语法:A IS NULL 操作类型:所有类型 描述:如果表达式A的值为NULL，则为TRUE;否则为FALSE 举例: hive&gt; select 1 from lxw_ dual where null is null;</p>
<h3 id="四，非空判断-IS-NOT-NULL"><a href="#四，非空判断-IS-NOT-NULL" class="headerlink" title="四，非空判断: IS NOT NULL"></a>四，非空判断: IS NOT NULL</h3><p>语法:A IS NOT NULL 操作类型:所有类型 描述:如果表达式A的值为NULL，则为FALSE;否则为TRUE 举例: hive&gt; select 1 from lxw_ dual where 1 is not null;</p>
<h3 id="五，LIKE查询"><a href="#五，LIKE查询" class="headerlink" title="五，LIKE查询"></a>五，LIKE查询</h3><p>语法:A LKE B 操作类型: strings 描述:如果字符串A或者字符串B为NULL，则返回NULL;如果字符串A符合表达式B 的正则语法，则为TRUE;否则为FALSE。B中字符”<em>”表示任意单个字符，而字符”%”表示任意数量的字符。 举例: hive&gt; select 1 from lxw</em> dual where ‘football’ like ‘foot%’; 1 hive&gt; select 1 from lxw_ dual where ‘football’ like ‘foot 1 hive&gt; select * from record where ‘temperature’ like ‘%%’; 注意: 否定比较时候用NOTA LIKE B hive&gt; select 1 from lxw_ dual where NOT ‘football’ like ‘ff%’; 注意: 判断-一个字符串是否全为数字: hive&gt;select 1 from bxw_ dual where ‘123456’ rlike ‘^\\d+$’; 1</p>
<h3 id="六，数学运算"><a href="#六，数学运算" class="headerlink" title="六，数学运算"></a>六，数学运算</h3><p>在select后写入数学表达式，包含+-*&#x2F;,取余%，位与&amp;，位或，位异或……，位取反~，这些表达式在遍历每一列时都会运算一遍。 hive&gt; select 10 - 5 from record; OK 5 Time taken: 0.132 seconds, Fetched: 5 row(s)</p>
<h3 id="七，逻辑运算"><a href="#七，逻辑运算" class="headerlink" title="七，逻辑运算"></a>七，逻辑运算</h3><p>逻辑与 ：AND，逻辑或：OR，逻辑非：NOT hive&gt; select * from record where temperature&gt;0 and year&#x3D;1950</p>
<h2 id="一、关系运算："><a href="#一、关系运算：" class="headerlink" title="一、关系运算："></a>一、关系运算：</h2><h3 id="1-等值比较-x3D"><a href="#1-等值比较-x3D" class="headerlink" title="1. 等值比较: &#x3D;"></a>1. 等值比较: &#x3D;</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：A=B</span><br><span class="line"></span><br><span class="line">操作类型：所有基本类型</span><br><span class="line"></span><br><span class="line">描述:如果表达式A与表达式B相等，则为TRUE；否则为FALSE</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line"></span><br><span class="line">hive&gt;select 1 from lxw_dual where 1=1;</span><br><span class="line"></span><br><span class="line">1</span><br></pre></td></tr></table></figure></div>

<h3 id="2-不等值比较-lt-gt"><a href="#2-不等值比较-lt-gt" class="headerlink" title="2. 不等值比较: &lt;&gt;"></a>2. 不等值比较: &lt;&gt;</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: A &lt;&gt; B</span><br></pre></td></tr></table></figure></div>

<p>操作类型:所有基本类型 描述:如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A与表达式B不相等，则为TRUE；否则为FALSE 举例： hive&gt; select1 from lxw_dual where 1 &lt;&gt; 2; 1</p>
<h3 id="3-小于比较-lt"><a href="#3-小于比较-lt" class="headerlink" title="3.小于比较: &lt;"></a>3.小于比较: &lt;</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法: A &lt; B</span><br></pre></td></tr></table></figure></div>

<p>操作类型:所有基本类型 描述:如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A小于表达式B，则为TRUE；否则为FALSE 举例： hive&gt; select1 from lxw_dual where 1 &lt; 2; 1</p>
<h3 id="4-小于等于比较-lt-x3D"><a href="#4-小于等于比较-lt-x3D" class="headerlink" title="4. 小于等于比较: &lt;&#x3D;"></a>4. 小于等于比较: &lt;&#x3D;</h3><p>语法: A &lt;&#x3D; B 操作类型:所有基本类型 描述:如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A小于或者等于表达式B，则为TRUE；否则为FALSE 举例： hive&gt; select1 from lxw_dual where 1 &lt;&#x3D; 1; 1</p>
<h3 id="5-大于比较-gt"><a href="#5-大于比较-gt" class="headerlink" title="5. 大于比较: &gt;"></a>5. 大于比较: &gt;</h3><p>语法: A &gt; B 操作类型:所有基本类型 描述:如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A大于表达式B，则为TRUE；否则为FALSE 举例： hive&gt; select1 from lxw_dual where 2 &gt; 1; 1</p>
<h3 id="6-大于等于比较-gt-x3D"><a href="#6-大于等于比较-gt-x3D" class="headerlink" title="6. 大于等于比较: &gt;&#x3D;"></a>6. 大于等于比较: &gt;&#x3D;</h3><p>语法: A &gt;&#x3D; B 操作类型:所有基本类型 描述:如果表达式A为NULL，或者表达式B为NULL，返回NULL；如果表达式A大于或者等于表达式B，则为TRUE；否则为FALSE 举例： hive&gt; select1 from lxw_dual where 1 &gt;&#x3D; 1; 1 <strong>注意：String的比较要注意(常用的时间比较可以先to_date之后再比较)</strong> hive&gt; select* from lxw_dual; 201111120900:00:00 2011111209 hive&gt; selecta,b,a&lt;b,a&gt;b,a&#x3D;b from lxw_dual; 201111120900:00:00 2011111209 false true false</p>
<h3 id="7-空值判断-IS-NULL"><a href="#7-空值判断-IS-NULL" class="headerlink" title="7. 空值判断: IS NULL"></a>7. 空值判断: IS NULL</h3><p>语法: A IS NULL 操作类型:所有类型 描述:如果表达式A的值为NULL，则为TRUE；否则为FALSE 举例： hive&gt; select1 from lxw_dual where null is null; 1</p>
<h3 id="8-非空判断-IS-NOTNULL"><a href="#8-非空判断-IS-NOTNULL" class="headerlink" title="8. 非空判断: IS NOTNULL"></a>8. 非空判断: IS NOTNULL</h3><p>语法: A IS NOT NULL 操作类型:所有类型 描述:如果表达式A的值为NULL，则为FALSE；否则为TRUE 举例： hive&gt; select1 from lxw_dual where 1 is not null; 1</p>
<h3 id="9-LIKE比较-LIKE"><a href="#9-LIKE比较-LIKE" class="headerlink" title="9. LIKE比较: LIKE"></a>9. LIKE比较: LIKE</h3><p>语法: A LIKE B 操作类型: strings 描述:如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合表达式B 的正则语法，则为TRUE；否则为FALSE。B中字符”_”表示任意单个字符，而字符”%”表示任意数量的字符。 举例： hive&gt; select1 from lxw_dual where ‘football’ like ‘foot%’; 1 hive&gt; select1 from lxw_dual where ‘football’ like ‘foot____‘; 1 <strong>注意：否定比较时候用NOT ALIKE B</strong> hive&gt; select1 from lxw_dual where NOT ‘football’ like ‘fff%’; 1</p>
<h3 id="10-JAVA的LIKE操作-RLIKE"><a href="#10-JAVA的LIKE操作-RLIKE" class="headerlink" title="10. JAVA的LIKE操作: RLIKE"></a>10. JAVA的LIKE操作: RLIKE</h3><p>语法: A RLIKE B 操作类型: strings 描述:如果字符串A或者字符串B为NULL，则返回NULL；如果字符串A符合JAVA正则表达式B的正则语法，则为TRUE；否则为FALSE。 举例： hive&gt; select1 from lxw_dual where ‘footbar’ rlike ‘^f.*r$’; 1 <strong>注意：判断一个字符串是否全为数字：</strong> hive&gt;select 1from lxw_dual where ‘123456’ rlike ‘^\d+$’; 1 hive&gt; select1 from lxw_dual where ‘123456aa’ rlike ‘^\d+$’;</p>
<h3 id="11-REGEXP操作-REGEXP"><a href="#11-REGEXP操作-REGEXP" class="headerlink" title="11. REGEXP操作: REGEXP"></a>11. REGEXP操作: REGEXP</h3><p>语法: A REGEXP B 操作类型: strings 描述:功能与RLIKE相同 举例： hive&gt; select1 from lxw_dual where ‘footbar’ REGEXP ‘^f.*r$’; 1</p>
<h2 id="二、数学运算："><a href="#二、数学运算：" class="headerlink" title="二、数学运算："></a>二、数学运算：</h2><h3 id="1-加法操作"><a href="#1-加法操作" class="headerlink" title="1. 加法操作: +"></a>1. 加法操作: +</h3><p>语法: A + B 操作类型：所有数值类型 说明：返回A与B相加的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。比如，int + int 一般结果为int类型，而int + double一般结果为double类型 举例： hive&gt; select1 + 9 from lxw_dual; 10 hive&gt; createtable lxw_dual as select 1 + 1.2 from lxw_dual; hive&gt; describelxw_dual; _c0 double</p>
<h3 id="2-减法操作"><a href="#2-减法操作" class="headerlink" title="2. 减法操作: -"></a>2. 减法操作: -</h3><p>语法: A– B 操作类型：所有数值类型 说明：返回A与B相减的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。比如，int– int 一般结果为int类型，而int– double 一般结果为double类型 举例： hive&gt; select10 – 5 from lxw_dual; 5 hive&gt; createtable lxw_dual as select 5.6 – 4 from lxw_dual; hive&gt;describe lxw_dual; _c0 double</p>
<h3 id="3-乘法操作"><a href="#3-乘法操作" class="headerlink" title="3. 乘法操作: *"></a>3. 乘法操作: *</h3><p>语法: A * B 操作类型：所有数值类型 说明：返回A与B相乘的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。注意，如果A乘以B的结果超过默认结果类型的数值范围，则需要通过cast将结果转换成范围更大的数值类型 举例： hive&gt; select40 * 5 from lxw_dual; 200</p>
<h3 id="4-除法操作-x2F"><a href="#4-除法操作-x2F" class="headerlink" title="4. 除法操作: &#x2F;"></a>4. 除法操作: &#x2F;</h3><p>语法: A &#x2F; B 操作类型：所有数值类型 说明：返回A除以B的结果。结果的数值类型为double 举例： hive&gt; select40 &#x2F; 5 from lxw_dual; 8.0 <strong>注意：hive中最高精度的数据类型是double,只精确到小数点后16位，在做除法运算的时候要特别注意</strong> hive&gt;select ceil(28.0&#x2F;6.999999999999999999999) from lxw_duallimit 1; 结果为4 hive&gt;select ceil(28.0&#x2F;6.99999999999999) from lxw_dual limit1; 结果为5</p>
<h3 id="5-取余操作"><a href="#5-取余操作" class="headerlink" title="5. 取余操作: %"></a>5. 取余操作: %</h3><p>语法: A % B 操作类型：所有数值类型 说明：返回A除以B的余数。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。 举例： hive&gt; select 41 % 5 from lxw_dual; 1 hive&gt; select 8.4 % 4 from lxw_dual; 0.40000000000000036 <strong>注意：精度在hive中是个很大的问题，类似这样的操作最好通过round指定精度</strong> hive&gt; select round(8.4 % 4 , 2) from lxw_dual; 0.4</p>
<h3 id="6-位与操作-amp"><a href="#6-位与操作-amp" class="headerlink" title="6. 位与操作: &amp;"></a>6. 位与操作: &amp;</h3><p>语法: A &amp; B 操作类型：所有数值类型 说明：返回A和B按位进行与操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。 举例： hive&gt; select 4 &amp; 8 from lxw_dual; 0 hive&gt; select 6 &amp; 4 from lxw_dual; 4</p>
<h3 id="7-位或操作"><a href="#7-位或操作" class="headerlink" title="7. 位或操作:"></a>7. 位或操作:</h3><p>语法: A B 操作类型：所有数值类型 说明：返回A和B按位进行或操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。 举例： hive&gt; select 4 8 from lxw_dual; 12 hive&gt; select 6 8 from lxw_dual; 14</p>
<h3 id="8-位异或操作"><a href="#8-位异或操作" class="headerlink" title="8. 位异或操作: ^"></a>8. 位异或操作: ^</h3><p>语法: A ^ B 操作类型：所有数值类型 说明：返回A和B按位进行异或操作的结果。结果的数值类型等于A的类型和B的类型的最小父类型（详见数据类型的继承关系）。 举例： hive&gt; select 4 ^ 8 from lxw_dual; 12 hive&gt; select 6 ^ 4 from lxw_dual; 2</p>
<h3 id="9．位取反操作"><a href="#9．位取反操作" class="headerlink" title="9．位取反操作: ~"></a>9．位取反操作: ~</h3><p>语法: ~A 操作类型：所有数值类型 说明：返回A按位取反操作的结果。结果的数值类型等于A的类型。 举例： hive&gt; select ~6 from lxw_dual; -7 hive&gt; select ~4 from lxw_dual; -5</p>
<h2 id="三、逻辑运算："><a href="#三、逻辑运算：" class="headerlink" title="三、逻辑运算："></a>三、逻辑运算：</h2><h3 id="1-逻辑与操作-AND"><a href="#1-逻辑与操作-AND" class="headerlink" title="1. 逻辑与操作: AND"></a>1. 逻辑与操作: AND</h3><p>语法: A AND B 操作类型：boolean 说明：如果A和B均为TRUE，则为TRUE；否则为FALSE。如果A为NULL或B为NULL，则为NULL 举例： hive&gt; select 1 from lxw_dual where 1&#x3D;1 and 2&#x3D;2; 1</p>
<h3 id="2-逻辑或操作-OR"><a href="#2-逻辑或操作-OR" class="headerlink" title="2. 逻辑或操作: OR"></a>2. 逻辑或操作: OR</h3><p>语法: A OR B 操作类型：boolean 说明：如果A为TRUE，或者B为TRUE，或者A和B均为TRUE，则为TRUE；否则为FALSE 举例： hive&gt; select 1 from lxw_dual where 1&#x3D;2 or 2&#x3D;2; 1</p>
<h3 id="3-逻辑非操作-NOT"><a href="#3-逻辑非操作-NOT" class="headerlink" title="3. 逻辑非操作: NOT"></a>3. 逻辑非操作: NOT</h3><p>语法: NOT A 操作类型：boolean 说明：如果A为FALSE，或者A为NULL，则为TRUE；否则为FALSE 举例： hive&gt; select 1 from lxw_dual where not 1&#x3D;2; 1</p>
<h2 id="四、数值计算"><a href="#四、数值计算" class="headerlink" title="四、数值计算"></a>四、数值计算</h2><h3 id="1-取整函数-round"><a href="#1-取整函数-round" class="headerlink" title="1. 取整函数: round"></a>1. 取整函数: round</h3><p>语法: round(double a) 返回值: BIGINT 说明:返回double类型的整数值部分（遵循四舍五入） 举例： hive&gt; select round(3.1415926) from lxw_dual; 3 hive&gt; select round(3.5) from lxw_dual; 4 hive&gt; create table lxw_dual as select round(9542.158) fromlxw_dual; hive&gt; describe lxw_dual; _c0 bigint</p>
<h3 id="2-指定精度取整函数-round"><a href="#2-指定精度取整函数-round" class="headerlink" title="2. 指定精度取整函数: round"></a>2. 指定精度取整函数: round</h3><p>语法: round(double a, int d) 返回值: DOUBLE 说明:返回指定精度d的double类型 举例： hive&gt; select round(3.1415926,4) from lxw_dual; 3.1416</p>
<h3 id="3-向下取整函数-floor"><a href="#3-向下取整函数-floor" class="headerlink" title="3. 向下取整函数: floor"></a>3. 向下取整函数: floor</h3><p>语法: floor(double a) 返回值: BIGINT 说明:返回等于或者小于该double变量的最大的整数 举例： hive&gt; select floor(3.1415926) from lxw_dual; 3 hive&gt; select floor(25) from lxw_dual; 25</p>
<h3 id="4-向上取整函数-ceil"><a href="#4-向上取整函数-ceil" class="headerlink" title="4. 向上取整函数: ceil"></a>4. 向上取整函数: ceil</h3><p>语法: ceil(double a) 返回值: BIGINT 说明:返回等于或者大于该double变量的最小的整数 举例： hive&gt; select ceil(3.1415926) from lxw_dual; 4 hive&gt; select ceil(46) from lxw_dual; 46</p>
<h3 id="5-向上取整函数-ceiling"><a href="#5-向上取整函数-ceiling" class="headerlink" title="5. 向上取整函数: ceiling"></a>5. 向上取整函数: ceiling</h3><p>语法: ceiling(double a) 返回值: BIGINT 说明:与ceil功能相同 举例： hive&gt; select ceiling(3.1415926) from lxw_dual; 4 hive&gt; select ceiling(46) from lxw_dual; 46</p>
<h3 id="6-取随机数函数-rand"><a href="#6-取随机数函数-rand" class="headerlink" title="6. 取随机数函数: rand"></a>6. 取随机数函数: rand</h3><p>语法: rand(),rand(int seed) 返回值: double 说明:返回一个0到1范围内的随机数。如果指定种子seed，则会等到一个稳定的随机数序列 举例： hive&gt; select rand() from lxw_dual; 0.5577432776034763 hive&gt; select rand() from lxw_dual; 0.6638336467363424 hive&gt; select rand(100) from lxw_dual; 0.7220096548596434 hive&gt; select rand(100) from lxw_dual; 0.7220096548596434</p>
<h3 id="7-自然指数函数-exp"><a href="#7-自然指数函数-exp" class="headerlink" title="7. 自然指数函数: exp"></a>7. 自然指数函数: exp</h3><p>语法: exp(double a) 返回值: double 说明:返回自然对数e的a次方 举例： hive&gt; select exp(2) from lxw_dual; 7.38905609893065 自然对数函数: ln 语法: ln(double a) 返回值: double 说明:返回a的自然对数 举例： hive&gt; select ln(7.38905609893065) from lxw_dual; 2.0</p>
<h3 id="8-以10为底对数函数-log10"><a href="#8-以10为底对数函数-log10" class="headerlink" title="8. 以10为底对数函数: log10"></a>8. 以10为底对数函数: log10</h3><p>语法: log10(double a) 返回值: double 说明:返回以10为底的a的对数 举例： hive&gt; select log10(100) from lxw_dual; 2.0</p>
<h3 id="9-以2为底对数函数-log2"><a href="#9-以2为底对数函数-log2" class="headerlink" title="9. 以2为底对数函数: log2"></a>9. 以2为底对数函数: log2</h3><p>语法: log2(double a) 返回值: double 说明:返回以2为底的a的对数 举例： hive&gt; select log2(8) from lxw_dual; 3.0</p>
<h3 id="10-对数函数-log"><a href="#10-对数函数-log" class="headerlink" title="10. 对数函数: log"></a>10. 对数函数: log</h3><p>语法: log(double base, double a) 返回值: double 说明:返回以base为底的a的对数 举例： hive&gt; select log(4,256) from lxw_dual; 4.0</p>
<h3 id="11-幂运算函数-pow"><a href="#11-幂运算函数-pow" class="headerlink" title="11. 幂运算函数: pow"></a>11. 幂运算函数: pow</h3><p>语法: pow(double a, double p) 返回值: double 说明:返回a的p次幂 举例： hive&gt; select pow(2,4) from lxw_dual; 16.0</p>
<h3 id="12-幂运算函数-power"><a href="#12-幂运算函数-power" class="headerlink" title="12. 幂运算函数: power"></a>12. 幂运算函数: power</h3><p>语法: power(double a, double p) 返回值: double 说明:返回a的p次幂,与pow功能相同 举例： hive&gt; select power(2,4) from lxw_dual; 16.0</p>
<h3 id="13-开平方函数-sqrt"><a href="#13-开平方函数-sqrt" class="headerlink" title="13. 开平方函数: sqrt"></a>13. 开平方函数: sqrt</h3><p>语法: sqrt(double a) 返回值: double 说明:返回a的平方根 举例： hive&gt; select sqrt(16) from lxw_dual; 4.0</p>
<h3 id="14-二进制函数-bin"><a href="#14-二进制函数-bin" class="headerlink" title="14. 二进制函数: bin"></a>14. 二进制函数: bin</h3><p>语法: bin(BIGINT a) 返回值: string 说明:返回a的二进制代码表示 举例： hive&gt; select bin(7) from lxw_dual; 111</p>
<h3 id="15-十六进制函数-hex"><a href="#15-十六进制函数-hex" class="headerlink" title="15. 十六进制函数: hex"></a>15. 十六进制函数: hex</h3><p>语法: hex(BIGINT a) 返回值: string 说明:如果变量是int类型，那么返回a的十六进制表示；如果变量是string类型，则返回该字符串的十六进制表示 举例： hive&gt; select hex(17) from lxw_dual; 11 hive&gt; select hex(‘abc’) from lxw_dual; 616263</p>
<h3 id="16-反转十六进制函数-unhex"><a href="#16-反转十六进制函数-unhex" class="headerlink" title="16. 反转十六进制函数: unhex"></a>16. 反转十六进制函数: unhex</h3><p>语法: unhex(string a) 返回值: string 说明:返回该十六进制字符串所代码的字符串 举例： hive&gt; select unhex(‘616263’) from lxw_dual; abc hive&gt; select unhex(‘11’) from lxw_dual; - hive&gt; select unhex(616263) from lxw_dual; abc</p>
<h3 id="17-进制转换函数-conv"><a href="#17-进制转换函数-conv" class="headerlink" title="17. 进制转换函数: conv"></a>17. 进制转换函数: conv</h3><p>语法: conv(BIGINT num, int from_base, int to_base) 返回值: string 说明:将数值num从from_base进制转化到to_base进制 举例： hive&gt; select conv(17,10,16) from lxw_dual; 11 hive&gt; select conv(17,10,2) from lxw_dual; 10001</p>
<h3 id="18-绝对值函数-abs"><a href="#18-绝对值函数-abs" class="headerlink" title="18. 绝对值函数: abs"></a>18. 绝对值函数: abs</h3><p>语法: abs(double a) abs(int a) 返回值: double int 说明:返回数值a的绝对值 举例： hive&gt; select abs(-3.9) from lxw_dual; 3.9 hive&gt; select abs(10.9) from lxw_dual; 10.9</p>
<h3 id="19-正取余函数-pmod"><a href="#19-正取余函数-pmod" class="headerlink" title="19. 正取余函数: pmod"></a>19. 正取余函数: pmod</h3><p>语法: pmod(int a, int b),pmod(double a, double b) 返回值: int double 说明:返回正的a除以b的余数 举例： hive&gt; select pmod(9,4) from lxw_dual; 1 hive&gt; select pmod(-9,4) from lxw_dual; 3</p>
<h3 id="20-正弦函数-sin"><a href="#20-正弦函数-sin" class="headerlink" title="20. 正弦函数: sin"></a>20. 正弦函数: sin</h3><p>语法: sin(double a) 返回值: double 说明:返回a的正弦值 举例： hive&gt; select sin(0.8) from lxw_dual; 0.7173560908995228</p>
<h3 id="21-反正弦函数-asin"><a href="#21-反正弦函数-asin" class="headerlink" title="21. 反正弦函数: asin"></a>21. 反正弦函数: asin</h3><p>语法: asin(double a) 返回值: double 说明:返回a的反正弦值 举例： hive&gt; select asin(0.7173560908995228) from lxw_dual; 0.8</p>
<h3 id="22-余弦函数-cos"><a href="#22-余弦函数-cos" class="headerlink" title="22. 余弦函数: cos"></a>22. 余弦函数: cos</h3><p>语法: cos(double a) 返回值: double 说明:返回a的余弦值 举例： hive&gt; select cos(0.9) from lxw_dual; 0.6216099682706644</p>
<h3 id="23-反余弦函数-acos"><a href="#23-反余弦函数-acos" class="headerlink" title="23. 反余弦函数: acos"></a>23. 反余弦函数: acos</h3><p>语法: acos(double a) 返回值: double 说明:返回a的反余弦值 举例： hive&gt; select acos(0.6216099682706644) from lxw_dual; 0.9</p>
<h3 id="24-positive函数-positive"><a href="#24-positive函数-positive" class="headerlink" title="24. positive函数: positive"></a>24. positive函数: positive</h3><p>语法: positive(int a), positive(double a) 返回值: int double 说明:返回a 举例： hive&gt; select positive(-10) from lxw_dual; -10 hive&gt; select positive(12) from lxw_dual; 12</p>
<h3 id="25-negative函数-negative"><a href="#25-negative函数-negative" class="headerlink" title="25. negative函数: negative"></a>25. negative函数: negative</h3><p>语法: negative(int a), negative(double a) 返回值: int double 说明:返回-a 举例： hive&gt; select negative(-5) from lxw_dual; 5 hive&gt; select negative(8) from lxw_dual; -8</p>
<h2 id="五、日期函数"><a href="#五、日期函数" class="headerlink" title="五、日期函数"></a>五、日期函数</h2><h3 id="1-UNIX时间戳转日期函数-from-unixtime"><a href="#1-UNIX时间戳转日期函数-from-unixtime" class="headerlink" title="1. UNIX时间戳转日期函数:from_unixtime"></a>1. UNIX时间戳转日期函数:from_unixtime</h3><p>语法: from_unixtime(bigint unixtime[, string format]) 返回值: string 说明:转化UNIX时间戳（从1970-01-01 00:00:00 UTC到指定时间的秒数）到当前时区的时间格式 举例： hive&gt; select from_unixtime(1323308943,’yyyyMMdd’) fromlxw_dual; 20111208</p>
<h3 id="2-获取当前UNIX时间戳函数-unix-timestamp"><a href="#2-获取当前UNIX时间戳函数-unix-timestamp" class="headerlink" title="2. 获取当前UNIX时间戳函数:unix_timestamp"></a>2. 获取当前UNIX时间戳函数:unix_timestamp</h3><p>语法: unix_timestamp() 返回值: bigint 说明:获得当前时区的UNIX时间戳 举例： hive&gt; select unix_timestamp() from lxw_dual; 1323309615</p>
<h3 id="3-日期转UNIX时间戳函数-unix-timestamp"><a href="#3-日期转UNIX时间戳函数-unix-timestamp" class="headerlink" title="3. 日期转UNIX时间戳函数:unix_timestamp"></a>3. 日期转UNIX时间戳函数:unix_timestamp</h3><p>语法: unix_timestamp(string date) 返回值: bigint 说明:转换格式为”yyyy-MM-ddHH:mm:ss”的日期到UNIX时间戳。如果转化失败，则返回0。 举例： hive&gt; select unix_timestamp(‘2011-12-07 13:01:03’) from lxw_dual; 1323234063</p>
<h3 id="4-指定格式日期转UNIX时间戳函数-unix-timestamp"><a href="#4-指定格式日期转UNIX时间戳函数-unix-timestamp" class="headerlink" title="4. 指定格式日期转UNIX时间戳函数:unix_timestamp"></a>4. 指定格式日期转UNIX时间戳函数:unix_timestamp</h3><p>语法: unix_timestamp(string date, string pattern) 返回值: bigint 说明:转换pattern格式的日期到UNIX时间戳。如果转化失败，则返回0。 举例： hive&gt; select unix_timestamp(‘20111207 13:01:03’,’yyyyMMddHH:mm:ss’) from lxw_dual; 1323234063</p>
<h3 id="5-日期时间转日期函数-to-date"><a href="#5-日期时间转日期函数-to-date" class="headerlink" title="5. 日期时间转日期函数:to_date"></a>5. 日期时间转日期函数:to_date</h3><p>语法: to_date(string timestamp) 返回值: string 说明:返回日期时间字段中的日期部分。 举例： hive&gt; select to_date(‘2011-12-08 10:03:01’) from lxw_dual; 2011-12-08</p>
<h3 id="6-日期转年函数-year"><a href="#6-日期转年函数-year" class="headerlink" title="6. 日期转年函数: year"></a>6. 日期转年函数: year</h3><p>语法: year(string date) 返回值: int 说明:返回日期中的年。 举例： hive&gt; select year(‘2011-12-08 10:03:01’) from lxw_dual; 2011 hive&gt; select year(‘2012-12-08’) from lxw_dual; 2012</p>
<h3 id="7-日期转月函数-month"><a href="#7-日期转月函数-month" class="headerlink" title="7. 日期转月函数: month"></a>7. 日期转月函数: month</h3><p>语法: month (string date) 返回值: int 说明:返回日期中的月份。 举例： hive&gt; select month(‘2011-12-08 10:03:01’) from lxw_dual; 12 hive&gt; select month(‘2011-08-08’) from lxw_dual; 8</p>
<h3 id="8-日期转天函数-day"><a href="#8-日期转天函数-day" class="headerlink" title="8. 日期转天函数: day"></a>8. 日期转天函数: day</h3><p>语法: day (string date) 返回值: int 说明:返回日期中的天。 举例： hive&gt; select day(‘2011-12-08 10:03:01’) from lxw_dual; 8 hive&gt; select day(‘2011-12-24’) from lxw_dual; 24</p>
<h3 id="9-日期转小时函数-hour"><a href="#9-日期转小时函数-hour" class="headerlink" title="9. 日期转小时函数: hour"></a>9. 日期转小时函数: hour</h3><p>语法: hour (string date) 返回值: int 说明:返回日期中的小时。 举例： hive&gt; select hour(‘2011-12-08 10:03:01’) from lxw_dual; 10</p>
<h3 id="10-日期转分钟函数-minute"><a href="#10-日期转分钟函数-minute" class="headerlink" title="10. 日期转分钟函数: minute"></a>10. 日期转分钟函数: minute</h3><p>语法: minute (string date) 返回值: int 说明:返回日期中的分钟。 举例： hive&gt; select minute(‘2011-12-08 10:03:01’) from lxw_dual; 3</p>
<h3 id="11-日期转秒函数-second"><a href="#11-日期转秒函数-second" class="headerlink" title="11. 日期转秒函数: second"></a>11. 日期转秒函数: second</h3><p>语法: second (string date) 返回值: int 说明:返回日期中的秒。 举例： hive&gt; select second(‘2011-12-08 10:03:01’) from lxw_dual; 1</p>
<h3 id="12-日期转周函数-weekofyear"><a href="#12-日期转周函数-weekofyear" class="headerlink" title="12. 日期转周函数:weekofyear"></a>12. 日期转周函数:weekofyear</h3><p>语法: weekofyear (string date) 返回值: int 说明:返回日期在当前的周数。 举例： hive&gt; select weekofyear(‘2011-12-08 10:03:01’) from lxw_dual; 49</p>
<h3 id="13-日期比较函数-datediff"><a href="#13-日期比较函数-datediff" class="headerlink" title="13. 日期比较函数: datediff"></a>13. 日期比较函数: datediff</h3><p>语法: datediff(string enddate, string startdate) 返回值: int 说明:返回结束日期减去开始日期的天数。 举例： hive&gt; select datediff(‘2012-12-08’,’2012-05-09’) from lxw_dual; 213</p>
<h3 id="14-日期增加函数-date-add"><a href="#14-日期增加函数-date-add" class="headerlink" title="14. 日期增加函数: date_add"></a>14. 日期增加函数: date_add</h3><p>语法: date_add(string startdate, int days) 返回值: string 说明:返回开始日期startdate增加days天后的日期。 举例： hive&gt; select date_add(‘2012-12-08’,10) from lxw_dual; 2012-12-18</p>
<h3 id="15-日期减少函数-date-sub"><a href="#15-日期减少函数-date-sub" class="headerlink" title="15. 日期减少函数: date_sub"></a>15. 日期减少函数: date_sub</h3><p>语法: date_sub (string startdate, int days) 返回值: string 说明:返回开始日期startdate减少days天后的日期。 举例： hive&gt; select date_sub(‘2012-12-08’,10) from lxw_dual; 2012-11-28</p>
<h2 id="六、条件函数"><a href="#六、条件函数" class="headerlink" title="六、条件函数"></a>六、条件函数</h2><h3 id="1-If函数-if"><a href="#1-If函数-if" class="headerlink" title="1. If函数: if"></a>1. If函数: if</h3><p>语法: if(boolean testCondition, T valueTrue, T valueFalseOrNull) 返回值: T 说明: 当条件testCondition为TRUE时，返回valueTrue；否则返回valueFalseOrNull 举例： hive&gt; select if(1&#x3D;2,100,200) from lxw_dual; 200 hive&gt; select if(1&#x3D;1,100,200) from lxw_dual; 100</p>
<h3 id="2-非空查找函数-COALESCE"><a href="#2-非空查找函数-COALESCE" class="headerlink" title="2. 非空查找函数: COALESCE"></a>2. 非空查找函数: COALESCE</h3><p>语法: COALESCE(T v1, T v2,…) 返回值: T 说明: 返回参数中的第一个非空值；如果所有值都为NULL，那么返回NULL 举例： hive&gt; select COALESCE(null,’100’,’50′) from lxw_dual; 100</p>
<h3 id="3-条件判断函数：CASE"><a href="#3-条件判断函数：CASE" class="headerlink" title="3. 条件判断函数：CASE"></a>3. 条件判断函数：CASE</h3><p>语法: CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END 返回值: T 说明：如果a等于b，那么返回c；如果a等于d，那么返回e；否则返回f 举例： hive&gt; Select case 100 when 50 then ‘tom’ when 100 then ‘mary’else ‘tim’ end from lxw_dual; mary hive&gt; Select case 200 when 50 then ‘tom’ when 100 then ‘mary’else ‘tim’ end from lxw_dual; tim</p>
<h3 id="4-条件判断函数：CASE"><a href="#4-条件判断函数：CASE" class="headerlink" title="4. 条件判断函数：CASE"></a>4. 条件判断函数：CASE</h3><p>语法: CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END 返回值: T 说明：如果a为TRUE,则返回b；如果c为TRUE，则返回d；否则返回e 举例： hive&gt; select case when 1&#x3D;2 then ‘tom’ when 2&#x3D;2 then ‘mary’ else’tim’ end from lxw_dual; mary hive&gt; select case when 1&#x3D;1 then ‘tom’ when 2&#x3D;2 then ‘mary’ else’tim’ end from lxw_dual; tom</p>
<h2 id="七、字符串函数"><a href="#七、字符串函数" class="headerlink" title="七、字符串函数"></a>七、字符串函数</h2><h3 id="1-字符串长度函数：length"><a href="#1-字符串长度函数：length" class="headerlink" title="1. 字符串长度函数：length"></a>1. 字符串长度函数：length</h3><p>语法: length(string A) 返回值: int 说明：返回字符串A的长度 举例： hive&gt; select length(‘abcedfg’) from lxw_dual; 7</p>
<h3 id="2-字符串反转函数：reverse"><a href="#2-字符串反转函数：reverse" class="headerlink" title="2. 字符串反转函数：reverse"></a>2. 字符串反转函数：reverse</h3><p>语法: reverse(string A) 返回值: string 说明：返回字符串A的反转结果 举例： hive&gt; select reverse(abcedfg’) from lxw_dual; gfdecba</p>
<h3 id="3-字符串连接函数：concat"><a href="#3-字符串连接函数：concat" class="headerlink" title="3. 字符串连接函数：concat"></a>3. 字符串连接函数：concat</h3><p>语法: concat(string A, string B…) 返回值: string 说明：返回输入字符串连接后的结果，支持任意个输入字符串 举例： hive&gt; select concat(‘abc’,’def’,’gh’) from lxw_dual; abcdefgh</p>
<h3 id="4-带分隔符字符串连接函数：concat-ws"><a href="#4-带分隔符字符串连接函数：concat-ws" class="headerlink" title="4. 带分隔符字符串连接函数：concat_ws"></a>4. 带分隔符字符串连接函数：concat_ws</h3><p>语法: concat_ws(string SEP, string A, string B…) 返回值: string 说明：返回输入字符串连接后的结果，SEP表示各个字符串间的分隔符 举例： hive&gt; select concat_ws(‘,’,’abc’,’def’,’gh’) from lxw_dual; abc,def,gh</p>
<h3 id="5-字符串截取函数：substr-substring"><a href="#5-字符串截取函数：substr-substring" class="headerlink" title="5. 字符串截取函数：substr,substring"></a>5. 字符串截取函数：substr,substring</h3><p>语法: substr(string A, int start),substring(string A, int start) 返回值: string 说明：返回字符串A从start位置到结尾的字符串 举例： hive&gt; select substr(‘abcde’,3) from lxw_dual; cde hive&gt; select substring(‘abcde’,3) from lxw_dual; cde hive&gt; selectsubstr(‘abcde’,-1) from lxw_dual; （和ORACLE相同） e</p>
<h3 id="6-字符串截取函数：substr-substring"><a href="#6-字符串截取函数：substr-substring" class="headerlink" title="6. 字符串截取函数：substr,substring"></a>6. 字符串截取函数：substr,substring</h3><p>语法: substr(string A, int start, int len),substring(string A, intstart, int len) 返回值: string 说明：返回字符串A从start位置开始，长度为len的字符串 举例： hive&gt; select substr(‘abcde’,3,2) from lxw_dual; cd hive&gt; select substring(‘abcde’,3,2) from lxw_dual; cd hive&gt;select substring(‘abcde’,-2,2) from lxw_dual; de</p>
<h3 id="7-字符串转大写函数：upper-ucase"><a href="#7-字符串转大写函数：upper-ucase" class="headerlink" title="7. 字符串转大写函数：upper,ucase"></a>7. 字符串转大写函数：upper,ucase</h3><p>语法: upper(string A) ucase(string A) 返回值: string 说明：返回字符串A的大写格式 举例： hive&gt; select upper(‘abSEd’) from lxw_dual; hive&gt; select ucase(‘abSEd’) from lxw_dual;</p>
<h3 id="8-字符串转小写函数：lower-lcase"><a href="#8-字符串转小写函数：lower-lcase" class="headerlink" title="8. 字符串转小写函数：lower,lcase"></a>8. 字符串转小写函数：lower,lcase</h3><p>语法: lower(string A) lcase(string A) 返回值: string 说明：返回字符串A的小写格式 举例： hive&gt; select lower(‘abSEd’) from lxw_dual; absed hive&gt; select lcase(‘abSEd’) from lxw_dual; absed</p>
<h3 id="9-去空格函数：trim"><a href="#9-去空格函数：trim" class="headerlink" title="9. 去空格函数：trim"></a>9. 去空格函数：trim</h3><p>语法: trim(string A) 返回值: string 说明：去除字符串两边的空格 举例： hive&gt; select trim(‘ abc ‘) from lxw_dual; abc</p>
<h3 id="10-左边去空格函数：ltrim"><a href="#10-左边去空格函数：ltrim" class="headerlink" title="10. 左边去空格函数：ltrim"></a>10. 左边去空格函数：ltrim</h3><p>语法: ltrim(string A) 返回值: string 说明：去除字符串左边的空格 举例： hive&gt; select ltrim(‘ abc ‘) from lxw_dual; abc</p>
<h3 id="11-右边去空格函数：rtrim"><a href="#11-右边去空格函数：rtrim" class="headerlink" title="11. 右边去空格函数：rtrim"></a>11. 右边去空格函数：rtrim</h3><p>语法: rtrim(string A) 返回值: string 说明：去除字符串右边的空格 举例： hive&gt; select rtrim(‘ abc ‘) from lxw_dual; abc</p>
<h3 id="12-正则表达式替换函数：regexp-replace"><a href="#12-正则表达式替换函数：regexp-replace" class="headerlink" title="12. 正则表达式替换函数：regexp_replace"></a>12. 正则表达式替换函数：regexp_replace</h3><p>语法: regexp_replace(string A, string B, string C) 返回值: string 说明：将字符串A中的符合java正则表达式B的部分替换为C。注意，在有些情况下要使用转义字符,类似oracle中的regexp_replace函数。 举例： hive&gt; select regexp_replace(‘foobar’, ‘ooar’, ‘’) from lxw_dual; fb</p>
<h3 id="13-正则表达式解析函数：regexp-extract"><a href="#13-正则表达式解析函数：regexp-extract" class="headerlink" title="13. 正则表达式解析函数：regexp_extract"></a>13. 正则表达式解析函数：regexp_extract</h3><p>语法: regexp_extract(string subject, string pattern, int index) 返回值: string 说明：将字符串subject按照pattern正则表达式的规则拆分，返回index指定的字符。 举例： hive&gt; select regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 1) fromlxw_dual; the hive&gt; select regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 2) fromlxw_dual; bar hive&gt; select regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 0) fromlxw_dual; foothebar <strong>注意，在有些情况下要使用转义字符，下面的等号要用双竖线转义，这是java正则表达式的规则。</strong> select data_field,</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">regexp_extract(data_field,&#x27;.*?bgStart\\=([^&amp;]+)&#x27;,1) as aaa,</span><br><span class="line"></span><br><span class="line">regexp_extract(data_field,&#x27;.*?contentLoaded_headStart\\=([^&amp;]+)&#x27;,1) as bbb,</span><br><span class="line"></span><br><span class="line">regexp_extract(data_field,&#x27;.*?AppLoad2Req\\=([^&amp;]+)&#x27;,1) as ccc</span><br><span class="line"></span><br><span class="line">from pt_nginx_loginlog_st</span><br><span class="line"></span><br><span class="line">where pt = &#x27;2012-03-26&#x27;limit 2;</span><br></pre></td></tr></table></figure></div>

<h3 id="14-URL解析函数：parse-url"><a href="#14-URL解析函数：parse-url" class="headerlink" title="14. URL解析函数：parse_url"></a>14. URL解析函数：parse_url</h3><p>语法: parse_url(string urlString, string partToExtract [, stringkeyToExtract]) 返回值: string 说明：返回URL中指定的部分。partToExtract的有效值为：HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, and USERINFO. 举例： hive&gt; selectparse_url(‘<a class="link"   href="http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1" >http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘, ‘HOST’) fromlxw_dual; facebook.com hive&gt; selectparse_url(‘<a class="link"   href="http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1" >http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘, ‘QUERY’,’k1’) from lxw_dual; v1</p>
<h3 id="15-json解析函数：get-json-object"><a href="#15-json解析函数：get-json-object" class="headerlink" title="15. json解析函数：get_json_object"></a>15. json解析函数：get_json_object</h3><p>语法: get_json_object(string json_string, string path) 返回值: string 说明：解析json的字符串json_string,返回path指定的内容。如果输入的json字符串无效，那么返回NULL。 举例： hive&gt; select get_json_object(‘{“store”: &gt; {“fruit”:[{“weight”:8,”type”:”apple”},{“weight”:9,”type”:”pear”}], &gt; “bicycle”:{“price”:19.95,”color”:”red”} &gt; }, &gt; “email”:”amy@only_for_json_udf_test.net”, &gt; “owner”:”amy” &gt; } &gt; ‘,’$.owner’) from lxw_dual; amy</p>
<h3 id="16-空格字符串函数：space"><a href="#16-空格字符串函数：space" class="headerlink" title="16. 空格字符串函数：space"></a>16. 空格字符串函数：space</h3><p>语法: space(int n) 返回值: string 说明：返回长度为n的字符串 举例： hive&gt; select space(10) from lxw_dual; hive&gt; select length(space(10)) from lxw_dual; 10</p>
<h3 id="17-重复字符串函数：repeat"><a href="#17-重复字符串函数：repeat" class="headerlink" title="17. 重复字符串函数：repeat"></a>17. 重复字符串函数：repeat</h3><p>语法: repeat(string str, int n) 返回值: string 说明：返回重复n次后的str字符串 举例： hive&gt; select repeat(‘abc’,5) from lxw_dual; abcabcabcabcabc</p>
<h3 id="18-首字符ascii函数：ascii"><a href="#18-首字符ascii函数：ascii" class="headerlink" title="18. 首字符ascii函数：ascii"></a>18. 首字符ascii函数：ascii</h3><p>语法: ascii(string str) 返回值: int 说明：返回字符串str第一个字符的ascii码 举例： hive&gt; select ascii(‘abcde’) from lxw_dual; 97</p>
<h3 id="19-左补足函数：lpad"><a href="#19-左补足函数：lpad" class="headerlink" title="19. 左补足函数：lpad"></a>19. 左补足函数：lpad</h3><p>语法: lpad(string str, int len, string pad) 返回值: string 说明：将str进行用pad进行左补足到len位 举例： hive&gt; select lpad(‘abc’,10,’td’) from lxw_dual; tdtdtdtabc <strong>注意：与GP，ORACLE不同，pad不能默认</strong></p>
<h3 id="20-右补足函数：rpad"><a href="#20-右补足函数：rpad" class="headerlink" title="20. 右补足函数：rpad"></a>20. 右补足函数：rpad</h3><p>语法: rpad(string str, int len, string pad) 返回值: string 说明：将str进行用pad进行右补足到len位 举例： hive&gt; select rpad(‘abc’,10,’td’) from lxw_dual; abctdtdtdt</p>
<h3 id="21-分割字符串函数-split"><a href="#21-分割字符串函数-split" class="headerlink" title="21. 分割字符串函数: split"></a>21. 分割字符串函数: split</h3><p>语法: split(string str, stringpat) 返回值: array 说明:按照pat字符串分割str，会返回分割后的字符串数组 举例： hive&gt; select split(‘abtcdtef’,’t’) from lxw_dual; [“ab”,”cd”,”ef”]</p>
<h3 id="22-集合查找函数-find-in-set"><a href="#22-集合查找函数-find-in-set" class="headerlink" title="22. 集合查找函数:find_in_set"></a>22. 集合查找函数:find_in_set</h3><p>语法: find_in_set(string str, string strList) 返回值: int 说明:返回str在strlist第一次出现的位置，strlist是用逗号分割的字符串。如果没有找该str字符，则返回0 举例： hive&gt; select find_in_set(‘ab’,’ef,ab,de’) from lxw_dual; 2 hive&gt; select find_in_set(‘at’,’ef,ab,de’) from lxw_dual; 0</p>
<h2 id="八、集合统计函数"><a href="#八、集合统计函数" class="headerlink" title="八、集合统计函数"></a>八、集合统计函数</h2><h3 id="1-个数统计函数-count"><a href="#1-个数统计函数-count" class="headerlink" title="1. 个数统计函数: count"></a>1. 个数统计函数: count</h3><p>语法: count(*), count(expr), count(DISTINCT expr[, expr_.]) 返回值: int 说明: count(*)统计检索出的行的个数，包括NULL值的行；count(expr)返回指定字段的非空值的个数；count(DISTINCTexpr[, expr_.])返回指定字段的不同的非空值的个数 举例： hive&gt; select count(*) from lxw_dual; 20 hive&gt; select count(distinct t) from lxw_dual; 10</p>
<h3 id="2-总和统计函数-sum"><a href="#2-总和统计函数-sum" class="headerlink" title="2. 总和统计函数: sum"></a>2. 总和统计函数: sum</h3><p>语法: sum(col), sum(DISTINCT col) 返回值: double 说明: sum(col)统计结果集中col的相加的结果；sum(DISTINCT col)统计结果中col不同值相加的结果 举例： hive&gt; select sum(t) from lxw_dual; 100 hive&gt; select sum(distinct t) from lxw_dual; 70</p>
<h3 id="3-平均值统计函数-avg"><a href="#3-平均值统计函数-avg" class="headerlink" title="3. 平均值统计函数: avg"></a>3. 平均值统计函数: avg</h3><p>语法: avg(col), avg(DISTINCT col) 返回值: double 说明: avg(col)统计结果集中col的平均值；avg(DISTINCT col)统计结果中col不同值相加的平均值 举例： hive&gt; select avg(t) from lxw_dual; 50 hive&gt; select avg (distinct t) from lxw_dual; 30</p>
<h3 id="4-最小值统计函数-min"><a href="#4-最小值统计函数-min" class="headerlink" title="4. 最小值统计函数: min"></a>4. 最小值统计函数: min</h3><p>语法: min(col) 返回值: double 说明:统计结果集中col字段的最小值 举例： hive&gt; select min(t) from lxw_dual; 20</p>
<h3 id="5-最大值统计函数-max"><a href="#5-最大值统计函数-max" class="headerlink" title="5. 最大值统计函数: max"></a>5. 最大值统计函数: max</h3><p>语法: maxcol) 返回值: double 说明:统计结果集中col字段的最大值 举例： hive&gt; select max(t) from lxw_dual; 120</p>
<h3 id="6-非空集合总体变量函数-var-pop"><a href="#6-非空集合总体变量函数-var-pop" class="headerlink" title="6. 非空集合总体变量函数:var_pop"></a>6. 非空集合总体变量函数:var_pop</h3><p>语法: var_pop(col) 返回值: double 说明:统计结果集中col非空集合的总体变量（忽略null） 举例：</p>
<h3 id="7-非空集合样本变量函数-var-samp"><a href="#7-非空集合样本变量函数-var-samp" class="headerlink" title="7. 非空集合样本变量函数:var_samp"></a>7. 非空集合样本变量函数:var_samp</h3><p>语法: var_samp (col) 返回值: double 说明:统计结果集中col非空集合的样本变量（忽略null） 举例：</p>
<h3 id="8-总体标准偏离函数-stddev-pop"><a href="#8-总体标准偏离函数-stddev-pop" class="headerlink" title="8. 总体标准偏离函数:stddev_pop"></a>8. 总体标准偏离函数:stddev_pop</h3><p>语法: stddev_pop(col) 返回值: double 说明:该函数计算总体标准偏离，并返回总体变量的平方根，其返回值与VAR_POP函数的平方根相同 举例：</p>
<h3 id="9-样本标准偏离函数-stddev-samp"><a href="#9-样本标准偏离函数-stddev-samp" class="headerlink" title="9. 样本标准偏离函数:stddev_samp"></a>9. 样本标准偏离函数:stddev_samp</h3><p>语法: stddev_samp (col) 返回值: double 说明:该函数计算样本标准偏离 举例：</p>
<h3 id="10．中位数函数-percentile"><a href="#10．中位数函数-percentile" class="headerlink" title="10．中位数函数:percentile"></a>10．中位数函数:percentile</h3><p>语法: percentile(BIGINT col, p) 返回值: double 说明:求准确的第pth个百分位数，p必须介于0和1之间，但是col字段目前只支持整数，不支持浮点数类型 举例：</p>
<h3 id="11-中位数函数-percentile"><a href="#11-中位数函数-percentile" class="headerlink" title="11. 中位数函数:percentile"></a>11. 中位数函数:percentile</h3><p>语法: percentile(BIGINT col, array(p1 [, p2]…)) 返回值: array 说明:功能和上述类似，之后后面可以输入多个百分位数，返回类型也为array，其中为对应的百分位数。 举例： select percentile(score,&lt;0.2,0.4&gt;) from lxw_dual；取0.2，0.4位置的数据</p>
<h3 id="12-近似中位数函数-percentile-approx"><a href="#12-近似中位数函数-percentile-approx" class="headerlink" title="12. 近似中位数函数:percentile_approx"></a>12. 近似中位数函数:percentile_approx</h3><p>语法: percentile_approx(DOUBLE col, p [, B]) 返回值: double 说明:求近似的第pth个百分位数，p必须介于0和1之间，返回类型为double，但是col字段支持浮点类型。参数B控制内存消耗的近似精度，B越大，结果的准确度越高。默认为10,000。当col字段中的distinct值的个数小于B时，结果为准确的百分位数 举例：</p>
<h3 id="13-近似中位数函数-percentile-approx"><a href="#13-近似中位数函数-percentile-approx" class="headerlink" title="13. 近似中位数函数:percentile_approx"></a>13. 近似中位数函数:percentile_approx</h3><p>语法: percentile_approx(DOUBLE col, array(p1 [, p2]…) [, B]) 返回值: array 说明:功能和上述类似，之后后面可以输入多个百分位数，返回类型也为array，其中为对应的百分位数。 举例：</p>
<h3 id="14-直方图-histogram-numeric"><a href="#14-直方图-histogram-numeric" class="headerlink" title="14. 直方图:histogram_numeric"></a>14. 直方图:histogram_numeric</h3><p>语法: histogram_numeric(col, b) 返回值: array 说明:以b为基准计算col的直方图信息。 举例： hive&gt; select histogram_numeric(100,5) from lxw_dual; [{“x”:100.0,”y”:1.0}]</p>
<h2 id="九、复合类型构建操作"><a href="#九、复合类型构建操作" class="headerlink" title="九、复合类型构建操作"></a>九、复合类型构建操作</h2><h3 id="1-Map类型构建-map"><a href="#1-Map类型构建-map" class="headerlink" title="1. Map类型构建: map"></a>1. Map类型构建: map</h3><p>语法: map (key1, value1, key2, value2,…) 说明：根据输入的key和value对构建map类型 举例： hive&gt; Create table lxw_test as select map(‘100’,’tom’,’200’,’mary’)as t from lxw_dual; hive&gt; describe lxw_test; t map&lt;string,string&gt; hive&gt; select t from lxw_test; {“100”:”tom”,”200”:”mary”}</p>
<h3 id="2-Struct类型构建-struct"><a href="#2-Struct类型构建-struct" class="headerlink" title="2. Struct类型构建: struct"></a>2. Struct类型构建: struct</h3><p>语法: struct(val1, val2, val3,…) 说明：根据输入的参数构建结构体struct类型 举例： hive&gt; create table lxw_test as select struct(‘tom’,’mary’,’tim’)as t from lxw_dual; hive&gt; describe lxw_test; t struct<a class="link"   href="col1:string,col2:string,col3:string" >col1:string,col2:string,col3:string <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> hive&gt; select t from lxw_test; {“col1”:”tom”,”col2”:”mary”,”col3”:”tim”}</p>
<h3 id="3-array类型构建-array"><a href="#3-array类型构建-array" class="headerlink" title="3. array类型构建: array"></a>3. array类型构建: array</h3><p>语法: array(val1, val2,…) 说明：根据输入的参数构建数组array类型 举例： hive&gt; create table lxw_test as selectarray(“tom”,”mary”,”tim”) as t from lxw_dual; hive&gt; describe lxw_test; t array hive&gt; select t from lxw_test; [“tom”,”mary”,”tim”]</p>
<h2 id="十、复杂类型访问操作"><a href="#十、复杂类型访问操作" class="headerlink" title="十、复杂类型访问操作"></a>十、复杂类型访问操作</h2><h3 id="1-array类型访问-A-n"><a href="#1-array类型访问-A-n" class="headerlink" title="1. array类型访问: A[n]"></a>1. array类型访问: A[n]</h3><p>语法: A[n] 操作类型: A为array类型，n为int类型 说明：返回数组A中的第n个变量值。数组的起始下标为0。比如，A是个值为[‘foo’, ‘bar’]的数组类型，那么A[0]将返回’foo’,而A[1]将返回’bar’ 举例： hive&gt; create table lxw_test as selectarray(“tom”,”mary”,”tim”) as t from lxw_dual; hive&gt; select t[0],t[1],t[2] from lxw_test; tom mary tim</p>
<h3 id="2-map类型访问-M-key"><a href="#2-map类型访问-M-key" class="headerlink" title="2. map类型访问: M[key]"></a>2. map类型访问: M[key]</h3><p>语法: M[key] 操作类型: M为map类型，key为map中的key值 说明：返回map类型M中，key值为指定值的value值。比如，M是值为{‘f’ -&gt; ‘foo’, ‘b’-&gt; ‘bar’, ‘all’ -&gt; ‘foobar’}的map类型，那么M[‘all’]将会返回’foobar’ 举例： hive&gt; Create table lxw_test as selectmap(‘100’,’tom’,’200’,’mary’) as t from lxw_dual; hive&gt; select t[‘200’],t[‘100’] from lxw_test; mary tom</p>
<h3 id="3-struct类型访问-S-x"><a href="#3-struct类型访问-S-x" class="headerlink" title="3. struct类型访问: S.x"></a>3. struct类型访问: S.x</h3><p>语法: S.x 操作类型: S为struct类型 说明：返回结构体S中的x字段。比如，对于结构体struct foobar {int foo, int bar}，foobar.foo返回结构体中的foo字段 举例： hive&gt; create table lxw_test as select struct(‘tom’,’mary’,’tim’)as t from lxw_dual; hive&gt; describe lxw_test; t struct<a class="link"   href="col1:string,col2:string,col3:string" >col1:string,col2:string,col3:string <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> hive&gt; select t.col1,t.col3 from lxw_test; tom tim</p>
<h2 id="十一、复杂类型长度统计函数"><a href="#十一、复杂类型长度统计函数" class="headerlink" title="十一、复杂类型长度统计函数"></a>十一、复杂类型长度统计函数</h2><h3 id="1-Map类型长度函数-size-Map-lt-K-V-gt"><a href="#1-Map类型长度函数-size-Map-lt-K-V-gt" class="headerlink" title="1. Map类型长度函数: size(Map&lt;K.V&gt;)"></a>1. Map类型长度函数: size(Map&lt;K.V&gt;)</h3><p>语法: size(Map&lt;K.V&gt;) 返回值: int 说明:返回map类型的长度 举例： hive&gt; select size(map(‘100’,’tom’,’101’,’mary’)) from lxw_dual; 2</p>
<h3 id="2-array类型长度函数-size-Array"><a href="#2-array类型长度函数-size-Array" class="headerlink" title="2. array类型长度函数: size(Array)"></a>2. array类型长度函数: size(Array)</h3><p>语法: size(Array) 返回值: int 说明:返回array类型的长度 举例： hive&gt; select size(array(‘100’,’101’,’102’,’103’)) from lxw_dual; 4</p>
<h3 id="3-类型转换函数"><a href="#3-类型转换函数" class="headerlink" title="3. 类型转换函数"></a>3. 类型转换函数</h3><p>类型转换函数: cast 语法: cast(expr as ) 返回值: Expected “&#x3D;” to follow “type” 说明:返回array类型的长度 举例： hive&gt; select cast(1 as bigint) from lxw_dual; 1</p>
]]></content>
      <categories>
        <category>hadoop</category>
        <category>大数据</category>
        <category>HIVE</category>
      </categories>
      <tags>
        <tag>HIVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现Kafka生产者消费者功能</title>
    <url>/2018/10/28/article136/</url>
    <content><![CDATA[<h1 id="Java实现Kafka生产者消费者功能"><a href="#Java实现Kafka生产者消费者功能" class="headerlink" title="Java实现Kafka生产者消费者功能"></a>Java实现Kafka生产者消费者功能</h1><h2 id="好久没有更新博客，最近学的东西很多，但一直忙的没有时间去写，先补充一篇kafka的，最基本的功能使用，不得不感叹大数据确实难，即使只说一个简单的功能，之前也需要铺垫很多完成的功能，比如这篇博客的前提是，你已经安装了虚拟机，里面配置了Hadoop生态组件zookeeper，安装配置了kafka，学会使用Maven，springboot等些技术，而不是直接拿来代码就可以复制粘贴。"><a href="#好久没有更新博客，最近学的东西很多，但一直忙的没有时间去写，先补充一篇kafka的，最基本的功能使用，不得不感叹大数据确实难，即使只说一个简单的功能，之前也需要铺垫很多完成的功能，比如这篇博客的前提是，你已经安装了虚拟机，里面配置了Hadoop生态组件zookeeper，安装配置了kafka，学会使用Maven，springboot等些技术，而不是直接拿来代码就可以复制粘贴。" class="headerlink" title="好久没有更新博客，最近学的东西很多，但一直忙的没有时间去写，先补充一篇kafka的，最基本的功能使用，不得不感叹大数据确实难，即使只说一个简单的功能，之前也需要铺垫很多完成的功能，比如这篇博客的前提是，你已经安装了虚拟机，里面配置了Hadoop生态组件zookeeper，安装配置了kafka，学会使用Maven，springboot等些技术，而不是直接拿来代码就可以复制粘贴。"></a>好久没有更新博客，最近学的东西很多，但一直忙的没有时间去写，先补充一篇kafka的，最基本的功能使用，不得不感叹大数据确实难，即使只说一个简单的功能，之前也需要铺垫很多完成的功能，比如这篇博客的前提是，你已经安装了虚拟机，里面配置了Hadoop生态组件zookeeper，安装配置了kafka，学会使用Maven，springboot等些技术，而不是直接拿来代码就可以复制粘贴。</h2><h2 id="保证你的虚拟机是可以ping通的，hmaster是我在host中配置的虚拟机IP，可以修改为自己的。"><a href="#保证你的虚拟机是可以ping通的，hmaster是我在host中配置的虚拟机IP，可以修改为自己的。" class="headerlink" title="保证你的虚拟机是可以ping通的，hmaster是我在host中配置的虚拟机IP，可以修改为自己的。"></a>保证你的虚拟机是可以ping通的，hmaster是我在host中配置的虚拟机IP，可以修改为自己的。</h2><h2 id="在shell中开启两个窗口，测试终端中的producer和consumer能否在同一个topic中传递消息。"><a href="#在shell中开启两个窗口，测试终端中的producer和consumer能否在同一个topic中传递消息。" class="headerlink" title="在shell中开启两个窗口，测试终端中的producer和consumer能否在同一个topic中传递消息。"></a>在shell中开启两个窗口，测试终端中的producer和consumer能否在同一个topic中传递消息。</h2><h2 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h2><ul>
<li><code>bin/kafka-server-start.sh /config/server.properties</code></li>
</ul>
<h2 id="使用Kafka-单节点单broker-•-创建topic-zk"><a href="#使用Kafka-单节点单broker-•-创建topic-zk" class="headerlink" title="使用Kafka(单节点单broker) • 创建topic: zk"></a>使用Kafka(单节点单broker) • 创建topic: zk</h2><p>• kafka-topics.sh –create –zookeeper hadoop000:2181 –replication-factor 1 –partitions 1 –topic hello_topic</p>
<h2 id="查看所有topic"><a href="#查看所有topic" class="headerlink" title="查看所有topic"></a>查看所有topic</h2><p>• kafka-topics.sh –list –zookeeper hadoop000:2181</p>
<h2 id="发送消息-broker"><a href="#发送消息-broker" class="headerlink" title="发送消息: broker"></a>发送消息: broker</h2><p>• kafka-console-producer.sh –broker-list hadoop000:9092 –topic hello_topic</p>
<h2 id="消费消息-zk"><a href="#消费消息-zk" class="headerlink" title="消费消息: zk"></a>消费消息: zk</h2><p>• kafka-console-consumer.sh –zookeeper hadoop000:2181 –topic hello_topic –from-beginning <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kafka1.png"
                     
                ></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kafka2.png"
                     
                ></h2><h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.0.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;kafka_2.11&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.0.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="ProducerDemo"><a href="#ProducerDemo" class="headerlink" title="ProducerDemo"></a>ProducerDemo</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">public class ConsumerDemo &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;hmaster:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;group-1&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = new KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        kafkaConsumer.subscribe(Arrays.asList(&quot;test&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(100);</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(&quot;offset = %d, value = %s&quot;, record.offset(), record.value());</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line">public class ConsumerDemo &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(&quot;bootstrap.servers&quot;, &quot;hmaster:9092&quot;);</span><br><span class="line">        properties.put(&quot;group.id&quot;, &quot;group-1&quot;);</span><br><span class="line">        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</span><br><span class="line">        properties.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);</span><br><span class="line">        properties.put(&quot;auto.offset.reset&quot;, &quot;earliest&quot;);</span><br><span class="line">        properties.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class="line"></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = new KafkaConsumer&lt;&gt;(properties);</span><br><span class="line">        kafkaConsumer.subscribe(Arrays.asList(&quot;test&quot;));</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(100);</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(&quot;offset = %d, value = %s&quot;, record.offset(), record.value());</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>在线答题-问卷调查小系统（附源码）</title>
    <url>/2018/11/05/article137/</url>
    <content><![CDATA[<h1 id="在线答题-问卷调查小系统"><a href="#在线答题-问卷调查小系统" class="headerlink" title="在线答题-问卷调查小系统"></a>在线答题-问卷调查小系统</h1><h2 id="前段时间公司要开一个安全会议，要现场在线答题，网上的问卷调查网站很多，但涉及到公司内部信息，并且题型还需要自定义，所以打算自己做一个，要求就是直接输入姓名，手机号，公司就能进行答题，题目由题库中随机出10道有单选和多选，技术上比较好实现，有问题的可以看一下代码，而且我对输入的姓名，手机号都严格限制不能随便输入。答完题后会显示答对题数，并将所有题目正确和错误的答案显示出来。"><a href="#前段时间公司要开一个安全会议，要现场在线答题，网上的问卷调查网站很多，但涉及到公司内部信息，并且题型还需要自定义，所以打算自己做一个，要求就是直接输入姓名，手机号，公司就能进行答题，题目由题库中随机出10道有单选和多选，技术上比较好实现，有问题的可以看一下代码，而且我对输入的姓名，手机号都严格限制不能随便输入。答完题后会显示答对题数，并将所有题目正确和错误的答案显示出来。" class="headerlink" title="前段时间公司要开一个安全会议，要现场在线答题，网上的问卷调查网站很多，但涉及到公司内部信息，并且题型还需要自定义，所以打算自己做一个，要求就是直接输入姓名，手机号，公司就能进行答题，题目由题库中随机出10道有单选和多选，技术上比较好实现，有问题的可以看一下代码，而且我对输入的姓名，手机号都严格限制不能随便输入。答完题后会显示答对题数，并将所有题目正确和错误的答案显示出来。"></a>前段时间公司要开一个安全会议，要现场在线答题，网上的问卷调查网站很多，但涉及到公司内部信息，并且题型还需要自定义，所以打算自己做一个，要求就是直接输入姓名，手机号，公司就能进行答题，题目由题库中随机出10道有单选和多选，技术上比较好实现，有问题的可以看一下代码，而且我对输入的姓名，手机号都严格限制不能随便输入。答完题后会显示答对题数，并将所有题目正确和错误的答案显示出来。</h2><h2 id="之前觉得比较简单，用户状态直接开个session去存，懒得做请求转发，但后来系统冲进来几百人答题，搞的服务器有些崩，而且出现大量空数据，很多用户答题之后没有保留答题记录，之前小测的时候没有问题，人多出现未知bug，后来我马上使用请求转发，将获取的data转存出去，后来在没有出现问题，所以可以骄傲的说，这个小系统能承受几百用户的冲击。"><a href="#之前觉得比较简单，用户状态直接开个session去存，懒得做请求转发，但后来系统冲进来几百人答题，搞的服务器有些崩，而且出现大量空数据，很多用户答题之后没有保留答题记录，之前小测的时候没有问题，人多出现未知bug，后来我马上使用请求转发，将获取的data转存出去，后来在没有出现问题，所以可以骄傲的说，这个小系统能承受几百用户的冲击。" class="headerlink" title="之前觉得比较简单，用户状态直接开个session去存，懒得做请求转发，但后来系统冲进来几百人答题，搞的服务器有些崩，而且出现大量空数据，很多用户答题之后没有保留答题记录，之前小测的时候没有问题，人多出现未知bug，后来我马上使用请求转发，将获取的data转存出去，后来在没有出现问题，所以可以骄傲的说，这个小系统能承受几百用户的冲击。"></a>之前觉得比较简单，用户状态直接开个session去存，懒得做请求转发，但后来系统冲进来几百人答题，搞的服务器有些崩，而且出现大量空数据，很多用户答题之后没有保留答题记录，之前小测的时候没有问题，人多出现未知bug，后来我马上使用请求转发，将获取的data转存出去，后来在没有出现问题，所以可以骄傲的说，这个小系统能承受几百用户的冲击。</h2><p><a class="link"   href="https://github.com/rainweb521/questionnaire" >GitHub地址：https://github.com/rainweb521/questionnaire <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://gitee.com/rainweb/questionnaire" >gitee地址：https://gitee.com/rainweb/questionnaire <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/questionnaire/master/public/reade/wen1.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/questionnaire/master/public/reade/wen2.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/questionnaire/master/public/reade/wen3.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/rainweb521/questionnaire/master/public/reade/wen4.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>新的工作-新的开始</title>
    <url>/2018/11/13/article138/</url>
    <content><![CDATA[<h1 id="新的工作-新的开始"><a href="#新的工作-新的开始" class="headerlink" title="新的工作-新的开始"></a>新的工作-新的开始</h1><h2 id="上周下定决心从亚信离职，不再去当一个廉价的实习生劳动力，做自己想做的事情，从周一晚上就开始面试，约了八场，每天都在北京到处跑，甚至开始怀疑自己的能力，怀疑自己的方向，本来决定如果这一周还找不到工作，就回学校继续学习，等明年春招的时候再来北京找工作。经历了各种嘲讽，质疑，鄙视，各种面试官的冷嘲热讽，还被人骗，我觉得拒绝不是最残忍的，最残忍的是他假装你很合适，一切都谈妥了之后告诉你不合适，你会不断的哀求，但他收起伪善的笑意，认真的拒绝你，把你的信心完全击垮。但不经历风雨怎么见彩虹，我不感谢他的刺激让我变得更强，因为挺过来的只有自己，我只感谢自己的坚强，我也不会去向他显示找到更好的工作，努力是为了自己，而不是为了向他证明，那样我始终没有赢。"><a href="#上周下定决心从亚信离职，不再去当一个廉价的实习生劳动力，做自己想做的事情，从周一晚上就开始面试，约了八场，每天都在北京到处跑，甚至开始怀疑自己的能力，怀疑自己的方向，本来决定如果这一周还找不到工作，就回学校继续学习，等明年春招的时候再来北京找工作。经历了各种嘲讽，质疑，鄙视，各种面试官的冷嘲热讽，还被人骗，我觉得拒绝不是最残忍的，最残忍的是他假装你很合适，一切都谈妥了之后告诉你不合适，你会不断的哀求，但他收起伪善的笑意，认真的拒绝你，把你的信心完全击垮。但不经历风雨怎么见彩虹，我不感谢他的刺激让我变得更强，因为挺过来的只有自己，我只感谢自己的坚强，我也不会去向他显示找到更好的工作，努力是为了自己，而不是为了向他证明，那样我始终没有赢。" class="headerlink" title="上周下定决心从亚信离职，不再去当一个廉价的实习生劳动力，做自己想做的事情，从周一晚上就开始面试，约了八场，每天都在北京到处跑，甚至开始怀疑自己的能力，怀疑自己的方向，本来决定如果这一周还找不到工作，就回学校继续学习，等明年春招的时候再来北京找工作。经历了各种嘲讽，质疑，鄙视，各种面试官的冷嘲热讽，还被人骗，我觉得拒绝不是最残忍的，最残忍的是他假装你很合适，一切都谈妥了之后告诉你不合适，你会不断的哀求，但他收起伪善的笑意，认真的拒绝你，把你的信心完全击垮。但不经历风雨怎么见彩虹，我不感谢他的刺激让我变得更强，因为挺过来的只有自己，我只感谢自己的坚强，我也不会去向他显示找到更好的工作，努力是为了自己，而不是为了向他证明，那样我始终没有赢。"></a>上周下定决心从亚信离职，不再去当一个廉价的实习生劳动力，做自己想做的事情，从周一晚上就开始面试，约了八场，每天都在北京到处跑，甚至开始怀疑自己的能力，怀疑自己的方向，本来决定如果这一周还找不到工作，就回学校继续学习，等明年春招的时候再来北京找工作。经历了各种嘲讽，质疑，鄙视，各种面试官的冷嘲热讽，还被人骗，我觉得拒绝不是最残忍的，最残忍的是他假装你很合适，一切都谈妥了之后告诉你不合适，你会不断的哀求，但他收起伪善的笑意，认真的拒绝你，把你的信心完全击垮。但不经历风雨怎么见彩虹，我不感谢他的刺激让我变得更强，因为挺过来的只有自己，我只感谢自己的坚强，我也不会去向他显示找到更好的工作，努力是为了自己，而不是为了向他证明，那样我始终没有赢。</h2><h2 id="公司还是很nice的，环境，待遇，薪资，距离都特别符合自己心中的要求，也算是对自己付出的回报，最幸运的是走了校招，本来只想找到实习工作继续干下去再熬到转正，没想到去公司面试的就是校招岗位，直接签了明年毕业的工作，真是意外的惊喜。很想早点去公司学习，早点实习也能增加工作经验，我差的还很多，面试时发现自己暴露出特别多问题，在未来的工作中要确定自己的方向，不再浅尝辄止。"><a href="#公司还是很nice的，环境，待遇，薪资，距离都特别符合自己心中的要求，也算是对自己付出的回报，最幸运的是走了校招，本来只想找到实习工作继续干下去再熬到转正，没想到去公司面试的就是校招岗位，直接签了明年毕业的工作，真是意外的惊喜。很想早点去公司学习，早点实习也能增加工作经验，我差的还很多，面试时发现自己暴露出特别多问题，在未来的工作中要确定自己的方向，不再浅尝辄止。" class="headerlink" title="公司还是很nice的，环境，待遇，薪资，距离都特别符合自己心中的要求，也算是对自己付出的回报，最幸运的是走了校招，本来只想找到实习工作继续干下去再熬到转正，没想到去公司面试的就是校招岗位，直接签了明年毕业的工作，真是意外的惊喜。很想早点去公司学习，早点实习也能增加工作经验，我差的还很多，面试时发现自己暴露出特别多问题，在未来的工作中要确定自己的方向，不再浅尝辄止。"></a>公司还是很nice的，环境，待遇，薪资，距离都特别符合自己心中的要求，也算是对自己付出的回报，最幸运的是走了校招，本来只想找到实习工作继续干下去再熬到转正，没想到去公司面试的就是校招岗位，直接签了明年毕业的工作，真是意外的惊喜。很想早点去公司学习，早点实习也能增加工作经验，我差的还很多，面试时发现自己暴露出特别多问题，在未来的工作中要确定自己的方向，不再浅尝辄止。</h2><h2 id="故事的结尾还是幸运的，我开始喜欢北京，它并没有想象中的不近人情，它是公平的，只要你肯努力就能得到属于你的故事，希望所有人都可以很幸运。"><a href="#故事的结尾还是幸运的，我开始喜欢北京，它并没有想象中的不近人情，它是公平的，只要你肯努力就能得到属于你的故事，希望所有人都可以很幸运。" class="headerlink" title="故事的结尾还是幸运的，我开始喜欢北京，它并没有想象中的不近人情，它是公平的，只要你肯努力就能得到属于你的故事，希望所有人都可以很幸运。"></a>故事的结尾还是幸运的，我开始喜欢北京，它并没有想象中的不近人情，它是公平的，只要你肯努力就能得到属于你的故事，希望所有人都可以很幸运。</h2>]]></content>
      <categories>
        <category>Self</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>新奥实习</title>
    <url>/2018/12/18/article139/</url>
    <content><![CDATA[<h1 id="新奥实习"><a href="#新奥实习" class="headerlink" title="新奥实习"></a>新奥实习</h1><h2 id="不知不觉两个星期过去了，也有一个多月没写博客，最近很忙但都在忙其他事情，工作反而比较轻松，来的前两周先是了解公司产品，后来开始做测试，写测试样例再测试，发现bug提交给面板中，组里的安排能一步一步的深入了解公司产品，光看是解决不了问题的，还是得从测试做起知道什么功能什么模块，以后入手开发也可以快速熟练，这周开始看成熟的产品的代码，整个大数据清洗，存储，分析过程都要学会，还是有些挑战的，不过我就喜欢挑战。"><a href="#不知不觉两个星期过去了，也有一个多月没写博客，最近很忙但都在忙其他事情，工作反而比较轻松，来的前两周先是了解公司产品，后来开始做测试，写测试样例再测试，发现bug提交给面板中，组里的安排能一步一步的深入了解公司产品，光看是解决不了问题的，还是得从测试做起知道什么功能什么模块，以后入手开发也可以快速熟练，这周开始看成熟的产品的代码，整个大数据清洗，存储，分析过程都要学会，还是有些挑战的，不过我就喜欢挑战。" class="headerlink" title="不知不觉两个星期过去了，也有一个多月没写博客，最近很忙但都在忙其他事情，工作反而比较轻松，来的前两周先是了解公司产品，后来开始做测试，写测试样例再测试，发现bug提交给面板中，组里的安排能一步一步的深入了解公司产品，光看是解决不了问题的，还是得从测试做起知道什么功能什么模块，以后入手开发也可以快速熟练，这周开始看成熟的产品的代码，整个大数据清洗，存储，分析过程都要学会，还是有些挑战的，不过我就喜欢挑战。"></a>不知不觉两个星期过去了，也有一个多月没写博客，最近很忙但都在忙其他事情，工作反而比较轻松，来的前两周先是了解公司产品，后来开始做测试，写测试样例再测试，发现bug提交给面板中，组里的安排能一步一步的深入了解公司产品，光看是解决不了问题的，还是得从测试做起知道什么功能什么模块，以后入手开发也可以快速熟练，这周开始看成熟的产品的代码，整个大数据清洗，存储，分析过程都要学会，还是有些挑战的，不过我就喜欢挑战。</h2><h2 id="公司的氛围很好，组里十几个人各司其职，环境好了特别多，有自己的工位，配了显示器，窗户外就是望京SOHO大厦，每天晚上可以看看风景，加班还有加班费，不过大家都不加班每天就我走的特别晚。有一种苦尽甘来的感觉，不知道自己是怎么在亚信坚持待了两个月还什么收获都没有。"><a href="#公司的氛围很好，组里十几个人各司其职，环境好了特别多，有自己的工位，配了显示器，窗户外就是望京SOHO大厦，每天晚上可以看看风景，加班还有加班费，不过大家都不加班每天就我走的特别晚。有一种苦尽甘来的感觉，不知道自己是怎么在亚信坚持待了两个月还什么收获都没有。" class="headerlink" title="公司的氛围很好，组里十几个人各司其职，环境好了特别多，有自己的工位，配了显示器，窗户外就是望京SOHO大厦，每天晚上可以看看风景，加班还有加班费，不过大家都不加班每天就我走的特别晚。有一种苦尽甘来的感觉，不知道自己是怎么在亚信坚持待了两个月还什么收获都没有。"></a>公司的氛围很好，组里十几个人各司其职，环境好了特别多，有自己的工位，配了显示器，窗户外就是望京SOHO大厦，每天晚上可以看看风景，加班还有加班费，不过大家都不加班每天就我走的特别晚。有一种苦尽甘来的感觉，不知道自己是怎么在亚信坚持待了两个月还什么收获都没有。</h2><h2 id="未来打算先继续待着，公司的一切都很喜欢，离住的地方也很近，每天开开心心的过着，多学些东西，早上九点四十左右到公司，来了先打水，开电脑，处理前一天的邮件，留言，再准备一天的工作，中午和同事去吃个饭，回来趴会，下午继续工作，等晚上九点多再回去，最近打算早起看书，晚上回去也看书，不能让自己的算法和数据结构生疏了，毕竟要随时保持跳槽的能力，固定的生活容易让人沉迷其中，不能把自己陷入安逸区，努力在什么时候都需要。"><a href="#未来打算先继续待着，公司的一切都很喜欢，离住的地方也很近，每天开开心心的过着，多学些东西，早上九点四十左右到公司，来了先打水，开电脑，处理前一天的邮件，留言，再准备一天的工作，中午和同事去吃个饭，回来趴会，下午继续工作，等晚上九点多再回去，最近打算早起看书，晚上回去也看书，不能让自己的算法和数据结构生疏了，毕竟要随时保持跳槽的能力，固定的生活容易让人沉迷其中，不能把自己陷入安逸区，努力在什么时候都需要。" class="headerlink" title="未来打算先继续待着，公司的一切都很喜欢，离住的地方也很近，每天开开心心的过着，多学些东西，早上九点四十左右到公司，来了先打水，开电脑，处理前一天的邮件，留言，再准备一天的工作，中午和同事去吃个饭，回来趴会，下午继续工作，等晚上九点多再回去，最近打算早起看书，晚上回去也看书，不能让自己的算法和数据结构生疏了，毕竟要随时保持跳槽的能力，固定的生活容易让人沉迷其中，不能把自己陷入安逸区，努力在什么时候都需要。"></a>未来打算先继续待着，公司的一切都很喜欢，离住的地方也很近，每天开开心心的过着，多学些东西，早上九点四十左右到公司，来了先打水，开电脑，处理前一天的邮件，留言，再准备一天的工作，中午和同事去吃个饭，回来趴会，下午继续工作，等晚上九点多再回去，最近打算早起看书，晚上回去也看书，不能让自己的算法和数据结构生疏了，毕竟要随时保持跳槽的能力，固定的生活容易让人沉迷其中，不能把自己陷入安逸区，努力在什么时候都需要。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2018/12/421545098787_.pic_-225x300.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2018/12/431545098788_.pic_-300x197.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Self</category>
        <category>工作</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>kerberos认证原理---讲的非常细致</title>
    <url>/2019/01/23/article140/</url>
    <content><![CDATA[<p>原文：<a class="link"   href="https://blog.csdn.net/wulantian/article/details/42418231" >https://blog.csdn.net/wulantian/article/details/42418231 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 前几天在给人解释Windows是如何通过Kerberos进行Authentication的时候，讲了半天也别把那位老兄讲明白，还差点把自己给绕进去。后来想想原因有以下两点：对于一个没有完全不了解Kerberos的人来说，Kerberos的整个Authentication过程确实不好理解——一会儿以这个Key进行加密、一会儿又要以另一个Key进行加密，确实很容易把人给弄晕；另一方面是我讲解方式有问题，一开始就从Kerberos的3个Sub-protocol全面讲述整个Authentication 过程，对于一个完全不了解Kerberos的人来说要求也忒高了点。为此，我花了一些时间写了这篇文章，尽量以<a class="link"   href="https://www.baidu.com/s?wd=%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" >由浅入深 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、层层深入的方式讲述我所理解的基于Kerberos的Windows Network Authentication，希望这篇文章能帮助那些对Kerberos不明就里的人带来一丝帮助。对于一些不对的地方，欢迎大家批评指正。 <strong>一、 基本原理</strong> Authentication解决的是“如何证明某个人<a class="link"   href="https://www.baidu.com/s?wd=%E7%A1%AE%E7%A1%AE%E5%AE%9E%E5%AE%9E&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" >确确实实 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>就是他或她所声称的那个人”的问题。对于如何进行Authentication，我们采用这样的方法：如果一个秘密（secret）仅仅存在于A和B，那么有个人对B声称自己就是A，B通过让A提供这个秘密来证明这个人就是他或她所声称的A。这个过程实际上涉及到3个重要的关于Authentication的方面：</p>
<ul>
<li><p>Secret如何表示。</p>
</li>
<li><p>A如何向B提供Secret。</p>
</li>
<li><p>B如何识别Secret。</p>
</li>
</ul>
<p>基于这3个方面，我们把Kerberos Authentication进行最大限度的简化：整个过程涉及到Client和Server，他们之间的这个Secret我们用一个Key（<strong>KServer-Client</strong>）来表示。Client为了让Server对自己进行有效的认证，向对方提供如下两组信息：</p>
<ul>
<li><p>代表Client自身Identity的信息，为了简便，它以明文的形式传递。</p>
</li>
<li><p>将Client的Identity使用<strong>KServer-Client</strong>作为Public Key、并采用对称加密算法进行加密。</p>
</li>
</ul>
<p>由于<strong>KServer-Client</strong>仅仅被Client和Server知晓，所以被Client使用KServer-Client加密过的Client Identity只能被Client和Server解密。同理，Server接收到Client传送的这两组信息，先通过<strong>KServer-Client</strong>对后者进行解密，随后将机密的数据同前者进行比较，如果完全一样，则可以证明Client能过提供正确的<strong>KServer-Client</strong>，而这个世界上，仅仅只有真正的Client和自己知道<strong>KServer-Client</strong>，所以可以对方就是他所声称的那个人。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_01_01.jpg"
                     
                > Keberos大体上就是按照这样的一个原理来进行Authentication的。但是Kerberos远比这个复杂，我将在后续的章节中不断地扩充这个过程，知道Kerberos真实的认证过程。为了使读者更加容易理解后续的部分，在这里我们先给出两个重要的概念：</p>
<ul>
<li><strong>Long-term Key&#x2F;Master Key</strong>：在Security的领域中，有的Key可能长期内保持不变，比如你在密码，可能几年都不曾改变，这样的Key、以及由此派生的Key被称为Long-term Key。对于Long-term Key的使用有这样的原则：被Long-term Key加密的数据不应该在网络上传输。原因很简单，一旦这些被Long-term Key加密的数据包被恶意的网络监听者截获，在原则上，只要有充足的时间，他是可以通过计算获得你用于加密的Long-term Key的——任何加密算法都不可能做到绝对保密。</li>
</ul>
<p>在一般情况下，对于一个Account来说，密码往往仅仅限于该Account的所有者知晓，甚至对于任何Domain的Administrator，密码仍然应该是保密的。但是密码却又是证明身份的凭据，所以必须通过基于你密码的派生的信息来证明用户的真实身份，在这种情况下，一般将你的密码进行Hash运算得到一个Hash code, 我们一般管这样的Hash Code叫做Master Key。由于Hash Algorithm是不可逆的，同时保证密码和Master Key是一一对应的，这样既保证了你密码的保密性，有同时保证你的Master Key和密码本身在证明你身份的时候具有相同的效力。</p>
<ul>
<li><strong>Short-term Key&#x2F;Session Key</strong>：由于被Long-term Key加密的数据包不能用于网络传送，所以我们使用另一种Short-term Key来加密需要进行网络传输的数据。由于这种Key只在一段时间内有效，即使被加密的数据包被黑客截获，等他把Key计算出来的时候，这个Key早就已经过期了。</li>
</ul>
<p><strong>二、引入Key Distribution: KServer-Client从何而来</strong> 上面我们讨论了Kerberos Authentication的基本原理：通过让被认证的一方提供一个仅限于他和认证方知晓的Key来鉴定对方的真实身份。而被这个Key加密的数据包需要在Client和Server之间传送，所以这个Key不能是一个<strong>Long-term Key</strong>，而只可能是<strong>Short-term Key</strong>，这个可以仅仅在Client和Server的一个Session中有效，所以我们称这个Key为Client和Server之间的Session Key（<strong>SServer-Client</strong>）。 现在我们来讨论Client和Server如何得到这个<strong>SServer-Client</strong>。在这里我们要引入一个重要的角色：<strong>Kerberos Distribution Center-KDC</strong>。KDC在整个Kerberos Authentication中作为Client和Server共同信任的第三方起着重要的作用，而Kerberos的认证过程就是通过这3方协作完成。顺便说一下，Kerberos起源于希腊神话，是一支守护着冥界长着3个头颅的神犬，在keberos Authentication中，Kerberos的3个头颅代表中认证过程中涉及的3方：<strong>Client、Server和KDC</strong>。 对于一个Windows Domain来说，<strong>Domain Controller</strong>扮演着KDC的角色。KDC维护着一个存储着该Domain中所有帐户的<strong>Account Database</strong>（一般地，这个Account Database由<strong>AD</strong>来维护），也就是说，他知道属于每个Account的名称和派生于该Account Password的<strong>Master Key</strong>。而用于Client和Server相互认证的<strong>SServer-Client</strong>就是有KDC分发。下面我们来看看KDC分发<strong>SServer-Client</strong>的过程。 通过下图我们可以看到KDC分发SServer-Client的简单的过程：首先Client向KDC发送一个对SServer-Client的申请。这个申请的内容可以简单概括为“<strong>我是某个Client，我需要一个Session Key用于访问某个Server</strong> ”。KDC在接收到这个请求的时候，生成一个Session Key，为了保证这个Session Key仅仅限于发送请求的Client和他希望访问的Server知晓，KDC会为这个Session Key生成两个Copy，分别被Client和Server使用。然后从Account database中提取Client和Server的Master Key分别对这两个Copy进行对称加密。对于后者，和Session Key一起被加密的还包含关于Client的一些信息。 KDC现在有了两个分别被Client和Server 的Master Key加密过的Session Key，这两个Session Key如何分别被Client和Server获得呢？也许你 马上会说，KDC直接将这两个加密过的包发送给Client和Server不就可以了吗，但是如果这样做，对于Server来说会出现下面 两个问题：</p>
<ul>
<li><p>由于一个Server会面对若干不同的Client, 而每个Client都具有一个不同的Session Key。那么Server就会为所有的Client维护这样一个Session Key的列表，这样做对于Server来说是比较麻烦而低效的。</p>
</li>
<li><p>由于网络传输的不确定性，可能出现这样一种情况：Client很快获得Session Key，并将这个Session Key作为Credential随同访问请求发送到Server，但是用于Server的Session Key确还没有收到，并且很有可能承载这个Session Key的永远也到不了Server端，Client将永远得不到认证。</p>
</li>
</ul>
<p>为了解决这个问题，Kerberos的做法很简单，将这两个被加密的Copy一并发送给Client，属于Server的那份由Client发送给Server。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_01_02.jpg"
                     
                > 可能有人会问，KDC并没有真正去认证这个发送请求的Client是否真的就是那个他所声称的那个人，就把Session Key发送给他，会不会有什么问题？如果另一个人（比如Client B）声称自己是Client A，他同样会得到Client A和Server的Session Key，这会不会有什么问题？实际上不存在问题，因为Client B声称自己是Client A，KDC就会使用Client A的Password派生的Master Key对Session Key进行加密，所以真正知道Client A 的Password的一方才会通过解密获得Session Key。 <strong>三、引入Authenticator - 为有效的证明自己提供证据</strong> 通过上面的过程，Client实际上获得了两组信息：一个通过自己Master Key加密的Session Key，另一个被Sever的Master Key加密的数据包，包含Session Key和关于自己的一些确认信息。通过第一节，我们说只要通过一个双方知晓的Key就可以对对方进行有效的认证，但是在一个网络的环境中，这种简单的做法是具有安全漏洞，为此,Client需要提供更多的证明信息，我们把这种证明信息称为<strong>Authenticator</strong>，在Kerberos的Authenticator实际上就是<strong>关于Client的一些信息</strong>和当前时间的一个<strong>Timestamp</strong>（关于这个安全漏洞和Timestamp的作用，我将在后面解释）。 在这个基础上，我们再来看看Server如何对Client进行认证：Client通过<strong>自己的Master Key</strong>对KDC加密的Session Key进行解密从而获得<strong>Session Key</strong>，随后创建<strong>Authenticator（Client Info + Timestamp）</strong>并用<strong>Session Key</strong>对其加密。最后连同从KDC获得的、被<strong>Server的Master Key</strong>加密过的数据包（Client <strong>Info + Session Key</strong>）一并发送到Server端。我们把通过Server的Master Key加密过的数据包称为<strong>Session Ticket</strong>。 当Server接收到这两组数据后，先使用他<strong>自己的Master Key</strong>对Session Ticket进行解密，从而获得<strong>Session Key</strong>。随后使用该<strong>Session Key</strong>解密<strong>Authenticator</strong>，通过比较<strong>Authenticator中的Client Info</strong>和<strong>Session Ticket中的Client Info</strong>从而实现对Client的认证。 <strong><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_01_03.jpg"
                     
                > 为什么要使用Timestamp？</strong> 到这里，很多人可能认为这样的认证过程<a class="link"   href="https://www.baidu.com/s?wd=%E5%A4%A9%E8%A1%A3%E6%97%A0%E7%BC%9D&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" >天衣无缝 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：只有当Client提供正确的Session Key方能得到Server的认证。但是在现实环境中，这存在很大的安全漏洞。 我们试想这样的现象：Client向Server发送的数据包被某个恶意网络监听者截获，该监听者随后将数据包座位自己的Credential冒充该Client对Server进行访问，在这种情况下，依然可以很顺利地获得Server的成功认证。为了解决这个问题，Client在<strong>Authenticator</strong>中会加入一个当前时间的<strong>Timestamp</strong>。 在Server对Authenticator中的Client Info和Session Ticket中的Client Info进行比较之前，会先提取Authenticator中的<strong>Timestamp</strong>，并同<strong>当前的时间</strong>进行比较，如果他们之间的偏差超出一个可以<strong>接受的时间范围（一般是5mins），</strong>Server会直接拒绝该Client的请求。在这里需要知道的是，Server维护着一个列表，这个列表记录着在这个可接受的时间范围内所有进行认证的Client和认证的时间。对于时间偏差在这个可接受的范围中的Client，Server会从这个这个列表中获得<strong>最近一个该Client的认证时间</strong>，只有当<strong>Authenticator中的Timestamp晚于通过一个Client的最近的认证时间</strong>的情况下，Server采用进行后续的认证流程。 <strong>Time Synchronization的重要性</strong> 上述 基于Timestamp的认证机制只有在Client和Server端的时间保持同步的情况才有意义。所以保持Time Synchronization在整个认证过程中显得尤为重要。在一个Domain中，一般通过访问同一个<strong>Time Service</strong>获得当前时间的方式来实现时间的同步。 <strong>双向认证（Mutual Authentication）</strong> Kerberos一个重要的优势在于它能够提供双向认证：<strong>不但Server可以对Client 进行认证，Client也能对Server进行认证</strong>。 具体过程是这样的，如果Client需要对他访问的Server进行认证，会在它向Server发送的Credential中设置一个是否需要认证的Flag。Server在对Client认证成功之后，会把Authenticator中的Timestamp提出出来，通过Session Key进行加密，当Client接收到并使用Session Key进行解密之后，如果确认<strong>Timestamp</strong>和原来的完全一致，那么他可以认定Server正式他试图访问的Server。 那么为什么Server不直接把通过Session Key进行加密的Authenticator原样发送给Client，而要把Timestamp提取出来加密发送给Client呢？原因在于防止恶意的监听者通过获取的Client发送的Authenticator冒充Server获得Client的认证。 <strong>四、引入Ticket Granting  Service</strong> 通过上面的介绍，我们发现Kerberos实际上一个基于<strong>Ticket</strong>的认证方式。Client想要获取Server端的资源，先得通过Server的认证；而认证的先决条件是Client向Server提供从KDC获得的一个有<strong>Server的Master Key</strong>进行加密的<strong>Session Ticket（Session Key + Client Info）</strong>。可以这么说，Session Ticket是Client进入Server领域的一张门票。而这张门票必须从一个合法的Ticket颁发机构获得，这个颁发机构就是<strong>Client和Server双方信任的KDC</strong>， 同时这张Ticket具有超强的防伪标识：它是被Server的Master Key加密的。对Client来说， 获得Session Ticket是整个认证过程中最为关键的部分。 上面我们只是简单地从大体上说明了KDC向Client分发Ticket的过程，而真正在Kerberos中的Ticket Distribution要复杂一些。为了更好的说明整个Ticket Distribution的过程，我在这里做一个类比。现在的股事很火爆，上海基本上是全民炒股，我就举一个认股权证的例子。有的上市公司在股票配股、增发、基金扩募、股份减持等情况会向公众发行<strong>认股权证</strong>，认股权证的持有人可以凭借这个权证认购一定数量的该公司股票，认股权证是一种具有看涨期权的金融衍生产品。 而我们今天所讲的Client获得Ticket的过程也和通过认股权证购买股票的过程类似。如果我们把Client提供给Server进行认证的Ticket比作股票的话，那么Client在从KDC那边获得Ticket之前，需要先获得这个Ticket的认购权证，这个认购权证在Kerberos中被称为<strong>TGT：Ticket Granting Ticket</strong>，TGT的分发方仍然是KDC。 我们现在来看看Client是如何从KDC处获得TGT的：首先Client向KDC发起对TGT的申请，申请的内容大致可以这样表示：“<strong>我需要一张TGT用以申请获取用以访问所有Server的Ticket</strong>”。KDC在收到该申请请求后，生成一个用于该Client和KDC进行安全通信的<strong>Session Key（SKDC-Client）</strong>。为了保证该Session Key仅供该Client和自己使用，KDC使用<strong>Client的Master Key</strong>和<strong>自己的Master Key</strong>对生成的Session Key进行加密，从而获得两个加密的<strong>SKDC-Client</strong>的Copy。对于后者，随<strong>SKDC-Client</strong>一起被加密的还包含以后用于鉴定Client身份的关于Client的一些信息。最后KDC将这两份Copy一并发送给Client。这里有一点需要注意的是：为了免去KDC对于基于不同Client的Session Key进行维护的麻烦，就像Server不会保存<strong>Session Key（SServer-Client）</strong>一样，KDC也不会去保存这个Session Key（<strong>SKDC-Client</strong>），而选择完全靠Client自己提供的方式。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_01_07.gif"
                     
                > 当Client收到KDC的两个加密数据包之后，先使用<strong>自己的Master Key</strong>对第一个Copy进行解密，从而获得KDC和Client的<strong>Session Key（SKDC-Client）</strong>，并把该Session 和TGT进行缓存。有了Session Key和TGT，Client自己的Master Key将不再需要，因为此后Client可以使用<strong>SKDC-Client</strong>向KDC申请用以访问每个Server的Ticket，相对于Client的Master Key这个Long-term Key，SKDC-Client是一个Short-term Key，安全保证得到更好的保障，这也是Kerberos多了这一步的关键所在。同时需要注意的是SKDC-Client是一个Session Key，他具有自己的生命周期，同时TGT和Session相互关联，当Session Key过期，TGT也就宣告失效，此后Client不得不重新向KDC申请新的TGT，KDC将会生成一个不同Session Key和与之关联的TGT。同时，由于Client Log off也导致SKDC-Client的失效，所以SKDC-Client又被称为<strong>Logon Session Key</strong>。 接下来，我们看看Client如何使用TGT来从KDC获得基于某个Server的Ticket。在这里我要强调一下，Ticket是基于某个具体的Server的，而TGT则是和具体的Server无关的，Client可以使用一个TGT从KDC获得基于不同Server的Ticket。我们<a class="link"   href="https://www.baidu.com/s?wd=%E8%A8%80%E5%BD%92%E6%AD%A3%E4%BC%A0&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" >言归正传 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，Client在获得自己和KDC的<strong>Session Key（SKDC-Client）</strong>之后，生成自己的Authenticator以及所要访问的Server名称的并使用<strong>SKDC-Client</strong>进行加密。随后连同TGT一并发送给KDC。KDC使用<strong>自己的Master Key</strong>对TGT进行解密，提取Client Info和<strong>Session Key（SKDC-Client）</strong>，然后使用这个<strong>SKDC-Client</strong>解密Authenticator获得Client Info，对两个Client Info进行比较进而验证对方的真实身份。验证成功，生成一份基于Client所要访问的Server的Ticket给Client，这个过程就是我们第二节中介绍的一样了。 <strong><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_01_05.gif"
                     
                > 五、Kerberos的3个Sub-protocol：整个Authentication</strong> 通过以上的介绍，我们基本上了解了整个Kerberos authentication的整个流程：整个流程大体上包含以下3个子过程：</p>
<ol>
<li><p>Client向KDC申请TGT（Ticket Granting Ticket）。</p>
</li>
<li><p>Client通过获得TGT向DKC申请用于访问Server的Ticket。</p>
</li>
<li><p>Client最终向为了Server对自己的认证向其提交Ticket。</p>
</li>
</ol>
<p>不过上面的介绍离真正的Kerberos Authentication还是有一点出入。Kerberos整个认证过程通过3个sub-protocol来完成。这个3个Sub-Protocol分别完成上面列出的3个子过程。这3个sub-protocol分别为：</p>
<ol>
<li><p>Authentication Service Exchange</p>
</li>
<li><p>Ticket Granting Service Exchange</p>
</li>
<li><p>Client&#x2F;Server Exchange</p>
</li>
</ol>
<p>下图简单展示了完成这个3个Sub-protocol所进行Message Exchange。 <strong><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_01_06.gif"
                     
                > 1． Authentication Service Exchange</strong> 通过这个Sub-protocol，KDC（确切地说是KDC中的Authentication Service）实现对Client身份的确认，并颁发给该Client一个TGT。具体过程如下： Client向KDC的Authentication Service发送Authentication Service Request（<strong>KRB_AS_REQ</strong>）, 为了确保KRB_AS_REQ仅限于自己和KDC知道，Client使用自己的Master Key对KRB_AS_REQ的主体部分进行加密（KDC可以通过Domain 的Account Database获得该Client的Master Key）。KRB_AS_REQ的大体包含以下的内容：</p>
<ul>
<li><p>Pre-authentication data：包含用以证明自己身份的信息。说白了，就是证明自己知道自己声称的那个account的Password。一般地，它的内容是一个被Client的Master key加密过的Timestamp。</p>
</li>
<li><p>Client name &amp; realm: 简单地说就是Domain name\Client</p>
</li>
<li><p>Server Name：注意这里的Server Name并不是Client真正要访问的Server的名称，而我们也说了TGT是和Server无关的（Client只能使用Ticket，而不是TGT去访问Server）。这里的Server Name实际上是<strong>KDC的Ticket Granting Service的Server Name</strong>。</p>
</li>
</ul>
<p>AS（Authentication Service）通过它接收到的KRB_AS_REQ验证发送方的是否是在Client name &amp; realm中声称的那个人，也就是说要验证发送放是否知道Client的Password。所以AS只需从Account Database中提取Client对应的Master Key对Pre-authentication data进行解密，如果是一个合法的Timestamp，则可以证明发送放提供的是正确无误的密码。验证通过之后，AS将一份Authentication Service Response（KRB_AS_REP）发送给Client。KRB_AS_REQ主要包含两个部分：本Client的Master Key加密过的Session Key（SKDC-Client：Logon Session Key）和被自己（KDC）加密的TGT。而TGT大体又包含以下的内容：</p>
<ul>
<li><p>Session Key: SKDC-Client：Logon Session Key</p>
</li>
<li><p>Client name &amp; realm: 简单地说就是Domain name\Client</p>
</li>
<li><p>End time: TGT到期的时间。</p>
</li>
</ul>
<p>Client通过自己的Master Key对第一部分解密获得Session Key（SKDC-Client：Logon Session Key）之后，携带着TGT便可以进入下一步：TGS（Ticket Granting Service）Exchange。 <strong>2． TGS（Ticket Granting Service）Exchange</strong> TGS（Ticket Granting Service）Exchange通过Client向KDC中的TGS（Ticket Granting Service）发送Ticket Granting Service Request（<strong>KRB_TGS_REQ</strong>）开始。KRB_TGS_REQ大体包含以下的内容：</p>
<ul>
<li><p>TGT：Client通过AS Exchange获得的Ticket Granting Ticket，TGT被KDC的Master Key进行加密。</p>
</li>
<li><p>Authenticator：用以证明当初TGT的拥有者是否就是自己，所以它必须以TGT的办法方和自己的Session Key（SKDC-Client：Logon Session Key）来进行加密。</p>
</li>
<li><p>Client name &amp; realm: 简单地说就是Domain name\Client。</p>
</li>
<li><p>Server name &amp; realm: 简单地说就是Domain name\Server，这回是Client试图访问的那个Server。</p>
</li>
</ul>
<p>TGS收到KRB_TGS_REQ在发给Client真正的Ticket之前，先得整个Client提供的那个TGT是否是AS颁发给它的。于是它不得不通过Client提供的Authenticator来证明。但是Authentication是通过<strong>Logon Session Key（SKDC-Client）</strong>进行加密的，而自己并没有保存这个Session Key。所以TGS先得通过自己的Master Key对Client提供的TGT进行解密，从而获得这个Logon Session Key（SKDC-Client），再通过这个<strong>Logon Session Key（SKDC-Client）</strong>解密Authenticator进行验证。验证通过向对方发送Ticket Granting Service Response（KRB_TGS_REP）。这个KRB_TGS_REP有两部分组成：使用<strong>Logon Session Key（SKDC-Client）</strong>加密过用于Client和Server的<strong>Session Key（SServer-Client）</strong>和使用<strong>Server的Master Key</strong>进行加密的Ticket。该Ticket大体包含以下一些内容：</p>
<ul>
<li><p>Session Key：SServer-Client。</p>
</li>
<li><p>Client name &amp; realm: 简单地说就是Domain name\Client。</p>
</li>
<li><p>End time: Ticket的到期时间。</p>
</li>
</ul>
<p>Client收到KRB_TGS_REP，使用<strong>Logon Session Key（SKDC-Client）</strong>解密第一部分后获得<strong>Session Key（SServer-Client）</strong>。有了Session Key和Ticket，Client就可以之间和Server进行交互，而无须在通过KDC作中间人了。所以我们说Kerberos是一种高效的认证方式，它可以直接通过Client和Server双方来完成，不像Windows NT 4下的NTLM认证方式，每次认证都要通过一个双方信任的第3方来完成。 我们现在来看看 Client如果使用Ticket和Server怎样进行交互的，这个阶段通过我们的第3个Sub-protocol来完成：<strong>CS（Client&#x2F;Server ）Exchange</strong>。 <strong>3． CS（Client&#x2F;Server ）Exchange</strong> 这个已经在本文的第二节中已经介绍过，对于重复发内容就不再累赘了。Client通过TGS Exchange获得Client和Server的<strong>Session Key（SServer-Client）</strong>，随后创建用于证明自己就是Ticket的真正所有者的Authenticator，并使用<strong>Session Key（SServer-Client）</strong>进行加密。最后将这个被加密过的Authenticator和Ticket作为Application Service Request（KRB_AP_REQ）发送给Server。除了上述两项内容之外，KRB_AP_REQ还包含一个Flag用于表示Client是否需要进行双向验证（Mutual Authentication）。 Server接收到KRB_AP_REQ之后，通过自己的Master Key解密Ticket，从而获得Session Key（SServer-Client）。通过Session Key（SServer-Client）解密Authenticator，进而验证对方的身份。验证成功，让Client访问需要访问的资源，否则直接拒绝对方的请求。 对于需要进行双向验证，Server从Authenticator提取Timestamp，使用Session Key（SServer-Client）进行加密，并将其发送给Client用于Client验证Server的身份。 <strong>六、User2User Sub-Protocol：有效地保障Server的安全</strong> 通过3个Sub-protocol的介绍，我们可以全面地掌握整个Kerberos的认证过程。实际上，在Windows 2000时代，基于Kerberos的Windows Authentication就是按照这样的工作流程来进行的。但是我在上面一节结束的时候也说了，基于3个Sub-protocol的Kerberos作为一种Network Authentication是具有它自己的局限和安全隐患的。我在整篇文章一直在强调这样的一个原则：<strong>以某个Entity的Long-term Key加密的数据不应该在网络中传递</strong>。原因很简单，所有的加密算法都不能保证100%的安全，对加密的数据进行解密只是一个时间的过程，最大限度地提供安全保障的做法就是：<strong>使用一个Short-term key（Session Key）代替Long-term Key对数据进行加密，使得恶意用户对其解密获得加密的Key时，该Key早已失效</strong>。但是对于3个Sub-Protocol的C&#x2F;S Exchange，Client携带的Ticket却是被<strong>Server Master Key</strong>进行加密的，这显现不符合我们提出的原则，降低Server的安全系数。 所以我们必须寻求一种解决方案来解决上面的问题。这个解决方案很明显：就是采用一个Short-term的Session Key，而不是Server Master Key对Ticket进行加密。这就是我们今天要介绍的Kerberos的第4个Sub-protocol：<strong>User2User Protocol</strong>。我们知道，既然是Session Key，仅必然涉及到两方，而在Kerberos整个认证过程涉及到3方：Client、Server和KDC，所以用于加密Ticket的只可能是Server和KDC之间的<strong>Session Key（SKDC-Server）。</strong> 我们知道Client通过在AS Exchange阶段获得的TGT从KDC那么获得访问Server的Ticket。原来的Ticket是通过<strong>Server的Master Key</strong>进行加密的，而这个Master Key可以通过Account Database获得。但是现在KDC需要使用Server和KDC之间的<strong>SKDC-Server</strong>进行加密，而KDC是不会维护这个Session Key，所以<strong>这个Session Key只能靠申请Ticket的Client提供</strong>。所以在AS Exchange和TGS Exchange之间，Client还得对Server进行请求已获得Server和KDC之间的Session Key（<strong>SKDC-Server</strong>）。而对于Server来说，它可以像Client一样通过<strong>AS Exchange</strong>获得他和KDC之间的Session Key（<strong>SKDC-Server</strong>）和一个封装了这个Session Key并被<strong>KDC的Master Key进行加密的TGT</strong>，一旦获得这个TGT，Server会缓存它，以待Client对它的请求。我们现在来详细地讨论这一过程。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/kerberos_03_01.gif"
                     
                > 上图基本上翻译了基于User2User的认证过程，这个过程由4个步骤组成。我们发现较之我在上面一节介绍的基于传统3个Sub-protocol的认证过程，这次对了第2部。我们<a class="link"   href="https://www.baidu.com/s?wd=%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd" >从头到尾 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>简单地过一遍：</p>
<ol>
<li><p>AS Exchange：Client通过此过程获得了属于自己的TGT，有了此TGT，Client可凭此向KDC申请用于访问某个Server的Ticket。</p>
</li>
<li><p>这一步的主要任务是获得封装了Server和KDC的Session Key（SKDC-Server）的属于Server的TGT。如果该TGT存在于Server的缓存中，则Server会直接将其返回给Client。否则通过AS Exchange从KDC获取。</p>
</li>
<li><p>TGS Exchange：Client通过向KDC提供自己的TGT，Server的TGT以及Authenticator向KDC申请用于访问Server的Ticket。KDC使用先用自己的Master Key解密Client的TGT获得SKDC-Client，通过SKDC-Client解密Authenticator验证发送者是否是TGT的真正拥有者，验证通过再用自己的Master Key解密Server的TGT获得KDC和Server 的Session Key（SKDC-Server），并用该Session Key加密Ticket返回给Client。</p>
</li>
<li><p>C&#x2F;S Exchange：Client携带者通过KDC和Server 的Session Key（SKDC-Server）进行加密的Ticket和通过Client和Server的Session Key（SServer-Client）的Authenticator访问Server，Server通过SKDC-Server解密Ticket获得SServer-Client，通过SServer-Client解密Authenticator实现对Client的验证。</p>
</li>
</ol>
<p>这就是整个过程。 <strong>七、Kerberos的优点</strong> 分析整个Kerberos的认证过程之后，我们来总结一下Kerberos都有哪些优点： <strong>1．较高的Performance</strong> 虽然我们一再地说Kerberos是一个涉及到3方的认证过程：Client、Server、KDC。但是一旦Client获得用过访问某个Server的Ticket，该Server就能根据这个Ticket实现对Client的验证，而无须KDC的再次参与。和传统的基于Windows NT 4.0的每个完全依赖Trusted Third Party的NTLM比较，具有较大的性能提升。 <strong>2．实现了双向验证（Mutual Authentication）</strong> 传统的NTLM认证基于这样一个前提：Client访问的远程的Service是可信的、无需对于进行验证，所以NTLM不曾提供双向验证的功能。这显然有点理想主义，为此Kerberos弥补了这个不足：Client在访问Server的资源之前，可以要求对Server的身份执行认证。 <strong>3．对Delegation的支持</strong> Impersonation和Delegation是一个分布式环境中两个重要的功能。Impersonation允许Server在本地使用Logon 的Account执行某些操作，Delegation需用Server将logon的Account带入到另过一个Context执行相应的操作。NTLM仅对Impersonation提供支持，而Kerberos通过一种双向的、可传递的（Mutual 、Transitive）信任模式实现了对Delegation的支持。 <strong>4．互操作性（Interoperability）</strong> Kerberos最初由MIT首创，现在已经成为一行被广泛接受的标准。所以对于不同的平台可以进行广泛的互操作。</p>
]]></content>
      <categories>
        <category>Technique</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>安全认证</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程-线程池的原理及实现</title>
    <url>/2019/01/30/article141/</url>
    <content><![CDATA[<p>1、线程池简介： 多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处理器单元的闲置时间，增加处理器单元的吞吐能力。 假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。 如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。 一个线程池包括以下四个基本组成部分： 1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务； 2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务； 3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等； 4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。 线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。 线程池不仅调整T1,T3产生的时间段，而且它还显著减少了创建线程的数目，看一个例子： 假设一个服务器一天要处理50000个请求，并且每个请求需要一个单独的线程完成。在线程池中，线程数一般是固定的，所以产生线程总数不会超过线程池中线程的数目，而如果服务器不利用线程池来处理这些请求则线程总数为50000。一般线程池大小是远小于50000。所以利用线程池的服务器程序不会为了创建50000而在处理请求时浪费时间，从而提高效率。 代码实现中并没有实现任务接口，而是把Runnable对象加入到线程池管理器（ThreadPool），然后剩下的事情就由线程池管理器（ThreadPool）来完成了  </p>
<p>package mine.util.thread;</p>
<p>import java.util.LinkedList;<br>import java.util.List;</p>
<p>&#x2F;**<br> * 线程池类，线程管理器：创建线程，执行任务，销毁线程，获取线程基本信息<br> *&#x2F;<br>public final class ThreadPool {<br>    &#x2F;&#x2F; 线程池中默认线程的个数为5<br>    private static int worker_num &#x3D; 5;<br>    &#x2F;&#x2F; 工作线程<br>    private WorkThread[] workThrads;<br>    &#x2F;&#x2F; 未处理的任务<br>    private static volatile int finished_task &#x3D; 0;<br>    &#x2F;&#x2F; 任务队列，作为一个缓冲,List线程不安全<br>    private List<Runnable> taskQueue &#x3D; new LinkedList<Runnable>();<br>    private static ThreadPool threadPool;</p>
<pre><code>// 创建具有默认线程个数的线程池
private ThreadPool() &#123;
    this(5);
&#125;

// 创建线程池,worker\_num为线程池中工作线程的个数
private ThreadPool(int worker\_num) &#123;
    ThreadPool.worker\_num = worker\_num;
    workThrads = new WorkThread\[worker\_num\];
    for (int i = 0; i &lt; worker\_num; i++) &#123;
        workThrads\[i\] = new WorkThread();
        workThrads\[i\].start();// 开启线程池中的线程
    &#125;
&#125;

// 单态模式，获得一个默认线程个数的线程池
public static ThreadPool getThreadPool() &#123;
    return getThreadPool(ThreadPool.worker\_num);
&#125;

// 单态模式，获得一个指定线程个数的线程池,worker\_num(&gt;0)为线程池中工作线程的个数
// worker\_num&lt;=0创建默认的工作线程个数
public static ThreadPool getThreadPool(int worker\_num1) &#123;
    if (worker\_num1 &lt;= 0)
        worker\_num1 = ThreadPool.worker\_num;
    if (threadPool == null)
        threadPool = new ThreadPool(worker\_num1);
    return threadPool;
&#125;

// 执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定
public void execute(Runnable task) &#123;
    synchronized (taskQueue) &#123;
        taskQueue.add(task);
        taskQueue.notify();
    &#125;
&#125;

// 批量执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定
public void execute(Runnable\[\] task) &#123;
    synchronized (taskQueue) &#123;
        for (Runnable t : task)
            taskQueue.add(t);
        taskQueue.notify();
    &#125;
&#125;

// 批量执行任务,其实只是把任务加入任务队列，什么时候执行有线程池管理器觉定
public void execute(List&lt;Runnable&gt; task) &#123;
    synchronized (taskQueue) &#123;
        for (Runnable t : task)
            taskQueue.add(t);
        taskQueue.notify();
    &#125;
&#125;

// 销毁线程池,该方法保证在所有任务都完成的情况下才销毁所有线程，否则等待任务完成才销毁
public void destroy() &#123;
    while (!taskQueue.isEmpty()) &#123;// 如果还有任务没执行完成，就先睡会吧
        try &#123;
            Thread.sleep(10);
        &#125; catch (InterruptedException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
    // 工作线程停止工作，且置为null
    for (int i = 0; i &lt; worker\_num; i++) &#123;
        workThrads\[i\].stopWorker();
        workThrads\[i\] = null;
    &#125;
    threadPool=null;
    taskQueue.clear();// 清空任务队列
&#125;

// 返回工作线程的个数
public int getWorkThreadNumber() &#123;
    return worker\_num;
&#125;

// 返回已完成任务的个数,这里的已完成是只出了任务队列的任务个数，可能该任务并没有实际执行完成
public int getFinishedTasknumber() &#123;
    return finished\_task;
&#125;

// 返回任务队列的长度，即还没处理的任务个数
public int getWaitTasknumber() &#123;
    return taskQueue.size();
&#125;

// 覆盖toString方法，返回线程池信息：工作线程个数和已完成任务个数
@Override
public String toString() &#123;
    return &quot;WorkThread number:&quot; + worker\_num + &quot;  finished task number:&quot;
            + finished\_task + &quot;  wait task number:&quot; + getWaitTasknumber();
&#125;

/\*\*
 \* 内部类，工作线程
 \*/
private class WorkThread extends Thread &#123;
    // 该工作线程是否有效，用于结束该工作线程
    private boolean isRunning = true;

    /\*
     \* 关键所在啊，如果任务队列不空，则取出任务执行，若任务队列空，则等待
     \*/
    @Override
    public void run() &#123;
        Runnable r = null;
        while (isRunning) &#123;// 注意，若线程无效则自然结束run方法，该线程就没用了
            synchronized (taskQueue) &#123;
                while (isRunning &amp;&amp; taskQueue.isEmpty()) &#123;// 队列为空
                    try &#123;
                        taskQueue.wait(20);
                    &#125; catch (InterruptedException e) &#123;
                        e.printStackTrace();
                    &#125;
                &#125;
                if (!taskQueue.isEmpty())
                    r = taskQueue.remove(0);// 取出任务
            &#125;
            if (r != null) &#123;
                r.run();// 执行任务
            &#125;
            finished\_task++;
            r = null;
        &#125;
    &#125;

    // 停止工作，让该线程自然执行完run方法，自然结束
    public void stopWorker() &#123;
        isRunning = false;
    &#125;
&#125;
</code></pre>
<p>}</p>
<p>    测试代码：</p>
<p>package mine.util.thread;</p>
<p>&#x2F;&#x2F;测试线程池<br>public class TestThreadPool {<br>    public static void main(String[] args) {<br>        &#x2F;&#x2F; 创建3个线程的线程池<br>        ThreadPool t &#x3D; ThreadPool.getThreadPool(3);<br>        t.execute(new Runnable[] { new Task(), new Task(), new Task() });<br>        t.execute(new Runnable[] { new Task(), new Task(), new Task() });<br>        System.out.println(t);<br>        t.destroy();&#x2F;&#x2F; 所有线程都执行完成才destory<br>        System.out.println(t);<br>    }</p>
<pre><code>// 任务类
static class Task implements Runnable &#123;
    private static volatile int i = 1;

    @Override
    public void run() &#123;// 执行任务
        System.out.println(&quot;任务 &quot; + (i++) + &quot; 完成&quot;);
    &#125;
&#125;
</code></pre>
<p>}</p>
<p>    运行结果： WorkThread number:3  finished task number:0  wait task number:6 任务 1 完成 任务 2 完成 任务 3 完成 任务 4 完成 任务 5 完成 任务 6 完成 WorkThread number:3  finished task number:6  wait task number:0 分析：由于并没有任务接口，传入的可以是自定义的任何任务，所以线程池并不能准确的判断该任务是否真正的已经完成（真正完成该任务是这个任务的run方法执行完毕），只能知道该任务已经出了任务队列，正在执行或者已经完成。 2、java类库中提供的线程池简介： java提供的线程池更加强大，相信理解线程池的工作原理，看类库中的线程池就不会感到陌生了。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/java-2.gif"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/java.gif"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka connect快速构建数据ETL通道</title>
    <url>/2019/01/30/article142/</url>
    <content><![CDATA[<p><strong>一.背景介绍</strong> Kafka connect是Confluent公司(当时开发出Apache Kafka的核心团队成员出来创立的新公司)开发的confluent platform的核心功能. 大家都知道现在数据的ETL过程经常会选择kafka作为消息中间件应用在离线和实时的使用场景中,而kafka的数据上游和下游一直没有一个 无缝衔接的pipeline来实现统一,比如会选择flume或者logstash采集数据到kafka,然后kafka又通过其他方式pull或者push数据到目标存储. 而kafka connect旨在围绕kafka构建一个可伸缩的，可靠的数据流通道，通过kafka connect可以快速实现大量数据进出kafka从而和其 他源数据源或者目标数据源进行交互构造一个低延迟的数据pipeline.给个图更直观点，大家感受下. <a href="http://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210853644-1317363099.jpg"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210854425-587132674.jpg"
                      alt="0" title="0"
                ></a> <strong>二.Kafka-connect快速配置</strong> 这里Confluent官方很贴心的提供了一个集成的镜像以便quickstart,如下链接 <a class="link"   href="https://s3-us-west-2.amazonaws.com/confluent-files/kafka_connect_blog.ova"  title="https://s3-us-west-2.amazonaws.com/confluent-files/kafka_connect_blog.ova">https://s3-us-west-2.amazonaws.com/confluent-files/kafka_connect_blog.ova <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这是存储在Amazon S3上的，直接点击即可下载.这里我使用VMWare直接打开,刚开始会提示一个错误，不用管它直接点击重试即可 系统加载的过程中会默认初始化虚拟机的网络配置，这里我建议提前设置好桥接网络，让该虚拟机使用桥接网络初始化. 加载成功后，登录进入该Ubuntu系统,默认的用户名和密码都是:vagrant. 然后ls查看vagrant用户目录，查看几个关键的脚本内容后,我分别介绍它们的功能 1&gt;setup.sh:自动下载mysql,mysql jdbc driver,配置好mysql以及做为hive的metastore 2&gt;start.sh:启动confluent platform,kafka,hadoop,hive相关服务 3&gt;clean_up.sh:和start.sh相反的，会关闭掉所有的服务，而且还会删除掉所有的数据(例如hdfs namenode和 datanode的数据，其实相当于fs format了) 那么很明显，第一步肯定是执行setup.sh,这里执行后会报错如下 <a href="http://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210855003-645567088.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210855722-1476308406.png"
                      alt="setupFailed" title="setupFailed"
                ></a> 这里无法下载相关的软件包，好吧，那么我们需要更新一下下载源的索引，执行如下命令 sudo apt-get update 更新完毕后再次执行setup.sh安装好mysql,hive等服务 紧接着执行start.sh来启动上述服务，启动后应该有如下进程，这是一个伪分布式节点 <a href="http://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210856269-1898375217.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210856753-1676661749.png"
                      alt="jpsService" title="jpsService"
                ></a> 对了，虚拟机各个服务(例如hive,zookeeper等),配置文件和日志文件在路径&#x2F;mnt&#x2F;下,组件的安装位置位于&#x2F;opt下 <strong>三.Kafka connect快速使用</strong> 配置完以后就可以准备使用kafka-connect来快速构建一个数据pipeline了，如下图所示 <a href="http://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210857284-802298492.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210857769-1940710893.png"
                      alt="wholePic" title="wholePic"
                ></a> 整个过程是将数据以mysql作为数据源，将数据通过kafka connect快速ETL到hive中去.注意这里图中没画kafka 但是实际上是包含在kafka connect里面的,话不多说，开始使用 1&gt;Mysql数据准备 执行如下命令</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://common.cnblogs.com/images/copycode.gif"
                      alt="复制代码"
                ></p>
<p>$ mysql -u root –password&#x3D;”mypassword”<br>mysql&gt; CREATE DATABASE demo;<br>mysql&gt; USE demo;<br>mysql&gt; CREATE TABLE users (<br>    -&gt;   id serial NOT NULL PRIMARY KEY,<br>    -&gt;   name varchar(100),<br>    -&gt;   email varchar(200),<br>    -&gt;   department varchar(200),<br>    -&gt;   modified timestamp default CURRENT_TIMESTAMP NOT NULL,<br>    -&gt;   INDEX `modified_index` (`modified`)<br>    -&gt; );<br>mysql&gt; INSERT INTO users (name, email, department) VALUES (‘alice’, ‘<a class="link"   href="mailto:&#x61;&#108;&#x69;&#99;&#x65;&#x40;&#97;&#x62;&#x63;&#x2e;&#x63;&#x6f;&#109;" >&#x61;&#108;&#x69;&#99;&#x65;&#x40;&#97;&#x62;&#x63;&#x2e;&#x63;&#x6f;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘, ‘engineering’);<br>mysql&gt; INSERT INTO users (name, email, department) VALUES (‘bob’, ‘<a class="link"   href="mailto:&#98;&#x6f;&#98;&#x40;&#97;&#98;&#99;&#46;&#99;&#111;&#109;" >&#98;&#x6f;&#98;&#x40;&#97;&#98;&#99;&#46;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘, ‘sales’);<br>mysql&gt; exit;</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://common.cnblogs.com/images/copycode.gif"
                      alt="复制代码"
                ></p>
<p>注意上面第一行，–password&#x3D;”mypassword” ,对，你没看错，这里虚拟机mysql的root默认密码就是mypassword, 强迫症患者请自行更改.随后建库，建表，插入数据. 2&gt;关键概念准备 这里我快速普及一下参考官方文档理解的一些关键概念. kafka connector:kafka connector是kafka connect的关键组成部分，它是一个逻辑上的job,用于在kafka和其他系统之间拷贝数据,比如 从上游系统拷贝数据到kafka,或者从kafka拷贝数据到下游系统 Tasks:每个kafka connector可以初始化一组task进行数据的拷贝 Workers:逻辑上包含kafka connector和tasks用来调度执行具体任务的进程,具体执行时分为standalone模式和distributed模式 见下图，这个是kafka上游的数据stream过来后，定义好对应的kafka connector后，分解为一组tasks然后push数据到kafka的不同topic <a href="http://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210858362-1884257820.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://images2015.cnblogs.com/blog/1050555/201701/1050555-20170108210858831-734717839.png"
                      alt="kafkaConnectors" title="kafkaConnectors"
                ></a> 3&gt;利用Kafka-connect摄取数据 主要是通过配置来实现从mysql摄取数据到kafka,然后按照topic来获取数据写入hdfs,命令如下</p>
<p>connect-standalone &#x2F;mnt&#x2F;etc&#x2F;connect-avro-standalone.properties \<br> &#x2F;mnt&#x2F;etc&#x2F;mysql.properties &#x2F;mnt&#x2F;etc&#x2F;hdfs.properties &amp;</p>
<p>注意上面这些properties文件是虚拟机已经事先配置好的，可以直接执行实现数据的摄取 当前使用的kafka connect的standalone模式，当然还有distributed模式后续可以尝试 上面的那条命令的格式是这样:</p>
<p>connect-standalone worker.properties connector1.properties [connector2.properties connector3.properties …]</p>
<p>主要解释一下connect-standalone后面的参数 worker.properties:就是上面提到过的worker进程的配置文件,可以定义kafka cluster的相关信息以及数据序列化的格式. 随后的一些参数就是kafka connector的配置参数了,比如上面的mysql.properties定义了一个kafka jdbc connector,用来同步mysql数据到kafka 最后一个hdfs.properties是kafka hdfs connector的配置文件,用来消费kafka topic数据push到hdfs. 那么执行这条命令后就可以将mysql的数据通过kafka connect快速ETL到hdfs了. 最后可以通过hive创建外表映射hdfs上的数据文件,然后在hive中查看对应数据,如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://common.cnblogs.com/images/copycode.gif"
                      alt="复制代码"
                ></p>
<p>$ hive<br>hive&gt; SHOW TABLES;<br>OK<br>test_jdbc_users<br>hive&gt; SELECT * FROM test_jdbc_users;<br>OK<br>1 alice <a class="link"   href="mailto:&#97;&#108;&#x69;&#x63;&#x65;&#x40;&#97;&#98;&#x63;&#x2e;&#x63;&#111;&#x6d;" >&#97;&#108;&#x69;&#x63;&#x65;&#x40;&#97;&#98;&#x63;&#x2e;&#x63;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> engineering 1450305345000<br>2 bob   <a class="link"   href="mailto:&#x62;&#111;&#x62;&#x40;&#97;&#x62;&#99;&#46;&#99;&#111;&#109;" >&#x62;&#111;&#x62;&#x40;&#97;&#x62;&#99;&#46;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>   sales       1450305346000</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://common.cnblogs.com/images/copycode.gif"
                      alt="复制代码"
                ></p>
<p><strong>四.Kafka connect使用总结</strong> 1&gt;Kafka connect的使用其实就是配置不同的kafka connectors,这里大家可以把kafka作为中间组件，然后可以类比flume理解,kafka上游的 connector其实就是fllume的source从上游数据源sink到kafka,kafka的下游connector其实就是flume的source是kafka,sink到下游系统. 2&gt;Kafka connect的数据pipeline要打通，它要求数据遵守confluent自己的一套通用的schema机制，细心的同学会发现上面jps后会有个进程名 SchemaRegistryMain,这里官方默认使用Avro格式进出Kafka,所以要留意worker.properties文件的配置信息. 3&gt;我在使用中没有发现Flume 相关的connector,因此很好奇它应该是没有实现上游flume conector的属性配置。问题应该出在Flume的数据是基 于event的,而和上面2中所说的schema定义格式没有很好的兼容. 4&gt;kafka connect的distributed模式应该更实用，随后会尝试，以及confluent所支持的实时处理流kafka streams.</p>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>对微服务以及SpringBoot的思考</title>
    <url>/2019/03/11/article143/</url>
    <content><![CDATA[<h1 id="对微服务以及SpringBoot的思考"><a href="#对微服务以及SpringBoot的思考" class="headerlink" title="对微服务以及SpringBoot的思考"></a>对微服务以及SpringBoot的思考</h1><blockquote>
<p>最近一直在接触spring这方面的框架，其实算起来springboot哇都没怎么用过，更没真正的学习过，直接从项目入手就开始做这些东西，当然也仅仅是限于会用，而不是精于原理更会调优。最近看的文章多了，又根据自己平时写的时候的思考，有点点想法，买了《Spring微服务实战》准备在看这本书之前，将之前的想法写出来，看完书以后再更新一下，看看前后之间有什么变化，对自己固有的认知有没有产生冲击。</p>
</blockquote>
<h3 id="1-从基本的web思路讲起"><a href="#1-从基本的web思路讲起" class="headerlink" title="1. 从基本的web思路讲起"></a>1. 从基本的web思路讲起</h3><p>web开发已是老生常谈，做了这么多年，深知里面的套路，第一次接触的时候感觉很神奇，后来发现不过如此，原来这么简单，再就是MVC思想，这种总结是很实用的，即使没有系统的去看过，自己也会慢慢的萌生出想法。对前后端恨不得马上分离开来，后来出现模版渲染就是为此而生，但这些改变都不够彻底。</p>
<h3 id="2-微服务的理念"><a href="#2-微服务的理念" class="headerlink" title="2. 微服务的理念"></a>2. 微服务的理念</h3><p>顾名思义，以往的Java都需要将整个项目启动才能去测试效果，但微服务里每一个功能都是独立的，我觉得这样对团队开发是很高效的，不再会因为某个人的问题而影响到整个团队的进度，后来接触到公司的项目让我对这种理念更加肯定。虽然公司用的是springcloud，不过都差不多。</p>
<h3 id="3-新的想法"><a href="#3-新的想法" class="headerlink" title="3. 新的想法"></a>3. 新的想法</h3><p>某天看到一篇文章，springboot作为后台接口去开发，如果只是用来渲染模版，定位链接，那用springMVC就可以了，突然之间有些明白公司的代码，所有的接口都是ResponseBody，从不做任何页面之间的挑战，也许这就是后台服务，不参与前端的工作只做数据的返回，这种改变是我没有想到的，不知道理解的对不对，希望看完书以后会有更深刻的感悟。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>大数据</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring与微服务</title>
    <url>/2019/03/31/article145/</url>
    <content><![CDATA[<h1 id="Spring与微服务"><a href="#Spring与微服务" class="headerlink" title="Spring与微服务"></a>Spring与微服务</h1><h2 id="微服务的理念"><a href="#微服务的理念" class="headerlink" title="微服务的理念"></a>微服务的理念</h2><p>在微服务的概念逐步形成之前，绝大部分基于Web的应用都是使用单体架构的风格来进行构建的。在单体架构中，应用程序作为单个可部署的软件制品交付，所有的UI，业务，数据库访问等逻辑程序都被打包在一个应用程序中并部署在一个应用程序服务器上。 虽然应用程序可能是作为单个工作单元部署，但大多数情况下，会有多个开发团队开发这个应用程序。每个开发团队负责应用程序的不同部分，随着开发进度的增加，每当各个团队需要修改代码时，整个应用程序都需要重新构建，重新测试，重新部署。 而微服务正是对技术上和组织上扩大大型单体应用程序所面临的诸多挑战的直接回应。微服务是一个小的，松耦合的分布式服务。微服务允许将一个大型的应用分解为具有严格职责定义的鳊鱼管理的组件。微服务通过将大型代码分解为小型的精确定义的部分，帮助解决大型代码中传统的复杂问题。在思考微服务时，一个需要信奉的重要概念就是：分解和分离应用程序的功能，使它们完全彼此独立。</p>
<blockquote>
<p>微服务架构具有以下特征<br>* 应用程序逻辑分解为具有明确定义来职责范围的细粒度组件，这些组件互相协调提供解决方案。 * 每个组件都有一个小的职责领域，并且完全独立部署。微服务应该对业务领域的单个部分负责。此外，一个微服务应该可以跨多个应用程序复用。 * 微服务通信基于一些基本的原则，并采用HTTP和JSON这样的轻量级通信协议，在服务消费者和服务提供者之间进行数据交换。 * 服务的底层采用什么技术实现并没有什么影响，因为应用程序始终使用技术中立的协议进行通信。这意味着构建在微服务之上的应用程序能够使用多种编程语言和技术进行构建。 * 微服务利用其小，独立和分布式的性质，使组织拥有明确责任领域的小型开发团队。</p>
</blockquote>
<h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><p>在构建基于云的应用时，微服务已经成为更常见的架构模式之一，因此Spring社区为开发者提供了SpringBoot和SpringCloud，SpringCloud框架使实施和部署微服务到私有云或公有云变得更加简单。SpringCloud在一个公共框架之下封装了多个流行的云管理微服务框架，并且让这些技术的使用和部署像为代码添加注释一个简便。 SpringBoot是对Spring框架理念重新思考的结果，提供了一个基于Java的，面向<strong>REST</strong>的微服务框架，只需要一些简单的注解，Java开发者就能够快速构建一个可打包部署的REST微服务。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>Crontab表达式</title>
    <url>/2019/03/28/article144/</url>
    <content><![CDATA[<h1 id="Crontab表达式"><a href="#Crontab表达式" class="headerlink" title="Crontab表达式"></a>Crontab表达式</h1><h2 id="linux下定时执行任务的方法"><a href="#linux下定时执行任务的方法" class="headerlink" title="linux下定时执行任务的方法"></a>linux下定时执行任务的方法</h2><p>在LINUX中你应该先输入crontab -e，然后就会有个vi编辑界面，再输入0 3 * * 1 &#x2F;clearigame2内容到里面 :wq 保存退出。 在LINUX中，周期执行的任务一般由cron这个守护进程来处理[ps -efgrep cron]。cron读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。 cron的配置文件称为“crontab”，是“cron table”的简写。 <strong>一、cron在3个地方查找配置文件：</strong> 1、&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名，比如tom建的crontab任务对应的文件就是&#x2F;var&#x2F;spool&#x2F;cron&#x2F;tom。 一般一个用户最多只有一个crontab文件。 <strong>二、&#x2F;etc&#x2F;crontab 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab。</strong> <strong>三、&#x2F;etc&#x2F;cron.d&#x2F; 这个目录用来存放任何要执行的crontab文件或脚本。</strong> <strong>四、权限</strong> crontab权限问题到&#x2F;var&#x2F;adm&#x2F;cron&#x2F;下一看，文件cron.allow和cron.deny是否存在 用法如下： 1、如果两个文件都不存在，则只有root用户才能使用crontab命令。 2、如果cron.allow存在但cron.deny不存在，则只有列在cron.allow文件里的用户才能使用crontab命令，如果root用户也不在里面，则root用户也不能使用crontab。 3、如果cron.allow不存在, cron.deny存在，则只有列在cron.deny文件里面的用户不能使用crontab命令，其它用户都能使用。 4、如果两个文件都存在，则列在cron.allow文件中而且没有列在cron.deny中的用户可以使用crontab，如果两个文件中都有同一个用户， 以cron.allow文件里面是否有该用户为准，如果cron.allow中有该用户，则可以使用crontab命令。 在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。 每个域之间使用空格或者制表符分隔。格式如下： minute hour day-of-month month-of-year day-of-week commands 合法值 00-59 00-23 01-31 01-12 0-6 (0 is sunday) commands（代表要执行的脚本） 除了数字还有几个个特殊的符号就是”_”、”&#x2F;“和”-“、”,”，_代表所有的取值范围内的数字，”&#x2F;“代表每的意思,”&#x2F;5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。 <strong>基本格式 :</strong> *****command 分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用*或者 *&#x2F;1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 <strong>crontab文件的一些例子：</strong> ＃每晚的21:30重启apache。 30 21 * * * &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;lighttpd restart ＃每月1、10、22日 45 4 1,10,22 * * &#x2F;usr&#x2F;local&#x2F;etc&#x2F;rc.d&#x2F;lighttpd restart ＃每天早上6点10分 10 6 * * * date ＃每两个小时 0 *&#x2F;2 * * * date ＃晚上11点到早上8点之间每两个小时，早上8点 0 23-7&#x2F;2，8 * * * date ＃每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 0 11 4 * mon-wed date ＃1月份日早上4点 0 4 1 jan * date 很多时候，我们计划任务需要精确到秒来执行，根据以下方法，可以很容易地以秒执行任务。 以下方法将 <strong>每10秒执行一次</strong> ，意思是把一分钟分6次</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># crontab -e</span><br><span class="line">* * * * * /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">* * * * * sleep 10; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">* * * * * sleep 20; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">* * * * * sleep 30; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">* * * * * sleep 40; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">* * * * * sleep 50; /bin/date &gt;&gt;/tmp/date.txt</span><br></pre></td></tr></table></figure></div>

<p>注意如果用如果命令用到%的话需要用\转义</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># backup mysql</span><br><span class="line">00 01 * * * mysqldump -u root --password=passwd-d mustang &gt; /root/backups/mustang_$(date +\%Y\%m\%d_\%H\%M\%S).sql</span><br><span class="line">01 01 * * * mysqldump -u root --password=passwd-t mustang &gt; /root/backups/mustang-table_$(date +\%Y\%m\%d_\%H\%M\%S).sql</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Technique</category>
      </categories>
  </entry>
  <entry>
    <title>成品示例代码</title>
    <url>/2019/04/08/article146/</url>
    <content><![CDATA[<h1 id="成品示例代码"><a href="#成品示例代码" class="headerlink" title="成品示例代码"></a>成品示例代码</h1><p><a class="link"   href="https://github.com/rainweb521/download-code.git" >GitHub地址链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <a class="link"   href="https://gitee.com/rainweb/download-code" >gitee地址链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 本书代码均在Eclipse SDK Version: 3.6.0 或者是MyEclipse Enterprise Workbench Version: 7.5调试通过，将软件JDK安装在D:\Program Files\Java ，将Eclipse软件安装在D:\Program Files\eclipse，将MyEclipse 软件安装在D:\Program Files\MyEclipse。将SQL软件安装在D:\Program Files\SQL,然后建立SQL用户名是sa, SQL密码是sa,导入Hibernate3包；在D盘根目录建立java目录。</p>
<h2 id="有问题的可以加入这个群：226520254，大家一起交流"><a href="#有问题的可以加入这个群：226520254，大家一起交流" class="headerlink" title="# 有问题的可以加入这个群：226520254，大家一起交流"></a># 有问题的可以加入这个群：226520254，大家一起交流</h2><p>01-BBS论坛 将代码放在java目录下，然后将sql.sql导入SQL，管理员为admin，密码admin，主程序 \bbs\WebRoot\index.jsp。</p>
<hr>
<p>02-EQ聊天系统 将代码放在java目录下，主程序02\EQ\bin\ServerMainClass。基于Hibernate框架的应用，需要导入 Hibernate开发包。</p>
<hr>
<p>03-超市管理系统 将代码放在java目录下，然后将db_JXC_Data.MDF和db_JXC_Log.LDF导入SQL，管理员为admin，密码为admin， 主程序JXCManager\bin\com\lzw\login\Login</p>
<hr>
<p>04-电子商城系统 将代码放在java目录下，然后将db_shop_Data.MDF和db_shop_Log.LDF导入SQL，管理员为admin，密码为admin ，主程序XinXiangShop\WebRoot\index.jsp。基于Hibernate框架的应用，需要导入Hibernate开发包。</p>
<hr>
<p>05-酒店管理系统 将代码放在java目录下，然后将04\Database文件夹中的db_DrinkeryManage_Data.MDF和 db_DrinkeryManage_Log.LDF导入SQL，管理员为admin，密码为admin，主程序DrinkeryManage\classes\com\mwq\DrinkeryManage。</p>
<hr>
<p>06-企业快信系统 将代码放在java目录下，然后将jspSmartUpload、Java Mail拷贝到源程序路径下的lib文件夹中，主程序ExpressLetter\com\mwq\ExpressLetter。</p>
<hr>
<p>07-企业门户新闻网 将代码放在java目录下，然后将db_net_Data.MDF和db_net_Log.LDF导入SQL，管理员为admin，密码为admin， 主程序net\WebRoot\index.jsp。</p>
<hr>
<p>08-企业人事管理系统 将代码放在java目录下，然后将03\Database文件夹中的personnel_manage.dmp导入Oracle，管理员为admin， 密码为admin，主程序PersonnelManage\classes\com\mwq\PersonnelManage。基于Hibernate框架的应用， 需要导入Hibernate开发包。</p>
<hr>
<p>09-手机网络游戏 将代码放在java目录下，然后将sql.sql导入SQL，管理员为admin，密码admin，服务器端主程序10 \xiangqi\com\lzw\Game;客户端主程序xiangqi\com\lzw\GameClient</p>
<hr>
<p>10-图书馆管理系统 将代码放在java目录下，然后将05\Database文件夹中的db_library_Data.MDF和db_library_Log.LDF导入SQL ，主程序libraryManager\bin\com\wsy\Library。</p>
<hr>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>如何不让自己堕落</title>
    <url>/2019/04/27/article147/</url>
    <content><![CDATA[<p><strong>如何不让自己堕落</strong></p>
<p><strong>1.沉溺于「轻易获得高成就感」的事情:</strong></p>
<p>有意无意地寻求用很小付出获得很大「回报」的偏方，哪怕回报是虚拟的。这种行为会提升自己的「兴奋阈值」，让人越来越不容易拥有成就感，从而越来越依赖虚拟的成就感，陷入恶性循环。症状轻的:沉溺游戏(在虚拟世界中加快时间流逝的速度，使得「成功」来得更快)、种马小说(意淫人能轻易获得想要的东西) ;症状重甚至犯法的:赌博(轻易获得「金钱」)、吸毒(轻易获得「爽」的感觉)等。</p>
<p><strong>2.只接收「低信息密度」的信息源:</strong></p>
<p>只愿意接收信息密度低的信息(如无需太多动脑的视频、图片，以及深度较浅的娱乐、八卦、体育新闻等)，不愿意接收信息密度高、需要思考后才能吸收的信息(如课程、知识框架、分析报告等)。由于真正有价值、能让人进步的信息大多是需要思考和消化的，所以如果完全隔离了这部分内容，基本也就隔离了进步的可能。</p>
<p><strong>3.习惯用「错位成就感」麻痹自己:</strong></p>
<p>有两类:①习惯于拿自己擅长的东西和别人不擅长的东西比较，从来获得「比别人强」的错觉(如:和运动员比学习成绩，和学霸比体育) ;②习惯于拿别人做事情A的时间来做事情B,来假装自己在事情B上做得好(如:「炫耀」 自己在节假日做了比别人更多的工作，但也仅仅是在节假日才能如此)。</p>
<p><strong>4.过度依赖「既有可行路径」:</strong></p>
<p>在工作中，习惯了一件事情的流程后再也没想过如何改进，只会机械地重复，然后骗自己很充实。没有改进，便也没有剔除糟粕的意识，于是需要重复的东西越来越多，消耗时间也越来越长，到最后，看上去每天做了很多事情，但其实不仅一点进步都没有，还挤占了进步的空间。</p>
<p><strong>5.封闭「强化学习」的通道:</strong></p>
<p>在学习或接受信息中，只愿意执行最简单的第一步，却不愿意执行接下来更为复杂的巩固和应用流程，只听不说、只看不写、只学不练，还麻痹自己说学到了很多东西，而实际上，这种「浅层」的学习遗忘极快，有时还不如不学。比如，天天学英语，却从不写英语文章;再比如，天天花大量时间刷知乎，却从不写答案、写总结。</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>Oracle统计多种数据并以Map格式返回数据</title>
    <url>/2019/05/23/article150/</url>
    <content><![CDATA[<h1 id="Oracle统计多种数据并以Map格式返回数据"><a href="#Oracle统计多种数据并以Map格式返回数据" class="headerlink" title="Oracle统计多种数据并以Map格式返回数据"></a>Oracle统计多种数据并以Map格式返回数据</h1><h3 id="在开发中遇到一个问题，需要查询并统计出多个字段在不同条件下的数据，以前可能只是单纯的返回某几个字段数据，在经过一番查找和自己的调试过后总结出来以下的办法，代码都是经过测试并运行的，应该没有问题，其中count就是对数据进行计数，也可以使用sum来对数据进行累加。case-when-后面是判断条件，可以使用and来继续连接其他条件，最后使用end结尾-，as-后面是返回map类型时的key。"><a href="#在开发中遇到一个问题，需要查询并统计出多个字段在不同条件下的数据，以前可能只是单纯的返回某几个字段数据，在经过一番查找和自己的调试过后总结出来以下的办法，代码都是经过测试并运行的，应该没有问题，其中count就是对数据进行计数，也可以使用sum来对数据进行累加。case-when-后面是判断条件，可以使用and来继续连接其他条件，最后使用end结尾-，as-后面是返回map类型时的key。" class="headerlink" title="在开发中遇到一个问题，需要查询并统计出多个字段在不同条件下的数据，以前可能只是单纯的返回某几个字段数据，在经过一番查找和自己的调试过后总结出来以下的办法，代码都是经过测试并运行的，应该没有问题，其中count就是对数据进行计数，也可以使用sum来对数据进行累加。case when 后面是判断条件，可以使用and来继续连接其他条件，最后使用end结尾 ，as 后面是返回map类型时的key。"></a>在开发中遇到一个问题，需要查询并统计出多个字段在不同条件下的数据，以前可能只是单纯的返回某几个字段数据，在经过一番查找和自己的调试过后总结出来以下的办法，代码都是经过测试并运行的，应该没有问题，其中count就是对数据进行计数，也可以使用sum来对数据进行累加。case when 后面是判断条件，可以使用and来继续连接其他条件，最后使用end结尾 ，as 后面是返回map类型时的key。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">       count(case when t.ZDMC_1 in (&#x27;张三&#x27;) and t.DS_0 in (&#x27;北京&#x27;) then t.ZDMC_1 end ) as &quot;wh_dq&quot; ,</span><br><span class="line">       count(case when t.ZDMC_1 in (&#x27;张三&#x27;) and t.DS_0 in (&#x27;北京&#x27;) then t.ZDMC_1  end ) as &quot;wh_dqhj&quot;,</span><br><span class="line">       count(case when t.ZDMC_1 in (&#x27;张三&#x27;) and t.DS_0 in (&#x27;北京&#x27;) then t.ZDMC_1   end ) as &quot;wh_sd&quot;</span><br><span class="line"></span><br><span class="line">from DP t</span><br><span class="line">where t.UPDATE_TIME like &#x27;%2019-05%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="当使用sum的时候需要注意，确保你累加的字段是数字，不强求是int类型，如果这个字段没有值，则不会返回这个map，要记得会不返回这个map，而count即使没有值也会返回一个value为0的map，所以在下面我加入了一个默认值0，但0需要用单引号扩起来，这样统计的数据都会返回。"><a href="#当使用sum的时候需要注意，确保你累加的字段是数字，不强求是int类型，如果这个字段没有值，则不会返回这个map，要记得会不返回这个map，而count即使没有值也会返回一个value为0的map，所以在下面我加入了一个默认值0，但0需要用单引号扩起来，这样统计的数据都会返回。" class="headerlink" title="当使用sum的时候需要注意，确保你累加的字段是数字，不强求是int类型，如果这个字段没有值，则不会返回这个map，要记得会不返回这个map，而count即使没有值也会返回一个value为0的map，所以在下面我加入了一个默认值0，但0需要用单引号扩起来，这样统计的数据都会返回。"></a>当使用sum的时候需要注意，确保你累加的字段是数字，不强求是int类型，如果这个字段没有值，则不会返回这个map，要记得会不返回这个map，而count即使没有值也会返回一个value为0的map，所以在下面我加入了一个默认值0，但0需要用单引号扩起来，这样统计的数据都会返回。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">       sum(case when t.ITEM1_2 in (&#x27;张三&#x27;) and t.DS_1 in (&#x27;北京&#x27;) then t.GROUP_0 else &#x27;0&#x27; end ) as &quot;wh_dq&quot; ,</span><br><span class="line">       sum(case when t.ITEM1_2 in (&#x27;张三&#x27;) and t.DS_1 in (&#x27;北京&#x27;) then t.GROUP_0 else &#x27;0&#x27;  end ) as &quot;wh_dqhj&quot;,</span><br><span class="line">       sum(case when t.ITEM1_2 in (&#x27;张三&#x27;) and t.DS_1 in (&#x27;北京&#x27;) then t.GROUP_0 else &#x27;0&#x27;  end ) as &quot;wh_sd&quot;</span><br><span class="line"></span><br><span class="line">from DP t</span><br><span class="line">where t.UPDATE_TIME like &#x27;%2019-05%&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>16进制RGB颜色查询对照表</title>
    <url>/2017/01/24/article31/</url>
    <content><![CDATA[<p> </p>
<p> <strong>RGB</strong>颜色对照表</p>
<p> </p>
<p>#FFFFFF</p>
<p>#FFFFF0</p>
<p>#FFFFE0</p>
<p>#FFFF00</p>
<p>#FFFAFA</p>
<p>#FFFAF0</p>
<p>#FFFACD</p>
<p>#FFF8DC</p>
<p>#FFF68F</p>
<p>#FFF5EE</p>
<p>#FFF0F5</p>
<p>#FFEFDB</p>
<p>#FFEFD5</p>
<p>#FFEC8B</p>
<p>#FFEBCD</p>
<p>#FFE7BA</p>
<p>#FFE4E1</p>
<p>#FFE4C4</p>
<p>#FFE4B5</p>
<p>#FFE1FF</p>
<p>#FFDEAD</p>
<p>#FFDAB9</p>
<p>#FFD700</p>
<p>#FFD39B</p>
<p>#FFC1C1</p>
<p>#FFC125</p>
<p>#FFC0CB</p>
<p>#FFBBFF</p>
<p>#FFB90F</p>
<p>#FFB6C1</p>
<p>#FFB5C5</p>
<p>#FFAEB9</p>
<p>#FFA54F</p>
<p>#FFA500</p>
<p>#FFA07A</p>
<p>#FF8C69</p>
<p>#FF8C00</p>
<p>#FF83FA</p>
<p>#FF82AB</p>
<p>#FF8247</p>
<p>#FF7F50</p>
<p>#FF7F24</p>
<p>#FF7F00</p>
<p>#FF7256</p>
<p>#FF6EB4</p>
<p>#FF6A6A</p>
<p>#FF69B4</p>
<p>#FF6347</p>
<p>#FF4500</p>
<p>#FF4040</p>
<p>#FF3E96</p>
<p>#FF34B3</p>
<p>#FF3030</p>
<p>#FF1493</p>
<p>#FF00FF</p>
<p>#FF0000</p>
<p>#FDF5E6</p>
<p>#FCFCFC</p>
<p>#FAFAFA</p>
<p>#FAFAD2</p>
<p>#FAF0E6</p>
<p>#FAEBD7</p>
<p>#FA8072</p>
<p>#F8F8FF</p>
<p>#F7F7F7</p>
<p>#F5FFFA</p>
<p>#F5F5F5</p>
<p>#F5F5DC</p>
<p>#F5DEB3</p>
<p>#F4F4F4</p>
<p>#F4A460</p>
<p>#F2F2F2</p>
<p>#F0FFFF</p>
<p>#F0FFF0</p>
<p>#F0F8FF</p>
<p>#F0F0F0</p>
<p>#F0E68C</p>
<p>#F08080</p>
<p>#EEEEE0</p>
<p>#EEEED1</p>
<p>#EEEE00</p>
<p>#EEE9E9</p>
<p>#EEE9BF</p>
<p>#EEE8CD</p>
<p>#EEE8AA</p>
<p>#EEE685</p>
<p>#EEE5DE</p>
<p>#EEE0E5</p>
<p>#EEDFCC</p>
<p>#EEDC82</p>
<p>#EED8AE</p>
<p>#EED5D2</p>
<p>#EED5B7</p>
<p>#EED2EE</p>
<p>#EECFA1</p>
<p>#EECBAD</p>
<p>#EEC900</p>
<p>#EEC591</p>
<p>#EEB4B4</p>
<p>#EEB422</p>
<p>#EEAEEE</p>
<p>#EEAD0E</p>
<p>#EEA9B8</p>
<p>#EEA2AD</p>
<p>#EE9A49</p>
<p>#EE9A00</p>
<p>#EE9572</p>
<p>#EE82EE</p>
<p>#EE8262</p>
<p>#EE7AE9</p>
<p>#EE799F</p>
<p>#EE7942</p>
<p>#EE7621</p>
<p>#EE7600</p>
<p>#EE6AA7</p>
<p>#EE6A50</p>
<p>#EE6363</p>
<p>#EE5C42</p>
<p>#EE4000</p>
<p>#EE3B3B</p>
<p>#EE3A8C</p>
<p>#EE30A7</p>
<p>#EE2C2C</p>
<p>#EE1289</p>
<p>#EE00EE</p>
<p>#EE0000</p>
<p>#EDEDED</p>
<p>#EBEBEB</p>
<p>#EAEAEA</p>
<p>#E9967A</p>
<p>#E8E8E8</p>
<p>#E6E6FA</p>
<p>#E5E5E5</p>
<p>#E3E3E3</p>
<p>#E0FFFF</p>
<p>#E0EEEE</p>
<p>#E0EEE0</p>
<p>#E0E0E0</p>
<p>#E066FF</p>
<p>#DEDEDE</p>
<p>#DEB887</p>
<p>#DDA0DD</p>
<p>#DCDCDC</p>
<p>#DC143C</p>
<p>#DBDBDB</p>
<p>#DB7093</p>
<p>#DAA520</p>
<p>#DA70D6</p>
<p>#D9D9D9</p>
<p>#D8BFD8</p>
<p>#D6D6D6</p>
<p>#D4D4D4</p>
<p>#D3D3D3</p>
<p>#D2B48C</p>
<p>#D2691E</p>
<p>#D1EEEE</p>
<p>#D1D1D1</p>
<p>#D15FEE</p>
<p>#D02090</p>
<p>#CFCFCF</p>
<p>#CDCDC1</p>
<p>#CDCDB4</p>
<p>#CDCD00</p>
<p>#CDC9C9</p>
<p>#CDC9A5</p>
<p>#CDC8B1</p>
<p>#CDC673</p>
<p>#CDC5BF</p>
<p>#CDC1C5</p>
<p>#CDC0B0</p>
<p>#CDBE70</p>
<p>#CDBA96</p>
<p>#CDB7B5</p>
<p>#CDB79E</p>
<p>#CDB5CD</p>
<p>#CDB38B</p>
<p>#CDAF95</p>
<p>#CDAD00</p>
<p>#CDAA7D</p>
<p>#CD9B9B</p>
<p>#CD9B1D</p>
<p>#CD96CD</p>
<p>#CD950C</p>
<p>#CD919E</p>
<p>#CD8C95</p>
<p>#CD853F</p>
<p>#CD8500</p>
<p>#CD8162</p>
<p>#CD7054</p>
<p>#CD69C9</p>
<p>#CD6889</p>
<p>#CD6839</p>
<p>#CD661D</p>
<p>#CD6600</p>
<p>#CD6090</p>
<p>#CD5C5C</p>
<p>#CD5B45</p>
<p>#CD5555</p>
<p>#CD4F39</p>
<p>#CD3700</p>
<p>#CD3333</p>
<p>#CD3278</p>
<p>#CD2990</p>
<p>#CD2626</p>
<p>#CD1076</p>
<p>#CD00CD</p>
<p>#CD0000</p>
<p>#CCCCCC</p>
<p>#CAFF70</p>
<p>#CAE1FF</p>
<p>#C9C9C9</p>
<p>#C7C7C7</p>
<p>#C71585</p>
<p>#C6E2FF</p>
<p>#C67171</p>
<p>#C5C1AA</p>
<p>#C4C4C4</p>
<p>#C2C2C2</p>
<p>#C1FFC1</p>
<p>#C1CDCD</p>
<p>#C1CDC1</p>
<p>#C1C1C1</p>
<p>#C0FF3E</p>
<p>#BFEFFF</p>
<p>#BFBFBF</p>
<p>#BF3EFF</p>
<p>#BEBEBE</p>
<p>#BDBDBD</p>
<p>#BDB76B</p>
<p>#BCEE68</p>
<p>#BCD2EE</p>
<p>#BC8F8F</p>
<p>#BBFFFF</p>
<p>#BABABA</p>
<p>#BA55D3</p>
<p>#B9D3EE</p>
<p>#B8B8B8</p>
<p>#B8860B</p>
<p>#B7B7B7</p>
<p>#B5B5B5</p>
<p>#B4EEB4</p>
<p>#B4CDCD</p>
<p>#B452CD</p>
<p>#B3EE3A</p>
<p>#B3B3B3</p>
<p>#B2DFEE</p>
<p>#B23AEE</p>
<p>#B22222</p>
<p>#B0E2FF</p>
<p>#B0E0E6</p>
<p>#B0C4DE</p>
<p>#B0B0B0</p>
<p>#B03060</p>
<p>#AEEEEE</p>
<p>#ADFF2F</p>
<p>#ADD8E6</p>
<p>#ADADAD</p>
<p>#ABABAB</p>
<p>#AB82FF</p>
<p>#AAAAAA</p>
<p>#A9A9A9</p>
<p>#A8A8A8</p>
<p>#A6A6A6</p>
<p>#A52A2A</p>
<p>#A4D3EE</p>
<p>#A3A3A3</p>
<p>#A2CD5A</p>
<p>#A2B5CD</p>
<p>#A1A1A1</p>
<p>#A0522D</p>
<p>#A020F0</p>
<p>#9FB6CD</p>
<p>#9F79EE</p>
<p>#9E9E9E</p>
<p>#9C9C9C</p>
<p>#9BCD9B</p>
<p>#9B30FF</p>
<p>#9AFF9A</p>
<p>#9ACD32</p>
<p>#9AC0CD</p>
<p>#9A32CD</p>
<p>#999999</p>
<p>#9932CC</p>
<p>#98FB98</p>
<p>#98F5FF</p>
<p>#97FFFF</p>
<p>#96CDCD</p>
<p>#969696</p>
<p>#949494</p>
<p>#9400D3</p>
<p>#9370DB</p>
<p>#919191</p>
<p>#912CEE</p>
<p>#90EE90</p>
<p>#8FBC8F</p>
<p>#8F8F8F</p>
<p>#8EE5EE</p>
<p>#8E8E8E</p>
<p>#8E8E38</p>
<p>#8E388E</p>
<p>#8DEEEE</p>
<p>#8DB6CD</p>
<p>#8C8C8C</p>
<p>#8B8B83</p>
<p>#8B8B7A</p>
<p>#8B8B00</p>
<p>#8B8989</p>
<p>#8B8970</p>
<p>#8B8878</p>
<p>#8B8682</p>
<p>#8B864E</p>
<p>#8B8386</p>
<p>#8B8378</p>
<p>#8B814C</p>
<p>#8B7E66</p>
<p>#8B7D7B</p>
<p>#8B7D6B</p>
<p>#8B7B8B</p>
<p>#8B795E</p>
<p>#8B7765</p>
<p>#8B7500</p>
<p>#8B7355</p>
<p>#8B6969</p>
<p>#8B6914</p>
<p>#8B668B</p>
<p>#8B6508</p>
<p>#8B636C</p>
<p>#8B5F65</p>
<p>#8B5A2B</p>
<p>#8B5A00</p>
<p>#8B5742</p>
<p>#8B4C39</p>
<p>#8B4789</p>
<p>#8B475D</p>
<p>#8B4726</p>
<p>#8B4513</p>
<p>#8B4500</p>
<p>#8B3E2F</p>
<p>#8B3A62</p>
<p>#8B3A3A</p>
<p>#8B3626</p>
<p>#8B2500</p>
<p>#8B2323</p>
<p>#8B2252</p>
<p>#8B1C62</p>
<p>#8B1A1A</p>
<p>#8B0A50</p>
<p>#8B008B</p>
<p>#8B0000</p>
<p>#8A8A8A</p>
<p>#8A2BE2</p>
<p>#8968CD</p>
<p>#87CEFF</p>
<p>#87CEFA</p>
<p>#87CEEB</p>
<p>#878787</p>
<p>#858585</p>
<p>#848484</p>
<p>#8470FF</p>
<p>#838B8B</p>
<p>#838B83</p>
<p>#836FFF</p>
<p>#828282</p>
<p>#7FFFD4</p>
<p>#7FFF00</p>
<p>#7F7F7F</p>
<p>#7EC0EE</p>
<p>#7D9EC0</p>
<p>#7D7D7D</p>
<p>#7D26CD</p>
<p>#7CFC00</p>
<p>#7CCD7C</p>
<p>#7B68EE</p>
<p>#7AC5CD</p>
<p>#7A8B8B</p>
<p>#7A7A7A</p>
<p>#7A67EE</p>
<p>#7A378B</p>
<p>#79CDCD</p>
<p>#787878</p>
<p>#778899</p>
<p>#76EEC6</p>
<p>#76EE00</p>
<p>#757575</p>
<p>#737373</p>
<p>#71C671</p>
<p>#7171C6</p>
<p>#708090</p>
<p>#707070</p>
<p>#6E8B3D</p>
<p>#6E7B8B</p>
<p>#6E6E6E</p>
<p>#6CA6CD</p>
<p>#6C7B8B</p>
<p>#6B8E23</p>
<p>#6B6B6B</p>
<p>#6A5ACD</p>
<p>#698B69</p>
<p>#698B22</p>
<p>#696969</p>
<p>#6959CD</p>
<p>#68838B</p>
<p>#68228B</p>
<p>#66CDAA</p>
<p>#66CD00</p>
<p>#668B8B</p>
<p>#666666</p>
<p>#6495ED</p>
<p>#63B8FF</p>
<p>#636363</p>
<p>#616161</p>
<p>#607B8B</p>
<p>#5F9EA0</p>
<p>#5E5E5E</p>
<p>#5D478B</p>
<p>#5CACEE</p>
<p>#5C5C5C</p>
<p>#5B5B5B</p>
<p>#595959</p>
<p>#575757</p>
<p>#556B2F</p>
<p>#555555</p>
<p>#551A8B</p>
<p>#54FF9F</p>
<p>#548B54</p>
<p>#545454</p>
<p>#53868B</p>
<p>#528B8B</p>
<p>#525252</p>
<p>#515151</p>
<p>#4F94CD</p>
<p>#4F4F4F</p>
<p>#4EEE94</p>
<p>#4D4D4D</p>
<p>#4B0082</p>
<p>#4A708B</p>
<p>#4A4A4A</p>
<p>#48D1CC</p>
<p>#4876FF</p>
<p>#483D8B</p>
<p>#474747</p>
<p>#473C8B</p>
<p>#4682B4</p>
<p>#458B74</p>
<p>#458B00</p>
<p>#454545</p>
<p>#43CD80</p>
<p>#436EEE</p>
<p>#424242</p>
<p>#4169E1</p>
<p>#40E0D0</p>
<p>#404040</p>
<p>#3D3D3D</p>
<p>#3CB371</p>
<p>#3B3B3B</p>
<p>#3A5FCD</p>
<p>#388E8E</p>
<p>#383838</p>
<p>#36648B</p>
<p>#363636</p>
<p>#333333</p>
<p>#32CD32</p>
<p>#303030</p>
<p>#2F4F4F</p>
<p>#2E8B57</p>
<p>#2E2E2E</p>
<p>#2B2B2B</p>
<p>#292929</p>
<p>#282828</p>
<p>#27408B</p>
<p>#262626</p>
<p>#242424</p>
<p>#228B22</p>
<p>#218868</p>
<p>#212121</p>
<p>#20B2AA</p>
<p>#1F1F1F</p>
<p>#1E90FF</p>
<p>#1E1E1E</p>
<p>#1C86EE</p>
<p>#1C1C1C</p>
<p>#1A1A1A</p>
<p>#191970</p>
<p>#1874CD</p>
<p>#171717</p>
<p>#141414</p>
<p>#121212</p>
<p>#104E8B</p>
<p>#0F0F0F</p>
<p>#0D0D0D</p>
<p>#0A0A0A</p>
<p>#080808</p>
<p>#050505</p>
<p>#030303</p>
<p>#00FFFF</p>
<p>#00FF7F</p>
<p>#00FF00</p>
<p>#00FA9A</p>
<p>#00F5FF</p>
<p>#00EEEE</p>
<p>#00EE76</p>
<p>#00EE00</p>
<p>#00E5EE</p>
<p>#00CED1</p>
<p>#00CDCD</p>
<p>#00CD66</p>
<p>#00CD00</p>
<p>#00C5CD</p>
<p>#00BFFF</p>
<p>#00B2EE</p>
<p>#009ACD</p>
<p>#008B8B</p>
<p>#008B45</p>
<p>#008B00</p>
<p>#00868B</p>
<p>#00688B</p>
<p>#006400</p>
<p>#0000FF</p>
<p>#0000EE</p>
<p>#0000CD</p>
<p>#0000AA</p>
<p>#00008B</p>
<p>#000080</p>
<p>#000000</p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
      </tags>
  </entry>
  <entry>
    <title>博客网站开发的总结</title>
    <url>/2017/03/22/article68/</url>
    <content><![CDATA[<p>2017-03-22 15:49:04 星期三</p>
<h3 id="用ThinkPHP写了挺长时间的blog网站有些烂尾了，后台的整个模板还是很好的，所以也写的下去，但前台的模板没有找好，本来就有些问题，乱七八糟的改来改去直接就炸了，删了重新找了几个也是不太符合要求，直到现在后台都完善的差不多了，前台的模板还没找好，写了这么久还不打算放弃，后台是编写最麻烦，能写完还是比较有收获的。"><a href="#用ThinkPHP写了挺长时间的blog网站有些烂尾了，后台的整个模板还是很好的，所以也写的下去，但前台的模板没有找好，本来就有些问题，乱七八糟的改来改去直接就炸了，删了重新找了几个也是不太符合要求，直到现在后台都完善的差不多了，前台的模板还没找好，写了这么久还不打算放弃，后台是编写最麻烦，能写完还是比较有收获的。" class="headerlink" title="用ThinkPHP写了挺长时间的blog网站有些烂尾了，后台的整个模板还是很好的，所以也写的下去，但前台的模板没有找好，本来就有些问题，乱七八糟的改来改去直接就炸了，删了重新找了几个也是不太符合要求，直到现在后台都完善的差不多了，前台的模板还没找好，写了这么久还不打算放弃，后台是编写最麻烦，能写完还是比较有收获的。"></a>用ThinkPHP写了挺长时间的blog网站有些烂尾了，后台的整个模板还是很好的，所以也写的下去，但前台的模板没有找好，本来就有些问题，乱七八糟的改来改去直接就炸了，删了重新找了几个也是不太符合要求，直到现在后台都完善的差不多了，前台的模板还没找好，写了这么久还不打算放弃，后台是编写最麻烦，能写完还是比较有收获的。</h3><h3 id="总结了这次网站失败的原因："><a href="#总结了这次网站失败的原因：" class="headerlink" title="总结了这次网站失败的原因："></a>总结了这次网站失败的原因：</h3><ol>
<li>没有按照正常的模式，规则去编写</li>
<li>数据库是一边写一边设计，导致好多表的结构乱七八糟的</li>
<li>自己既然不擅长做前端，就应该提前把前台和后台的模板找好，设计好，而不是一边写代码，还要一边设计页面</li>
<li>没有写结构图，整个项目没有什么概念，想怎么写就怎么写</li>
<li>整个网站用的时间太长，没有规划好哪一块需要用多长时间，当然也是前面没有做结构的错误</li>
</ol>
<h3 id="以后要注意的："><a href="#以后要注意的：" class="headerlink" title="以后要注意的："></a>以后要注意的：</h3><ol>
<li>再做网站时要对整个需求调查好了</li>
<li>使用结构图做出整体的分析</li>
<li>做好数据库的设计</li>
<li>查找相关的模板</li>
<li>把文件名和变量名规定好了</li>
<li>写公用的函数和操作</li>
<li>最后编写具体的代码</li>
</ol>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>一个月未更的想法</title>
    <url>/2017/04/19/article71/</url>
    <content><![CDATA[<h2 id="一个月未更的想法"><a href="#一个月未更的想法" class="headerlink" title="一个月未更的想法"></a>一个月未更的想法</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/04/timg2.jpg"
                     
                ></p>
<h3 id="昨天从青岛实习回来看了一下博客，发现最近的一篇是3-22的，差不多一个月没写。如果不是网易蜂巢提示我服务器已欠费的话，我可能连博客都忘了，这个月确实事情很多。"><a href="#昨天从青岛实习回来看了一下博客，发现最近的一篇是3-22的，差不多一个月没写。如果不是网易蜂巢提示我服务器已欠费的话，我可能连博客都忘了，这个月确实事情很多。" class="headerlink" title="昨天从青岛实习回来看了一下博客，发现最近的一篇是3-22的，差不多一个月没写。如果不是网易蜂巢提示我服务器已欠费的话，我可能连博客都忘了，这个月确实事情很多。"></a>昨天从青岛实习回来看了一下博客，发现最近的一篇是3-22的，差不多一个月没写。如果不是网易蜂巢提示我服务器已欠费的话，我可能连博客都忘了，这个月确实事情很多。</h3><h5 id="月初的时候电脑出了问题，不知怎么就进不去了，只好重装系统，但又遇到各种问题和bug，弄了两天系统，因为我电脑里的软件太多，不敢直接干掉原来的系统重装，但后来发现越弄越乱，最后选择全干掉，直接装win10。后果就是我又花了好几天的时间整理以前的软件和环境，简直麻烦的不要不要的，这让我感觉到备份的重要性，win10自带的备份功能简直垃圾，什么用都没有，还不如自己做一个ghost。直到现在我也没有把电脑环境完全恢复了，只能用到什么再装吧。"><a href="#月初的时候电脑出了问题，不知怎么就进不去了，只好重装系统，但又遇到各种问题和bug，弄了两天系统，因为我电脑里的软件太多，不敢直接干掉原来的系统重装，但后来发现越弄越乱，最后选择全干掉，直接装win10。后果就是我又花了好几天的时间整理以前的软件和环境，简直麻烦的不要不要的，这让我感觉到备份的重要性，win10自带的备份功能简直垃圾，什么用都没有，还不如自己做一个ghost。直到现在我也没有把电脑环境完全恢复了，只能用到什么再装吧。" class="headerlink" title="月初的时候电脑出了问题，不知怎么就进不去了，只好重装系统，但又遇到各种问题和bug，弄了两天系统，因为我电脑里的软件太多，不敢直接干掉原来的系统重装，但后来发现越弄越乱，最后选择全干掉，直接装win10。后果就是我又花了好几天的时间整理以前的软件和环境，简直麻烦的不要不要的，这让我感觉到备份的重要性，win10自带的备份功能简直垃圾，什么用都没有，还不如自己做一个ghost。直到现在我也没有把电脑环境完全恢复了，只能用到什么再装吧。"></a>月初的时候电脑出了问题，不知怎么就进不去了，只好重装系统，但又遇到各种问题和bug，弄了两天系统，因为我电脑里的软件太多，不敢直接干掉原来的系统重装，但后来发现越弄越乱，最后选择全干掉，直接装win10。后果就是我又花了好几天的时间整理以前的软件和环境，简直麻烦的不要不要的，这让我感觉到备份的重要性，win10自带的备份功能简直垃圾，什么用都没有，还不如自己做一个ghost。直到现在我也没有把电脑环境完全恢复了，只能用到什么再装吧。</h5><h5 id="还有7号的时候去青岛见习，满怀期待的一场旅行，坐了二十多个小时的火车，睡了一个吹整晚空调的上铺，最后被拉到青岛高新园区的郊区，渡过了漫长的七天。我很尴尬，在青岛这个海边城市，我们却吃不到海鲜，坑爹的企业和学校真是够够的，每天九点集合，要么是讲座，要么就是拓展训练，对于我这个不爱热闹的孩子，简直是煎熬，晚上住宿也是醉了，一个只提供床垫的八人间宿舍还每个人收150的住宿费，碰上青岛前几天很冷，自带枕头和被子，一群来自内蒙的孩子在接近南方的青岛被冻的不要不要的，我很难受，难受到想问候学校学院的每个领导家人。唯一出去玩的一天坐了没有座位的快艇，玩了免费的沙滩，吃了有米饭馒头的海鲜自助，看了海洋公园，最后收了380-。对于这次的见习，不想多吐槽什么，最后的收获就是我晒黑了，手机流量真的不够用，钱花了很多。"><a href="#还有7号的时候去青岛见习，满怀期待的一场旅行，坐了二十多个小时的火车，睡了一个吹整晚空调的上铺，最后被拉到青岛高新园区的郊区，渡过了漫长的七天。我很尴尬，在青岛这个海边城市，我们却吃不到海鲜，坑爹的企业和学校真是够够的，每天九点集合，要么是讲座，要么就是拓展训练，对于我这个不爱热闹的孩子，简直是煎熬，晚上住宿也是醉了，一个只提供床垫的八人间宿舍还每个人收150的住宿费，碰上青岛前几天很冷，自带枕头和被子，一群来自内蒙的孩子在接近南方的青岛被冻的不要不要的，我很难受，难受到想问候学校学院的每个领导家人。唯一出去玩的一天坐了没有座位的快艇，玩了免费的沙滩，吃了有米饭馒头的海鲜自助，看了海洋公园，最后收了380-。对于这次的见习，不想多吐槽什么，最后的收获就是我晒黑了，手机流量真的不够用，钱花了很多。" class="headerlink" title="还有7号的时候去青岛见习，满怀期待的一场旅行，坐了二十多个小时的火车，睡了一个吹整晚空调的上铺，最后被拉到青岛高新园区的郊区，渡过了漫长的七天。我很尴尬，在青岛这个海边城市，我们却吃不到海鲜，坑爹的企业和学校真是够够的，每天九点集合，要么是讲座，要么就是拓展训练，对于我这个不爱热闹的孩子，简直是煎熬，晚上住宿也是醉了，一个只提供床垫的八人间宿舍还每个人收150的住宿费，碰上青岛前几天很冷，自带枕头和被子，一群来自内蒙的孩子在接近南方的青岛被冻的不要不要的，我很难受，难受到想问候学校学院的每个领导家人。唯一出去玩的一天坐了没有座位的快艇，玩了免费的沙滩，吃了有米饭馒头的海鲜自助，看了海洋公园，最后收了380,。对于这次的见习，不想多吐槽什么，最后的收获就是我晒黑了，手机流量真的不够用，钱花了很多。"></a>还有7号的时候去青岛见习，满怀期待的一场旅行，坐了二十多个小时的火车，睡了一个吹整晚空调的上铺，最后被拉到青岛高新园区的郊区，渡过了漫长的七天。我很尴尬，在青岛这个海边城市，我们却吃不到海鲜，坑爹的企业和学校真是够够的，每天九点集合，要么是讲座，要么就是拓展训练，对于我这个不爱热闹的孩子，简直是煎熬，晚上住宿也是醉了，一个只提供床垫的八人间宿舍还每个人收150的住宿费，碰上青岛前几天很冷，自带枕头和被子，一群来自内蒙的孩子在接近南方的青岛被冻的不要不要的，我很难受，难受到想问候学校学院的每个领导家人。唯一出去玩的一天坐了没有座位的快艇，玩了免费的沙滩，吃了有米饭馒头的海鲜自助，看了海洋公园，最后收了380,。对于这次的见习，不想多吐槽什么，最后的收获就是我晒黑了，手机流量真的不够用，钱花了很多。</h5><h5 id="说了这么多，都是借口，更多的是我好像这个月真的没有学到什么东西，这是最重要的，定了些计划，但做的不多，每天看似很忙，但都在吃以前的老本，不学新的知识迟早会写不出东西，关于web安全是要一直学下去的，而且也不能只看书，得自己写到博客里。PHP的学习也要继续，深入理解PHP还要看，thinPHP和larver这两个框架还要继续学下去，昨天应老师的要求得参加大数据比赛，python也得继续用着，学了很多，但都很浅薄，会的很多，但都不精。"><a href="#说了这么多，都是借口，更多的是我好像这个月真的没有学到什么东西，这是最重要的，定了些计划，但做的不多，每天看似很忙，但都在吃以前的老本，不学新的知识迟早会写不出东西，关于web安全是要一直学下去的，而且也不能只看书，得自己写到博客里。PHP的学习也要继续，深入理解PHP还要看，thinPHP和larver这两个框架还要继续学下去，昨天应老师的要求得参加大数据比赛，python也得继续用着，学了很多，但都很浅薄，会的很多，但都不精。" class="headerlink" title="说了这么多，都是借口，更多的是我好像这个月真的没有学到什么东西，这是最重要的，定了些计划，但做的不多，每天看似很忙，但都在吃以前的老本，不学新的知识迟早会写不出东西，关于web安全是要一直学下去的，而且也不能只看书，得自己写到博客里。PHP的学习也要继续，深入理解PHP还要看，thinPHP和larver这两个框架还要继续学下去，昨天应老师的要求得参加大数据比赛，python也得继续用着，学了很多，但都很浅薄，会的很多，但都不精。"></a>说了这么多，都是借口，更多的是我好像这个月真的没有学到什么东西，这是最重要的，定了些计划，但做的不多，每天看似很忙，但都在吃以前的老本，不学新的知识迟早会写不出东西，关于web安全是要一直学下去的，而且也不能只看书，得自己写到博客里。PHP的学习也要继续，深入理解PHP还要看，thinPHP和larver这两个框架还要继续学下去，昨天应老师的要求得参加大数据比赛，python也得继续用着，学了很多，但都很浅薄，会的很多，但都不精。</h5><h3 id="我会继续写，更会继续学。"><a href="#我会继续写，更会继续学。" class="headerlink" title="我会继续写，更会继续学。"></a>我会继续写，更会继续学。</h3>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网站更新的说明</title>
    <url>/2017/04/29/article73/</url>
    <content><![CDATA[<p>关于网站更新的说明</p>
<h3 id="这几天对整个服务器进行了调整，我使用了腾讯云的学生主机，每个月8元，又换了一个-com的域名，以后会将www-rainweb-site解析到www-rain1024-com。"><a href="#这几天对整个服务器进行了调整，我使用了腾讯云的学生主机，每个月8元，又换了一个-com的域名，以后会将www-rainweb-site解析到www-rain1024-com。" class="headerlink" title="这几天对整个服务器进行了调整，我使用了腾讯云的学生主机，每个月8元，又换了一个.com的域名，以后会将www.rainweb.site解析到www.rain1024.com。"></a>这几天对整个服务器进行了调整，我使用了腾讯云的学生主机，每个月8元，又换了一个.com的域名，以后会将<a class="link"   href="http://www.rainweb.site解析到www.rain1024.com./" >www.rainweb.site解析到www.rain1024.com。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="腾讯云还是挺良心的，虽然是8元的主机，但是整个功能很齐全，真的是个云主机，而不是一个简单的容器，以前使用网易蜂巢的容器，不能关机，只是运行一个网站，连个Python的环境都没有，很垃圾，现在想想真的挺垃圾，一个月三十，1核640MB，走流量，而腾讯云的是1核1G，带宽是1M的，功能很齐全，挺推荐大家用的，而且阿里云也有这样的针对学生的活动。"><a href="#腾讯云还是挺良心的，虽然是8元的主机，但是整个功能很齐全，真的是个云主机，而不是一个简单的容器，以前使用网易蜂巢的容器，不能关机，只是运行一个网站，连个Python的环境都没有，很垃圾，现在想想真的挺垃圾，一个月三十，1核640MB，走流量，而腾讯云的是1核1G，带宽是1M的，功能很齐全，挺推荐大家用的，而且阿里云也有这样的针对学生的活动。" class="headerlink" title="腾讯云还是挺良心的，虽然是8元的主机，但是整个功能很齐全，真的是个云主机，而不是一个简单的容器，以前使用网易蜂巢的容器，不能关机，只是运行一个网站，连个Python的环境都没有，很垃圾，现在想想真的挺垃圾，一个月三十，1核640MB，走流量，而腾讯云的是1核1G，带宽是1M的，功能很齐全，挺推荐大家用的，而且阿里云也有这样的针对学生的活动。"></a>腾讯云还是挺良心的，虽然是8元的主机，但是整个功能很齐全，真的是个云主机，而不是一个简单的容器，以前使用网易蜂巢的容器，不能关机，只是运行一个网站，连个Python的环境都没有，很垃圾，现在想想真的挺垃圾，一个月三十，1核640MB，走流量，而腾讯云的是1核1G，带宽是1M的，功能很齐全，挺推荐大家用的，而且阿里云也有这样的针对学生的活动。</h3><h3 id="现在可以在网站里做更多的功能，包括Python的程序也可以放进去了，感觉自己网站里的功能很少，我想再开几个二级域名，放入更多的功能，并且再做个备案，就可以申请域名邮箱了。"><a href="#现在可以在网站里做更多的功能，包括Python的程序也可以放进去了，感觉自己网站里的功能很少，我想再开几个二级域名，放入更多的功能，并且再做个备案，就可以申请域名邮箱了。" class="headerlink" title="现在可以在网站里做更多的功能，包括Python的程序也可以放进去了，感觉自己网站里的功能很少，我想再开几个二级域名，放入更多的功能，并且再做个备案，就可以申请域名邮箱了。"></a>现在可以在网站里做更多的功能，包括Python的程序也可以放进去了，感觉自己网站里的功能很少，我想再开几个二级域名，放入更多的功能，并且再做个备案，就可以申请域名邮箱了。</h3>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress固定链接修改报错</title>
    <url>/2017/04/29/article74/</url>
    <content><![CDATA[<p>WordPress固定链接修改报错：Object not found的解决方法 WordPress默认使用带有问号和很多数字的URL作为固定链接，就像这个样纸：</p>
<p><a class="link"   href="http://frozensky.sinaapp.com/?p=123" >http://frozensky.sinaapp.com/?p=123 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这种毫无意义的URL对于SEO来说很不友好呀。</p>
<p>所以某雪要把它设置为文章名的形式：</p>
<p><a class="link"   href="http://frozensky.sinaapp.com/sample-post/" >http://frozensky.sinaapp.com/sample-post/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>但设置完成后，WordPress的所有文章都无法打开了，浏览器提示Object not found！</p>
<p>只好找BiliBili姐妹寻求解决办法…经过一番研究，33娘终于给出了解决方法！</p>
<p>原来WordPress的文章名形式的固定链接需要Apache服务器跳转组件的支持， 而默认安装的Apache并没有打开跳转组件的功能，So点击文章链接的时候就 无法找到对应的目标，出现了Object not found的错误！</p>
<p>这样只要打开Apache的跳转功能就好了：</p>
<p>1.打开Apache的配置文件</p>
<p>在某雪的CentOS中，Apache配置文件在&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</p>
<p>#vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</p>
<p>2.查找AllowOverride属性</p>
<p>&#x2F;AllowOverride</p>
<p>修改所有AllowOverride属性的值为ALL</p>
<p>3.重启Apache服务</p>
<p>#service httpd restart</p>
<p>再次打开文章<a class="link"   href="http://lib.csdn.net/base/softwaretest"  title="软件测试知识库">测试 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>固定链接，发现已经可以正常打开啦！</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>关于网站中天气预报API和翻译API的调用说明</title>
    <url>/2017/05/03/article80/</url>
    <content><![CDATA[<p>关于网站中天气预报API和翻译API的调用说明</p>
<h2 id="今天在网站右边的工具栏加入了天气预报功能和划词翻译还有有道词典的功能，所以以后博客里有不认识的单词可以直接选中以后翻译，或者有要查询的单词，也可以直接在词典里查询，这几个功能很好用，所以特别写了一篇文章来说明一下。"><a href="#今天在网站右边的工具栏加入了天气预报功能和划词翻译还有有道词典的功能，所以以后博客里有不认识的单词可以直接选中以后翻译，或者有要查询的单词，也可以直接在词典里查询，这几个功能很好用，所以特别写了一篇文章来说明一下。" class="headerlink" title="今天在网站右边的工具栏加入了天气预报功能和划词翻译还有有道词典的功能，所以以后博客里有不认识的单词可以直接选中以后翻译，或者有要查询的单词，也可以直接在词典里查询，这几个功能很好用，所以特别写了一篇文章来说明一下。"></a>今天在网站右边的工具栏加入了天气预报功能和划词翻译还有有道词典的功能，所以以后博客里有不认识的单词可以直接选中以后翻译，或者有要查询的单词，也可以直接在词典里查询，这几个功能很好用，所以特别写了一篇文章来说明一下。</h2><h2 id="下面是我网站里的效果图，天气预报和划词翻译的效果。"><a href="#下面是我网站里的效果图，天气预报和划词翻译的效果。" class="headerlink" title="下面是我网站里的效果图，天气预报和划词翻译的效果。"></a>下面是我网站里的效果图，天气预报和划词翻译的效果。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web23.jpg"
                     
                ></p>
<h2 id="天气预报的API还是很多的，我用的天气网的，还有2345的也可以，这是图片，想用的可以百度"><a href="#天气预报的API还是很多的，我用的天气网的，还有2345的也可以，这是图片，想用的可以百度" class="headerlink" title="天气预报的API还是很多的，我用的天气网的，还有2345的也可以，这是图片，想用的可以百度"></a>天气预报的API还是很多的，我用的天气网的，还有2345的也可以，这是图片，想用的可以百度</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web21.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web22.jpg"
                     
                ></p>
<h2 id="翻译功能我使用的有道翻译API，官网提供了三种功能，我只使用了划词翻译和词典翻译，下面是图片，要使用先得申请Key，再填写自己的网站"><a href="#翻译功能我使用的有道翻译API，官网提供了三种功能，我只使用了划词翻译和词典翻译，下面是图片，要使用先得申请Key，再填写自己的网站" class="headerlink" title="翻译功能我使用的有道翻译API，官网提供了三种功能，我只使用了划词翻译和词典翻译，下面是图片，要使用先得申请Key，再填写自己的网站"></a>翻译功能我使用的有道翻译API，官网提供了三种功能，我只使用了划词翻译和词典翻译，下面是图片，要使用先得申请Key，再填写自己的网站</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web19.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web20.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ThinkPHP集成扩展功能</title>
    <url>/2017/05/10/article81/</url>
    <content><![CDATA[<p>使用ThinkPHP集成扩展功能</p>
<h2 id="因为网站里提供了一些扩展的功能，而我以前都是一个功能新建一个文件夹，功能多了以后整个项目会很臃肿，所以使用ThinkPHP框架，把所有的扩展功能都集成进去，方便了项目的访问，目录也整洁了很多，设计到数据库的操作时，有框架的支持，会安全很多，防止一些攻击，扩展功能的访问地址已经添加到二级域名中，function-直接访问就可以，或者在博客主页上方菜单点击查看。"><a href="#因为网站里提供了一些扩展的功能，而我以前都是一个功能新建一个文件夹，功能多了以后整个项目会很臃肿，所以使用ThinkPHP框架，把所有的扩展功能都集成进去，方便了项目的访问，目录也整洁了很多，设计到数据库的操作时，有框架的支持，会安全很多，防止一些攻击，扩展功能的访问地址已经添加到二级域名中，function-直接访问就可以，或者在博客主页上方菜单点击查看。" class="headerlink" title="因为网站里提供了一些扩展的功能，而我以前都是一个功能新建一个文件夹，功能多了以后整个项目会很臃肿，所以使用ThinkPHP框架，把所有的扩展功能都集成进去，方便了项目的访问，目录也整洁了很多，设计到数据库的操作时，有框架的支持，会安全很多，防止一些攻击，扩展功能的访问地址已经添加到二级域名中，function,直接访问就可以，或者在博客主页上方菜单点击查看。"></a>因为网站里提供了一些扩展的功能，而我以前都是一个功能新建一个文件夹，功能多了以后整个项目会很臃肿，所以使用ThinkPHP框架，把所有的扩展功能都集成进去，方便了项目的访问，目录也整洁了很多，设计到数据库的操作时，有框架的支持，会安全很多，防止一些攻击，扩展功能的访问地址已经添加到二级域名中，<a class="link"   href="http://function.rain1024.com/" >function <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,直接访问就可以，或者在博客主页上方菜单点击查看。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php19.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>学钱帮项目</title>
    <url>/2017/06/17/article85/</url>
    <content><![CDATA[<h1 id="学钱帮项目"><a href="#学钱帮项目" class="headerlink" title="学钱帮项目"></a>学钱帮项目</h1><h2 id="最近没有更新博客，一直在忙互联网-比赛的项目，我们所做的项目叫学钱帮，-“学钱帮”是基于轻量级的ThinkPHP框架开发的，使用面向对象的开发结构和MVC模式的习惯养成与学习资源整合的平台。“学钱帮”主要面向大学生，平台内容独特丰富，涵盖了大学生面临的各类学习、生活方面的问题，更有多样化的功能。首先，平台通过独特的金钱奖惩机制对用户进行督促，用户可以根据自身需求，选择是否需要通过在学钱帮网站暂存金钱的方式来督促自己的学习，并可以选择一定的金额数，在其坚持单词记忆的时间里，如果用户每日坚持学习，可根据暂存金额数获得相应比例的金钱奖励，如果用户忘记学习，则也会相应的扣除一定比例的金钱。其次，平台通过好友的交互陪伴与互动来互相督促；而且，平台还有其它推荐功能、提醒功能、查询功能等。我们通过这种方式来督促用户养成良好生活和学习习惯。最后，本平台还有交互陪伴功能，学生可以邀请好友共同学习；平台还会给每天未完成的同学发送实时提醒；还会根据学生的学习内容智能推送用户可能感兴趣的消息；最重要的是在用户的个人资金上我们绝对保证用户的资金透明，用户可以随时查询自己的账户余额和交易记录，同时资金灵活，充值、提取非常方便。"><a href="#最近没有更新博客，一直在忙互联网-比赛的项目，我们所做的项目叫学钱帮，-“学钱帮”是基于轻量级的ThinkPHP框架开发的，使用面向对象的开发结构和MVC模式的习惯养成与学习资源整合的平台。“学钱帮”主要面向大学生，平台内容独特丰富，涵盖了大学生面临的各类学习、生活方面的问题，更有多样化的功能。首先，平台通过独特的金钱奖惩机制对用户进行督促，用户可以根据自身需求，选择是否需要通过在学钱帮网站暂存金钱的方式来督促自己的学习，并可以选择一定的金额数，在其坚持单词记忆的时间里，如果用户每日坚持学习，可根据暂存金额数获得相应比例的金钱奖励，如果用户忘记学习，则也会相应的扣除一定比例的金钱。其次，平台通过好友的交互陪伴与互动来互相督促；而且，平台还有其它推荐功能、提醒功能、查询功能等。我们通过这种方式来督促用户养成良好生活和学习习惯。最后，本平台还有交互陪伴功能，学生可以邀请好友共同学习；平台还会给每天未完成的同学发送实时提醒；还会根据学生的学习内容智能推送用户可能感兴趣的消息；最重要的是在用户的个人资金上我们绝对保证用户的资金透明，用户可以随时查询自己的账户余额和交易记录，同时资金灵活，充值、提取非常方便。" class="headerlink" title="最近没有更新博客，一直在忙互联网+比赛的项目，我们所做的项目叫学钱帮， “学钱帮”是基于轻量级的ThinkPHP框架开发的，使用面向对象的开发结构和MVC模式的习惯养成与学习资源整合的平台。“学钱帮”主要面向大学生，平台内容独特丰富，涵盖了大学生面临的各类学习、生活方面的问题，更有多样化的功能。首先，平台通过独特的金钱奖惩机制对用户进行督促，用户可以根据自身需求，选择是否需要通过在学钱帮网站暂存金钱的方式来督促自己的学习，并可以选择一定的金额数，在其坚持单词记忆的时间里，如果用户每日坚持学习，可根据暂存金额数获得相应比例的金钱奖励，如果用户忘记学习，则也会相应的扣除一定比例的金钱。其次，平台通过好友的交互陪伴与互动来互相督促；而且，平台还有其它推荐功能、提醒功能、查询功能等。我们通过这种方式来督促用户养成良好生活和学习习惯。最后，本平台还有交互陪伴功能，学生可以邀请好友共同学习；平台还会给每天未完成的同学发送实时提醒；还会根据学生的学习内容智能推送用户可能感兴趣的消息；最重要的是在用户的个人资金上我们绝对保证用户的资金透明，用户可以随时查询自己的账户余额和交易记录，同时资金灵活，充值、提取非常方便。"></a>最近没有更新博客，一直在忙互联网+比赛的项目，我们所做的项目叫学钱帮， “学钱帮”是基于轻量级的ThinkPHP框架开发的，使用面向对象的开发结构和MVC模式的习惯养成与学习资源整合的平台。“学钱帮”主要面向大学生，平台内容独特丰富，涵盖了大学生面临的各类学习、生活方面的问题，更有多样化的功能。首先，平台通过独特的金钱奖惩机制对用户进行督促，用户可以根据自身需求，选择是否需要通过在学钱帮网站暂存金钱的方式来督促自己的学习，并可以选择一定的金额数，在其坚持单词记忆的时间里，如果用户每日坚持学习，可根据暂存金额数获得相应比例的金钱奖励，如果用户忘记学习，则也会相应的扣除一定比例的金钱。其次，平台通过好友的交互陪伴与互动来互相督促；而且，平台还有其它推荐功能、提醒功能、查询功能等。我们通过这种方式来督促用户养成良好生活和学习习惯。最后，本平台还有交互陪伴功能，学生可以邀请好友共同学习；平台还会给每天未完成的同学发送实时提醒；还会根据学生的学习内容智能推送用户可能感兴趣的消息；最重要的是在用户的个人资金上我们绝对保证用户的资金透明，用户可以随时查询自己的账户余额和交易记录，同时资金灵活，充值、提取非常方便。</h2><blockquote>
<p>关键词:面向对象、习惯养成、学习资源、金钱奖惩、交互陪伴。</p>
</blockquote>
<h2 id="下面是项目界面的截图"><a href="#下面是项目界面的截图" class="headerlink" title="下面是项目界面的截图"></a>下面是项目界面的截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb1.jpg"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb2.jpg"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb3.jpg"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb4.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb5.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb6.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb7.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb8.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb9.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb10.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb11.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb12.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb13.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb14.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb15.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb16.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb17.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb18.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb19.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb20.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb21.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb22.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb23.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb24.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb25.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb26.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>学钱帮网站开发总结</title>
    <url>/2017/06/18/article86/</url>
    <content><![CDATA[<h2 id="学钱帮网站开发总结"><a href="#学钱帮网站开发总结" class="headerlink" title="学钱帮网站开发总结"></a>学钱帮网站开发总结</h2><h3 id="关于学钱帮是个什么项目，在我上一篇博客中已有了阐述，不清楚的可以点击文章了解一下《学钱帮项目》，里面有内容介绍，还有大量截图，项目我已开源，有需要的可以找我要git库地址，比赛已经完成了，一个可以接受的结果，也不枉费这些天的努力，和写了一大堆的代码。又是一个完整的项目，而且还经过了一些用户测试，所以还是写一篇总结来反思一些，希望对以后的开发有更多的帮助。"><a href="#关于学钱帮是个什么项目，在我上一篇博客中已有了阐述，不清楚的可以点击文章了解一下《学钱帮项目》，里面有内容介绍，还有大量截图，项目我已开源，有需要的可以找我要git库地址，比赛已经完成了，一个可以接受的结果，也不枉费这些天的努力，和写了一大堆的代码。又是一个完整的项目，而且还经过了一些用户测试，所以还是写一篇总结来反思一些，希望对以后的开发有更多的帮助。" class="headerlink" title="关于学钱帮是个什么项目，在我上一篇博客中已有了阐述，不清楚的可以点击文章了解一下《学钱帮项目》，里面有内容介绍，还有大量截图，项目我已开源，有需要的可以找我要git库地址，比赛已经完成了，一个可以接受的结果，也不枉费这些天的努力，和写了一大堆的代码。又是一个完整的项目，而且还经过了一些用户测试，所以还是写一篇总结来反思一些，希望对以后的开发有更多的帮助。"></a>关于学钱帮是个什么项目，在我上一篇博客中已有了阐述，不清楚的可以点击文章了解一下<a class="link"   href="http://www.rain1024.com/2017/06/17/article85/" >《学钱帮项目》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，里面有内容介绍，还有大量截图，项目我已开源，有需要的可以找我要git库地址，比赛已经完成了，一个可以接受的结果，也不枉费这些天的努力，和写了一大堆的代码。又是一个完整的项目，而且还经过了一些用户测试，所以还是写一篇总结来反思一些，希望对以后的开发有更多的帮助。</h3><h3 id="项目从一开始就经过了很长时间的分析，设计，也是有各种策划和想法，画了很多草图，写了很多笔记，做了数据库的设计，功能思维导图，设计了界面，一个人干了一个团队的事情，虽然最后界面不是很好看，功能也有些bug，但这些我也很满足，后期会慢慢的修改调整，最后会做到最好。这次开发我还学会了使用git，这个强大的工具，但不是从一开始就使用，所以只有后来的每次更新才同步到了git库中，并附加了一些commit，如果能从项目开始构建就使用git，每一次更改都使用commit说明的话，我就可以翻阅这些提交记录学到更多东西，有时间一定要写一篇git的介绍。项目设计的图我会放在博文下面。"><a href="#项目从一开始就经过了很长时间的分析，设计，也是有各种策划和想法，画了很多草图，写了很多笔记，做了数据库的设计，功能思维导图，设计了界面，一个人干了一个团队的事情，虽然最后界面不是很好看，功能也有些bug，但这些我也很满足，后期会慢慢的修改调整，最后会做到最好。这次开发我还学会了使用git，这个强大的工具，但不是从一开始就使用，所以只有后来的每次更新才同步到了git库中，并附加了一些commit，如果能从项目开始构建就使用git，每一次更改都使用commit说明的话，我就可以翻阅这些提交记录学到更多东西，有时间一定要写一篇git的介绍。项目设计的图我会放在博文下面。" class="headerlink" title="项目从一开始就经过了很长时间的分析，设计，也是有各种策划和想法，画了很多草图，写了很多笔记，做了数据库的设计，功能思维导图，设计了界面，一个人干了一个团队的事情，虽然最后界面不是很好看，功能也有些bug，但这些我也很满足，后期会慢慢的修改调整，最后会做到最好。这次开发我还学会了使用git，这个强大的工具，但不是从一开始就使用，所以只有后来的每次更新才同步到了git库中，并附加了一些commit，如果能从项目开始构建就使用git，每一次更改都使用commit说明的话，我就可以翻阅这些提交记录学到更多东西，有时间一定要写一篇git的介绍。项目设计的图我会放在博文下面。"></a>项目从一开始就经过了很长时间的分析，设计，也是有各种策划和想法，画了很多草图，写了很多笔记，做了数据库的设计，功能思维导图，设计了界面，一个人干了一个团队的事情，虽然最后界面不是很好看，功能也有些bug，但这些我也很满足，后期会慢慢的修改调整，最后会做到最好。这次开发我还学会了使用git，这个强大的工具，但不是从一开始就使用，所以只有后来的每次更新才同步到了git库中，并附加了一些commit，如果能从项目开始构建就使用git，每一次更改都使用commit说明的话，我就可以翻阅这些提交记录学到更多东西，有时间一定要写一篇git的介绍。项目设计的图我会放在博文下面。</h3><h2 id="下面是项目的结构："><a href="#下面是项目的结构：" class="headerlink" title="下面是项目的结构："></a>下面是项目的结构：</h2><h3 id="Home模块"><a href="#Home模块" class="headerlink" title="Home模块"></a>Home模块</h3><ol>
<li>6个Controller控制器</li>
<li>27个View视图层</li>
</ol>
<h3 id="Common模块"><a href="#Common模块" class="headerlink" title="Common模块"></a>Common模块</h3><ol>
<li>function公共函数192行</li>
<li>12个Model模型</li>
</ol>
<h3 id="Admin模块"><a href="#Admin模块" class="headerlink" title="Admin模块"></a>Admin模块</h3><ol>
<li>7个Controller控制器</li>
<li>11个View视图层</li>
</ol>
<h3 id="有13张数据表"><a href="#有13张数据表" class="headerlink" title="有13张数据表"></a>有13张数据表</h3><h3 id="所以整个项目的体系并不小了，手写的也有几千行代码，关于这次项目的总结："><a href="#所以整个项目的体系并不小了，手写的也有几千行代码，关于这次项目的总结：" class="headerlink" title="所以整个项目的体系并不小了，手写的也有几千行代码，关于这次项目的总结："></a>所以整个项目的体系并不小了，手写的也有几千行代码，关于这次项目的总结：</h3><ol>
<li>要做整个项目时，不能急于去写代码，也不用直接去做数据库设计，应该先进行大量的设计和规划，做出整体的思维导图来控制以后项目的走向，思维导图并不需要有多详细，但必须要有大致的方向和目标，把控以后项目的功能构建。</li>
<li>当有了项目框架，就应该查找显示的界面和设计数据库，界面是以后项目要显示的部分，如果边做后端开发，边设计前端的页面，设计和逻辑混在一起就会很乱，不能以一个方向为主，需要花费大量的时间去调整前后端，数据库的部分设计也可以在这个时候做，因为有一些表单的字段需要结合。</li>
<li>数据库的设计，设计数据库也要做导图和一些笔记，尽量详细的分析每张表和每个需要的字段，字段设计多了没关系，但如果字段设计少了，后期增加字段很麻烦，尤其是有了数据以后，每个数据对于新增字段的值都需要修改，设计数据库时一定要想好每个功能，只有对应功能去设计，数据库才会比较完整。</li>
<li>PHP后端的编写，其实这部分最复杂的是逻辑，除去逻辑，其他的无非都是增删改查，当然，最多的还是显示数据，都是大量重复的代码，但有一点需要注意，这是我以后也需要注意的，那就是函数名，一个项目有十多个model是很正常的，但model中总有相同功能的函数，由于开发时间长了，每个model中的函数名都是随便起的，这样调用的时候就会很乱，明明都是相同的功能，名字却不一样，只能打开model去一个一个的查看。</li>
<li>后端逻辑，这是最复杂的，应该先写出来，有个大致的思路，逻辑部分所占的代码量很小，但却是最重要的，所以不要留下bug，思路不清会后患无穷。</li>
<li>功能重载，说是重载，只不过是懒得多写一遍，但到了项目的后期开发时，重载的作用就不仅仅是少写几遍那么简单，它也意味着出现bug后可以少改几遍，项目的错误率会降低很多，比如三处完全相同的代码，如果出现bug，就需要挨个修改，如果忘记了修改某一个，就又会出现问题，但如果我写成一个重载公共函数，直接修改一遍就好，前端页面也是这样，比如header，menu，sadbar，footer，都可以放到一个页面中。</li>
<li>参数不同的功能重载，在函数中，完全一样的函数是很少的，但大部分都是有共同点的，重载就是尽量提取那些容易出现bug的函数，千万不要把所有的函数都写成重载的，那样反而会更加麻烦。对于大致相同的函数，可以把不同点作为参数来传递，最后调用公共函数，这是一个好办法。</li>
<li>function函数，function函数是很强大的，很多方法都可以放到这里面，作为我项目的必备方法就有，request()，请求参数提取方法，日期相差计算方法，文件上传的方法，session判断方法，当然还可以根据项目需要添加更多需要的方法。</li>
</ol>
<h3 id="总结：这次项目开发总体还是比较着急了，框架规划设计做的不够，数据库后期有很多修改，界面也没有一开始就做好（当然我不是做界面的），等等很多问题，下一个项目开发时要稳一些，不能急于求成，一步一步的写，总会得到满意的结果。"><a href="#总结：这次项目开发总体还是比较着急了，框架规划设计做的不够，数据库后期有很多修改，界面也没有一开始就做好（当然我不是做界面的），等等很多问题，下一个项目开发时要稳一些，不能急于求成，一步一步的写，总会得到满意的结果。" class="headerlink" title="总结：这次项目开发总体还是比较着急了，框架规划设计做的不够，数据库后期有很多修改，界面也没有一开始就做好（当然我不是做界面的），等等很多问题，下一个项目开发时要稳一些，不能急于求成，一步一步的写，总会得到满意的结果。"></a>总结：这次项目开发总体还是比较着急了，框架规划设计做的不够，数据库后期有很多修改，界面也没有一开始就做好（当然我不是做界面的），等等很多问题，下一个项目开发时要稳一些，不能急于求成，一步一步的写，总会得到满意的结果。</h3><h2 id="以下是commit的记录"><a href="#以下是commit的记录" class="headerlink" title="以下是commit的记录"></a>以下是commit的记录</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb27.jpg"
                     
                ></p>
<h2 id="以下是项目思路，策划，笔记"><a href="#以下是项目思路，策划，笔记" class="headerlink" title="以下是项目思路，策划，笔记"></a>以下是项目思路，策划，笔记</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb28.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb29.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb30.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb31.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb32.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb33.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb34.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb35.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb36.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/xqb37.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
        <category>Self</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
        <tag>技术知识</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>7月1日关于博客备案说明</title>
    <url>/2017/07/25/article87/</url>
    <content><![CDATA[<p>7月1日关于博客备案说明</p>
<h3 id="很长时间没有更新博客了，还好有贾崇柳，我俩互相监督，督促着对方写博客，最近没有学什么，这是很惭愧的，作为一个程序员，只有坚持学习才能不落伍。但这段时间做了很多事情，也是很有收获，受益匪浅的。这篇文章是写在7月1号的，但由于我的服务器一直没有备案，被腾讯给封掉了，所以这几天忙着备案，网站占时不能访问了，但我会先发表到CSDN上，等博客备案好了，再补发上去。"><a href="#很长时间没有更新博客了，还好有贾崇柳，我俩互相监督，督促着对方写博客，最近没有学什么，这是很惭愧的，作为一个程序员，只有坚持学习才能不落伍。但这段时间做了很多事情，也是很有收获，受益匪浅的。这篇文章是写在7月1号的，但由于我的服务器一直没有备案，被腾讯给封掉了，所以这几天忙着备案，网站占时不能访问了，但我会先发表到CSDN上，等博客备案好了，再补发上去。" class="headerlink" title="很长时间没有更新博客了，还好有贾崇柳，我俩互相监督，督促着对方写博客，最近没有学什么，这是很惭愧的，作为一个程序员，只有坚持学习才能不落伍。但这段时间做了很多事情，也是很有收获，受益匪浅的。这篇文章是写在7月1号的，但由于我的服务器一直没有备案，被腾讯给封掉了，所以这几天忙着备案，网站占时不能访问了，但我会先发表到CSDN上，等博客备案好了，再补发上去。"></a>很长时间没有更新博客了，还好有贾崇柳，我俩互相监督，督促着对方写博客，最近没有学什么，这是很惭愧的，作为一个程序员，只有坚持学习才能不落伍。但这段时间做了很多事情，也是很有收获，受益匪浅的。这篇文章是写在7月1号的，但由于我的服务器一直没有备案，被腾讯给封掉了，所以这几天忙着备案，网站占时不能访问了，但我会先发表到CSDN上，等博客备案好了，再补发上去。</h3><h3 id="今天是周六，我已经工作了整整一个星期了，公司是上六休一的。上周一直在找工作，三天的时间，给21个公司投了简历，有9个公司给我打了电话，得到了4个公司的面试，通过了2个公司，最后挑了一家自己比较喜欢的工作。这几天找工作的经历让我知道自己这两年没有白学，凭借自己的一技之长终于找到了合适的实习工作，至少自己的付出得到肯定。这是第二次实习，庆幸我才大二，还有两年的时间可以得到更多的机会。最后面试通过的两家公司，一个是做后台维护，一个是做开发，两个截然不同的岗位，但当时不太清楚，就稀里糊涂的凭借自己的感觉选了上午先面试通过的后台维护岗位，这一个星期是真心没什么事情，说起来是维护，但又怎么可能出现问题，每天就是傻傻的学一些自己的东西，但还要偷偷摸摸的，领导一来就得装孙子，整个公司就两个技术，他们也不知道我们在干什么，就好像在混日子一样，完全不是自己想象的样子，我期待得到学习的机会，有更多的项目经验，以后找工作时能更加丰富自己的简历。"><a href="#今天是周六，我已经工作了整整一个星期了，公司是上六休一的。上周一直在找工作，三天的时间，给21个公司投了简历，有9个公司给我打了电话，得到了4个公司的面试，通过了2个公司，最后挑了一家自己比较喜欢的工作。这几天找工作的经历让我知道自己这两年没有白学，凭借自己的一技之长终于找到了合适的实习工作，至少自己的付出得到肯定。这是第二次实习，庆幸我才大二，还有两年的时间可以得到更多的机会。最后面试通过的两家公司，一个是做后台维护，一个是做开发，两个截然不同的岗位，但当时不太清楚，就稀里糊涂的凭借自己的感觉选了上午先面试通过的后台维护岗位，这一个星期是真心没什么事情，说起来是维护，但又怎么可能出现问题，每天就是傻傻的学一些自己的东西，但还要偷偷摸摸的，领导一来就得装孙子，整个公司就两个技术，他们也不知道我们在干什么，就好像在混日子一样，完全不是自己想象的样子，我期待得到学习的机会，有更多的项目经验，以后找工作时能更加丰富自己的简历。" class="headerlink" title="今天是周六，我已经工作了整整一个星期了，公司是上六休一的。上周一直在找工作，三天的时间，给21个公司投了简历，有9个公司给我打了电话，得到了4个公司的面试，通过了2个公司，最后挑了一家自己比较喜欢的工作。这几天找工作的经历让我知道自己这两年没有白学，凭借自己的一技之长终于找到了合适的实习工作，至少自己的付出得到肯定。这是第二次实习，庆幸我才大二，还有两年的时间可以得到更多的机会。最后面试通过的两家公司，一个是做后台维护，一个是做开发，两个截然不同的岗位，但当时不太清楚，就稀里糊涂的凭借自己的感觉选了上午先面试通过的后台维护岗位，这一个星期是真心没什么事情，说起来是维护，但又怎么可能出现问题，每天就是傻傻的学一些自己的东西，但还要偷偷摸摸的，领导一来就得装孙子，整个公司就两个技术，他们也不知道我们在干什么，就好像在混日子一样，完全不是自己想象的样子，我期待得到学习的机会，有更多的项目经验，以后找工作时能更加丰富自己的简历。"></a>今天是周六，我已经工作了整整一个星期了，公司是上六休一的。上周一直在找工作，三天的时间，给21个公司投了简历，有9个公司给我打了电话，得到了4个公司的面试，通过了2个公司，最后挑了一家自己比较喜欢的工作。这几天找工作的经历让我知道自己这两年没有白学，凭借自己的一技之长终于找到了合适的实习工作，至少自己的付出得到肯定。这是第二次实习，庆幸我才大二，还有两年的时间可以得到更多的机会。最后面试通过的两家公司，一个是做后台维护，一个是做开发，两个截然不同的岗位，但当时不太清楚，就稀里糊涂的凭借自己的感觉选了上午先面试通过的后台维护岗位，这一个星期是真心没什么事情，说起来是维护，但又怎么可能出现问题，每天就是傻傻的学一些自己的东西，但还要偷偷摸摸的，领导一来就得装孙子，整个公司就两个技术，他们也不知道我们在干什么，就好像在混日子一样，完全不是自己想象的样子，我期待得到学习的机会，有更多的项目经验，以后找工作时能更加丰富自己的简历。</h3><h3 id="还有就是网站的备案，可能每个腾讯服务器都有两个月的备案时间，我一直没有备案，某天突然就停止解析域名了，赶鸭子上架，只能匆促的备案了，提交了各种资料，各种证件照，等待审核通过，然后又邮寄了一块幕布给我，在幕布下照了照片，上传上去，现在还在等待，不知道需要多长时间，能尽快支持访问就好了。"><a href="#还有就是网站的备案，可能每个腾讯服务器都有两个月的备案时间，我一直没有备案，某天突然就停止解析域名了，赶鸭子上架，只能匆促的备案了，提交了各种资料，各种证件照，等待审核通过，然后又邮寄了一块幕布给我，在幕布下照了照片，上传上去，现在还在等待，不知道需要多长时间，能尽快支持访问就好了。" class="headerlink" title="还有就是网站的备案，可能每个腾讯服务器都有两个月的备案时间，我一直没有备案，某天突然就停止解析域名了，赶鸭子上架，只能匆促的备案了，提交了各种资料，各种证件照，等待审核通过，然后又邮寄了一块幕布给我，在幕布下照了照片，上传上去，现在还在等待，不知道需要多长时间，能尽快支持访问就好了。"></a>还有就是网站的备案，可能每个腾讯服务器都有两个月的备案时间，我一直没有备案，某天突然就停止解析域名了，赶鸭子上架，只能匆促的备案了，提交了各种资料，各种证件照，等待审核通过，然后又邮寄了一块幕布给我，在幕布下照了照片，上传上去，现在还在等待，不知道需要多长时间，能尽快支持访问就好了。</h3>]]></content>
      <categories>
        <category>Self</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
      </tags>
  </entry>
  <entry>
    <title>网站终于备案完成</title>
    <url>/2017/07/25/article88/</url>
    <content><![CDATA[<h1 id="网站终于备案完成"><a href="#网站终于备案完成" class="headerlink" title="网站终于备案完成"></a>网站终于备案完成</h1><h3 id="6月28号的时候，网站域名突然停止解析了，也正好是我服务器买了两个月的时间，腾讯云可能给了每个服务器两个月的备案时间，但我一直都没有备案，嫌麻烦，但这次看来不备案不行了，我想过买国外的服务器和域名，但国外服务商没有找到有学生优惠的，普通的服务器价格我也承受不了，毕竟腾讯云一个月才8元，而且我已经更换过一次域名了，如果总是频繁的更换域名，我自己都有些懵，还是老老实实的用现在这个吧，所以真正的备案开始了。"><a href="#6月28号的时候，网站域名突然停止解析了，也正好是我服务器买了两个月的时间，腾讯云可能给了每个服务器两个月的备案时间，但我一直都没有备案，嫌麻烦，但这次看来不备案不行了，我想过买国外的服务器和域名，但国外服务商没有找到有学生优惠的，普通的服务器价格我也承受不了，毕竟腾讯云一个月才8元，而且我已经更换过一次域名了，如果总是频繁的更换域名，我自己都有些懵，还是老老实实的用现在这个吧，所以真正的备案开始了。" class="headerlink" title="6月28号的时候，网站域名突然停止解析了，也正好是我服务器买了两个月的时间，腾讯云可能给了每个服务器两个月的备案时间，但我一直都没有备案，嫌麻烦，但这次看来不备案不行了，我想过买国外的服务器和域名，但国外服务商没有找到有学生优惠的，普通的服务器价格我也承受不了，毕竟腾讯云一个月才8元，而且我已经更换过一次域名了，如果总是频繁的更换域名，我自己都有些懵，还是老老实实的用现在这个吧，所以真正的备案开始了。"></a>6月28号的时候，网站域名突然停止解析了，也正好是我服务器买了两个月的时间，腾讯云可能给了每个服务器两个月的备案时间，但我一直都没有备案，嫌麻烦，但这次看来不备案不行了，我想过买国外的服务器和域名，但国外服务商没有找到有学生优惠的，普通的服务器价格我也承受不了，毕竟腾讯云一个月才8元，而且我已经更换过一次域名了，如果总是频繁的更换域名，我自己都有些懵，还是老老实实的用现在这个吧，所以真正的备案开始了。</h3><h3 id="6月29号提交了备案，我开始感受到这些机构的办事效率有多么的低，这是整个过程"><a href="#6月29号提交了备案，我开始感受到这些机构的办事效率有多么的低，这是整个过程" class="headerlink" title="6月29号提交了备案，我开始感受到这些机构的办事效率有多么的低，这是整个过程"></a>6月29号提交了备案，我开始感受到这些机构的办事效率有多么的低，这是整个过程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web24.jpg"
                     
                ></p>
<h3 id="由于备案期间网站一直在关闭状态，很多东西都没办法使用，等了快一个月，有多几次我都想放弃备案，真是特别麻烦，这期间也没有做什么，想在服务器上做的一些功能也因为备案而搁置，不过总算完成了，希望以后不会有什么麻烦的事情，实在懒得等这么久。"><a href="#由于备案期间网站一直在关闭状态，很多东西都没办法使用，等了快一个月，有多几次我都想放弃备案，真是特别麻烦，这期间也没有做什么，想在服务器上做的一些功能也因为备案而搁置，不过总算完成了，希望以后不会有什么麻烦的事情，实在懒得等这么久。" class="headerlink" title="由于备案期间网站一直在关闭状态，很多东西都没办法使用，等了快一个月，有多几次我都想放弃备案，真是特别麻烦，这期间也没有做什么，想在服务器上做的一些功能也因为备案而搁置，不过总算完成了，希望以后不会有什么麻烦的事情，实在懒得等这么久。"></a>由于备案期间网站一直在关闭状态，很多东西都没办法使用，等了快一个月，有多几次我都想放弃备案，真是特别麻烦，这期间也没有做什么，想在服务器上做的一些功能也因为备案而搁置，不过总算完成了，希望以后不会有什么麻烦的事情，实在懒得等这么久。</h3><h3 id="接下来我会上传更多的扩展功能，把这段时间没有做的补上来。"><a href="#接下来我会上传更多的扩展功能，把这段时间没有做的补上来。" class="headerlink" title="接下来我会上传更多的扩展功能，把这段时间没有做的补上来。"></a>接下来我会上传更多的扩展功能，把这段时间没有做的补上来。</h3>]]></content>
      <categories>
        <category>Self</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网站所有404页面替换为腾讯公益404页面的说明</title>
    <url>/2017/07/26/article89/</url>
    <content><![CDATA[<h2 id="关于网站所有404页面替换为腾讯公益404页面的说明"><a href="#关于网站所有404页面替换为腾讯公益404页面的说明" class="headerlink" title="关于网站所有404页面替换为腾讯公益404页面的说明"></a>关于网站所有404页面替换为腾讯公益404页面的说明</h2><h3 id="昨天看到了腾讯专门做了一个腾讯404公益页面，就是将原来的404换成一个寻找孩子的公益展示页面，我觉得很好，于是先将博客中的404页面全部替换成了这个，效果如下图"><a href="#昨天看到了腾讯专门做了一个腾讯404公益页面，就是将原来的404换成一个寻找孩子的公益展示页面，我觉得很好，于是先将博客中的404页面全部替换成了这个，效果如下图" class="headerlink" title="昨天看到了腾讯专门做了一个腾讯404公益页面，就是将原来的404换成一个寻找孩子的公益展示页面，我觉得很好，于是先将博客中的404页面全部替换成了这个，效果如下图"></a>昨天看到了腾讯专门做了一个腾讯404公益页面，就是将原来的404换成一个寻找孩子的公益展示页面，我觉得很好，于是先将博客中的404页面全部替换成了这个，效果如下图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web25.jpg"
                     
                ></p>
<h3 id="设置方法就是，在wordpress后台点击外观，然后点击编辑，再选择右侧的404模板，先将原来404模板里的内容备份一下，然后全部删掉，放入这段代码，注意将返回我的主页的链接改成自己的。"><a href="#设置方法就是，在wordpress后台点击外观，然后点击编辑，再选择右侧的404模板，先将原来404模板里的内容备份一下，然后全部删掉，放入这段代码，注意将返回我的主页的链接改成自己的。" class="headerlink" title="设置方法就是，在wordpress后台点击外观，然后点击编辑，再选择右侧的404模板，先将原来404模板里的内容备份一下，然后全部删掉，放入这段代码，注意将返回我的主页的链接改成自己的。"></a>设置方法就是，在wordpress后台点击外观，然后点击编辑，再选择右侧的404模板，先将原来404模板里的内容备份一下，然后全部删掉，放入这段代码，注意将返回我的主页的链接改成自己的。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://yoursite.com/yourPage.html&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="这是腾讯公益的网址"><a href="#这是腾讯公益的网址" class="headerlink" title="这是腾讯公益的网址"></a>这是腾讯公益的<a class="link"   href="http://www.qq.com/404/" >网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web26.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展功能中新增身份证号码查询功能</title>
    <url>/2017/07/29/article90/</url>
    <content><![CDATA[<h1 id="扩展功能中新增身份证号码查询功能"><a href="#扩展功能中新增身份证号码查询功能" class="headerlink" title="扩展功能中新增身份证号码查询功能"></a>扩展功能中新增身份证号码查询功能</h1><h3 id="今天在服务器上运行了第一个python脚本，调试了很多问题，终于成功了，这个脚本很简单，只是爬取身份证号码的，但需要和PHP相互调用传递数据，windows和Linux的情况又不太一样，还得安装各种环境，调试各种命令，才弄好了。"><a href="#今天在服务器上运行了第一个python脚本，调试了很多问题，终于成功了，这个脚本很简单，只是爬取身份证号码的，但需要和PHP相互调用传递数据，windows和Linux的情况又不太一样，还得安装各种环境，调试各种命令，才弄好了。" class="headerlink" title="今天在服务器上运行了第一个python脚本，调试了很多问题，终于成功了，这个脚本很简单，只是爬取身份证号码的，但需要和PHP相互调用传递数据，windows和Linux的情况又不太一样，还得安装各种环境，调试各种命令，才弄好了。"></a>今天在服务器上运行了第一个python脚本，调试了很多问题，终于成功了，这个脚本很简单，只是爬取身份证号码的，但需要和PHP相互调用传递数据，windows和Linux的情况又不太一样，还得安装各种环境，调试各种命令，才弄好了。</h3><h3 id="使用时点击博客中扩展菜单里的身份证查询，或者访问我的扩展功能首页function-rain1024-com，在菜单栏里的信息查询里有身份证查询，输入身份证号码，即可查询到性别，出生日期，归属地等信息，因为是我自己写的脚本，随时可能出现bug，使用中如果出现问题可以及时联系我。下面是功能界面。"><a href="#使用时点击博客中扩展菜单里的身份证查询，或者访问我的扩展功能首页function-rain1024-com，在菜单栏里的信息查询里有身份证查询，输入身份证号码，即可查询到性别，出生日期，归属地等信息，因为是我自己写的脚本，随时可能出现bug，使用中如果出现问题可以及时联系我。下面是功能界面。" class="headerlink" title="使用时点击博客中扩展菜单里的身份证查询，或者访问我的扩展功能首页function.rain1024.com，在菜单栏里的信息查询里有身份证查询，输入身份证号码，即可查询到性别，出生日期，归属地等信息，因为是我自己写的脚本，随时可能出现bug，使用中如果出现问题可以及时联系我。下面是功能界面。"></a>使用时点击博客中扩展菜单里的身份证查询，或者访问我的扩展功能首页<a class="link"   href="http://function.rain1024.com/" >function.rain1024.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，在菜单栏里的信息查询里有身份证查询，输入身份证号码，即可查询到性别，出生日期，归属地等信息，因为是我自己写的脚本，随时可能出现bug，使用中如果出现问题可以及时联系我。下面是功能界面。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php23.jpg"
                     
                ></p>
<h3 id="这里是查询到的结果"><a href="#这里是查询到的结果" class="headerlink" title="这里是查询到的结果"></a>这里是查询到的结果</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php22.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>自动检测CSDN博客文章阅读次数的爬虫</title>
    <url>/2017/08/03/article91/</url>
    <content><![CDATA[<h2 id="自动检测CSDN博客文章阅读次数的爬虫"><a href="#自动检测CSDN博客文章阅读次数的爬虫" class="headerlink" title="自动检测CSDN博客文章阅读次数的爬虫"></a>自动检测CSDN博客文章阅读次数的爬虫</h2><h3 id="平时没事会去CSDN上看一看博客里有什么变化，如果文章有评论或者有了私信，CSDN上都不会通知你，这就需要经常查看博客信息。其实这种事情完全可以写一个脚本来自动检测识别，如果博客里的信息有什么变化，自动发一个邮件给我，并且告诉我哪些信息发生了变化，再将这个脚本放到计划任务中，每天定时执行扫描博客内容。"><a href="#平时没事会去CSDN上看一看博客里有什么变化，如果文章有评论或者有了私信，CSDN上都不会通知你，这就需要经常查看博客信息。其实这种事情完全可以写一个脚本来自动检测识别，如果博客里的信息有什么变化，自动发一个邮件给我，并且告诉我哪些信息发生了变化，再将这个脚本放到计划任务中，每天定时执行扫描博客内容。" class="headerlink" title="平时没事会去CSDN上看一看博客里有什么变化，如果文章有评论或者有了私信，CSDN上都不会通知你，这就需要经常查看博客信息。其实这种事情完全可以写一个脚本来自动检测识别，如果博客里的信息有什么变化，自动发一个邮件给我，并且告诉我哪些信息发生了变化，再将这个脚本放到计划任务中，每天定时执行扫描博客内容。"></a>平时没事会去CSDN上看一看博客里有什么变化，如果文章有评论或者有了私信，CSDN上都不会通知你，这就需要经常查看博客信息。其实这种事情完全可以写一个脚本来自动检测识别，如果博客里的信息有什么变化，自动发一个邮件给我，并且告诉我哪些信息发生了变化，再将这个脚本放到计划任务中，每天定时执行扫描博客内容。</h3><h3 id="下面具体说明一下这个脚本的作用和注意："><a href="#下面具体说明一下这个脚本的作用和注意：" class="headerlink" title="下面具体说明一下这个脚本的作用和注意："></a>下面具体说明一下这个脚本的作用和注意：</h3><h4 id="1-​我的想法是先将每篇文章的阅读次数保存到数据库"><a href="#1-​我的想法是先将每篇文章的阅读次数保存到数据库" class="headerlink" title="1. ​我的想法是先将每篇文章的阅读次数保存到数据库"></a>1. ​我的想法是先将每篇文章的阅读次数保存到数据库</h4><h4 id="2-然后每次将数据库里的数据与博客里的数据进行对比"><a href="#2-然后每次将数据库里的数据与博客里的数据进行对比" class="headerlink" title="2. 然后每次将数据库里的数据与博客里的数据进行对比"></a>2. 然后每次将数据库里的数据与博客里的数据进行对比</h4><h4 id="3-再将有差别的记录下来，具体信息放到邮件中发送给我"><a href="#3-再将有差别的记录下来，具体信息放到邮件中发送给我" class="headerlink" title="3. 再将有差别的记录下来，具体信息放到邮件中发送给我"></a>3. 再将有差别的记录下来，具体信息放到邮件中发送给我</h4><h4 id="4-URL中list后面是页数，当页数特别大时就显示所有文章，不用分页"><a href="#4-URL中list后面是页数，当页数特别大时就显示所有文章，不用分页" class="headerlink" title="4. URL中list后面是页数，当页数特别大时就显示所有文章，不用分页"></a>4. URL中list后面是页数，当页数特别大时就显示所有文章，不用分页</h4><h4 id="5-文章信息摘取使用BeautifulSoup库，嵌套了几层终于提取了所有信息"><a href="#5-文章信息摘取使用BeautifulSoup库，嵌套了几层终于提取了所有信息" class="headerlink" title="5. 文章信息摘取使用BeautifulSoup库，嵌套了几层终于提取了所有信息"></a>5. 文章信息摘取使用BeautifulSoup库，嵌套了几层终于提取了所有信息</h4><h4 id="6-写完脚本放到服务器里，开一个计划任务，写一个Shell让它自动执行就好了"><a href="#6-写完脚本放到服务器里，开一个计划任务，写一个Shell让它自动执行就好了" class="headerlink" title="6. 写完脚本放到服务器里，开一个计划任务，写一个Shell让它自动执行就好了"></a>6. 写完脚本放到服务器里，开一个计划任务，写一个Shell让它自动执行就好了</h4><h3 id="下面是源码："><a href="#下面是源码：" class="headerlink" title="下面是源码："></a>下面是源码：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( &quot;utf-8&quot; )</span><br><span class="line">import urllib2</span><br><span class="line">import MySQLdb</span><br><span class="line">import time</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.header import Header</span><br><span class="line">def download(url):</span><br><span class="line">    try:</span><br><span class="line">        html = urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line">        print e.code  # 可以打印出来错误代号如404。</span><br><span class="line">        print e.reason  # 可以捕获异常</span><br><span class="line">        html = None</span><br><span class="line">    return html</span><br><span class="line">def email(text ,toemail):</span><br><span class="line">    sender = &quot;rain@rain1024.com&quot;   #发送方的邮箱</span><br><span class="line">    password = &quot;&quot;         #邮箱的授权码</span><br><span class="line">    receiver = toemail  #接收方的邮箱</span><br><span class="line">    data_time = time.strftime(&quot;%Y-%m-%d&quot;)</span><br><span class="line">    subject = data_time + &quot;的CSDN博客报告&quot;   #title邮件标题</span><br><span class="line">    words = text   #text邮件内容</span><br><span class="line">    smtpserver = &#x27;smtp.exmail.qq.com&#x27;</span><br><span class="line">    msg = MIMEText(words, &#x27;plain&#x27;, &#x27;utf-8&#x27;)#中文需参数‘utf-8&#x27;，单字节字符不需要</span><br><span class="line">    msg[&#x27;Subject&#x27;] = Header(subject, &#x27;utf-8&#x27;) #邮件标题</span><br><span class="line">    msg[&#x27;from&#x27;] = sender #发信人地址</span><br><span class="line">    msg[&#x27;to&#x27;] = receiver #收信人地址</span><br><span class="line">    smtp = smtplib.SMTP_SSL(&quot;smtp.exmail.qq.com&quot;, 465)</span><br><span class="line">    smtp.connect(&#x27;smtp.exmail.qq.com&#x27;)</span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line">    smtp.sendmail(sender, receiver, msg.as_string())</span><br><span class="line">    smtp.quit()</span><br><span class="line">    print data_time + &quot;的邮件发送成功!&quot;</span><br><span class="line">def operator_SQL(flag,update=None):</span><br><span class="line">    # 将获取的数据存入数据库中</span><br><span class="line">    try:</span><br><span class="line">        conn = MySQLdb.connect(</span><br><span class="line">            host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">            port=3306,</span><br><span class="line">            user=&#x27;root&#x27;,</span><br><span class="line">            passwd=&#x27;root&#x27;,</span><br><span class="line">            db=&#x27;test&#x27;,</span><br><span class="line">            charset=&#x27;utf8&#x27;,</span><br><span class="line">        )</span><br><span class="line">    except:</span><br><span class="line">        conn = MySQLdb.connect(</span><br><span class="line">            host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">            port=3306,</span><br><span class="line">            user=&#x27;test&#x27;,</span><br><span class="line">            passwd=&#x27;&#x27;,</span><br><span class="line">            db=&#x27;test&#x27;,</span><br><span class="line">            charset=&#x27;utf8&#x27;,</span><br><span class="line">        )</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    if flag == 1:</span><br><span class="line">        res = cur.execute(&quot;select * from csdn_article&quot;)</span><br><span class="line">        cur.execute(</span><br><span class="line">            &#x27;insert into csdn_article values(&quot;%s&quot;,&quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;, &quot;%s&quot;)&#x27; % (res + 1, update[0], update[1], update[2], 0))</span><br><span class="line">    elif flag == 2:</span><br><span class="line">        cur.execute(&quot;update csdn_article set article_read=&quot;+str(update[1])+&quot; where article_id = &quot;+str(update[0]))</span><br><span class="line">        cur.execute(&quot;update csdn_article set change_read=&quot; + str(</span><br><span class="line">            update[3]) + &quot;  where article_id = &quot; + str(update[0]))</span><br><span class="line">    elif flag == 3:</span><br><span class="line">        res = cur.execute(&quot;select article_read from csdn_article where article_id=&quot;+str(update))</span><br><span class="line">        if res == 1:</span><br><span class="line">            res = cur.fetchmany(res)[0][0]</span><br><span class="line">        elif res == 0:</span><br><span class="line">            res = -1</span><br><span class="line">        return res</span><br><span class="line">        # sql_list = list(cur.fetchmany(res))</span><br><span class="line">        # print sql_list[1].count(435)</span><br><span class="line">        # if 435 in sql_list:</span><br><span class="line">        #     print &#x27;432432443242&#x27;</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line">def extract(html):</span><br><span class="line">    soup = BeautifulSoup(html)</span><br><span class="line">    # 获取到评论等内容</span><br><span class="line">    comment = soup.find(attrs=&#123;&#x27;id&#x27;:&#x27;blog_statistics&#x27;&#125;).text</span><br><span class="line">    # 接下来获取每一篇文章的阅读数，与数据库中的数据进行判断，如果有变化，则记录下来</span><br><span class="line">    article_soup = soup.find_all(attrs=&#123;&#x27;class&#x27;:&#x27;list_item article_item&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    article_all_list = []</span><br><span class="line">    for value in article_soup:</span><br><span class="line">        # 根据每篇文章的特征提取对应的数据</span><br><span class="line">        value = str(value)</span><br><span class="line">        tmp_soup = BeautifulSoup(value)</span><br><span class="line">        article_id = tmp_soup.a[&#x27;href&#x27;]</span><br><span class="line">        article_title = tmp_soup.find(&#x27;span&#x27;,class_=&#x27;link_title&#x27;).contents[0].string</span><br><span class="line">        article_read = tmp_soup.find(&#x27;span&#x27;,class_=&#x27;link_view&#x27;).contents[1].string</span><br><span class="line">        # print article_id,article_read,article_title</span><br><span class="line">        # 使用了各种办法，终于将两个字符串中的数字提取出来了</span><br><span class="line">        article_id = int(str.split(str(article_id),&#x27;/&#x27;)[4])</span><br><span class="line">        article_read = int(str.split(str(article_read[1:]),&#x27;)&#x27;)[0])</span><br><span class="line">        # 然后将每一篇文章里的数据放入一个列表里，再将这个列表放到大的列表里</span><br><span class="line">        article_list = []</span><br><span class="line">        article_list.append(article_id)</span><br><span class="line">        article_list.append(article_read)</span><br><span class="line">        article_list.append(article_title)</span><br><span class="line">        # 对每个值去数据库里查找，如果存在就进行比较，不相同则记录下来，并去数据库中修改，如果不存在，则插入这条数据</span><br><span class="line"></span><br><span class="line">        read = operator_SQL(3, article_id)</span><br><span class="line">        if read == -1:</span><br><span class="line">            operator_SQL(1, article_list)</span><br><span class="line">        elif read != article_read:</span><br><span class="line">            # 将阅读次数的查值传入数据库中</span><br><span class="line">            article_list.append(article_read - read)</span><br><span class="line">            # print article_list[3]</span><br><span class="line">            operator_SQL(2, article_list)</span><br><span class="line">            article_all_list.append(article_list)</span><br><span class="line">    text = &quot;您今天的CSDN博客信息报告如下：&quot;</span><br><span class="line">    text = text + str(comment)</span><br><span class="line">    text = text + &#x27;今日有&#x27; + str(article_all_list.__len__()) + &#x27;篇文章的阅读数发生了变化&#x27; + &#x27;\n&#x27;</span><br><span class="line">    i = 1</span><br><span class="line">    for value in article_all_list:</span><br><span class="line">        # print value[0]</span><br><span class="line">        text = text + str(i) + &#x27;： &#x27; + value[2]  + &#x27;总阅读次数为：&#x27;+ str(value[1]) + &#x27;；比昨天增加了：&#x27; + str(value[3]) + &#x27;次。&#x27; + &#x27;\n&#x27;</span><br><span class="line">        i = i + 1</span><br><span class="line"></span><br><span class="line">    # print text</span><br><span class="line">    return text</span><br><span class="line">def main():</span><br><span class="line">    url = &#x27;http://blog.csdn.net/rain_web/article/list/500&#x27;</span><br><span class="line">    html = download(url)</span><br><span class="line">    text = extract(html=html)</span><br><span class="line">    email(text,&#x27;nylrain@163.com&#x27;)</span><br><span class="line">    # operator_SQL(3, 353425)</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>对阿里云OSS对象存储的评价</title>
    <url>/2017/08/06/article92/</url>
    <content><![CDATA[<h2 id="对阿里云OSS对象存储的评价"><a href="#对阿里云OSS对象存储的评价" class="headerlink" title="对阿里云OSS对象存储的评价"></a>对阿里云OSS对象存储的评价</h2><h3 id="阿里云的OSS对象存储其实很早就接触了，但由于收费，一直都没有使用过，如下图，阿里云数据存储是收费的，数据下载是收费的，其他都是免费，只有使用ECS服务器下载数据时，流量才不收费，"><a href="#阿里云的OSS对象存储其实很早就接触了，但由于收费，一直都没有使用过，如下图，阿里云数据存储是收费的，数据下载是收费的，其他都是免费，只有使用ECS服务器下载数据时，流量才不收费，" class="headerlink" title="阿里云的OSS对象存储其实很早就接触了，但由于收费，一直都没有使用过，如下图，阿里云数据存储是收费的，数据下载是收费的，其他都是免费，只有使用ECS服务器下载数据时，流量才不收费，"></a>阿里云的OSS对象存储其实很早就接触了，但由于收费，一直都没有使用过，如下图，阿里云数据存储是收费的，数据下载是收费的，其他都是免费，只有使用ECS服务器下载数据时，流量才不收费，</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web28.jpg"
                     
                ></p>
<h3 id="所以这就很尴尬了，国内提供免费云存储服务的有很多，当然除了百度，网易，腾讯云，青云，又拍云，七牛，数阿里云提供的配额最小，只有海外存储，而且也只有5G，今天阿里云发了个消息，如下图"><a href="#所以这就很尴尬了，国内提供免费云存储服务的有很多，当然除了百度，网易，腾讯云，青云，又拍云，七牛，数阿里云提供的配额最小，只有海外存储，而且也只有5G，今天阿里云发了个消息，如下图" class="headerlink" title="所以这就很尴尬了，国内提供免费云存储服务的有很多，当然除了百度，网易，腾讯云，青云，又拍云，七牛，数阿里云提供的配额最小，只有海外存储，而且也只有5G，今天阿里云发了个消息，如下图"></a>所以这就很尴尬了，国内提供免费云存储服务的有很多，当然除了百度，网易，腾讯云，青云，又拍云，七牛，数阿里云提供的配额最小，只有海外存储，而且也只有5G，今天阿里云发了个消息，如下图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web29.jpg"
                     
                ></p>
<h3 id="但这个只是存储包，如果要使用，肯定会有数据流出，这时就需要买流量包，所以还不是很优惠，这是阿里云资源购买"><a href="#但这个只是存储包，如果要使用，肯定会有数据流出，这时就需要买流量包，所以还不是很优惠，这是阿里云资源购买" class="headerlink" title="但这个只是存储包，如果要使用，肯定会有数据流出，这时就需要买流量包，所以还不是很优惠，这是阿里云资源购买"></a>但这个只是存储包，如果要使用，肯定会有数据流出，这时就需要买流量包，所以还不是很优惠，这是阿里云资源购买</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/web30.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>重写Python脚本时关于建立框架的想法</title>
    <url>/2017/08/06/article93/</url>
    <content><![CDATA[<h2 id="重写Python脚本时关于建立框架的想法"><a href="#重写Python脚本时关于建立框架的想法" class="headerlink" title="重写Python脚本时关于建立框架的想法"></a>重写Python脚本时关于建立框架的想法</h2><h3 id="今天本来想再写一个脚本放到服务器里运行，想到脚本的功能时我发现里面有很多功能其实和以前的脚本有些重复了，比如数据库的方法，邮箱的方法，下载方法等等，假如每个脚本里都有这些方法，如果有一天，我换了一个环境，改变了数据库密码，或者想改变邮箱的smtp地址，这时就懵逼了，有多少脚本就需要改多少次数据。有人可能说不用担心，总会有简单的办法，或许这一次有办法，但下一次以及以后呢？每个互相独立的脚本很好写，很好运行，很好维护，但当你需要维护的脚本太多了该怎么办，你如果只是写一两个脚本就心满意足，那这些完全不用考虑。"><a href="#今天本来想再写一个脚本放到服务器里运行，想到脚本的功能时我发现里面有很多功能其实和以前的脚本有些重复了，比如数据库的方法，邮箱的方法，下载方法等等，假如每个脚本里都有这些方法，如果有一天，我换了一个环境，改变了数据库密码，或者想改变邮箱的smtp地址，这时就懵逼了，有多少脚本就需要改多少次数据。有人可能说不用担心，总会有简单的办法，或许这一次有办法，但下一次以及以后呢？每个互相独立的脚本很好写，很好运行，很好维护，但当你需要维护的脚本太多了该怎么办，你如果只是写一两个脚本就心满意足，那这些完全不用考虑。" class="headerlink" title="今天本来想再写一个脚本放到服务器里运行，想到脚本的功能时我发现里面有很多功能其实和以前的脚本有些重复了，比如数据库的方法，邮箱的方法，下载方法等等，假如每个脚本里都有这些方法，如果有一天，我换了一个环境，改变了数据库密码，或者想改变邮箱的smtp地址，这时就懵逼了，有多少脚本就需要改多少次数据。有人可能说不用担心，总会有简单的办法，或许这一次有办法，但下一次以及以后呢？每个互相独立的脚本很好写，很好运行，很好维护，但当你需要维护的脚本太多了该怎么办，你如果只是写一两个脚本就心满意足，那这些完全不用考虑。"></a>今天本来想再写一个脚本放到服务器里运行，想到脚本的功能时我发现里面有很多功能其实和以前的脚本有些重复了，比如数据库的方法，邮箱的方法，下载方法等等，假如每个脚本里都有这些方法，如果有一天，我换了一个环境，改变了数据库密码，或者想改变邮箱的smtp地址，这时就懵逼了，有多少脚本就需要改多少次数据。有人可能说不用担心，总会有简单的办法，或许这一次有办法，但下一次以及以后呢？每个互相独立的脚本很好写，很好运行，很好维护，但当你需要维护的脚本太多了该怎么办，你如果只是写一两个脚本就心满意足，那这些完全不用考虑。</h3><h3 id="或许是套着框架写代码写习惯了，我理所应当的想到了引入框架的概念，将各个逻辑分层，对一些固定的操作封装起来，使用控制层和模型层的概念，即使前期只有少量的脚本，但也要将整个结构框架构建起来，一点点的充实和完善，不用等到后期一大堆脚本文件的时候，弄的自己手忙脚乱，提高代码的可维护性，可移植性，可扩展性，会让整个结构看起来简洁高效。"><a href="#或许是套着框架写代码写习惯了，我理所应当的想到了引入框架的概念，将各个逻辑分层，对一些固定的操作封装起来，使用控制层和模型层的概念，即使前期只有少量的脚本，但也要将整个结构框架构建起来，一点点的充实和完善，不用等到后期一大堆脚本文件的时候，弄的自己手忙脚乱，提高代码的可维护性，可移植性，可扩展性，会让整个结构看起来简洁高效。" class="headerlink" title="或许是套着框架写代码写习惯了，我理所应当的想到了引入框架的概念，将各个逻辑分层，对一些固定的操作封装起来，使用控制层和模型层的概念，即使前期只有少量的脚本，但也要将整个结构框架构建起来，一点点的充实和完善，不用等到后期一大堆脚本文件的时候，弄的自己手忙脚乱，提高代码的可维护性，可移植性，可扩展性，会让整个结构看起来简洁高效。"></a>或许是套着框架写代码写习惯了，我理所应当的想到了引入框架的概念，将各个逻辑分层，对一些固定的操作封装起来，使用控制层和模型层的概念，即使前期只有少量的脚本，但也要将整个结构框架构建起来，一点点的充实和完善，不用等到后期一大堆脚本文件的时候，弄的自己手忙脚乱，提高代码的可维护性，可移植性，可扩展性，会让整个结构看起来简洁高效。</h3><h3 id="当然，这些只是我的一些想法，很简单，现在的代码量不大，我也尝试着去建立这个结构，一点点的去完善，使得更实用，更方便，首先建立类，运用类将固定的一些方法和常量封装起来，留出接口，使其他脚本能够调用即可。然后提取公有的方法，建立公有类。"><a href="#当然，这些只是我的一些想法，很简单，现在的代码量不大，我也尝试着去建立这个结构，一点点的去完善，使得更实用，更方便，首先建立类，运用类将固定的一些方法和常量封装起来，留出接口，使其他脚本能够调用即可。然后提取公有的方法，建立公有类。" class="headerlink" title="当然，这些只是我的一些想法，很简单，现在的代码量不大，我也尝试着去建立这个结构，一点点的去完善，使得更实用，更方便，首先建立类，运用类将固定的一些方法和常量封装起来，留出接口，使其他脚本能够调用即可。然后提取公有的方法，建立公有类。"></a>当然，这些只是我的一些想法，很简单，现在的代码量不大，我也尝试着去建立这个结构，一点点的去完善，使得更实用，更方便，首先建立类，运用类将固定的一些方法和常量封装起来，留出接口，使其他脚本能够调用即可。然后提取公有的方法，建立公有类。</h3>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>对阿里云学生主机和腾讯云学生主机的评测</title>
    <url>/2017/08/06/article94/</url>
    <content><![CDATA[<h2 id="对阿里云学生主机和腾讯云学生主机的评测"><a href="#对阿里云学生主机和腾讯云学生主机的评测" class="headerlink" title="对阿里云学生主机和腾讯云学生主机的评测"></a>对阿里云学生主机和腾讯云学生主机的评测</h2><h3 id="其实写这个已经有些迟了，因为腾讯云里学生认证已经关闭了，官网里连云-校园的链接都没有了，还好我以前收藏了网址，不然都没法领优惠卷续费，不过阿里云的学生主机一直开着，我期间断断续续买了好多次，还是阿里云有钱吧，根本不需要博眼球，优惠了这么长时间。下面是两个优惠"><a href="#其实写这个已经有些迟了，因为腾讯云里学生认证已经关闭了，官网里连云-校园的链接都没有了，还好我以前收藏了网址，不然都没法领优惠卷续费，不过阿里云的学生主机一直开着，我期间断断续续买了好多次，还是阿里云有钱吧，根本不需要博眼球，优惠了这么长时间。下面是两个优惠" class="headerlink" title="其实写这个已经有些迟了，因为腾讯云里学生认证已经关闭了，官网里连云+校园的链接都没有了，还好我以前收藏了网址，不然都没法领优惠卷续费，不过阿里云的学生主机一直开着，我期间断断续续买了好多次，还是阿里云有钱吧，根本不需要博眼球，优惠了这么长时间。下面是两个优惠"></a>其实写这个已经有些迟了，因为腾讯云里学生认证已经关闭了，官网里连云+校园的链接都没有了，还好我以前收藏了网址，不然都没法领优惠卷续费，不过阿里云的学生主机一直开着，我期间断断续续买了好多次，还是阿里云有钱吧，根本不需要博眼球，优惠了这么长时间。下面是两个优惠</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/tenxun3.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/aliyun3.jpg"
                     
                ></p>
<h3 id="腾讯云我买的比较早，那时候还有8元和12元两种套餐，我买的8元的，1G1核1M带宽20G硬盘，12元是2G内存，当时为了省钱就买了8元的，其实还是应该买12元的，后来内存的确有些不够用，不过现在什么都没有了，想换都换不了。"><a href="#腾讯云我买的比较早，那时候还有8元和12元两种套餐，我买的8元的，1G1核1M带宽20G硬盘，12元是2G内存，当时为了省钱就买了8元的，其实还是应该买12元的，后来内存的确有些不够用，不过现在什么都没有了，想换都换不了。" class="headerlink" title="腾讯云我买的比较早，那时候还有8元和12元两种套餐，我买的8元的，1G1核1M带宽20G硬盘，12元是2G内存，当时为了省钱就买了8元的，其实还是应该买12元的，后来内存的确有些不够用，不过现在什么都没有了，想换都换不了。"></a>腾讯云我买的比较早，那时候还有8元和12元两种套餐，我买的8元的，1G1核1M带宽20G硬盘，12元是2G内存，当时为了省钱就买了8元的，其实还是应该买12元的，后来内存的确有些不够用，不过现在什么都没有了，想换都换不了。</h3><h3 id="从图中可以看出来，阿里云比腾讯云要优惠，2G1核1M带宽40G硬盘，一个月是9-9，而且服务器还是高性能的，这个配置在官网的价格要116一个月，而腾讯云这个配置官网一个月卖65，我两边的服务器都买了，所以没事打开测试了一下。"><a href="#从图中可以看出来，阿里云比腾讯云要优惠，2G1核1M带宽40G硬盘，一个月是9-9，而且服务器还是高性能的，这个配置在官网的价格要116一个月，而腾讯云这个配置官网一个月卖65，我两边的服务器都买了，所以没事打开测试了一下。" class="headerlink" title="从图中可以看出来，阿里云比腾讯云要优惠，2G1核1M带宽40G硬盘，一个月是9.9，而且服务器还是高性能的，这个配置在官网的价格要116一个月，而腾讯云这个配置官网一个月卖65，我两边的服务器都买了，所以没事打开测试了一下。"></a>从图中可以看出来，阿里云比腾讯云要优惠，2G1核1M带宽40G硬盘，一个月是9.9，而且服务器还是高性能的，这个配置在官网的价格要116一个月，而腾讯云这个配置官网一个月卖65，我两边的服务器都买了，所以没事打开测试了一下。</h3><h3 id="先看了一下，CPU供应商名、模型名、时钟频率、插槽-x2F-内核的数量-L1-x2F-L2-x2F-L3缓存配置、可用的处理器能力-比如：硬件虚拟化、AES-MMX-SSE-等等。"><a href="#先看了一下，CPU供应商名、模型名、时钟频率、插槽-x2F-内核的数量-L1-x2F-L2-x2F-L3缓存配置、可用的处理器能力-比如：硬件虚拟化、AES-MMX-SSE-等等。" class="headerlink" title="先看了一下，CPU供应商名、模型名、时钟频率、插槽&#x2F;内核的数量, L1&#x2F;L2&#x2F;L3缓存配置、可用的处理器能力(比如：硬件虚拟化、AES, MMX, SSE)等等。"></a>先看了一下，CPU供应商名、模型名、时钟频率、插槽&#x2F;内核的数量, L1&#x2F;L2&#x2F;L3缓存配置、可用的处理器能力(比如：硬件虚拟化、AES, MMX, SSE)等等。</h3><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/tenxun1.jpg"
                     
                ></p>
<h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/aliyun1.jpg"
                     
                > 物理处理器数（插槽）、每个CPU核心数、可用的CPU标志寄存器以及其它东西的数量。 cat &#x2F;proc&#x2F;cpuinfo中的信息 processor       逻辑处理器的id。 physical id    物理封装的处理器的id。 core id        每个核心的id。 cpu cores      位于相同物理封装的处理器中的内核数量。 siblings       位于相同物理封装的处理器中的逻辑处理器的数量。</p>
<h3 id="下面是内存的信息，虽然我也看不太明白"><a href="#下面是内存的信息，虽然我也看不太明白" class="headerlink" title="下面是内存的信息，虽然我也看不太明白"></a>下面是内存的信息，虽然我也看不太明白</h3><h3 id="腾讯云-1"><a href="#腾讯云-1" class="headerlink" title="腾讯云"></a>腾讯云</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/tenxun2.jpg"
                     
                ></p>
<h3 id="阿里云-1"><a href="#阿里云-1" class="headerlink" title="阿里云"></a>阿里云</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/aliyun2.jpg"
                     
                ></p>
<h3 id="总的来说，还是阿里云可能好些，但阿里云网站里的内容太多，每次打开都很慢，我比较喜欢腾讯云，简单一下，我的域名就是在腾讯云买的，各种服务也比较好找，国内云服务商有很多，但提供学生优惠的只有这两家，百度云比较菜没什么名气，等等华为云，说不定以后会推出什么优惠。"><a href="#总的来说，还是阿里云可能好些，但阿里云网站里的内容太多，每次打开都很慢，我比较喜欢腾讯云，简单一下，我的域名就是在腾讯云买的，各种服务也比较好找，国内云服务商有很多，但提供学生优惠的只有这两家，百度云比较菜没什么名气，等等华为云，说不定以后会推出什么优惠。" class="headerlink" title="总的来说，还是阿里云可能好些，但阿里云网站里的内容太多，每次打开都很慢，我比较喜欢腾讯云，简单一下，我的域名就是在腾讯云买的，各种服务也比较好找，国内云服务商有很多，但提供学生优惠的只有这两家，百度云比较菜没什么名气，等等华为云，说不定以后会推出什么优惠。"></a>总的来说，还是阿里云可能好些，但阿里云网站里的内容太多，每次打开都很慢，我比较喜欢腾讯云，简单一下，我的域名就是在腾讯云买的，各种服务也比较好找，国内云服务商有很多，但提供学生优惠的只有这两家，百度云比较菜没什么名气，等等华为云，说不定以后会推出什么优惠。</h3>]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>关于阿里云备案和腾讯云备案的吐槽</title>
    <url>/2017/08/07/article95/</url>
    <content><![CDATA[<h2 id="关于阿里云备案和腾讯云备案的吐槽"><a href="#关于阿里云备案和腾讯云备案的吐槽" class="headerlink" title="关于阿里云备案和腾讯云备案的吐槽"></a>关于阿里云备案和腾讯云备案的吐槽</h2><h3 id="今天阿里云突然通知我备案成功了，然后服务器又自动续费了几天，心中感到一些惊喜，竟然这么快就备案完了，我本来都做好了一个月的准备，要知道上次在腾讯云做备案就差不多整整一个月了。"><a href="#今天阿里云突然通知我备案成功了，然后服务器又自动续费了几天，心中感到一些惊喜，竟然这么快就备案完了，我本来都做好了一个月的准备，要知道上次在腾讯云做备案就差不多整整一个月了。" class="headerlink" title="今天阿里云突然通知我备案成功了，然后服务器又自动续费了几天，心中感到一些惊喜，竟然这么快就备案完了，我本来都做好了一个月的准备，要知道上次在腾讯云做备案就差不多整整一个月了。"></a>今天阿里云突然通知我备案成功了，然后服务器又自动续费了几天，心中感到一些惊喜，竟然这么快就备案完了，我本来都做好了一个月的准备，要知道上次在腾讯云做备案就差不多整整一个月了。</h3><h3 id="我第一次在腾讯云备案rain1024-com的域名时，因为没有幕布，所以还邮寄了幕布，又上传各种材料，等了整整一个月，而且由于是首次备案，服务器也关了一个月，不过腾讯云也有备案多久，免费多久的活动，备案完成后免费给服务器延长了27天，这点还是可以的，而且备案用的幕布是免费邮寄过来的。总体来说不错，就是有些慢。这是我第一次的备案流程。"><a href="#我第一次在腾讯云备案rain1024-com的域名时，因为没有幕布，所以还邮寄了幕布，又上传各种材料，等了整整一个月，而且由于是首次备案，服务器也关了一个月，不过腾讯云也有备案多久，免费多久的活动，备案完成后免费给服务器延长了27天，这点还是可以的，而且备案用的幕布是免费邮寄过来的。总体来说不错，就是有些慢。这是我第一次的备案流程。" class="headerlink" title="我第一次在腾讯云备案rain1024.com的域名时，因为没有幕布，所以还邮寄了幕布，又上传各种材料，等了整整一个月，而且由于是首次备案，服务器也关了一个月，不过腾讯云也有备案多久，免费多久的活动，备案完成后免费给服务器延长了27天，这点还是可以的，而且备案用的幕布是免费邮寄过来的。总体来说不错，就是有些慢。这是我第一次的备案流程。"></a>我第一次在腾讯云备案rain1024.com的域名时，因为没有幕布，所以还邮寄了幕布，又上传各种材料，等了整整一个月，而且由于是首次备案，服务器也关了一个月，不过腾讯云也有备案多久，免费多久的活动，备案完成后免费给服务器延长了27天，这点还是可以的，而且备案用的幕布是免费邮寄过来的。总体来说不错，就是有些慢。这是我第一次的备案流程。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/web36.jpg"
                      alt="enter image description here"
                ></p>
<h3 id="因为腾讯云的服务器配置有些低，运行起来有些卡，我就又在阿里云买了一台学生主机，新的主机需要用rain1024-com域名得备案，而我之前有个rainwbe-site的域名也需要在腾讯云备案。为了比较一下，我在7月28号同时提交了这两个备案，阿里云的我没有幕布，中间还邮寄了幕布用了四天的时间，到今天备案完成一共才用了9天的时间，而我在腾讯云的备案，不需要邮寄幕布，但现在还没有动静，还在管局那里审核。"><a href="#因为腾讯云的服务器配置有些低，运行起来有些卡，我就又在阿里云买了一台学生主机，新的主机需要用rain1024-com域名得备案，而我之前有个rainwbe-site的域名也需要在腾讯云备案。为了比较一下，我在7月28号同时提交了这两个备案，阿里云的我没有幕布，中间还邮寄了幕布用了四天的时间，到今天备案完成一共才用了9天的时间，而我在腾讯云的备案，不需要邮寄幕布，但现在还没有动静，还在管局那里审核。" class="headerlink" title="因为腾讯云的服务器配置有些低，运行起来有些卡，我就又在阿里云买了一台学生主机，新的主机需要用rain1024.com域名得备案，而我之前有个rainwbe.site的域名也需要在腾讯云备案。为了比较一下，我在7月28号同时提交了这两个备案，阿里云的我没有幕布，中间还邮寄了幕布用了四天的时间，到今天备案完成一共才用了9天的时间，而我在腾讯云的备案，不需要邮寄幕布，但现在还没有动静，还在管局那里审核。"></a>因为腾讯云的服务器配置有些低，运行起来有些卡，我就又在阿里云买了一台学生主机，新的主机需要用rain1024.com域名得备案，而我之前有个rainwbe.site的域名也需要在腾讯云备案。为了比较一下，我在7月28号同时提交了这两个备案，阿里云的我没有幕布，中间还邮寄了幕布用了四天的时间，到今天备案完成一共才用了9天的时间，而我在腾讯云的备案，不需要邮寄幕布，但现在还没有动静，还在管局那里审核。</h3><h3 id="这是阿里云这次的备案流程，"><a href="#这是阿里云这次的备案流程，" class="headerlink" title="这是阿里云这次的备案流程，"></a>这是阿里云这次的备案流程，</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/web33.jpg"
                      alt="enter image description here"
                ></p>
<h3 id="这是阿里云给我免费续费9天云服务器"><a href="#这是阿里云给我免费续费9天云服务器" class="headerlink" title="这是阿里云给我免费续费9天云服务器"></a>这是阿里云给我免费续费9天云服务器</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/web34.jpg"
                      alt="enter image description here"
                ></p>
<h3 id="这是遥遥无期的腾讯云备案流程"><a href="#这是遥遥无期的腾讯云备案流程" class="headerlink" title="这是遥遥无期的腾讯云备案流程"></a>这是遥遥无期的腾讯云备案流程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/web35.jpg"
                      alt="enter image description here"
                ></p>
<h3 id="最后总结一下，如果比较速度，肯定是阿里云最快了，审核显示的是一个工作日内通过，其实几个小时就审核完了，而腾讯云都写的是3-5个工作日内审核，最少也得一天，三五天都是很正常的。至于优惠，两家都是备案多久免费多久，但腾讯云备案的幕布是免费的，而阿里云的幕布是收费的，而且要15元。这点很坑。"><a href="#最后总结一下，如果比较速度，肯定是阿里云最快了，审核显示的是一个工作日内通过，其实几个小时就审核完了，而腾讯云都写的是3-5个工作日内审核，最少也得一天，三五天都是很正常的。至于优惠，两家都是备案多久免费多久，但腾讯云备案的幕布是免费的，而阿里云的幕布是收费的，而且要15元。这点很坑。" class="headerlink" title="最后总结一下，如果比较速度，肯定是阿里云最快了，审核显示的是一个工作日内通过，其实几个小时就审核完了，而腾讯云都写的是3-5个工作日内审核，最少也得一天，三五天都是很正常的。至于优惠，两家都是备案多久免费多久，但腾讯云备案的幕布是免费的，而阿里云的幕布是收费的，而且要15元。这点很坑。"></a>最后总结一下，如果比较速度，肯定是阿里云最快了，审核显示的是一个工作日内通过，其实几个小时就审核完了，而腾讯云都写的是3-5个工作日内审核，最少也得一天，三五天都是很正常的。至于优惠，两家都是备案多久免费多久，但腾讯云备案的幕布是免费的，而阿里云的幕布是收费的，而且要15元。这点很坑。</h3>]]></content>
      <categories>
        <category>Technique</category>
        <category>Thought</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>云计算</tag>
        <tag>备案</tag>
      </tags>
  </entry>
  <entry>
    <title>请假管理系统</title>
    <url>/2017/08/11/article96/</url>
    <content><![CDATA[<h2 id="请假管理系统"><a href="#请假管理系统" class="headerlink" title="请假管理系统"></a>请假管理系统</h2><h2 id="这几天受朋友之托，写了一个请假管理系统，使用PHP作为开发语言，使用ThinkPHP作为开发框架，使用了大量的ajax进行数据的传输验证，当然还有很多细节，有时间会一一讲解，下面是整个系统的截图，功能都已经实现，包括首页近期请假情况的显示，请假条的申请，学生信息的自动填写，自动生成假条模板可以直接打印，请假条的注销，学生信息的显示，班级每天每周每月的请假情况，年级的总体请假情况，级别，班级和学生的信息添加等等功能。"><a href="#这几天受朋友之托，写了一个请假管理系统，使用PHP作为开发语言，使用ThinkPHP作为开发框架，使用了大量的ajax进行数据的传输验证，当然还有很多细节，有时间会一一讲解，下面是整个系统的截图，功能都已经实现，包括首页近期请假情况的显示，请假条的申请，学生信息的自动填写，自动生成假条模板可以直接打印，请假条的注销，学生信息的显示，班级每天每周每月的请假情况，年级的总体请假情况，级别，班级和学生的信息添加等等功能。" class="headerlink" title="这几天受朋友之托，写了一个请假管理系统，使用PHP作为开发语言，使用ThinkPHP作为开发框架，使用了大量的ajax进行数据的传输验证，当然还有很多细节，有时间会一一讲解，下面是整个系统的截图，功能都已经实现，包括首页近期请假情况的显示，请假条的申请，学生信息的自动填写，自动生成假条模板可以直接打印，请假条的注销，学生信息的显示，班级每天每周每月的请假情况，年级的总体请假情况，级别，班级和学生的信息添加等等功能。"></a>这几天受朋友之托，写了一个请假管理系统，使用PHP作为开发语言，使用ThinkPHP作为开发框架，使用了大量的ajax进行数据的传输验证，当然还有很多细节，有时间会一一讲解，下面是整个系统的截图，功能都已经实现，包括首页近期请假情况的显示，请假条的申请，学生信息的自动填写，自动生成假条模板可以直接打印，请假条的注销，学生信息的显示，班级每天每周每月的请假情况，年级的总体请假情况，级别，班级和学生的信息添加等等功能。</h2><h3 id="开发日志："><a href="#开发日志：" class="headerlink" title="开发日志："></a>开发日志：</h3><h5 id="更新说明：整个项目经过三天的设计和完善，总算差不多了，基本的功能都通了，可以使用，假条的申请注销都没有问题，包括ajax的调用都很好用，学生信息里的下拉列表是个问题，解决了这个问题也让我想通了聊天室应该怎么用ajax，很巧妙，也就是多级的下拉列表的互动传值问题，其他的信息添加和显示都是同理，没有什么区别。第二个难点就是信息的统计，因为统计的方式比较多，涉及到每天的，昨天的，本周，上周，本月，上月，本班级，本级别等各种形式的数据统计，问题就出在了如何获取本周内所有的日期，本月内所有日期获取，解决了这个问题，信息的统计就很好办了。总体开发以及完成，手写代码可能几千，晚上已经全部打了注释，代码的样子很满意，这次模板选的很好，整体写开来也比较快，注释了几十行，方便以后的使用。就这样"><a href="#更新说明：整个项目经过三天的设计和完善，总算差不多了，基本的功能都通了，可以使用，假条的申请注销都没有问题，包括ajax的调用都很好用，学生信息里的下拉列表是个问题，解决了这个问题也让我想通了聊天室应该怎么用ajax，很巧妙，也就是多级的下拉列表的互动传值问题，其他的信息添加和显示都是同理，没有什么区别。第二个难点就是信息的统计，因为统计的方式比较多，涉及到每天的，昨天的，本周，上周，本月，上月，本班级，本级别等各种形式的数据统计，问题就出在了如何获取本周内所有的日期，本月内所有日期获取，解决了这个问题，信息的统计就很好办了。总体开发以及完成，手写代码可能几千，晚上已经全部打了注释，代码的样子很满意，这次模板选的很好，整体写开来也比较快，注释了几十行，方便以后的使用。就这样" class="headerlink" title="更新说明：整个项目经过三天的设计和完善，总算差不多了，基本的功能都通了，可以使用，假条的申请注销都没有问题，包括ajax的调用都很好用，学生信息里的下拉列表是个问题，解决了这个问题也让我想通了聊天室应该怎么用ajax，很巧妙，也就是多级的下拉列表的互动传值问题，其他的信息添加和显示都是同理，没有什么区别。第二个难点就是信息的统计，因为统计的方式比较多，涉及到每天的，昨天的，本周，上周，本月，上月，本班级，本级别等各种形式的数据统计，问题就出在了如何获取本周内所有的日期，本月内所有日期获取，解决了这个问题，信息的统计就很好办了。总体开发以及完成，手写代码可能几千，晚上已经全部打了注释，代码的样子很满意，这次模板选的很好，整体写开来也比较快，注释了几十行，方便以后的使用。就这样"></a>更新说明：整个项目经过三天的设计和完善，总算差不多了，基本的功能都通了，可以使用，假条的申请注销都没有问题，包括ajax的调用都很好用，学生信息里的下拉列表是个问题，解决了这个问题也让我想通了聊天室应该怎么用ajax，很巧妙，也就是多级的下拉列表的互动传值问题，其他的信息添加和显示都是同理，没有什么区别。第二个难点就是信息的统计，因为统计的方式比较多，涉及到每天的，昨天的，本周，上周，本月，上月，本班级，本级别等各种形式的数据统计，问题就出在了如何获取本周内所有的日期，本月内所有日期获取，解决了这个问题，信息的统计就很好办了。总体开发以及完成，手写代码可能几千，晚上已经全部打了注释，代码的样子很满意，这次模板选的很好，整体写开来也比较快，注释了几十行，方便以后的使用。就这样</h5><h5 id="更新说明，新增了学生信息表，添加了学生列表页面，修改了小细节包括多下拉列表的显示，2-新增了请假申请的页面，完善了表单信息"><a href="#更新说明，新增了学生信息表，添加了学生列表页面，修改了小细节包括多下拉列表的显示，2-新增了请假申请的页面，完善了表单信息" class="headerlink" title="更新说明，新增了学生信息表，添加了学生列表页面，修改了小细节包括多下拉列表的显示，2.新增了请假申请的页面，完善了表单信息"></a>更新说明，新增了学生信息表，添加了学生列表页面，修改了小细节包括多下拉列表的显示，2.新增了请假申请的页面，完善了表单信息</h5><h5 id="开启了登录模式，完成了登录功能"><a href="#开启了登录模式，完成了登录功能" class="headerlink" title="开启了登录模式，完成了登录功能"></a>开启了登录模式，完成了登录功能</h5><h5 id="写好了请假条的模板，已经修改了首页的信息，菜单栏等设置，上传README-md文档"><a href="#写好了请假条的模板，已经修改了首页的信息，菜单栏等设置，上传README-md文档" class="headerlink" title="写好了请假条的模板，已经修改了首页的信息，菜单栏等设置，上传README.md文档"></a>写好了请假条的模板，已经修改了首页的信息，菜单栏等设置，上传README.md文档</h5><h5 id="项目基础，上传thinkphp框架"><a href="#项目基础，上传thinkphp框架" class="headerlink" title="项目基础，上传thinkphp框架"></a>项目基础，上传thinkphp框架</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave14.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave1.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave2.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave3.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave4.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave5.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave6.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave7.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave8.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave9.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave10.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave11.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave12.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/leave13.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>技术心得</tag>
        <tag>技术知识</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Rain在线聊天室</title>
    <url>/2017/08/15/article97/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。"><a href="#Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。" class="headerlink" title="Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。"></a>Rain在线聊天室是我很久之前就想做的一个东西，在QQ或者一些其他平台上，有些东西是不能乱说的，因为有关键词的筛查，而其他的聊天软件使用起来比较麻烦，所以我想写一个在线的即时聊天室，打开就可以说话，整个功能就搭建在我的服务器上，不怕什么筛查，更不会有社区送温暖，开门有快递，你的水表坏了，你有外卖等情况发生。</h2><h2 id="整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。"><a href="#整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。" class="headerlink" title="整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。"></a>整个功能并不复杂，只是在消息的传送和刷新上有些麻烦，必须保证聊天记录的准确和同步性，调试了很多bug，还有就是用户列表的显示，用户状态的判断，这一块非常麻烦，我一直在思考一种高效实时的检测方式，现在只是一个简单请求方式，我会继续慢慢完善。截图和开发日志放在下面。</h2><h1 id="聊天室我已经放到服务器里，有想要尝试的可以直接访问http-chat-rain1024-com"><a href="#聊天室我已经放到服务器里，有想要尝试的可以直接访问http-chat-rain1024-com" class="headerlink" title="聊天室我已经放到服务器里，有想要尝试的可以直接访问http://chat.rain1024.com"></a>聊天室我已经放到服务器里，有想要尝试的可以直接访问<a class="link"   href="http://chat.rain1024.com/" >http://chat.rain1024.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><h2 id="开发日志"><a href="#开发日志" class="headerlink" title="开发日志"></a>开发日志</h2><h4 id="更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次"><a href="#更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次" class="headerlink" title="更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次"></a>更新了在线用户列表显示功能，可以实时的更新在线的用户，超时不说话的，会被认为已经离线，如果继续超过一定时间，则系统将会终结账号，还可以手动点击来刷新在线用户的列表。修复了在发送消息的时候，有时会重复出现两次，但数据库中只出现了一次记录的bug，因为在发送消息的时候会请求系统的聊天记录，而此时正好和页面自动请求发生了重合，导致信息被请求了多次</h4><h4 id="更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录"><a href="#更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录" class="headerlink" title="更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录"></a>更新说明：添加了数据库，支持聊天记录的保存，用户每次进入聊天室都需要登录，输入用户名即可，系统会自动分配一个头像。使用limint，和count，在每次进入系统，都会自动显示上一次的前十条聊天记录，聊天时每提交发言，都会请求一遍系统中的聊天记录，使用轮播技术，系统会每隔一段时间自动请求聊天记录</h4><h4 id="项目开始开发，基础的thinkphp框架"><a href="#项目开始开发，基础的thinkphp框架" class="headerlink" title="项目开始开发，基础的thinkphp框架"></a>项目开始开发，基础的thinkphp框架</h4><h2 id="聊天室截图"><a href="#聊天室截图" class="headerlink" title="聊天室截图"></a>聊天室截图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php24.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/php/php25.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>聊天室</tag>
      </tags>
  </entry>
  <entry>
    <title>在Wordpress博客中添加能发送邮件的留言板功能</title>
    <url>/2017/08/21/article98/</url>
    <content><![CDATA[<h1 id="在Wordpress博客中添加能发送邮件的留言板功能"><a href="#在Wordpress博客中添加能发送邮件的留言板功能" class="headerlink" title="在Wordpress博客中添加能发送邮件的留言板功能"></a>在Wordpress博客中添加能发送邮件的留言板功能</h1><h2 id="在wordpress中是没有留言板功能的，游客只能在文章中进行评论，想要留言需要安装留言板的插件，但我看了几个感觉不好用，不如自己写一个，还能发送邮件通知。-如果别人也能用的话，就更好了，所以我写了这篇文章，有需要的朋友可以直接使用我写的这个小功能，非常简单，但很实用。"><a href="#在wordpress中是没有留言板功能的，游客只能在文章中进行评论，想要留言需要安装留言板的插件，但我看了几个感觉不好用，不如自己写一个，还能发送邮件通知。-如果别人也能用的话，就更好了，所以我写了这篇文章，有需要的朋友可以直接使用我写的这个小功能，非常简单，但很实用。" class="headerlink" title="在wordpress中是没有留言板功能的，游客只能在文章中进行评论，想要留言需要安装留言板的插件，但我看了几个感觉不好用，不如自己写一个，还能发送邮件通知。 如果别人也能用的话，就更好了，所以我写了这篇文章，有需要的朋友可以直接使用我写的这个小功能，非常简单，但很实用。"></a>在wordpress中是没有留言板功能的，游客只能在文章中进行评论，想要留言需要安装留言板的插件，但我看了几个感觉不好用，不如自己写一个，还能发送邮件通知。 如果别人也能用的话，就更好了，所以我写了这篇文章，有需要的朋友可以直接使用我写的这个小功能，非常简单，但很实用。</h2><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ol>
<li>首先在文章末尾有一段HTML代码，在wordpress后台打开外观功能里的自定义选项，</li>
<li>然后在侧边栏菜单，或者想要放置留言板的地方。添加一个HTML自定义框，标题写留言板或其他，内容里将代码复制进去。</li>
<li>在代码中有一行注释，注释下面有个input标签，将里面的value修改为你要接收邮件的邮箱号。</li>
<li>这样应该看到效果了，点击保存退出即可</li>
</ol>
<blockquote>
<p>注意事项：不要随意更改代码内容</p>
</blockquote>
<h3 id="安装完成后就可以使用了，下面是安装截图"><a href="#安装完成后就可以使用了，下面是安装截图" class="headerlink" title="安装完成后就可以使用了，下面是安装截图"></a>安装完成后就可以使用了，下面是安装截图</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web39.jpg"
                     
                ></h3><h3 id="这是效果图"><a href="#这是效果图" class="headerlink" title="这是效果图"></a>这是效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web40.jpg"
                     
                ></p>
<h3 id="这是手机适应图"><a href="#这是手机适应图" class="headerlink" title="这是手机适应图"></a>这是手机适应图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web41.jpg"
                     
                ></p>
<h3 id="留言成功的邮件"><a href="#留言成功的邮件" class="headerlink" title="留言成功的邮件"></a>留言成功的邮件</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web43.jpg"
                     
                ></p>
<h2 id="功能说明："><a href="#功能说明：" class="headerlink" title="功能说明："></a>功能说明：</h2><h2 id="1-博客里放置的只是前台显示页面，并不会收集你博客的信息，"><a href="#1-博客里放置的只是前台显示页面，并不会收集你博客的信息，" class="headerlink" title="1. 博客里放置的只是前台显示页面，并不会收集你博客的信息，"></a>1. 博客里放置的只是前台显示页面，并不会收集你博客的信息，</h2><h2 id="2-点击提交留言时，页面会提交到我开放的一个邮件发送接口中，然后将邮件发送给你。"><a href="#2-点击提交留言时，页面会提交到我开放的一个邮件发送接口中，然后将邮件发送给你。" class="headerlink" title="2. 点击提交留言时，页面会提交到我开放的一个邮件发送接口中，然后将邮件发送给你。"></a>2. 点击提交留言时，页面会提交到我开放的一个邮件发送接口中，然后将邮件发送给你。</h2><h2 id="3-由于是使用我自己的服务器发送邮件，如果有人恶意使用这个功能，会造成服务器的瘫痪，所以每天限量200条，"><a href="#3-由于是使用我自己的服务器发送邮件，如果有人恶意使用这个功能，会造成服务器的瘫痪，所以每天限量200条，" class="headerlink" title="3. 由于是使用我自己的服务器发送邮件，如果有人恶意使用这个功能，会造成服务器的瘫痪，所以每天限量200条，"></a>3. 由于是使用我自己的服务器发送邮件，如果有人恶意使用这个功能，会造成服务器的瘫痪，所以每天限量200条，</h2><h2 id="4-等以后我想出什么更好的鉴权方式，再免费提供给大家使用。"><a href="#4-等以后我想出什么更好的鉴权方式，再免费提供给大家使用。" class="headerlink" title="4. 等以后我想出什么更好的鉴权方式，再免费提供给大家使用。"></a>4. 等以后我想出什么更好的鉴权方式，再免费提供给大家使用。</h2><h3 id="前台代码："><a href="#前台代码：" class="headerlink" title="前台代码："></a>前台代码：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://cos.rain1024.com/blog/static/layui/css/layui.css&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://cos.rain1024.com/blog/static/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2 align=&quot;center&quot; id=&quot;state&quot; style=&quot;&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;div align=&quot;left&quot; style=&quot;margin-left:-65px;&quot; &gt;</span><br><span class="line">    &lt;form class=&quot;layui-form&quot; action=&quot;&quot;&gt;</span><br><span class="line">        &lt;!--你的邮箱地址,你的邮箱地址,你的邮箱地址,你的邮箱地址,你的邮箱地址,你的邮箱地址,你的邮箱地址,你的邮箱地址,你的邮箱地址--&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; value=&quot;你的邮箱地址&quot; id=&quot;my_email&quot; name=&quot;my_email&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;layui-form-label&quot;&gt;邮箱&lt;/label&gt;</span><br><span class="line">            &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; required  lay-verify=&quot;required&quot; placeholder=&quot;请输入你的邮箱&quot; autocomplete=&quot;off&quot; class=&quot;layui-input&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;layui-form-item layui-form-text&quot;&gt;</span><br><span class="line">            &lt;label class=&quot;layui-form-label&quot;&gt;留言&lt;/label&gt;</span><br><span class="line">            &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">                &lt;textarea name=&quot;message&quot; id=&quot;message&quot;  placeholder=&quot;请输入你的留言内容&quot; class=&quot;layui-textarea&quot;&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">                &lt;button type=&quot;button&quot; class=&quot;layui-btn&quot; onclick=&quot;submit_form()&quot; lay-filter=&quot;formDemo&quot;&gt;提交留言&lt;/button&gt;</span><br><span class="line">                &lt;button type=&quot;reset&quot; class=&quot;layui-btn layui-btn-primary&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    //Demo</span><br><span class="line">  function submit_form()&#123;</span><br><span class="line">      var my_email = document.getElementById(&#x27;my_email&#x27;).value;</span><br><span class="line">      var email = document.getElementById(&#x27;email&#x27;).value;</span><br><span class="line">      var message = document.getElementById(&#x27;message&#x27;).value;</span><br><span class="line">      if (my_email==&#x27;&#x27;email==&#x27;&#x27;message==&#x27;&#x27;)&#123;</span><br><span class="line">          document.getElementById(&#x27;state&#x27;).innerHTML = &#x27;请重新输入&#x27;;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        document.getElementById(&#x27;state&#x27;).innerHTML = &#x27;&#x27;; </span><br><span class="line">        $.getJSON(&quot;http://function.rain1024.com/index.php?c=email&amp;a=public_sendemail&amp;my_email=&quot;+my_email+&quot;&amp;email=&quot;+email+&quot;&amp;message=&quot;+message, function(data)&#123;</span><br><span class="line">//              document.getElementById(&#x27;state&#x27;).innerHTML = data;</span><br><span class="line">//              alert(data.state);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Technique</category>
        <category>Thought</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用IP接口查询指定IP归属地</title>
    <url>/2017/08/31/article99/</url>
    <content><![CDATA[<h1 id="使用IP接口查询指定IP归属地"><a href="#使用IP接口查询指定IP归属地" class="headerlink" title="使用IP接口查询指定IP归属地"></a>使用IP接口查询指定IP归属地</h1><h3 id="平时网站里有很多服务，经常需要记录使用者的IP地址，但记录下来的IP地址我如果想看一下归属地是在哪里，就需要一个一个的复制去查询，今天本来想用python写个爬虫，找一个能爬的IP查询网站，写成一个接口，一劳永逸，但看到查询网里提供免费的IP调用接口，当然免费次数是1000，不过也够用写了，我的访问量也不是很大。"><a href="#平时网站里有很多服务，经常需要记录使用者的IP地址，但记录下来的IP地址我如果想看一下归属地是在哪里，就需要一个一个的复制去查询，今天本来想用python写个爬虫，找一个能爬的IP查询网站，写成一个接口，一劳永逸，但看到查询网里提供免费的IP调用接口，当然免费次数是1000，不过也够用写了，我的访问量也不是很大。" class="headerlink" title="平时网站里有很多服务，经常需要记录使用者的IP地址，但记录下来的IP地址我如果想看一下归属地是在哪里，就需要一个一个的复制去查询，今天本来想用python写个爬虫，找一个能爬的IP查询网站，写成一个接口，一劳永逸，但看到查询网里提供免费的IP调用接口，当然免费次数是1000，不过也够用写了，我的访问量也不是很大。"></a>平时网站里有很多服务，经常需要记录使用者的IP地址，但记录下来的IP地址我如果想看一下归属地是在哪里，就需要一个一个的复制去查询，今天本来想用python写个爬虫，找一个能爬的IP查询网站，写成一个接口，一劳永逸，但看到查询网里提供免费的IP调用接口，当然免费次数是1000，不过也够用写了，我的访问量也不是很大。</h3><h3 id="这是查询网的网址，有需要的可以进去注册一下，注册了以后他提供很多9种语言的接口，很方便的，代码都给出来了，直接复制就可以，当然得改一下token，换成自己的，我的网站都是用PHP写的，直接使用PHP的代码了，放到function里作为一个公有的函数调用即可，然后保存返回值，一切OK。"><a href="#这是查询网的网址，有需要的可以进去注册一下，注册了以后他提供很多9种语言的接口，很方便的，代码都给出来了，直接复制就可以，当然得改一下token，换成自己的，我的网站都是用PHP写的，直接使用PHP的代码了，放到function里作为一个公有的函数调用即可，然后保存返回值，一切OK。" class="headerlink" title="这是查询网的网址，有需要的可以进去注册一下，注册了以后他提供很多9种语言的接口，很方便的，代码都给出来了，直接复制就可以，当然得改一下token，换成自己的，我的网站都是用PHP写的，直接使用PHP的代码了，放到function里作为一个公有的函数调用即可，然后保存返回值，一切OK。"></a>这是<a class="link"   href="http://user.ip138.com/ip/" >查询网的网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，有需要的可以进去注册一下，注册了以后他提供很多9种语言的接口，很方便的，代码都给出来了，直接复制就可以，当然得改一下token，换成自己的，我的网站都是用PHP写的，直接使用PHP的代码了，放到function里作为一个公有的函数调用即可，然后保存返回值，一切OK。</h3><h3 id="至于说1000次的免费次数，等用完再说吧，毕竟写爬虫还需要维护，能直接用接口就用接口吧，何必自己再造个轮子。"><a href="#至于说1000次的免费次数，等用完再说吧，毕竟写爬虫还需要维护，能直接用接口就用接口吧，何必自己再造个轮子。" class="headerlink" title="至于说1000次的免费次数，等用完再说吧，毕竟写爬虫还需要维护，能直接用接口就用接口吧，何必自己再造个轮子。"></a>至于说1000次的免费次数，等用完再说吧，毕竟写爬虫还需要维护，能直接用接口就用接口吧，何必自己再造个轮子。</h3><h3 id="下面是截图，可以参考一下"><a href="#下面是截图，可以参考一下" class="headerlink" title="下面是截图，可以参考一下"></a>下面是截图，可以参考一下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web45.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/blog/netword/web46.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Base64专题---Base64编码的原理</title>
    <url>/2017/02/03/base-article15/</url>
    <content><![CDATA[<h4 id="平时经常会用到base64编码来加密或者解密数据，在java，php，python中都写过关于怎样使用的base64的代码，想着发到博客里，但发现我自己只是会用，并不清楚base64的原理，所以在发源码之前先补充一篇关于base64原理的介绍，自己学会了才好给别人说。下面是维基的答案，感觉明白了些。有兴趣的可以去深入研究一下，源代码我会贴到文章的最后。"><a href="#平时经常会用到base64编码来加密或者解密数据，在java，php，python中都写过关于怎样使用的base64的代码，想着发到博客里，但发现我自己只是会用，并不清楚base64的原理，所以在发源码之前先补充一篇关于base64原理的介绍，自己学会了才好给别人说。下面是维基的答案，感觉明白了些。有兴趣的可以去深入研究一下，源代码我会贴到文章的最后。" class="headerlink" title="平时经常会用到base64编码来加密或者解密数据，在java，php，python中都写过关于怎样使用的base64的代码，想着发到博客里，但发现我自己只是会用，并不清楚base64的原理，所以在发源码之前先补充一篇关于base64原理的介绍，自己学会了才好给别人说。下面是维基的答案，感觉明白了些。有兴趣的可以去深入研究一下，源代码我会贴到文章的最后。"></a>平时经常会用到base64编码来加密或者解密数据，在java，php，python中都写过关于怎样使用的base64的代码，想着发到博客里，但发现我自己只是会用，并不清楚base64的原理，所以在发源码之前先补充一篇关于base64原理的介绍，自己学会了才好给别人说。下面是维基的答案，感觉明白了些。有兴趣的可以去深入研究一下，源代码我会贴到文章的最后。</h4><ul>
<li>Base64**是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节可表示4个可打印字符。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。</li>
<li>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。</li>
</ul>
<h5 id="编码“Man”"><a href="#编码“Man”" class="headerlink" title="编码“Man”"></a>编码“Man”</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/3.png"
                     
                > 在此例中，Base64算法将三个字符编码为4个字符 Base64索引表： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/cd2336079240319151.png"
                     
                > 如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行base64的编码。在编码后的base64文本后加上一个或两个’&#x3D;’号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个byte）时，最后一个6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。 参考下表： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/Base64-A%E4%BB%A5%E5%8F%8ABC%E7%9A%84Base64%E7%BC%96%E7%A0%81.png"
                     
                ></p>
<h5 id="在URL中的应用"><a href="#在URL中的应用" class="headerlink" title="在URL中的应用"></a>在URL中的应用</h5><ul>
<li>Base64编码可用于在HTTP环境下传递较长的标识信息。例如，在Java持久化系统Hibernate中，就采用了Base64来将一个较长的唯一标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码不仅比较简短，同时也具有不可读性，即所编码的数据不会被人用肉眼所直接看到。 然而，标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“&#x2F;”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符。 为解决此问题，可采用一种用于URL的改进Base64编码，它不在末尾填充’&#x3D;’号，并将标准Base64中的“+”和“&#x2F;”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。 另有一种用于正则表达式的改进Base64变种，它将“+”和“&#x2F;”改成了“!”和“-”，因为“+”，“*”以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。 此外还有一些变种，它们将“+&#x2F;”改为“_-”或“.<em>”（用作编程语言中的标识符名称）或“.-”（用于XML中的Nmtoken）甚至“</em>:”（用于XML中的Name）。</li>
<li>最后： 》》》这是一个能在线对base64进行加密解密的网站<a class="link"   href="http://tool.oschina.net/encrypt?type=3"  title="在线加密解密(采用Crypto-JS实现)">在线加密解密(采用Crypto-JS实现) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h5 id="附带我的关于base64的三篇文章"><a href="#附带我的关于base64的三篇文章" class="headerlink" title="附带我的关于base64的三篇文章"></a>附带我的关于base64的三篇文章</h5><p>》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/python-article0016/"  title="Python实现Base64加密和解密">Python实现Base64加密和解密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/03/java-article0014/"  title="java中使用Base64加密解密的函数">java中使用Base64加密解密的函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/php-article0016/"  title="PHP实现base64加密和解密的方法">PHP实现base64加密和解密的方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>Base64</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中关于重载[]和（） = 运算符</title>
    <url>/2017/02/03/c-article0012/</url>
    <content><![CDATA[<h4 id="关于重载-和（）-x3D-运算符-平时书上教的都是重载个-，-，-，-x2F-，什么的，直接operator-符合，然后一写代码就可以，但有的时候会遇到比较复杂的，就像-可以用来重载一个一维数组，或者二维数组，想要研究的可以重新写一写，可以和我交流。"><a href="#关于重载-和（）-x3D-运算符-平时书上教的都是重载个-，-，-，-x2F-，什么的，直接operator-符合，然后一写代码就可以，但有的时候会遇到比较复杂的，就像-可以用来重载一个一维数组，或者二维数组，想要研究的可以重新写一写，可以和我交流。" class="headerlink" title="关于重载[]和（） &#x3D; 运算符,平时书上教的都是重载个+，-，*，&#x2F;，什么的，直接operator+符合，然后一写代码就可以，但有的时候会遇到比较复杂的，就像[],可以用来重载一个一维数组，或者二维数组，想要研究的可以重新写一写，可以和我交流。"></a>关于重载[]和（） &#x3D; 运算符,平时书上教的都是重载个+，-，*，&#x2F;，什么的，直接operator+符合，然后一写代码就可以，但有的时候会遇到比较复杂的，就像[],可以用来重载一个一维数组，或者二维数组，想要研究的可以重新写一写，可以和我交流。</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Array2</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Array2(int m, int n)</span><br><span class="line">&#123;</span><br><span class="line">p= new int*[m];</span><br><span class="line">for (int i = 0; i &lt; m; i++)</span><br><span class="line">p[i] = new int[n];</span><br><span class="line">&#125;;</span><br><span class="line">Array2() :p(NULL)&#123;&#125;;</span><br><span class="line">Array2 &amp; operator =(const Array2 &amp;arr)</span><br><span class="line">&#123;</span><br><span class="line">if (p == arr.p) return *this;</span><br><span class="line">if (p != NULL) delete[]p;</span><br><span class="line">p = arr.p;</span><br><span class="line">return *this;</span><br><span class="line">&#125;;</span><br><span class="line">int * &amp; operator [](const int &amp; m)</span><br><span class="line">&#123;</span><br><span class="line">return p[m]; //关键在于返回的类型为int *即可</span><br><span class="line">&#125;;</span><br><span class="line">int &amp; operator ()(const int &amp;m, int const &amp; n)</span><br><span class="line">&#123;</span><br><span class="line">return p[m][n];</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">int **p;</span><br><span class="line">&#125;;</span><br><span class="line">int main() &#123;</span><br><span class="line">Array2 a(3,4);</span><br><span class="line">int i,j;</span><br><span class="line">for( i = 0;i &lt; 3; ++i )</span><br><span class="line">for( j = 0; j &lt; 4; j ++ )</span><br><span class="line">a[i][j] = i * 4 + j;</span><br><span class="line">for( i = 0;i &lt; 3; ++i ) &#123;</span><br><span class="line">for( j = 0; j &lt; 4; j ++ ) &#123;</span><br><span class="line">cout &lt;&lt; a(i,j) &lt;&lt; &quot;,&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;next&quot; &lt;&lt; endl;</span><br><span class="line">Array2 b; b = a;</span><br><span class="line">for( i = 0;i &lt; 3; ++i ) &#123;</span><br><span class="line">for( j = 0; j &lt; 4; j ++ ) &#123;</span><br><span class="line">cout &lt;&lt; b[i][j] &lt;&lt; &quot;,&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++调用windows.h显示电脑内存CPU</title>
    <url>/2017/02/07/c-article33/</url>
    <content><![CDATA[<h2 id="分享一段c-调用windows-h，显示当前系统内存使用率，剩余内存，动态显示cpu使用率的代码，在c-编译器中编译好以后直接复制-exe使用即可。效果如下图。"><a href="#分享一段c-调用windows-h，显示当前系统内存使用率，剩余内存，动态显示cpu使用率的代码，在c-编译器中编译好以后直接复制-exe使用即可。效果如下图。" class="headerlink" title="分享一段c++调用windows.h，显示当前系统内存使用率，剩余内存，动态显示cpu使用率的代码，在c++编译器中编译好以后直接复制.exe使用即可。效果如下图。"></a>分享一段c++调用windows.h，显示当前系统内存使用率，剩余内存，动态显示cpu使用率的代码，在c++编译器中编译好以后直接复制.exe使用即可。效果如下图。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/photo/c.png"
                     
                > ```c++ #include “iostream” #include &lt;stdio.h&gt; #include &lt;conio.h&gt; #include &lt;windows.h&gt; using namespace std; const int KB_DIV &#x3D; 1024; const int MB_DIV &#x3D; 1024 * 1024; class CCPUUseRate<br /> {<br /> public:<br /> BOOL Initialize()<br /> {<br /> FILETIME ftIdle, ftKernel, ftUser;<br /> BOOL flag &#x3D; FALSE;<br /> if (flag &#x3D; GetSystemTimes(&amp;ftIdle, &amp;ftKernel, &amp;ftUser))<br /> {<br /> m_fOldCPUIdleTime &#x3D; FileTimeToDouble(ftIdle);<br /> m_fOldCPUKernelTime &#x3D; FileTimeToDouble(ftKernel);<br /> m_fOldCPUUserTime &#x3D; FileTimeToDouble(ftUser); <pre><code> &#125; return flag; &#125; //调用Initialize后要等待1秒再调用此函数 int GetCPUUseRate() &#123; int nCPUUseRate = -1; FILETIME ftIdle, ftKernel, ftUser; if (GetSystemTimes(&ftIdle, &ftKernel, &ftUser)) &#123; double fCPUIdleTime = FileTimeToDouble(ftIdle); double fCPUKernelTime = FileTimeToDouble(ftKernel); double fCPUUserTime = FileTimeToDouble(ftUser); nCPUUseRate= (int)(100.0 - (fCPUIdleTime - m_fOldCPUIdleTime) / (fCPUKernelTime - m_fOldCPUKernelTime + fCPUUserTime - m_fOldCPUUserTime) *100.0); m_fOldCPUIdleTime = fCPUIdleTime; m_fOldCPUKernelTime = fCPUKernelTime; m_fOldCPUUserTime = fCPUUserTime; &#125; return nCPUUseRate; &#125; </code></pre> private:<br /> double FileTimeToDouble(FILETIME &amp;filetime)<br /> {<br /> return (double)(filetime.dwHighDateTime * 4.294967296E9) + (double)filetime.dwLowDateTime;<br /> }<br /> private:<br /> double m_fOldCPUIdleTime;<br /> double m_fOldCPUKernelTime;<br /> double m_fOldCPUUserTime;<br /> };<br /> int main(){ MEMORYSTATUS memStatus; GlobalMemoryStatus(&amp;memStatus); cout&lt;&lt;”**************系统资源显示**************“&lt;&lt;endl&lt;&lt;endl; <pre><code> printf("*******当前内存使用率：%d%%\n",memStatus.dwMemoryLoad); printf("*******当前可用物理内存：%dKB(%dMB)\n",memStatus.dwAvailPhys / KB_DIV,memStatus.dwAvailPhys / MB_DIV); CCPUUseRate cpuUseRate; if (!cpuUseRate.Initialize()) &#123; printf("Error! %d\n", GetLastError()); getch(); return -1; &#125; else &#123; while (true) &#123; Sleep(1000); printf("\r当前CPU使用率为：%4d%%", cpuUseRate.GetCPUUseRate()); &#125; &#125; while(true)&#123; Sleep(1000); &#125; int a;cin>>a; return 0; </code></pre> } ```</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++书上例题分析总结</title>
    <url>/2017/02/16/c-article60/</url>
    <content><![CDATA[<h2 id="这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析"><a href="#这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析" class="headerlink" title="这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析"></a>这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析；这是考试前总结的面向对象程序设计书上的例题，以及特殊函数和自己的分析</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//函数重载 1.6</span><br><span class="line"></span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">int max(int a,int b)&#123;</span><br><span class="line">    return a&gt;b?a:b;</span><br><span class="line">&#125; </span><br><span class="line">float max(float a,float b)&#123;</span><br><span class="line">    return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line">long max(long a,long b)&#123;</span><br><span class="line">    return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;max(a,b)&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//函数模板 1.8</span><br><span class="line">//使用模板时不能只使用两个参数，会报错，如</span><br><span class="line">//[Error] call of overloaded &#x27;max(int&amp;, int&amp;)&#x27; is ambiguous</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">T max(T a,T b,T c)&#123;</span><br><span class="line">    if(b&gt;a) a=b;</span><br><span class="line">    if(c&gt;a) a=c;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int i1=8,i2 = 5,i3 = 6,i;</span><br><span class="line">    double d1 = 56.9,d2 = 90.765,d3 = 43.1 ,d;</span><br><span class="line">    long g1 = 678435,g2 = -1555,g3 = 784354,g;</span><br><span class="line">    i = max(i1,i2,i3);</span><br><span class="line">    d = max(d1,d2,d3);</span><br><span class="line">    g = max(g1,g2,g3);</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;g&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//使用变量的引用来传递值进行转换，也可以传递地址，使用指针获取地址再使用</span><br><span class="line">//变量的引用 1.12</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">int swap(int &amp;a,int &amp;b)&#123;</span><br><span class="line">    return a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">​   </span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    cout&lt;&lt;swap(n,m);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//一个简单的类  2.4</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">#include &quot;algorithm&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Array_max&#123;</span><br><span class="line">    public:</span><br><span class="line">        void set_value();</span><br><span class="line">        void max_value();</span><br><span class="line">        void show_value();</span><br><span class="line">    private:</span><br><span class="line">        int array[100];</span><br><span class="line">        int maxn;</span><br><span class="line">&#125;; </span><br><span class="line">void Array_max::set_value()&#123;</span><br><span class="line">    for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">        cin&gt;&gt;array[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void Array_max::max_value()&#123;</span><br><span class="line">    sort(array,10);</span><br><span class="line">    maxn = array[9];</span><br><span class="line">&#125;</span><br><span class="line">void Array_max::show_value()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;max=&quot;&lt;&lt;maxn&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Array_max arr;</span><br><span class="line">    arr.set_value();</span><br><span class="line">    arr.max_value();</span><br><span class="line">    arr.show_value();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">简单的构造函数  3.1</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Time&#123;</span><br><span class="line">    public:</span><br><span class="line">        Time()&#123; hour = minute = sec = 0;&#125;</span><br><span class="line">        void set_time();</span><br><span class="line">        void show_time();</span><br><span class="line">    private:</span><br><span class="line">        int hour;</span><br><span class="line">        int minute;</span><br><span class="line">        int sec;</span><br><span class="line">&#125;;</span><br><span class="line">void Time::set_time()&#123;</span><br><span class="line">    cin&gt;&gt;hour&gt;&gt;minute&gt;&gt;sec;</span><br><span class="line">&#125;</span><br><span class="line">void Time::show_time()&#123;</span><br><span class="line">    cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;sec&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Time t;</span><br><span class="line">    t.show_time();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">类外定义有参的构造函数  3.2</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Time&#123;</span><br><span class="line">    public:</span><br><span class="line">        Time(int,int,int);</span><br><span class="line">        void set_time();</span><br><span class="line">        void show_time();</span><br><span class="line">    private:</span><br><span class="line">        int hour;</span><br><span class="line">        int minute;</span><br><span class="line">        int sec;</span><br><span class="line">&#125;;</span><br><span class="line">void Time::set_time()&#123;</span><br><span class="line">    cin&gt;&gt;hour&gt;&gt;minute&gt;&gt;sec;</span><br><span class="line">&#125;</span><br><span class="line">void Time::Time(int h,int m,int s)&#123;</span><br><span class="line">     hour = h;</span><br><span class="line">minute = m;</span><br><span class="line">sec = s;</span><br><span class="line">&#125;</span><br><span class="line">void Time::show_time()&#123;</span><br><span class="line">    cout&lt;&lt;hour&lt;&lt;&quot;:&quot;&lt;&lt;minute&lt;&lt;&quot;:&quot;&lt;&lt;sec&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Time t;</span><br><span class="line">    t.show_time();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用默认参数的构造函数  3.4</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Box&#123;</span><br><span class="line">    public:</span><br><span class="line">        Box(int h=0,int w=10,int len=10);</span><br><span class="line">        int volume();</span><br><span class="line">    private:</span><br><span class="line">        int height;</span><br><span class="line">        int width;</span><br><span class="line">        int length;</span><br><span class="line">&#125;;</span><br><span class="line">Box::Box(int h,int w,int len)&#123;</span><br><span class="line">    height = h;</span><br><span class="line">    weigth = w;</span><br><span class="line">    length = len;</span><br><span class="line">&#125;</span><br><span class="line">int Box::volume()&#123;</span><br><span class="line">    return height*weigth*length;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Box box1;</span><br><span class="line">    cout&lt;&lt;box1.volume()&lt;&lt;endl;</span><br><span class="line">    Box box2(15);</span><br><span class="line">    cout&lt;&lt;box2.volume()&lt;&lt;endl;</span><br><span class="line">    Box box3(15,30);</span><br><span class="line">    cout&lt;&lt;box3.volume()&lt;&lt;endl;</span><br><span class="line">    Box box4(15,30,20);</span><br><span class="line">    cout&lt;&lt;box4.volume()&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">析构函数  3.5</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">#include &quot;string&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Student&#123;</span><br><span class="line">    public:</span><br><span class="line">        Student(int n,string nam,char s)&#123;</span><br><span class="line">            num = n;</span><br><span class="line">            name = nam;</span><br><span class="line">            sex = s;</span><br><span class="line">            cout&lt;&lt;&quot;Constructor called.&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        ~Student()&#123;</span><br><span class="line">            cout&lt;&lt;&quot;Destructor called.&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        void dispaly()&#123;</span><br><span class="line">            cout&lt;&lt;&quot;num: &quot;&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;&quot;name: &quot;&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">            cout&lt;&lt;&quot;sex: &quot;&lt;&lt;sex&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    private:</span><br><span class="line">        int num;</span><br><span class="line">        string name;</span><br><span class="line">        char sex;</span><br><span class="line">&#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">​   </span><br><span class="line">    Student stud1(10010,&quot;Wang_li&quot;,&#x27;f&#x27;);</span><br><span class="line">    stud1.dispaly();</span><br><span class="line">    Student stud2(10011,&quot;Zhang_fan&quot;,&#x27;m&#x27;);</span><br><span class="line">    stud2.dispaly();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">对象指针：</span><br><span class="line">Time *pt;  定义指针</span><br><span class="line">Time t1;   定义对象</span><br><span class="line">pt = &amp;t1;  将t1的起始地址给指针pt</span><br><span class="line">指针对成员的引用</span><br><span class="line">*pt</span><br><span class="line">(*pt).hour</span><br><span class="line">pt-&gt;hour</span><br><span class="line">普通函数可以在类内声明为友元函数</span><br><span class="line">friend void display(Time&amp;);</span><br><span class="line">其他类里的成员函数也可以在类内声明为友元函数</span><br><span class="line">friend void Time::display(Date&amp;)</span><br><span class="line">注意括号里的内容，友元函数可以访问私有成员</span><br><span class="line"></span><br><span class="line">最开始的复数相加，重载+运算符  4.2</span><br><span class="line">其他符号的重载都相似，会一个就行</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Complex&#123;</span><br><span class="line">    public:</span><br><span class="line">        Complex()&#123;real = 0;imag = 0;&#125;</span><br><span class="line">        Complex(double r,double i)&#123;real = r;imag = i;&#125;</span><br><span class="line">        Complex operator +(Complex &amp;c2);</span><br><span class="line">        void display();</span><br><span class="line">    private:</span><br><span class="line">        double real;</span><br><span class="line">        double imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex Complex::operator +(Complex &amp;c2)&#123;</span><br><span class="line">    Complex c;</span><br><span class="line">    c.real = real + c2.real;</span><br><span class="line">    c.imag = imag + c2.imag;</span><br><span class="line">    return c; </span><br><span class="line">&#125;</span><br><span class="line">void Complex::display()&#123;</span><br><span class="line">    cout&lt;&lt;real&lt;&lt;&quot; : &quot;&lt;&lt;imag&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Complex c1(3,4),c2(5,-10),c3;</span><br><span class="line">    c3 = c2 + c1;</span><br><span class="line">    c3.display(); </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">重载流插入运算符和流提取运算符</span><br><span class="line">istream &amp; operator &gt;&gt;(istream &amp;,自定义类 &amp;);</span><br><span class="line">ostream &amp; operator &lt;&lt;(ostream &amp;,自定义类 &amp;);</span><br><span class="line">重载流插入运算符 《</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Complex&#123;</span><br><span class="line">    public:</span><br><span class="line">        Complex() &#123;real = 0;imag = 0;&#125;</span><br><span class="line">        Complex(double r,double i)&#123;real = r;imag = i;&#125;</span><br><span class="line">        Complex operator +(Complex&amp;c2);</span><br><span class="line">        friend ostream&amp; operator &lt;&lt;(ostream,Complex&amp;);</span><br><span class="line">    private:</span><br><span class="line">        double real;</span><br><span class="line">        double imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex Complex::operator +(Complex&amp;c2)&#123;</span><br><span class="line">    return Complex(real+c2.real,imag+c2.imag);</span><br><span class="line">&#125;</span><br><span class="line">ostream &amp; operator &lt;&lt;(ostream &amp; output,Complex&amp;c)&#123;</span><br><span class="line">    output&lt;&lt;&quot;(&quot;&lt;&lt;c.real&lt;&lt;&quot;+&quot;&lt;&lt;c.imag&lt;&lt;&quot;i)&quot;&lt;&lt;endl;</span><br><span class="line">    return output;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Complex c1(2,4),c2(6,10),c3;</span><br><span class="line">    c3 = c2 + c1;</span><br><span class="line">    cout&lt;&lt;c3&lt;&lt;endl; </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重载流提取运算符</span><br><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Complex&#123;</span><br><span class="line">    public:</span><br><span class="line">        friend ostream&amp; operator &lt;&lt;(ostream&amp;,Complex&amp;);</span><br><span class="line">        friend istream&amp; operator &gt;&gt;(istream&amp;,Complex&amp;);</span><br><span class="line">    private:</span><br><span class="line">        double real;</span><br><span class="line">        double imag;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; operator &lt;&lt;(ostream&amp; output,Complex&amp; c)&#123;</span><br><span class="line">    output&lt;&lt;c.real&lt;&lt;c.imag&lt;&lt;endl;</span><br><span class="line">    return output;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; operator &gt;&gt;(istream&amp; input,Complex&amp; c)&#123;</span><br><span class="line">    input&gt;&gt;c.real&gt;&gt;c.imag;</span><br><span class="line">    return input;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Complex c1,c2;</span><br><span class="line">    cin&gt;&gt;c1&gt;&gt;c2;</span><br><span class="line">    cout&lt;&lt;c1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c2&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用C++输出两个日期之间的间隔天数</title>
    <url>/2017/02/19/c-article61/</url>
    <content><![CDATA[<h2 id="使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。"><a href="#使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C-输出两个日期之间的间隔天数，并且考虑闰年和其他情况。" class="headerlink" title="使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。"></a>使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。使用C++:输出两个日期之间的间隔天数，并且考虑闰年和其他情况。</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;iostream&quot;</span><br><span class="line">using namespace std;</span><br><span class="line">class Date&#123;</span><br><span class="line">    public:</span><br><span class="line">        void operator ++(int);</span><br><span class="line">        void display();</span><br><span class="line">        void getValue();</span><br><span class="line">        int year;</span><br><span class="line">        int month;</span><br><span class="line">        int day;</span><br><span class="line">&#125;;</span><br><span class="line">void Date::operator ++ (int)&#123;</span><br><span class="line">    if(day==28)&#123;</span><br><span class="line">        if(month==2)&#123;</span><br><span class="line">            if(year%400==0year%4==0&amp;&amp;year%100!=0)&#123;</span><br><span class="line">                day++;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                month++;</span><br><span class="line">                day = 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            day++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(day==29)&#123;</span><br><span class="line">        if(month==2)&#123;</span><br><span class="line">            month++;</span><br><span class="line">            day = 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            day++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(day==30)&#123;</span><br><span class="line">        if(month==4month==6month==9month==11)&#123;</span><br><span class="line">            month++;</span><br><span class="line">            day = 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            day++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(day==31)&#123;</span><br><span class="line">        month++;</span><br><span class="line">            day = 1;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        day++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(month==13)&#123;</span><br><span class="line">        year++;</span><br><span class="line">        month = day = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void Date::getValue()&#123;</span><br><span class="line">    cin&gt;&gt;year&gt;&gt;month&gt;&gt;day;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    Date c1,c2,c3;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    while(n--)&#123;</span><br><span class="line">        c1.getValue();</span><br><span class="line">        c2.getValue();</span><br><span class="line">        int num = 0;</span><br><span class="line">        while(1)&#123;</span><br><span class="line">            c1++;</span><br><span class="line">            num++;</span><br><span class="line">            if(c1.year==c2.year&amp;&amp;c1.month==c2.month&amp;&amp;c1.day==c2.day)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>ACM</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CSDN</title>
    <url>/2017/07/27/csdn/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2017/07/27/css/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>随记而已</title>
    <url>/2017/01/31/diary0001/</url>
    <content><![CDATA[<p>随时记录下简单的，简短的文字，心情而已.我相信,最好的生活是用心甘情愿的态度，过随遇而安的生活。</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
  </entry>
  <entry>
    <title>下载资源</title>
    <url>/2017/01/07/download1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>DownLoad</category>
      </categories>
  </entry>
  <entry>
    <title>Email</title>
    <url>/2017/07/27/email/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>FAQ</title>
    <url>/2017/07/27/faq/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Gateway网关简介及使用</title>
    <url>/2019/10/09/gateway%E7%BD%91%E5%85%B3%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Gateway网关简介及使用"><a href="#Gateway网关简介及使用" class="headerlink" title="Gateway网关简介及使用"></a>Gateway网关简介及使用</h1><h2 id="1-什么是-API-网关（API-Gateway）"><a href="#1-什么是-API-网关（API-Gateway）" class="headerlink" title="1. 什么是 API 网关（API Gateway）"></a>1. 什么是 API 网关（API Gateway）</h2><h3 id="分布式服务架构、微服务架构与-API-网关"><a href="#分布式服务架构、微服务架构与-API-网关" class="headerlink" title="分布式服务架构、微服务架构与 API 网关"></a>分布式服务架构、微服务架构与 API 网关</h3><blockquote>
<p>在微服务架构里，服务的粒度被进一步细分，各个业务服务可以被独立的设计、开发、测试、部署和管理。这时，各个独立部署单元可以用不同的开发测试团队维护，可以使用不同的编程语言和技术平台进行设计，这就要求必须使用一种语言和平 台无关的服务协议作为各个单元间的通讯方式。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191008160206832.png"
                     
                ></p>
<h3 id="API-网关的定义"><a href="#API-网关的定义" class="headerlink" title="API 网关的定义"></a>API 网关的定义</h3><blockquote>
<p>网关的角色是作为一个 API 架构，用来保护、增强和控制对于 API 服务的访问。 API 网关是一个处于应用程序或服务（提供 REST API 接口服务）之前的系统，用来管理授权、访问控制和流量限制等，这样 REST API 接口服务就被 API 网关保护起来，对所有的调用者透明。因此，隐藏在 API 网关后面的业务系统就可以专注于创建和管理服务，而不用去处理这些策略性的基础设施。</p>
</blockquote>
<h3 id="API-网关的职能"><a href="#API-网关的职能" class="headerlink" title="API 网关的职能"></a>API 网关的职能</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191008160325021.png"
                     
                ></p>
<h3 id="API-网关的分类与功能"><a href="#API-网关的分类与功能" class="headerlink" title="API 网关的分类与功能"></a>API 网关的分类与功能</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191008160354957.png"
                     
                ></p>
<h2 id="2-Gateway是什么"><a href="#2-Gateway是什么" class="headerlink" title="2. Gateway是什么"></a>2. Gateway是什么</h2><blockquote>
<p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控&#x2F;埋点，和限流等。</p>
</blockquote>
<h2 id="3-为什么用Gateway"><a href="#3-为什么用Gateway" class="headerlink" title="3. 为什么用Gateway"></a>3. 为什么用Gateway</h2><p>Spring Cloud Gateway 可以看做是一个 Zuul 1.x 的升级版和代替品，比 Zuul 2 更早的使用 Netty 实现异步 IO，从而实现了一个简单、比 Zuul 1.x 更高效的、与 Spring Cloud 紧密配合的 API 网关。 Spring Cloud Gateway 里明确的区分了 Router 和 Filter，并且一个很大的特点是内置了非常多的开箱即用功能，并且都可以通过 SpringBoot 配置或者手工编码链式调用来使用。 比如内置了 10 种 Router，使得我们可以直接配置一下就可以随心所欲的根据 Header、或者 Path、或者 Host、或者 Query 来做路由。 比如区分了一般的 Filter 和全局 Filter，内置了 20 种 Filter 和 9 种全局 Filter，也都可以直接用。当然自定义 Filter 也非常方便。</p>
<h3 id="最重要的几个概念"><a href="#最重要的几个概念" class="headerlink" title="最重要的几个概念"></a>最重要的几个概念</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191008160713822.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191008160809146.png"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191008160825731.png"
                     
                ></p>
<h2 id="4-Gateway怎么用"><a href="#4-Gateway怎么用" class="headerlink" title="4. Gateway怎么用"></a>4. Gateway怎么用</h2><p>说白了 Predicate 就是为了实现一组匹配规则，方便让请求过来找到对应的 Route 进行处理，接下来我们接下 Spring Cloud GateWay 内置几种 Predicate 的使用。</p>
<h3 id="通过时间匹配"><a href="#通过时间匹配" class="headerlink" title="通过时间匹配"></a>通过时间匹配</h3><p>Predicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2019 年 1 月 1 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">       - id: time_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">         - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Spring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：<code>Asia/Shanghai</code>。 After Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2018 年 1 月 20 日 6 点 6 分 6 秒之后的所有请求都转发到地址<code>http://ityouknow.com</code>。<code>+08:00</code>是指时间和 UTC 时间相差八个小时，时间地区为<code>Asia/Shanghai</code>。 添加完路由规则之后，访问地址<code>http://localhost:8080</code>会自动转发到<code>http://ityouknow.com</code>。 Before Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">       - id: after_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">         - Before=2018-01-20T06:06:06+08:00[Asia/Shanghai]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址<code>http://localhost:8080</code>，页面会报 404 没有找到地址。 除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">       - id: after_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">         - Between=2018-01-20T06:06:06+08:00[Asia/Shanghai], 2019-01-20T06:06:06+08:00[Asia/Shanghai]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。</p>
<h3 id="通过-Cookie-匹配"><a href="#通过-Cookie-匹配" class="headerlink" title="通过 Cookie 匹配"></a>通过 Cookie 匹配</h3><p>Cookie Route Predicate 可以接收两个参数，一个是 Cookie name , 一个是正则表达式，路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">       - id: cookie_route</span><br><span class="line">         uri: http://ityouknow.com</span><br><span class="line">         predicates:</span><br><span class="line">         - Cookie=ityouknow, kee.e</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080 --cookie &quot;ityouknow=kee.e&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>则会返回页面代码，如果去掉<code>--cookie &quot;ityouknow=kee.e&quot;</code>，后台汇报 404 错误。 Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: header_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Header=X-Request-Id, \d+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080  -H &quot;X-Request-Id:666666&quot; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>则返回页面代码证明匹配成功。将参数<code>-H &quot;X-Request-Id:666666&quot;</code>改为<code>-H &quot;X-Request-Id:neo&quot;</code>再次执行时返回 404 证明没有匹配。</p>
<h3 id="通过-Host-匹配"><a href="#通过-Host-匹配" class="headerlink" title="通过 Host 匹配"></a>通过 Host 匹配</h3><p>Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用<code>.</code>号作为分隔符。它通过参数中的主机地址作为匹配规则。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: host_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Host=**.ityouknow.com</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080  -H &quot;Host: www.ityouknow.com&quot; </span><br><span class="line">curl http://localhost:8080  -H &quot;Host: md.ityouknow.com&quot; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。</p>
<h3 id="通过请求方式匹配"><a href="#通过请求方式匹配" class="headerlink" title="通过请求方式匹配"></a>通过请求方式匹配</h3><p>可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: method_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Method=GET</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># curl 默认是以 GET 的方式去请求</span><br><span class="line">curl http://localhost:8080</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># curl 默认是以 GET 的方式去请求</span><br><span class="line">curl -X POST http://localhost:8080</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>返回 404 没有找到，证明没有匹配上路由</p>
<h3 id="通过请求路径匹配"><a href="#通过请求路径匹配" class="headerlink" title="通过请求路径匹配"></a>通过请求路径匹配</h3><p>Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: host_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Path=/foo/&#123;segment&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>如果请求路径符合要求，则此路由将匹配，例如：&#x2F;foo&#x2F;1 或者 &#x2F;foo&#x2F;bar。 使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/foo/1</span><br><span class="line">curl http://localhost:8080/foo/xx</span><br><span class="line">curl http://localhost:8080/boo/xx</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报 404，证明路由是通过指定路由来匹配。</p>
<h3 id="通过请求参数匹配"><a href="#通过请求参数匹配" class="headerlink" title="通过请求参数匹配"></a>通过请求参数匹配</h3><p>Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: query_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Query=smile</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这样配置，只要请求中包含 smile 属性的参数即可匹配路由。 使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8080?smile=x&amp;id=2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 smile 参数则不会匹配。 还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: query_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Query=keep, pu.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>这样只要当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由。 使用 curl 测试，命令行输入:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8080?keep=pub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>测试可以返回页面代码，将 keep 的属性值改为 pubx 再次访问就会报 404, 证明路由需要匹配正则表达式才会进行路由。</p>
<h3 id="通过请求-ip-地址进行匹配"><a href="#通过请求-ip-地址进行匹配" class="headerlink" title="通过请求 ip 地址进行匹配"></a>通过请求 ip 地址进行匹配</h3><p>Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1&#x2F;16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">      - id: remoteaddr_route</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - RemoteAddr=192.168.1.1/24</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>可以将此地址设置为本机的 ip 地址进行测试。 果请求的远程地址是 192.168.1.10，则此路由将匹配。</p>
<h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><p>上面为了演示各个 Predicate 的使用，我们是单个单个进行配置测试，其实可以将各种 Predicate 组合起来一起使用。 例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">      routes:</span><br><span class="line">       - id: host_foo_path_headers_to_httpbin</span><br><span class="line">        uri: http://ityouknow.com</span><br><span class="line">        predicates:</span><br><span class="line">        - Host=**.foo.org</span><br><span class="line">        - Path=/headers</span><br><span class="line">        - Method=GET</span><br><span class="line">        - Header=X-Request-Id, \d+</span><br><span class="line">        - Query=foo, ba.</span><br><span class="line">        - Query=baz</span><br><span class="line">        - Cookie=chocolate, ch.p</span><br><span class="line">        - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</p>
<blockquote>
<p>一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发</p>
</blockquote>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>GitHub</title>
    <url>/2017/07/27/github/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Gmail</title>
    <url>/2017/07/27/gmail/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Hash底层存储原理及优化Redis中big Hash的一些建议</title>
    <url>/2021/03/15/hash%E5%BA%95%E5%B1%82%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96redis%E4%B8%ADbig-hash%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[<p>Hash底层存储原理及优化Redis中big Hash的一些建议 Hash 是 Redis 中出现最为频繁的复合型数据结构,除了 dict 结构的数据会用到Hash外,整个 Redis 数据库的所有 key 和 value 也组成了一个全局Hash,还有带过期时间的 key 集合也是一个Hash。set集合相当于一个value为null的Hash，zset 集合中存储 value 和 score 值的映射关系也是通过 hash 结构实现的。 由于业务上考虑不周，使得生产环境中有一个hash结构存储的数据量达到40w，导致redis的内存使用量不断增大，而这个key的查询效率也越来越低，失去了刚开始想用缓存来加快查询速度的初衷。为什么不能出现big hash，这里先分析hash的实现原理与存储过程中的扩容机制。</p>
<h3 id="Hash原理"><a href="#Hash原理" class="headerlink" title="Hash原理"></a>Hash原理</h3><p>Hash内部实现结构上同 Java 的 HashMap 大致相同，都是采用数组 + 链表二维结构。第一维 hash 的数组位置碰撞时,就会将碰撞的元素使用链表串接起来，链表长度过长时，查询时间复杂度会降低到O(n)。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210315091020144.png"
                      alt="image-20210315091020144"
                > Java8中当链表长度大于8时会自动转换为红黑树，提高查询效率，redis对链表采用zipList和hashtable两种结构存储。</p>
<h3 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h3><h4 id="zipList"><a href="#zipList" class="headerlink" title="zipList"></a>zipList</h4><p>ziplist是为了节省内存而开发的一种压缩列表数据结构，ziplist是由一系列特殊编码的连续内存块组成的顺序型数据结构，一个ziplist可以包含任意多个entry，而每一个entry又可以保存一个字节数组或者一个整数值，ziplist不存储指向上一个节点和下一个节点的指针，存储的是上一个节点的长度和当前节点的长度，牺牲了部分读写性能来换取高效的内存利用率，是一种时间换空间的思想，ziplist适用于字段个数少和字段值少的场景。 <code>ziplist</code>的组成结构为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;zlbytes&gt; &lt;zltail&gt; &lt;zllen&gt; &lt;entry&gt; &lt;entry&gt; ... &lt;entry&gt; &lt;zlend&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210315092243393.png"
                      alt="image-20210315092243393"
                ></p>
<h4 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h4><p>Hashtable是通过dictEntry对象来实现的，将dictEntry对象进行再次包装得到对象dictht：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct dictht &#123;</span><br><span class="line">    dictEntry **table;//哈希表数组，每个元素都是一个dictEntry对象。</span><br><span class="line">    unsigned long size;//哈希表大小</span><br><span class="line">    unsigned long sizemask;//掩码大小，用于计算索引值，总是等于size-1</span><br><span class="line">    unsigned long used;//哈希表中的已有节点数</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure></div>

<p>字典的内部嵌套了哈希表dictht对象，下面是字典的定义：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    dictType *type;//字典类型的一些特定函数</span><br><span class="line">    void *privdata;//私有数据，type中的特定函数可能需要用到</span><br><span class="line">    dictht ht[2];//哈希表(注意这里有2个哈希表)</span><br><span class="line">    long rehashidx; //rehash索引，不在rehash时，值为-1</span><br><span class="line">    unsigned long iterators; //正在使用的迭代器数量</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure></div>

<p>所以当创建一个哈希对象时，整体类结构如下 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210315092210011.png"
                      alt="image-20210315092210011"
                ></p>
<h4 id="ziplist与hashtable转换机制"><a href="#ziplist与hashtable转换机制" class="headerlink" title="ziplist与hashtable转换机制"></a>ziplist与hashtable转换机制</h4><p>当一个哈希对象可以满足以下两个条件中的任意一个，哈希对象会选择使用ziplist来进行存储：</p>
<ol>
<li>哈希对象中的所有键值对总长度(包括键和值)小于64字节（这个阈值可以通过参数hash-max-ziplist-value 来进行控制）。</li>
<li>哈希对象中的键值对数量小于512个（这个阈值可以通过参数hash-max-ziplist-entries 来进行控制）。</li>
</ol>
<p>一旦不满足这两个条件中的任意一个，哈希对象就会选择使用hashtable来存储。</p>
<h3 id="扩容流程"><a href="#扩容流程" class="headerlink" title="扩容流程"></a>扩容流程</h3><p>大字典的扩容是非常耗时间的，需要重新申请新的数组，正常情况下，当 hash 表中元素的个数等于第一维数组的长度时，就会开始扩容，扩容的新数组是原数组大小的 2 倍，然后将旧字典所有链表中的元素重新挂接到新的数组下面，这是一个 O(n)级别的操作，Redis 使用渐进式 rehash 扩容，分多次来慢慢的将旧数组中的键值对rehash到新数组的操作就称之为渐进式rehash。渐进式rehash可以避免了集中式rehash带来的庞大计算量，在渐进式rehash过程中，因为还可能会有新的键值对存进来，此时Redis的做法是新添加的键值对统一放入ht[1]中，这样就确保了ht[0]键值对的数量只会减少，当执行rehash操作时需要执行查询操作，此时会先查询ht[0]，查找不到结果再到ht[1]中查询。</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h4 id="1-存储问题"><a href="#1-存储问题" class="headerlink" title="1.存储问题"></a>1.存储问题</h4><p>当key值到达40w左右，底层存储必然会转换为hashtable，相比hashtable，ziplist结构少了指针，大大的减少了内存的使用，而内存对于redis来说弥足珍贵，ziplist存储时内存分配是连续的，查询更快。</p>
<h4 id="2-扩容问题"><a href="#2-扩容问题" class="headerlink" title="2.扩容问题"></a>2.扩容问题</h4><p>每次扩容需要先申请2倍于当前数组大小的新数组，旧数组越大，新数组的内存占用也会翻倍，当扩容过程中，由于redis是单线程，在将旧数据搬迁的的过程中还要支持其他操作的进行，如果此时数据还在不断增加，可能会出现redis迁移很久终于迁到新数组后，又达到扩容条件，需要继续扩容迁移。整个redis服务器的性能都会被拖累。</p>
<h4 id="3-查询问题"><a href="#3-查询问题" class="headerlink" title="3.查询问题"></a>3.查询问题</h4><p>当key值数量倍增，发生hash冲突的概率也会增加，redis底层只有链表来存储，没有使用查询树等高效的数据结构，会让查询速度从O(1)退化到O(n)，影响业务查询效率和用户体验。</p>
<h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><ol>
<li>旧数据的需求是怎样的，是否可以通过更换数据结构来实现，如果只是简单的判断该数据是否存在，可以使用布隆过滤器，布隆过滤器适用位数组实现，内存占用特别小，虽然可能出现一定的偏差，但不会造成大规模缓存穿透的问题，小部分数据错误可以通过数据库层面处理，不影响正常请求的流程。</li>
<li>将key根据关键字段来划分，key名称一般为xxx:xxx:xxx，:的使用类似于一种树形结构，我们可以用不同类型区分不同的hash，或者还可以用时间来划分，时间划分区间可以稍大些，如每个月或每周作为命名区间，这样在查询的时候可以用类型字段时间字段进行不同的分流，还可以省去判断机制，尽量将每个hash的key数量保持在1w左右。</li>
<li>合理的删除机制，因为只能设置hash整体的过期时间，而不能细化到每一个key，所以需要在代码里去定时判断，及时删除很少被使用的key值，只留下热点数据。</li>
<li>使用str来代替hash，这样的好处是可以灵活的对每个str设置过期时间，每次访问的时候再不断更新过期时间，保证热点数据不会超时，冷数据能自动失效，但这样也存在一些问题，redis中对过期数据的清理是采用随机策略和惰性策略，这样能防止大规模数据失效进行清除时占用主线程，然而也会导致很多数据即使过期了也不会真的被清理掉，redis的内存占用还是会不断增加。</li>
<li>优化key或value的内容大小，例如user可以替换为u，order使用o，数据的命名上保持简洁明了。</li>
</ol>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>HTML中使输入框在页面中间</title>
    <url>/2017/01/27/html-article0011/</url>
    <content><![CDATA[<h4 id="在网页中有时想把输入框或者什么其他元素，放到页面的正中间时可以使用这段代码，背景色background可以自己改，我这里只是简单的居中，下面有这段代码的效果图"><a href="#在网页中有时想把输入框或者什么其他元素，放到页面的正中间时可以使用这段代码，背景色background可以自己改，我这里只是简单的居中，下面有这段代码的效果图" class="headerlink" title="在网页中有时想把输入框或者什么其他元素，放到页面的正中间时可以使用这段代码，背景色background可以自己改，我这里只是简单的居中，下面有这段代码的效果图"></a>在网页中有时想把输入框或者什么其他元素，放到页面的正中间时可以使用这段代码，背景色background可以自己改，我这里只是简单的居中，<strong>下面有这段代码的效果图</strong></h4><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<style>
body {
                background: #F7F7F7;
            }
.form {
                position: absolute;
                top: 50%;
                left: 50%;
                margin-left: -80px;
                margin-top: -100px;
                height: 0px;
                width: 0px;
                font-size: 18px;
                -webkit-box-shadow: 0px 0px 10px #A6A6A6;
                background: #fff;
            }
</style>
<body>
<div class="form"> 
<form action="" method="post">
<input type="text" name="login" >
</form>
</div>
</body>
</html>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/QQ%E5%9B%BE%E7%89%8720170203122602.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Home</title>
    <url>/2017/07/27/home/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>使用HTML5制作一个可以保存的在线画板</title>
    <url>/2017/02/13/html-article54/</url>
    <content><![CDATA[<h2 id="使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板"><a href="#使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板" class="headerlink" title="使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板"></a>使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板；使用HTML5制作一个可以保存的在线画板</h2><h3 id="下面是代码，效果如下图，画好以后右键就可以保存为图片"><a href="#下面是代码，效果如下图，画好以后右键就可以保存为图片" class="headerlink" title="下面是代码，效果如下图，画好以后右键就可以保存为图片"></a>下面是代码，效果如下图，画好以后右键就可以保存为图片</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#php100&#123; border:1px solid #ccc;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;canvas id=&quot;php100&quot; width=&quot;500&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"> var canvas = document.getElementById(&#x27;php100&#x27;);</span><br><span class="line"> var p100=canvas.getContext(&quot;2d&quot;);</span><br><span class="line">     p100.lineWidth=5</span><br><span class="line">     p100.strokeStyle=&quot;red&quot;; </span><br><span class="line"> var paint=0;</span><br><span class="line">$(&quot;#php100&quot;).mousedown(function(e)&#123;</span><br><span class="line">  var mouseX = e.pageX - this.offsetLeft;</span><br><span class="line">  var mouseY = e.pageY - this.offsetTop; </span><br><span class="line">  paint=1;</span><br><span class="line">  p100.moveTo(mouseX,mouseY); //起始位置</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;#php100&quot;).mouseup(function(e)&#123;</span><br><span class="line">   paint=0;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;#php100&quot;).mousemove(function(e)&#123;</span><br><span class="line">  var mouseX = e.pageX - this.offsetLeft;</span><br><span class="line">  var mouseY = e.pageY - this.offsetTop; </span><br><span class="line">    if(paint)&#123;</span><br><span class="line">        p100.lineTo(mouseX,mouseY); //终止位置</span><br><span class="line">        p100.stroke();              //结束图形</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/htm4.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>关于新增IP精准地图定位功能的说明</title>
    <url>/2017/02/19/ipdw/</url>
    <content><![CDATA[<h2 id="今天又新增了一个查询IP的功能，在顶部菜单的扩展功能中，网上有输入IP查找到地理位置的工具，但这个可以调用百度地图接口在地图上显示IP位置，还可以显示查询者的IP信息，目前只能使用PC端访问，手机访问时会自动跳出。"><a href="#今天又新增了一个查询IP的功能，在顶部菜单的扩展功能中，网上有输入IP查找到地理位置的工具，但这个可以调用百度地图接口在地图上显示IP位置，还可以显示查询者的IP信息，目前只能使用PC端访问，手机访问时会自动跳出。" class="headerlink" title="今天又新增了一个查询IP的功能，在顶部菜单的扩展功能中，网上有输入IP查找到地理位置的工具，但这个可以调用百度地图接口在地图上显示IP位置，还可以显示查询者的IP信息，目前只能使用PC端访问，手机访问时会自动跳出。"></a>今天又新增了一个查询IP的功能，在顶部菜单的扩展功能中，网上有输入IP查找到地理位置的工具，但这个可以调用百度地图接口在地图上显示IP位置，还可以显示查询者的IP信息，目前只能使用PC端访问，手机访问时会自动跳出。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/ipdw1.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 中的 Streams API 详解</title>
    <url>/2020/01/15/java-8-%E4%B8%AD%E7%9A%84-streams-api-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java-8-中的-Streams-API-详解"><a href="#Java-8-中的-Streams-API-详解" class="headerlink" title="Java 8 中的 Streams API 详解"></a>Java 8 中的 Streams API 详解</h1><p>Streams 的背景，以及 Java 8 中的使用详解</p>
<h2 id="为什么需要-Stream"><a href="#为什么需要-Stream" class="headerlink" title="为什么需要 Stream"></a>为什么需要 Stream</h2><p>Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。它也不同于 StAX 对 XML 解析的 Stream，也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork&#x2F;join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。</p>
<h3 id="什么是聚合操作"><a href="#什么是聚合操作" class="headerlink" title="什么是聚合操作"></a>什么是聚合操作</h3><p>在传统的 J2EE 应用中，Java 代码经常不得不依赖于关系型数据库的聚合操作来完成诸如：</p>
<ul>
<li>客户每月平均消费金额</li>
<li>最昂贵的在售商品</li>
<li>本周完成的有效订单（排除了无效的）</li>
<li>取十个数据样本作为首页推荐</li>
</ul>
<p>这类的操作。 但在当今这个数据大爆炸的时代，在数据来源多样化、数据海量化的今天，很多时候不得不脱离 RDBMS，或者以底层返回的数据为基础进行更上层的数据统计。而 Java 的集合 API 中，仅仅有极少量的辅助型方法，更多的时候是程序员需要用 Iterator 来遍历集合，完成相关的聚合应用逻辑。这是一种远不够高效、笨拙的方法。在 Java 7 中，如果要发现 type 为 grocery 的所有交易，然后返回以交易值降序排序好的交易 ID 集合，我们需要这样写：</p>
<h5 id="清单-1-Java-7-的排序、取值实现"><a href="#清单-1-Java-7-的排序、取值实现" class="headerlink" title="清单 1. Java 7 的排序、取值实现"></a>清单 1. Java 7 的排序、取值实现</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Transaction&gt; groceryTransactions = new Arraylist&lt;&gt;();</span><br><span class="line">for(Transaction t: transactions)&#123;</span><br><span class="line"> if(t.getType() == Transaction.GROCERY)&#123;</span><br><span class="line"> groceryTransactions.add(t);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(groceryTransactions, new Comparator()&#123;</span><br><span class="line"> public int compare(Transaction t1, Transaction t2)&#123;</span><br><span class="line"> return t2.getValue().compareTo(t1.getValue());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">List&lt;Integer&gt; transactionIds = new ArrayList&lt;&gt;();</span><br><span class="line">for(Transaction t: groceryTransactions)&#123;</span><br><span class="line"> transactionsIds.add(t.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而在 Java 8 使用 Stream，代码更加简洁易读；而且使用并发模式，程序执行速度更快。</p>
<h5 id="清单-2-Java-8-的排序、取值实现"><a href="#清单-2-Java-8-的排序、取值实现" class="headerlink" title="清单 2. Java 8 的排序、取值实现"></a>清单 2. Java 8 的排序、取值实现</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = transactions.parallelStream().</span><br><span class="line"> filter(t -&gt; t.getType() == Transaction.GROCERY).</span><br><span class="line"> sorted(comparing(Transaction::getValue).reversed()).</span><br><span class="line"> map(Transaction::getId).</span><br><span class="line"> collect(toList());</span><br></pre></td></tr></table></figure></div>

<p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。 Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。 而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork&#x2F;Join 框架（JSR166y）来拆分任务和加速处理过程。Java 的并行 API 演变历程基本如下：</p>
<ol>
<li>1.0-1.4 中的 java.lang.Thread</li>
<li>5.0 中的 java.util.concurrent</li>
<li>6.0 中的 Phasers 等</li>
<li>7.0 中的 Fork&#x2F;Join 框架</li>
<li>8.0 中的 Lambda</li>
</ol>
<p>Stream 的另外一大特点是，数据源本身可以是无限的。</p>
<h3 id="流的构成"><a href="#流的构成" class="headerlink" title="流的构成"></a>流的构成</h3><p>当我们使用一个流的时候，通常包括三个基本步骤： 获取一个数据源（source）→ 数据转换→执行操作获取想要的结果，每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以像链条一样排列，变成一个管道， 有多种方式生成 Stream Source：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Collection.stream()</span><br><span class="line">* Collection.parallelStream()</span><br><span class="line">* Arrays.stream(T array) or Stream.of()</span><br></pre></td></tr></table></figure></div>

<p>从 BufferedReader</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">* java.io.BufferedReader.lines()</span><br><span class="line"></span><br><span class="line">* java.util.stream.IntStream.range()</span><br><span class="line">* java.nio.file.Files.walk()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>其它<ul>
<li>Random.ints()</li>
<li>BitSet.stream()</li>
<li>Pattern.splitAsStream(java.lang.CharSequence)</li>
<li>JarFile.stream()</li>
</ul>
</li>
</ul>
<p>流的操作类型分为两种：</p>
<ul>
<li><strong>Intermediate</strong> ：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射&#x2F;过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li>
<li><strong>Terminal</strong> ：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li>
</ul>
<p>在对于一个 Stream 进行多次转换操作 (Intermediate 操作)，每次都对 Stream 的每个元素进行转换，而且是执行多次，这样时间复杂度就是 N（转换次数）个 for 循环里把所有操作都做掉的总和吗？其实不是这样的，转换操作都是 lazy 的，多个转换操作只会在 Terminal 操作的时候融合起来，一次循环完成。我们可以这样简单的理解，Stream 里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，在 Terminal 操作的时候循环 Stream 对应的集合，然后对每个元素执行所有的函数。 还有一种操作被称为 <strong>short-circuiting</strong> 。用以指：</p>
<ul>
<li>对于一个 intermediate 操作，如果它接受的是一个无限大（infinite&#x2F;unbounded）的 Stream，但返回一个有限的新 Stream。</li>
<li>对于一个 terminal 操作，如果它接受的是一个无限大的 Stream，但能在有限的时间计算出结果。</li>
</ul>
<p>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。</p>
<h5 id="清单-3-一个流操作的示例"><a href="#清单-3-一个流操作的示例" class="headerlink" title="清单 3. 一个流操作的示例"></a>清单 3. 一个流操作的示例</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum = widgets.stream()</span><br><span class="line">.filter(w -&gt; w.getColor() == RED)</span><br><span class="line"> .mapToInt(w -&gt; w.getWeight())</span><br><span class="line"> .sum();</span><br></pre></td></tr></table></figure></div>

<p>stream() 获取当前小物件的 source，filter 和 mapToInt 为 intermediate 操作，进行数据筛选和转换，最后一个 sum() 为 terminal 操作，对符合条件的全部小物件作重量求和。</p>
<h2 id="流的使用详解"><a href="#流的使用详解" class="headerlink" title="流的使用详解"></a>流的使用详解</h2><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p>
<h3 id="流的构造与转换"><a href="#流的构造与转换" class="headerlink" title="流的构造与转换"></a>流的构造与转换</h3><p>下面提供最常见的几种构造 Stream 的样例。</p>
<h5 id="清单-4-构造流的几种常见方法"><a href="#清单-4-构造流的几种常见方法" class="headerlink" title="清单 4. 构造流的几种常见方法"></a>清单 4. 构造流的几种常见方法</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1. Individual values</span><br><span class="line">Stream stream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class="line">// 2. Arrays</span><br><span class="line">String [] strArray = new String[] &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">stream = Stream.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line">// 3. Collections</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">stream = list.stream();</span><br></pre></td></tr></table></figure></div>

<p>需要注意的是，对于基本数值型，目前有三种对应的包装类型 Stream： IntStream、LongStream、DoubleStream。当然我们也可以用 Stream、Stream &gt;、Stream，但是 boxing 和 unboxing 会很耗时，所以特别为这三种基本数值型提供了对应的 Stream。 Java 8 中还没有提供其它数值型 Stream，因为这将导致扩增的内容较多。而常规的数值型聚合运算可以通过上面三种 Stream 进行。</p>
<h5 id="清单-5-数值流的构造"><a href="#清单-5-数值流的构造" class="headerlink" title="清单 5. 数值流的构造"></a>清单 5. 数值流的构造</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">IntStream.of(new int[]&#123;1, 2, 3&#125;).forEach(System.out::println);</span><br><span class="line">IntStream.range(1, 3).forEach(System.out::println);</span><br><span class="line">IntStream.rangeClosed(1, 3).forEach(System.out::println);</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1. Array</span><br><span class="line">String[] strArray1 = stream.toArray(String[]::new);</span><br><span class="line">// 2. Collection</span><br><span class="line">List&lt;String&gt; list1 = stream.collect(Collectors.toList());</span><br><span class="line">List&lt;String&gt; list2 = stream.collect(Collectors.toCollection(ArrayList::new));</span><br><span class="line">Set set1 = stream.collect(Collectors.toSet());</span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::new));</span><br><span class="line">// 3. String</span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure></div>

<p>一个 Stream 只可以使用一次，上面的代码为了简洁而重复使用了数次。</p>
<h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><p>接下来，当把一个数据结构包装成 Stream 后，就要开始对里面的元素进行各类操作了。常见的操作可以归类如下。 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit 我们下面看一下 Stream 的比较典型用法。 <strong>map&#x2F;flatMap</strong> 我们先来看 map。如果你熟悉 scala 这类函数式语言，对这个方法应该很了解，它的作用就是把 input Stream 的每一个元素，映射成 output Stream 的另外一个元素。</p>
<h5 id="清单-7-转换大写"><a href="#清单-7-转换大写" class="headerlink" title="清单 7. 转换大写"></a>清单 7. 转换大写</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; output = wordList.stream().</span><br><span class="line">map(String::toUpperCase).</span><br><span class="line">collect(Collectors.toList());</span><br></pre></td></tr></table></figure></div>

<p>这段代码把所有的单词转换为大写。</p>
<h5 id="清单-8-平方数"><a href="#清单-8-平方数" class="headerlink" title="清单 8. 平方数"></a>清单 8. 平方数</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Arrays.asList(1, 2, 3, 4);</span><br><span class="line">List&lt;Integer&gt; squareNums = nums.stream().</span><br><span class="line">map(n -&gt; n * n).</span><br><span class="line">collect(Collectors.toList());</span><br></pre></td></tr></table></figure></div>

<p>这段代码生成一个整数 list 的平方数 {1, 4, 9, 16}。 从上面例子可以看出，map 生成的是个 1:1 映射，每个输入元素，都按照规则转换成为另外一个元素。还有一些场景，是一对多映射关系的，这时需要 flatMap。</p>
<h5 id="清单-9-一对多"><a href="#清单-9-一对多" class="headerlink" title="清单 9. 一对多"></a>清单 9. 一对多</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; inputStream = Stream.of(</span><br><span class="line"> Arrays.asList(1),</span><br><span class="line"> Arrays.asList(2, 3),</span><br><span class="line"> Arrays.asList(4, 5, 6)</span><br><span class="line"> );</span><br><span class="line">Stream&lt;Integer&gt; outputStream = inputStream.</span><br><span class="line">flatMap((childList) -&gt; childList.stream());</span><br></pre></td></tr></table></figure></div>

<p>flatMap 把 input Stream 中的层级结构扁平化，就是将最底层元素抽出来放到一起，最终 output 的新 Stream 里面已经没有 List 了，都是直接的数字。 <strong>filter</strong> filter 对原始 Stream 进行某项测试，通过测试的元素被留下来生成一个新 Stream。</p>
<h5 id="清单-10-留下偶数"><a href="#清单-10-留下偶数" class="headerlink" title="清单 10. 留下偶数"></a>清单 10. 留下偶数</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer[] sixNums = &#123;1, 2, 3, 4, 5, 6&#125;;</span><br><span class="line">Integer[] evens =</span><br><span class="line">Stream.of(sixNums).filter(n -&gt; n%2 == 0).toArray(Integer[]::new);</span><br></pre></td></tr></table></figure></div>

<p>经过条件“被 2 整除”的 filter，剩下的数字为 {2, 4, 6}。</p>
<h5 id="清单-11-把单词挑出来"><a href="#清单-11-把单词挑出来" class="headerlink" title="清单 11. 把单词挑出来"></a>清单 11. 把单词挑出来</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; output = reader.lines().</span><br><span class="line"> flatMap(line -&gt; Stream.of(line.split(REGEXP))).</span><br><span class="line"> filter(word -&gt; word.length() &gt; 0).</span><br><span class="line"> collect(Collectors.toList());</span><br></pre></td></tr></table></figure></div>

<p>这段代码首先把每行的单词用 flatMap 整理到新的 Stream，然后保留长度不为 0 的，就是整篇文章中的全部单词了。 <strong>forEach</strong> forEach 方法接收一个 Lambda 表达式，然后在 Stream 的每一个元素上执行该表达式。</p>
<h5 id="清单-12-打印姓名（forEach-和-pre-java8-的对比）"><a href="#清单-12-打印姓名（forEach-和-pre-java8-的对比）" class="headerlink" title="清单 12. 打印姓名（forEach 和 pre-java8 的对比）"></a>清单 12. 打印姓名（forEach 和 pre-java8 的对比）</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Java 8</span><br><span class="line">roster.stream()</span><br><span class="line"> .filter(p -&gt; p.getGender() == Person.Sex.MALE)</span><br><span class="line"> .forEach(p -&gt; System.out.println(p.getName()));</span><br><span class="line">// Pre-Java 8</span><br><span class="line">for (Person p : roster) &#123;</span><br><span class="line"> if (p.getGender() == Person.Sex.MALE) &#123;</span><br><span class="line"> System.out.println(p.getName());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对一个人员集合遍历，找出男性并打印姓名。可以看出来，forEach 是为 Lambda 而设计的，保持了最紧凑的风格。而且 Lambda 表达式本身是可以重用的，非常方便。当需要为多核系统优化时，可以 parallelStream().forEach()，只是此时原有元素的次序没法保证，并行的情况下将改变串行时操作的行为，此时 forEach 本身的实现不需要调整，而 Java8 以前的 for 循环 code 可能需要加入额外的多线程逻辑。 但一般认为，forEach 和常规 for 循环的差异不涉及到性能，它们仅仅是函数式风格与传统 Java 风格的差别。 另外一点需要注意，forEach 是 terminal 操作，因此它执行后，Stream 的元素就被“消费”掉了，你无法对一个 Stream 进行两次 terminal 运算。下面的代码是错误的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">stream.forEach(element -&gt; doOneThing(element));</span><br><span class="line">     stream.forEach(element -&gt; doAnotherThing(element));</span><br></pre></td></tr></table></figure></div>

<p>相反，具有相似功能的 intermediate 操作 peek 可以达到上述目的。如下是出现在该 api javadoc 上的一个示例。</p>
<h5 id="清单-13-peek-对每个元素执行操作并返回一个新的-Stream"><a href="#清单-13-peek-对每个元素执行操作并返回一个新的-Stream" class="headerlink" title="清单 13. peek 对每个元素执行操作并返回一个新的 Stream"></a>清单 13. peek 对每个元素执行操作并返回一个新的 Stream</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)</span><br><span class="line"> .filter(e -&gt; e.length() &gt; 3)</span><br><span class="line"> .peek(e -&gt; System.out.println(&quot;Filtered value: &quot; + e))</span><br><span class="line"> .map(String::toUpperCase)</span><br><span class="line"> .peek(e -&gt; System.out.println(&quot;Mapped value: &quot; + e))</span><br><span class="line"> .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></div>

<p>forEach 不能修改自己包含的本地变量值，也不能用 break&#x2F;return 之类的关键字提前结束循环。 <strong>findFirst</strong> 这是一个 termimal 兼 short-circuiting 操作，它总是返回 Stream 的第一个元素，或者空。 这里比较重点的是它的返回值类型：Optional。这也是一个模仿 Scala 语言中的概念，作为一个容器，它可能含有某值，或者不包含。使用它的目的是尽可能避免 NullPointerException。</p>
<h5 id="清单-14-Optional-的两个用例"><a href="#清单-14-Optional-的两个用例" class="headerlink" title="清单 14. Optional 的两个用例"></a>清单 14. Optional 的两个用例</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String strA = &quot; abcd &quot;, strB = null;</span><br><span class="line">print(strA);</span><br><span class="line">print(&quot;&quot;);</span><br><span class="line">print(strB);</span><br><span class="line">getLength(strA);</span><br><span class="line">getLength(&quot;&quot;);</span><br><span class="line">getLength(strB);</span><br><span class="line">public static void print(String text) &#123;</span><br><span class="line"> // Java 8</span><br><span class="line"> Optional.ofNullable(text).ifPresent(System.out::println);</span><br><span class="line"> // Pre-Java 8</span><br><span class="line"> if (text != null) &#123;</span><br><span class="line"> System.out.println(text);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">public static int getLength(String text) &#123;</span><br><span class="line"> // Java 8</span><br><span class="line">return Optional.ofNullable(text).map(String::length).orElse(-1);</span><br><span class="line"> // Pre-Java 8</span><br><span class="line">// return if (text != null) ? text.length() : -1;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></div>

<p>在更复杂的 if (xx !&#x3D; null) 的情况中，使用 Optional 代码的可读性更好，而且它提供的是编译时检查，能极大的降低 NPE 这种 Runtime Exception 对程序的影响，或者迫使程序员更早的在编码阶段处理空值问题，而不是留到运行时再发现和调试。 Stream 中的 findAny、max&#x2F;min、reduce 等方法等返回 Optional 值。还有例如 IntStream.average() 返回 OptionalDouble 等等。 <strong>reduce</strong> 这个方法的主要作用是把 Stream 元素组合起来。它提供一个起始值（种子），然后依照运算规则（BinaryOperator），和前面 Stream 的第一个、第二个、第 n 个元素组合。从这个意义上说，字符串拼接、数值的 sum、min、max、average 都是特殊的 reduce。例如 Stream 的 sum 就相当于 Integer sum &#x3D; integers.reduce(0, (a, b) -&gt; a+b); 或 Integer sum &#x3D; integers.reduce(0, Integer::sum); 也有没有起始值的情况，这时会把 Stream 的前面两个元素组合起来，返回的是 Optional。</p>
<h5 id="清单-15-reduce-的用例"><a href="#清单-15-reduce-的用例" class="headerlink" title="清单 15. reduce 的用例"></a>清单 15. reduce 的用例</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 字符串连接，concat = &quot;ABCD&quot;</span><br><span class="line">String concat = Stream.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;).reduce(&quot;&quot;, String::concat); </span><br><span class="line">// 求最小值，minValue = -3.0</span><br><span class="line">double minValue = Stream.of(-1.5, 1.0, -3.0, -2.0).reduce(Double.MAX_VALUE, Double::min); </span><br><span class="line">// 求和，sumValue = 10, 有起始值</span><br><span class="line">int sumValue = Stream.of(1, 2, 3, 4).reduce(0, Integer::sum);</span><br><span class="line">// 求和，sumValue = 10, 无起始值</span><br><span class="line">sumValue = Stream.of(1, 2, 3, 4).reduce(Integer::sum).get();</span><br><span class="line">// 过滤，字符串连接，concat = &quot;ace&quot;</span><br><span class="line">concat = Stream.of(&quot;a&quot;, &quot;B&quot;, &quot;c&quot;, &quot;D&quot;, &quot;e&quot;, &quot;F&quot;).</span><br><span class="line"> filter(x -&gt; x.compareTo(&quot;Z&quot;) &gt; 0).</span><br><span class="line"> reduce(&quot;&quot;, String::concat);</span><br></pre></td></tr></table></figure></div>

<p>上面代码例如第一个示例的 reduce()，第一个参数（空白字符）即为起始值，第二个参数（String::concat）为 BinaryOperator。这类有起始值的 reduce() 都返回具体的对象。而对于第四个示例没有起始值的 reduce()，由于可能没有足够的元素，返回的是 Optional，请留意这个区别。 <strong>limit&#x2F;skip</strong> limit 返回 Stream 的前面 n 个元素；skip 则是扔掉前 n 个元素（它是由一个叫 subStream 的方法改名而来）。</p>
<h5 id="清单-16-limit-和-skip-对运行次数的影响"><a href="#清单-16-limit-和-skip-对运行次数的影响" class="headerlink" title="清单 16. limit 和 skip 对运行次数的影响"></a>清单 16. limit 和 skip 对运行次数的影响</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void testLimitAndSkip() &#123;</span><br><span class="line"> List&lt;Person&gt; persons = new ArrayList();</span><br><span class="line"> for (int i = 1; i &lt;= 10000; i++) &#123;</span><br><span class="line"> Person person = new Person(i, &quot;name&quot; + i);</span><br><span class="line"> persons.add(person);</span><br><span class="line"> &#125;</span><br><span class="line">List&lt;String&gt; personList2 = persons.stream().</span><br><span class="line">map(Person::getName).limit(10).skip(3).collect(Collectors.toList());</span><br><span class="line"> System.out.println(personList2);</span><br><span class="line">&#125;</span><br><span class="line">private class Person &#123;</span><br><span class="line"> public int no;</span><br><span class="line"> private String name;</span><br><span class="line"> public Person (int no, String name) &#123;</span><br><span class="line"> this.no = no;</span><br><span class="line"> this.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"> public String getName() &#123;</span><br><span class="line"> System.out.println(name);</span><br><span class="line"> return name;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">name1</span><br><span class="line">name2</span><br><span class="line">name3</span><br><span class="line">name4</span><br><span class="line">name5</span><br><span class="line">name6</span><br><span class="line">name7</span><br><span class="line">name8</span><br><span class="line">name9</span><br><span class="line">name10</span><br><span class="line">[name4, name5, name6, name7, name8, name9, name10]</span><br></pre></td></tr></table></figure></div>

<p>这是一个有 10，000 个元素的 Stream，但在 short-circuiting 操作 limit 和 skip 的作用下，管道中 map 操作指定的 getName() 方法的执行次数为 limit 所限定的 10 次，而最终返回结果在跳过前 3 个元素后只有后面 7 个返回。 有一种情况是 limit&#x2F;skip 无法达到 short-circuiting 目的的，就是把它们放在 Stream 的排序操作后，原因跟 sorted 这个 intermediate 操作有关：此时系统并不知道 Stream 排序后的次序如何，所以 sorted 中的操作看上去就像完全没有被 limit 或者 skip 一样。</p>
<h5 id="清单-17-limit-和-skip-对-sorted-后的运行次数无影响"><a href="#清单-17-limit-和-skip-对-sorted-后的运行次数无影响" class="headerlink" title="清单 17. limit 和 skip 对 sorted 后的运行次数无影响"></a>清单 17. limit 和 skip 对 sorted 后的运行次数无影响</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = new ArrayList();</span><br><span class="line"> for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line"> Person person = new Person(i, &quot;name&quot; + i);</span><br><span class="line"> persons.add(person);</span><br><span class="line"> &#125;</span><br><span class="line">List&lt;Person&gt; personList2 = persons.stream().sorted((p1, p2) -&gt; </span><br><span class="line">p1.getName().compareTo(p2.getName())).limit(2).collect(Collectors.toList());</span><br><span class="line">System.out.println(personList2);</span><br></pre></td></tr></table></figure></div>

<p>上面的示例对清单 13 做了微调，首先对 5 个元素的 Stream 排序，然后进行 limit 操作。输出结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">name2</span><br><span class="line">name1</span><br><span class="line">name3</span><br><span class="line">name2</span><br><span class="line">name4</span><br><span class="line">name3</span><br><span class="line">name5</span><br><span class="line">name4</span><br><span class="line">[stream.StreamDW$Person@816f27d, stream.StreamDW$Person@87aac27]</span><br></pre></td></tr></table></figure></div>

<p>即虽然最后的返回元素数量是 2，但整个管道中的 sorted 表达式执行次数没有像前面例子相应减少。 最后有一点需要注意的是，对一个 parallel 的 Steam 管道来说，如果其元素是有序的，那么 limit 操作的成本会比较大，因为它的返回对象必须是前 n 个也有一样次序的元素。取而代之的策略是取消元素间的次序，或者不要用 parallel Stream。 <strong>sorted</strong> 对 Stream 的排序通过 sorted 进行，它比数组的排序更强之处在于你可以首先对 Stream 进行各类 map、filter、limit、skip 甚至 distinct 来减少元素数量后，再排序，这能帮助程序明显缩短执行时间。我们对清单 14 进行优化：</p>
<h5 id="清单-18-优化：排序前进行-limit-和-skip"><a href="#清单-18-优化：排序前进行-limit-和-skip" class="headerlink" title="清单 18. 优化：排序前进行 limit 和 skip"></a>清单 18. 优化：排序前进行 limit 和 skip</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = new ArrayList();</span><br><span class="line"> for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line"> Person person = new Person(i, &quot;name&quot; + i);</span><br><span class="line"> persons.add(person);</span><br><span class="line"> &#125;</span><br><span class="line">List&lt;Person&gt; personList2 = persons.stream().limit(2).sorted((p1, p2) -&gt; p1.getName().compareTo(p2.getName())).collect(Collectors.toList());</span><br><span class="line">System.out.println(personList2);</span><br></pre></td></tr></table></figure></div>

<p>结果会简单很多：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">name2</span><br><span class="line">name1</span><br><span class="line">[stream.StreamDW$Person@6ce253f1, stream.StreamDW$Person@53d8d10a]</span><br></pre></td></tr></table></figure></div>

<p>当然，这种优化是有 business logic 上的局限性的：即不要求排序后再取值。 <strong>min&#x2F;max&#x2F;distinct</strong> min 和 max 的功能也可以通过对 Stream 元素先排序，再 findFirst 来实现，但前者的性能会更好，为 O(n)，而 sorted 的成本是 O(n log n)。同时它们作为特殊的 reduce 方法被独立出来也是因为求最大最小值是很常见的操作。</p>
<h5 id="清单-19-找出最长一行的长度"><a href="#清单-19-找出最长一行的长度" class="headerlink" title="清单 19. 找出最长一行的长度"></a>清单 19. 找出最长一行的长度</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">BufferedReader br = new BufferedReader(new FileReader(&quot;c:\\SUService.log&quot;));</span><br><span class="line">int longest = br.lines().</span><br><span class="line"> mapToInt(String::length).</span><br><span class="line"> max().</span><br><span class="line"> getAsInt();</span><br><span class="line">br.close();</span><br><span class="line">System.out.println(longest);</span><br></pre></td></tr></table></figure></div>

<p>下面的例子则使用 distinct 来找出不重复的单词。</p>
<h5 id="清单-20-找出全文的单词，转小写，并排序"><a href="#清单-20-找出全文的单词，转小写，并排序" class="headerlink" title="清单 20. 找出全文的单词，转小写，并排序"></a>清单 20. 找出全文的单词，转小写，并排序</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; words = br.lines().</span><br><span class="line"> flatMap(line -&gt; Stream.of(line.split(&quot; &quot;))).</span><br><span class="line"> filter(word -&gt; word.length() &gt; 0).</span><br><span class="line"> map(String::toLowerCase).</span><br><span class="line"> distinct().</span><br><span class="line"> sorted().</span><br><span class="line"> collect(Collectors.toList());</span><br><span class="line">br.close();</span><br><span class="line">System.out.println(words);</span><br></pre></td></tr></table></figure></div>

<p><strong>Match</strong> Stream 有三个 match 方法，从语义上说：</p>
<ul>
<li>allMatch：Stream 中全部元素符合传入的 predicate，返回 true</li>
<li>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true</li>
<li>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true</li>
</ul>
<p>它们都不是要遍历全部元素才能返回结果。例如 allMatch 只要一个元素不满足条件，就 skip 剩下的所有元素，返回 false。对清单 13 中的 Person 类稍做修改，加入一个 age 属性和 getAge 方法。</p>
<h5 id="清单-21-使用-Match"><a href="#清单-21-使用-Match" class="headerlink" title="清单 21. 使用 Match"></a>清单 21. 使用 Match</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = new ArrayList();</span><br><span class="line">persons.add(new Person(1, &quot;name&quot; + 1, 10));</span><br><span class="line">persons.add(new Person(2, &quot;name&quot; + 2, 21));</span><br><span class="line">persons.add(new Person(3, &quot;name&quot; + 3, 34));</span><br><span class="line">persons.add(new Person(4, &quot;name&quot; + 4, 6));</span><br><span class="line">persons.add(new Person(5, &quot;name&quot; + 5, 55));</span><br><span class="line">boolean isAllAdult = persons.stream().</span><br><span class="line"> allMatch(p -&gt; p.getAge() &gt; 18);</span><br><span class="line">System.out.println(&quot;All are adult? &quot; + isAllAdult);</span><br><span class="line">boolean isThereAnyChild = persons.stream().</span><br><span class="line"> anyMatch(p -&gt; p.getAge() &lt; 12);</span><br><span class="line">System.out.println(&quot;Any child? &quot; + isThereAnyChild);</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">All are adult? false</span><br><span class="line"> Any child? true</span><br></pre></td></tr></table></figure></div>

<p><strong>Stream.generate</strong> 通过实现 Supplier 接口，你可以自己来控制流的生成。这种情形通常用于随机数、常量的 Stream，或者需要前后元素间维持着某种状态信息的 Stream。把 Supplier 实例传递给 Stream.generate() 生成的 Stream，默认是串行（相对 parallel 而言）但无序的（相对 ordered 而言）。由于它是无限的，在管道中，必须利用 limit 之类的操作限制 Stream 大小。</p>
<h5 id="清单-22-生成-10-个随机整数"><a href="#清单-22-生成-10-个随机整数" class="headerlink" title="清单 22. 生成 10 个随机整数"></a>清单 22. 生成 10 个随机整数</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Random seed = new Random();</span><br><span class="line">Supplier&lt;Integer&gt; random = seed::nextInt;</span><br><span class="line">Stream.generate(random).limit(10).forEach(System.out::println);</span><br><span class="line">//Another way</span><br><span class="line">IntStream.generate(() -&gt; (int) (System.nanoTime() % 100)).</span><br><span class="line">limit(10).forEach(System.out::println);</span><br></pre></td></tr></table></figure></div>

<p>Stream.generate() 还接受自己实现的 Supplier。例如在构造海量测试数据的时候，用某种自动的规则给每一个变量赋值；或者依据公式计算 Stream 的每个元素值。这些都是维持状态信息的情形。</p>
<h5 id="清单-23-自实现-Supplier"><a href="#清单-23-自实现-Supplier" class="headerlink" title="清单 23. 自实现 Supplier"></a>清单 23. 自实现 Supplier</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stream.generate(new PersonSupplier()).</span><br><span class="line">limit(10).</span><br><span class="line">forEach(p -&gt; System.out.println(p.getName() + &quot;, &quot; + p.getAge()));</span><br><span class="line">private class PersonSupplier implements Supplier&lt;Person&gt; &#123;</span><br><span class="line"> private int index = 0;</span><br><span class="line"> private Random random = new Random();</span><br><span class="line"> @Override</span><br><span class="line"> public Person get() &#123;</span><br><span class="line"> return new Person(index++, &quot;StormTestUser&quot; + index, random.nextInt(100));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">StormTestUser1, 9</span><br><span class="line">StormTestUser2, 12</span><br><span class="line">StormTestUser3, 88</span><br><span class="line">StormTestUser4, 51</span><br><span class="line">StormTestUser5, 22</span><br><span class="line">StormTestUser6, 28</span><br><span class="line">StormTestUser7, 81</span><br><span class="line">StormTestUser8, 51</span><br><span class="line">StormTestUser9, 4</span><br><span class="line">StormTestUser10, 76</span><br></pre></td></tr></table></figure></div>

<p><strong>Stream.iterate</strong> iterate 跟 reduce 操作很像，接受一个种子值，和一个 UnaryOperator（例如 f）。然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。 <strong>清单 24. 生成一个等差数列</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stream.iterate(0, n -&gt; n + 3).limit(10). forEach(x -&gt; System.out.print(x + &quot; &quot;));.</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 3 6 9 12 15 18 21 24 27</span><br></pre></td></tr></table></figure></div>

<p>与 Stream.generate 相仿，在 iterate 时候管道必须有 limit 这样的操作来限制 Stream 大小。</p>
<h3 id="进阶：用-Collectors-来进行-reduction-操作"><a href="#进阶：用-Collectors-来进行-reduction-操作" class="headerlink" title="进阶：用 Collectors 来进行 reduction 操作"></a>进阶：用 Collectors 来进行 reduction 操作</h3><p>java.util.stream.Collectors 类的主要作用就是辅助进行各类有用的 reduction 操作，例如转变输出为 Collection，把 Stream 元素进行归组。 <strong>groupingBy&#x2F;partitioningBy</strong></p>
<h5 id="清单-25-按照年龄归组"><a href="#清单-25-按照年龄归组" class="headerlink" title="清单 25. 按照年龄归组"></a>清单 25. 按照年龄归组</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; personGroups = Stream.generate(new PersonSupplier()).</span><br><span class="line"> limit(100).</span><br><span class="line"> collect(Collectors.groupingBy(Person::getAge));</span><br><span class="line">Iterator it = personGroups.entrySet().iterator();</span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line"> Map.Entry&lt;Integer, List&lt;Person&gt;&gt; persons = (Map.Entry) it.next();</span><br><span class="line"> System.out.println(&quot;Age &quot; + persons.getKey() + &quot; = &quot; + persons.getValue().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的 code，首先生成 100 人的信息，然后按照年龄归组，相同年龄的人放到同一个 list 中，可以看到如下的输出：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Age 0 = 2</span><br><span class="line">Age 1 = 2</span><br><span class="line">Age 5 = 2</span><br><span class="line">Age 8 = 1</span><br><span class="line">Age 9 = 1</span><br><span class="line">Age 11 = 2</span><br><span class="line">……</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Person&gt;&gt; children = Stream.generate(new PersonSupplier()).</span><br><span class="line"> limit(100).</span><br><span class="line"> collect(Collectors.partitioningBy(p -&gt; p.getAge() &lt; 18));</span><br><span class="line">System.out.println(&quot;Children number: &quot; + children.get(true).size());</span><br><span class="line">System.out.println(&quot;Adult number: &quot; + children.get(false).size());</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Children number: 23 </span><br><span class="line">     Adult number: 77</span><br></pre></td></tr></table></figure></div>

<p>在使用条件“年龄小于 18”进行分组后可以看到，不到 18 岁的未成年人是一组，成年人是另外一组。partitioningBy 其实是一种特殊的 groupingBy，它依照条件测试的是否两种结果来构造返回的数据结构，get(true) 和 get(false) 能即为全部的元素对象。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>总之，Stream 的特性可以归纳为：</p>
<ul>
<li><p>它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。</p>
</li>
<li><p>它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。</p>
</li>
<li><p>所有 Stream 的操作必须以 lambda 表达式为参数</p>
</li>
<li><p>不支持索引访问</p>
</li>
<li><p>你可以请求第一个元素，但无法请求第二个，第三个，或最后一个。不过请参阅下一项。</p>
</li>
<li><p>很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。</p>
</li>
<li><p>Intermediate 操作永远是惰性化的。</p>
</li>
<li><p>当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。</p>
</li>
<li><p>可以是无限的</p>
</li>
<li><p>集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>IP地图定位</title>
    <url>/2017/07/27/ip%E5%9C%B0%E5%9B%BE%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Java使用jdbc连接mysql数据库</title>
    <url>/2017/01/28/java-aarticle0008/</url>
    <content><![CDATA[<h3 id="Java使用jdbc连接mysql数据库"><a href="#Java使用jdbc连接mysql数据库" class="headerlink" title="Java使用jdbc连接mysql数据库"></a>Java使用jdbc连接mysql数据库</h3><blockquote>
<p>连接时需要注意的几点： 1. 将jdbc的jar包放入项目文件lib中 2. 记住mysql安装时的用户名和密码 3. 尽量将类文件放在util目录下 4. 在本地使用时一般只需要改数据库user和pass还有databasename 5. 在其他类中调用完毕后记得关闭连接 6. 新建一个文件名为DBUtil再将代码放入即可</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DBUtil &#123;</span><br><span class="line">    public static String username=&quot;root&quot;;</span><br><span class="line">    public static String password=&quot;root&quot;;</span><br><span class="line">    public static String url=&quot;jdbc:mysql://localhost:3306/databasename&quot;;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //获取到数据库的链接</span><br><span class="line">    public static  Connection getConnectDb()</span><br><span class="line">    &#123;</span><br><span class="line">        Connection conn=null;</span><br><span class="line">        try &#123;</span><br><span class="line">            conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line">    //关闭数据库</span><br><span class="line">    public static void CloseDB(ResultSet rs, PreparedStatement stm, Connection conn)</span><br><span class="line">    &#123;</span><br><span class="line">        if(rs!=null)</span><br><span class="line">        &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                // TODO Auto-generated catch block</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(stm!=null)</span><br><span class="line">        &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stm.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                // TODO Auto-generated catch block</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(conn!=null)</span><br><span class="line">        &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                // TODO Auto-generated catch block</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="如果喜欢请收藏，我会持续更新，博客暂时没有上传文件，有需要mysqljar包的可以给我发邮件，我会及时发送给你。最后-这里是我笔记的连接，有需要的可以点击查看"><a href="#如果喜欢请收藏，我会持续更新，博客暂时没有上传文件，有需要mysqljar包的可以给我发邮件，我会及时发送给你。最后-这里是我笔记的连接，有需要的可以点击查看" class="headerlink" title="如果喜欢请收藏，我会持续更新，博客暂时没有上传文件，有需要mysqljar包的可以给我发邮件，我会及时发送给你。最后[这里是我笔记的连接，有需要的可以点击查看]"></a>如果喜欢请收藏，我会持续更新，博客暂时没有上传文件，有需要mysqljar包的可以给我发邮件，我会及时发送给你。最后[<a class="link"   href="http://84b7da85.wiz01.com/share/s/24JZG50B3QHR23mv6A1JgkeG2qK-O53OQ4Cq2Peijy05Pdw-"  title="这里是我笔记的连接，有需要的可以点击查看">这里是我笔记的连接，有需要的可以点击查看 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>]</h4>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Base64专题---java中使用Base64加密解密的函数</title>
    <url>/2017/02/03/java-article0014/</url>
    <content><![CDATA[<h4 id="Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。"><a href="#Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。" class="headerlink" title="Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。"></a>Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。</h4><h5 id="下面是使用java进行base64加密与解密的源码，使用时在java项目中新建一个类，然后将代码挂上，在外部加密或解密直接实例化类，再调用响应函数即可，记住值的传递与接收"><a href="#下面是使用java进行base64加密与解密的源码，使用时在java项目中新建一个类，然后将代码挂上，在外部加密或解密直接实例化类，再调用响应函数即可，记住值的传递与接收" class="headerlink" title="下面是使用java进行base64加密与解密的源码，使用时在java项目中新建一个类，然后将代码挂上，在外部加密或解密直接实例化类，再调用响应函数即可，记住值的传递与接收"></a>下面是使用java进行base64加密与解密的源码，使用时在java项目中新建一个类，然后将代码挂上，在外部加密或解密直接实例化类，再调用响应函数即可，记住值的传递与接收</h5><h5 id="Base64加密"><a href="#Base64加密" class="headerlink" title="Base64加密"></a>Base64加密</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String encodeBase64(String cleartext) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">cleartext = new String(Base64.encodeBase64(cleartext.getBytes(&quot;UTF-8&quot;)));</span><br><span class="line">&#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return cleartext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="Base解密"><a href="#Base解密" class="headerlink" title="Base解密"></a>Base解密</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String decodeBase64(String ciphertext)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">ciphertext = new String(Base64.decodeBase64(ciphertext.getBytes()),</span><br><span class="line">&quot;UTF-8&quot;);</span><br><span class="line">&#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return ciphertext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Base64</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>邮件专题---使用java发送邮件</title>
    <url>/2017/02/04/java-article0021/</url>
    <content><![CDATA[<h3 id="由于很长时间没有用Java，忘了很多，但既然要写邮件发送专题，就去研究了一番，Java果然很麻烦，各种试，各种报错，现在写其他程序报错我都没什么感觉，都是以前写Java被练出来了，每次出错就会弹出一大堆，得去一点点的找。按照以前的思路新建了project，再建package，再建class，一步步弄好以后，，，，我懵了，完全没思路啊，这怎么写，只能去google，原来还得去官网下jar包，官网上Javamail包地址我会发到博文最后，下载比较慢。我下载的时候已经更新到了1-4-7，比较慎重的选择了1-4-6，想要最新版的可以去官网下载，之后查到挺多方法，挨个试，然后就是各种报错，突然想起下载的jar还没导入了，但我又懵了，一堆包，下载下来就是下面这样的。"><a href="#由于很长时间没有用Java，忘了很多，但既然要写邮件发送专题，就去研究了一番，Java果然很麻烦，各种试，各种报错，现在写其他程序报错我都没什么感觉，都是以前写Java被练出来了，每次出错就会弹出一大堆，得去一点点的找。按照以前的思路新建了project，再建package，再建class，一步步弄好以后，，，，我懵了，完全没思路啊，这怎么写，只能去google，原来还得去官网下jar包，官网上Javamail包地址我会发到博文最后，下载比较慢。我下载的时候已经更新到了1-4-7，比较慎重的选择了1-4-6，想要最新版的可以去官网下载，之后查到挺多方法，挨个试，然后就是各种报错，突然想起下载的jar还没导入了，但我又懵了，一堆包，下载下来就是下面这样的。" class="headerlink" title="由于很长时间没有用Java，忘了很多，但既然要写邮件发送专题，就去研究了一番，Java果然很麻烦，各种试，各种报错，现在写其他程序报错我都没什么感觉，都是以前写Java被练出来了，每次出错就会弹出一大堆，得去一点点的找。按照以前的思路新建了project，再建package，再建class，一步步弄好以后，，，，我懵了，完全没思路啊，这怎么写，只能去google，原来还得去官网下jar包，官网上Javamail包地址我会发到博文最后，下载比较慢。我下载的时候已经更新到了1.4.7，比较慎重的选择了1.4.6，想要最新版的可以去官网下载，之后查到挺多方法，挨个试，然后就是各种报错，突然想起下载的jar还没导入了，但我又懵了，一堆包，下载下来就是下面这样的。"></a>由于很长时间没有用Java，忘了很多，但既然要写邮件发送专题，就去研究了一番，Java果然很麻烦，各种试，各种报错，现在写其他程序报错我都没什么感觉，都是以前写Java被练出来了，每次出错就会弹出一大堆，得去一点点的找。按照以前的思路新建了project，再建package，再建class，一步步弄好以后，，，，我懵了，完全没思路啊，这怎么写，只能去google，原来还得去官网下jar包，官网上Javamail包地址我会发到博文最后，下载比较慢。我下载的时候已经更新到了1.4.7，比较慎重的选择了1.4.6，想要最新版的可以去官网下载，之后查到挺多方法，挨个试，然后就是各种报错，突然想起下载的jar还没导入了，但我又懵了，一堆包，下载下来就是下面这样的。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/java3.png"
                     
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/java4.png"
                     
                ></p>
<h3 id="按照其他语言，我先把文件夹里的mail-jar导了进去，然后发送邮件应该会用到smtp-jar，还有那个mailapi-jar，果然没有报错了，这是导入的包"><a href="#按照其他语言，我先把文件夹里的mail-jar导了进去，然后发送邮件应该会用到smtp-jar，还有那个mailapi-jar，果然没有报错了，这是导入的包" class="headerlink" title="按照其他语言，我先把文件夹里的mail.jar导了进去，然后发送邮件应该会用到smtp.jar，还有那个mailapi.jar，果然没有报错了，这是导入的包."></a>按照其他语言，我先把文件夹里的mail.jar导了进去，然后发送邮件应该会用到smtp.jar，还有那个mailapi.jar，果然没有报错了，这是导入的包.</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/Java5.png"
                     
                ></p>
<h3 id="运行了一下报错535，仔细看代码原来是发送方地址写错了，改了以后再运行，报错554，又开始google，最后找到网易关于554的解释"><a href="#运行了一下报错535，仔细看代码原来是发送方地址写错了，改了以后再运行，报错554，又开始google，最后找到网易关于554的解释" class="headerlink" title="运行了一下报错535，仔细看代码原来是发送方地址写错了，改了以后再运行，报错554，又开始google，最后找到网易关于554的解释"></a>运行了一下报错535，仔细看代码原来是发送方地址写错了，改了以后再运行，报错554，又开始google，最后找到网易关于554的解释</h3><ul>
<li>　554 DT:SPM 发送的邮件内容包含了未被许可的信息，或被系统识别为垃圾邮件。请检查是否有用户发送病毒或者垃圾邮件；</li>
</ul>
<h3 id="那就应该是我发送内容的问题，原来标题是test，内容是demo。于是改成了有意义的内容和标题再运行，没有报错，qq邮箱果然弹出邮件了。"><a href="#那就应该是我发送内容的问题，原来标题是test，内容是demo。于是改成了有意义的内容和标题再运行，没有报错，qq邮箱果然弹出邮件了。" class="headerlink" title="那就应该是我发送内容的问题，原来标题是test，内容是demo。于是改成了有意义的内容和标题再运行，没有报错，qq邮箱果然弹出邮件了。"></a>那就应该是我发送内容的问题，原来标题是test，内容是demo。于是改成了有意义的内容和标题再运行，没有报错，qq邮箱果然弹出邮件了。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/java6.png"
                     
                ></p>
<h3 id="由于服务器资源有限，我把jar包的下载官网地址发上，如果有其他问题，请及时联系我发邮件给你。下面的代码我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。"><a href="#由于服务器资源有限，我把jar包的下载官网地址发上，如果有其他问题，请及时联系我发邮件给你。下面的代码我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。" class="headerlink" title="由于服务器资源有限，我把jar包的下载官网地址发上，如果有其他问题，请及时联系我发邮件给你。下面的代码我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。"></a>由于服务器资源有限，我把jar包的下载官网地址发上，如果有其他问题，请及时联系我发邮件给你。下面的代码我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。</h3><p>》》》<a class="link"   href="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-eeplat-419426.html#javamail-1.4.6-oth-JPR"  title="javaemail包官方网站下载">javaemail包官方网站下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="备注：如果导包或者项目报错什么的，可以先查看邮箱地址还有授权码写对没有，然后是发送的内容不能太简单，有一定的文字。如果不行，就请联系我，一起研究解决。"><a href="#备注：如果导包或者项目报错什么的，可以先查看邮箱地址还有授权码写对没有，然后是发送的内容不能太简单，有一定的文字。如果不行，就请联系我，一起研究解决。" class="headerlink" title="备注：如果导包或者项目报错什么的，可以先查看邮箱地址还有授权码写对没有，然后是发送的内容不能太简单，有一定的文字。如果不行，就请联系我，一起研究解决。"></a>备注：如果导包或者项目报错什么的，可以先查看邮箱地址还有授权码写对没有，然后是发送的内容不能太简单，有一定的文字。如果不行，就请联系我，一起研究解决。</h3><h3 id="这是我写的邮件专题里其他两篇发送邮件的博文"><a href="#这是我写的邮件专题里其他两篇发送邮件的博文" class="headerlink" title="这是我写的邮件专题里其他两篇发送邮件的博文"></a>这是我写的邮件专题里其他两篇发送邮件的博文</h3><p>》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/php-article0020/" >[邮件专题—使用php发送邮件] <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/python-article19/"  title="邮件专题---使用Python发送邮件">邮件专题—使用Python发送邮件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<hr>
<h1 id="下面都会把代码挂出来"><a href="#下面都会把代码挂出来" class="headerlink" title="下面都会把代码挂出来"></a>下面都会把代码挂出来</h1><p>package com.rain.email2;<br>import java.util.Date;<br>import java.util.Properties;<br>import javax.mail.Message;<br>import javax.mail.MessagingException;<br>import javax.mail.NoSuchProviderException;<br>import javax.mail.Session;<br>import javax.mail.Transport;<br>import javax.mail.internet.InternetAddress;<br>import javax.mail.internet.MimeMessage;<br>public class MailUtil {<br>static int port &#x3D; 25; &#x2F;&#x2F;smtp端口<br>static String server &#x3D; “smtp.163.com”; &#x2F;&#x2F;smtp服务器地址<br>static String from &#x3D; “Webmaster<a class="link"   href="mailto:&#120;&#120;&#x78;&#120;&#x78;&#x78;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;" >&#120;&#120;&#x78;&#120;&#x78;&#x78;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“; &#x2F;&#x2F;发送者<br>static String user &#x3D; “<a class="link"   href="mailto:&#x78;&#120;&#120;&#120;&#120;&#120;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#111;&#x6d;" >&#x78;&#120;&#120;&#120;&#120;&#120;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“; &#x2F;&#x2F;发送者地址<br>static String password &#x3D; “xxxxxx”; &#x2F;&#x2F;密码<br>public static void main(String[] args) {<br>sendEmail(“<a class="link"   href="mailto:&#x78;&#120;&#120;&#x78;&#x78;&#x78;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#109;" >&#x78;&#120;&#120;&#x78;&#x78;&#x78;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“, “中国人”, “我们都是中国人”);<br>}<br>public static void sendEmail(String email, String subject, String body) {<br>try {<br>Properties props &#x3D; new Properties();<br>props.put(“mail.smtp.host”, server);<br>props.put(“mail.smtp.port”, String.valueOf(port));<br>props.put(“mail.smtp.auth”, “true”);<br>Transport transport &#x3D; null;<br>Session session &#x3D; Session.getDefaultInstance(props, null);<br>transport &#x3D; session.getTransport(“smtp”);<br>transport.connect(server, user, password);<br>MimeMessage msg &#x3D; new MimeMessage(session);<br>msg.setSentDate(new Date());<br>InternetAddress fromAddress &#x3D; new InternetAddress(from);<br>msg.setFrom(fromAddress);<br>InternetAddress[] toAddress &#x3D; new InternetAddress[1];<br>toAddress[0] &#x3D; new InternetAddress(email);<br>msg.setRecipients(Message.RecipientType.TO, toAddress);<br>msg.setSubject(subject, “UTF-8”);<br>msg.setText(body, “UTF-8”);<br>msg.saveChanges();<br>transport.sendMessage(msg, msg.getAllRecipients());<br>} catch (NoSuchProviderException e) {<br>e.printStackTrace();<br>} catch (MessagingException e) {<br>e.printStackTrace();<br>}<br>}<br>}</p>
<p> </p>
<h3 id="下面是我参考的文章，很感谢"><a href="#下面是我参考的文章，很感谢" class="headerlink" title="下面是我参考的文章，很感谢"></a>下面是我参考的文章，很感谢</h3><p>》》》 <a class="link"   href="http://blog.csdn.net/u013938484/article/details/51939587"  title=" javaMail SMTPSendFailedException: 554 DT:SPM 163 smtp4">javaMail SMTPSendFailedException: 554 DT:SPM 163 smtp4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://84b7da85.wiz01.com/share/s/24JZG50B3QHR23mv6A1JgkeG0WBC6d11fkP02RaQZy30UDLX"  title="这是我笔记的链接">这是我笔记的链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>**退信代码说明**：<br>　　•421 HL:REP 该IP发送行为异常，存在接收者大量不存在情况，被临时禁止连接。请检查是否有用户发送病毒或者垃圾邮件，并核对发送列表有效性；<br>　　•421 HL:ICC 该IP同时并发连接数过大，超过了网易的限制，被临时禁止连接。请检查是否有用户发送病毒或者垃圾邮件，并降低IP并发连接数量；<br>　　•421 HL:IFC 该IP短期内发送了大量信件，超过了网易的限制，被临时禁止连接。请检查是否有用户发送病毒或者垃圾邮件，并降低发送频率；<br>　　•421 HL:MEP 该IP发送行为异常，存在大量伪造发送域域名行为，被临时禁止连接。请检查是否有用户发送病毒或者垃圾邮件，并使用真实有效的域名发送；<br>　　•450 MI:CEL 发送方出现过多的错误指令。请检查发信程序；<br>　　•450 MI:DMC 当前连接发送的邮件数量超出限制。请减少每次连接中投递的邮件数量；<br>　　•450 MI:CCL 发送方发送超出正常的指令数量。请检查发信程序；<br>　　•450 RP:DRC 当前连接发送的收件人数量超出限制。请控制每次连接投递的邮件数量；<br>　　•450 RP:CCL 发送方发送超出正常的指令数量。请检查发信程序；<br>　　•450 DT:RBL 发信IP位于一个或多个RBL里。请参考<a class="link"   href="http://www.rbls.org/%E5%85%B3%E4%BA%8ERBL%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%EF%BC%9B" >http://www.rbls.org/关于RBL的相关信息； <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>　　•450 WM:BLI 该IP不在网易允许的发送地址列表里；<br>　　•450 WM:BLU 此用户不在网易允许的发信用户列表里；<br>　　•451 DT:SPM ,please try again 邮件正文带有垃圾邮件特征或发送环境缺乏规范性，被临时拒收。请保持邮件队列，两分钟后重投邮件。需调整邮件内容或优化发送环境；<br>　　•451 Requested mail action not taken: too much fail authentication 登录失败次数过多，被临时禁止登录。请检查密码与帐号验证设置；<br>　　•451 RP:CEL 发送方出现过多的错误指令。请检查发信程序；<br>　　•451 MI:DMC 当前连接发送的邮件数量超出限制。请控制每次连接中投递的邮件数量；<br>　　•451 MI:SFQ 发信人在15分钟内的发信数量超过限制，请控制发信频率；<br>　　•451 RP:QRC 发信方短期内累计的收件人数量超过限制，该发件人被临时禁止发信。请降低该用户发信频率；<br>　　•451 Requested action aborted: local error in processing 系统暂时出现故障，请稍后再次尝试发送；<br>　　•500 Error: bad syntaxU 发送的smtp命令语法有误；<br>　　•550 MI:NHD HELO命令不允许为空；<br>　　•550 MI:IMF 发信人电子邮件地址不合规范。请参考<a class="link"   href="http://www.rfc-editor.org/%E5%85%B3%E4%BA%8E%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E8%A7%84%E8%8C%83%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%9B" >http://www.rfc-editor.org/关于电子邮件规范的定义； <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>　　•550 MI:SPF 发信IP未被发送域的SPF许可。请参考<a class="link"   href="http://www.openspf.org/%E5%85%B3%E4%BA%8ESPF%E8%A7%84%E8%8C%83%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%9B" >http://www.openspf.org/关于SPF规范的定义； <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>　　•550 MI:DMA 该邮件未被发信域的DMARC许可。请参考<a class="link"   href="http://dmarc.org/%E5%85%B3%E4%BA%8EDMARC%E8%A7%84%E8%8C%83%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%9B" >http://dmarc.org/关于DMARC规范的定义； <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>　　•550 MI:STC 发件人当天的连接数量超出了限定数量，当天不再接受该发件人的邮件。请控制连接次数；<br>　　•550 RP:FRL 网易邮箱不开放匿名转发（Open relay）；<br>　　•550 RP:RCL 群发收件人数量超过了限额，请减少每封邮件的收件人数量；<br>　　•550 RP:TRC 发件人当天内累计的收件人数量超过限制，当天不再接受该发件人的邮件。请降低该用户发信频率；<br>　　•550 DT:SPM 邮件正文带有很多垃圾邮件特征或发送环境缺乏规范性。需调整邮件内容或优化发送环境；<br>　　•550 Invalid User 请求的用户不存在；<br>　　•550 User in blacklist 该用户不被允许给网易用户发信；<br>　　•550 User suspended 请求的用户处于禁用或者冻结状态；<br>　　•550 Requested mail action not taken: too much recipient  群发数量超过了限额；<br>　　•552 Illegal Attachment 不允许发送该类型的附件，包括以.uu .pif .scr .mim .hqx .bhx .cmd .vbs .bat .com .vbe .vb .js .wsh等结尾的附件；<br>　　•552 Requested mail action aborted: exceeded mailsize limit 发送的信件大小超过了网易邮箱允许接收的最大限制；<br>　　•553 Requested action not taken: NULL sender is not allowed 不允许发件人为空，请使用真实发件人发送；<br>　　•553 Requested action not taken: Local user only  SMTP类型的机器只允许发信人是本站用户；<br>　　•553 Requested action not taken: no smtp MX only  MX类型的机器不允许发信人是本站用户；<br>　　•553 authentication is required  SMTP需要身份验证，请检查客户端设置；<br>　　•**554 DT:SPM 发送的邮件内容包含了未被许可的信息，或被系统识别为垃圾邮件。请检查是否有用户发送病毒或者垃圾邮件；**<br>　　•554 DT:SUM 信封发件人和信头发件人不匹配；<br>　　•554 IP is rejected, smtp auth error limit exceed 该IP验证失败次数过多，被临时禁止连接。请检查验证信息设置；<br>　　•554 HL:IHU 发信IP因发送垃圾邮件或存在异常的连接行为，被暂时挂起。请检测发信IP在历史上的发信情况和发信程序是否存在异常；<br>　　•554 HL:IPB 该IP不在网易允许的发送地址列表里；<br>　　•554 MI:STC 发件人当天内累计邮件数量超过限制，当天不再接受该发件人的投信。请降低发信频率；<br>　　•554 MI:SPB 此用户不在网易允许的发信用户列表里；<br>　　•554 IP in blacklist 该IP不在网易允许的发送地址列表里。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>邮件</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用mysql数据库实现增删改查</title>
    <url>/2017/02/06/java-article27/</url>
    <content><![CDATA[<h3 id="我在博客里有一篇《Java使用jdbc连接数据库》，连接成功以后就需要对数据库进行操作，今天这篇博文主要介绍我在Java中经常用到的数据库操作，只挑最常用的代码示例。"><a href="#我在博客里有一篇《Java使用jdbc连接数据库》，连接成功以后就需要对数据库进行操作，今天这篇博文主要介绍我在Java中经常用到的数据库操作，只挑最常用的代码示例。" class="headerlink" title="我在博客里有一篇《Java使用jdbc连接数据库》，连接成功以后就需要对数据库进行操作，今天这篇博文主要介绍我在Java中经常用到的数据库操作，只挑最常用的代码示例。"></a>我在博客里有一篇《Java使用jdbc连接数据库》，连接成功以后就需要对数据库进行操作，今天这篇博文主要介绍我在Java中经常用到的数据库操作，只挑最常用的代码示例。</h3><h3 id="一-查找"><a href="#一-查找" class="headerlink" title="一.查找"></a>一.查找</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String getC_name(int c_id) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        String c_name=&quot;&quot;;</span><br><span class="line">        Connection conn = DBUtil.getConnectDb();</span><br><span class="line">        String sql=&quot;select * from customer where c_id=?&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            PreparedStatement stm = conn.prepareStatement(sql);</span><br><span class="line">            stm.setInt(1, c_id);</span><br><span class="line">            ResultSet rs = stm.executeQuery();</span><br><span class="line">            if(rs.next())</span><br><span class="line">            &#123;</span><br><span class="line">                c_name = rs.getString(&quot;c_name&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return c_name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="二-修改"><a href="#二-修改" class="headerlink" title="二.修改"></a>二.修改</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void is_loginInfo(int m_id,int is_login)</span><br><span class="line">    &#123;</span><br><span class="line">        Connection conn = DBUtil.getConnectDb();</span><br><span class="line">        String sql=&quot;update manager set is_login=? where m_id=?&quot;;</span><br><span class="line">        PreparedStatement stm = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            stm = (PreparedStatement) conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            is_login=(is_login==1?0:1);</span><br><span class="line">//            System.out.println(is_login);</span><br><span class="line">            stm.setInt(1, is_login);</span><br><span class="line">            stm.setInt(2, m_id); </span><br><span class="line">            stm.executeUpdate();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="三-插入"><a href="#三-插入" class="headerlink" title="三.插入"></a>三.插入</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int insertProduct(ProductBean item) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        Connection conn = DBUtil.getConnectDb();</span><br><span class="line">        String sql=&quot;insert into product(p_name,p_money,p_totalnum,p_desc,back_money,p_id) values(?,?,?,?,?,?)&quot;;</span><br><span class="line">        int rs = 0;</span><br><span class="line">        try &#123;</span><br><span class="line">            PreparedStatement stm = conn.prepareStatement(sql);</span><br><span class="line">            stm.setString(1, item.getP_name());</span><br><span class="line">            stm.setInt(2, item.getP_money());</span><br><span class="line">            stm.setInt(3, item.getP_totalnum());</span><br><span class="line">            stm.setString(4, item.getP_desc());</span><br><span class="line">            stm.setInt(5, item.getBack_money());</span><br><span class="line">            stm.setInt(6, item.getP_id());</span><br><span class="line">            rs = stm.executeUpdate();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return rs;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="四-删除"><a href="#四-删除" class="headerlink" title="四.删除"></a>四.删除</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Connection conn = DBUutil.getConnectDb();</span><br><span class="line">        String sql=&quot;delete from user where name=&#x27;scs&#x27;&quot;;</span><br><span class="line">        PreparedStatement stm = null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        int rss=0;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            stm = conn.prepareStatement(sql);</span><br><span class="line">            rss=stm.executeUpdate(sql);</span><br><span class="line">            System.out.println(rss);</span><br><span class="line"></span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally</span><br><span class="line">        &#123;</span><br><span class="line">            DBUutil.CloseDB(rs,stm,conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java判断字符串中是否存在汉字</title>
    <url>/2017/02/06/java-article28/</url>
    <content><![CDATA[<h3 id="Java对汉字的支持还是很好的（好像除了python，其他都挺好），这次分享一段关于如何判断字符串中是否有汉字的代码。"><a href="#Java对汉字的支持还是很好的（好像除了python，其他都挺好），这次分享一段关于如何判断字符串中是否有汉字的代码。" class="headerlink" title="Java对汉字的支持还是很好的（好像除了python，其他都挺好），这次分享一段关于如何判断字符串中是否有汉字的代码。"></a>Java对汉字的支持还是很好的（好像除了python，其他都挺好），这次分享一段关于如何判断字符串中是否有汉字的代码。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class validate_haven &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String string = &quot;中国&quot;;</span><br><span class="line">        boolean result = isHave_validate(string);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    public static boolean isHave_validate(String str) &#123;</span><br><span class="line">        boolean flag = true;</span><br><span class="line">        int count = 0;</span><br><span class="line">        String regEx = &quot;[\\u4e00-\\u9fa5]&quot;;</span><br><span class="line">        Pattern p = Pattern.compile(regEx);</span><br><span class="line">        Matcher m = p.matcher(str);</span><br><span class="line">        while (m.find()) &#123;</span><br><span class="line">            for (int i = 0; i &lt;= m.groupCount(); i++) &#123;</span><br><span class="line">                count = count + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (count == 0) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java对UTF8URL进行编码解码以及进行编码方式的判断</title>
    <url>/2017/02/08/java-article40/</url>
    <content><![CDATA[<h2 id="在用搜索引擎搜索时，所输入的字符通常会被编码然后再查询，这篇文章将Java中对UTF8字符编码方式的检测，UTF8URL编码解码的代码挂了出来，需要时改变main函数中的url然后直接运行即可。"><a href="#在用搜索引擎搜索时，所输入的字符通常会被编码然后再查询，这篇文章将Java中对UTF8字符编码方式的检测，UTF8URL编码解码的代码挂了出来，需要时改变main函数中的url然后直接运行即可。" class="headerlink" title="在用搜索引擎搜索时，所输入的字符通常会被编码然后再查询，这篇文章将Java中对UTF8字符编码方式的检测，UTF8URL编码解码的代码挂了出来，需要时改变main函数中的url然后直接运行即可。"></a>在用搜索引擎搜索时，所输入的字符通常会被编码然后再查询，这篇文章将Java中对UTF8字符编码方式的检测，UTF8URL编码解码的代码挂了出来，需要时改变main函数中的url然后直接运行即可。</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">public class UTF8&#123;</span><br><span class="line">  /**</span><br><span class="line">   * Utf8URL编码</span><br><span class="line">   * @param s</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static final String Utf8URLencode(String text) &#123;</span><br><span class="line">    StringBuffer result = new StringBuffer();</span><br><span class="line">    for (int i = 0; i &lt; text.length(); i++) &#123;</span><br><span class="line">      char c = text.charAt(i);</span><br><span class="line">      if (c &gt;= 0 &amp;&amp; c &lt;= 255) &#123;</span><br><span class="line">        result.append(c);</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        byte[] b = new byte[0];</span><br><span class="line">        try &#123;</span><br><span class="line">          b = Character.toString(c).getBytes(&quot;UTF-8&quot;);</span><br><span class="line">        &#125;catch (Exception ex) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int j = 0; j &lt; b.length; j++) &#123;</span><br><span class="line">          int k = b[j];</span><br><span class="line">          if (k &lt; 0) k += 256;</span><br><span class="line">          result.append(&quot;%&quot; + Integer.toHexString(k).toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * Utf8URL解码</span><br><span class="line">   * @param text</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static final String Utf8URLdecode(String text) &#123;</span><br><span class="line">    String result = &quot;&quot;;</span><br><span class="line">    int p = 0;</span><br><span class="line">    if (text!=null &amp;&amp; text.length()&gt;0)&#123;</span><br><span class="line">      text = text.toLowerCase();</span><br><span class="line">      p = text.indexOf(&quot;%e&quot;);</span><br><span class="line">      if (p == -1) return text;</span><br><span class="line">      while (p != -1) &#123;</span><br><span class="line">        result += text.substring(0, p);</span><br><span class="line">        text = text.substring(p, text.length());</span><br><span class="line">        if (text == &quot;&quot;  text.length() &lt; 9) return result;</span><br><span class="line"></span><br><span class="line">        result += CodeToWord(text.substring(0, 9));</span><br><span class="line">        text = text.substring(9, text.length());</span><br><span class="line">        p = text.indexOf(&quot;%e&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result + text;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * utf8URL编码转字符</span><br><span class="line">   * @param text</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  private static final String CodeToWord(String text) &#123;</span><br><span class="line">    String result;</span><br><span class="line">    if (Utf8codeCheck(text)) &#123;</span><br><span class="line">      byte[] code = new byte[3];</span><br><span class="line">      code[0] = (byte) (Integer.parseInt(text.substring(1, 3), 16) - 256);</span><br><span class="line">      code[1] = (byte) (Integer.parseInt(text.substring(4, 6), 16) - 256);</span><br><span class="line">      code[2] = (byte) (Integer.parseInt(text.substring(7, 9), 16) - 256);</span><br><span class="line">      try &#123;</span><br><span class="line">        result = new String(code, &quot;UTF-8&quot;);</span><br><span class="line">      &#125;catch (UnsupportedEncodingException ex) &#123;</span><br><span class="line">        result = null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      result = text;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 编码是否有效</span><br><span class="line">   * @param text</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  private static final boolean Utf8codeCheck(String text)&#123;</span><br><span class="line">    String sign = &quot;&quot;;</span><br><span class="line">    if (text.startsWith(&quot;%e&quot;))</span><br><span class="line">      for (int i = 0, p = 0; p != -1; i++) &#123;</span><br><span class="line">        p = text.indexOf(&quot;%&quot;, p);</span><br><span class="line">        if (p != -1)</span><br><span class="line">          p++;</span><br><span class="line">        sign += p;</span><br><span class="line">      &#125;</span><br><span class="line">    return sign.equals(&quot;147-1&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 判断是否Utf8Url编码</span><br><span class="line">   * @param text</span><br><span class="line">   * @return</span><br><span class="line">   */</span><br><span class="line">  public static final boolean isUtf8Url(String text) &#123;</span><br><span class="line">    text = text.toLowerCase();</span><br><span class="line">    int p = text.indexOf(&quot;%&quot;);</span><br><span class="line">    if (p != -1 &amp;&amp; text.length() - p &gt; 9) &#123;</span><br><span class="line">      text = text.substring(p, p + 9);</span><br><span class="line">    &#125;</span><br><span class="line">    return Utf8codeCheck(text);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 测试</span><br><span class="line">   * @param args</span><br><span class="line">   */</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    String url;</span><br><span class="line">    url = &quot;http://www.google.com/search?hl=zh-CN&amp;newwindow=1&amp;q=%E4%B8%AD%E5%9B%BD%E5%A4%A7%E7%99%BE%E7%A7%91%E5%9C%A8%E7%BA%BF%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2&amp;btnG=%E6%90%9C%E7%B4%A2&amp;lr=&quot;;</span><br><span class="line">    if(CharTools.isUtf8Url(url))&#123;</span><br><span class="line">      System.out.println(CharTools.Utf8URLdecode(url));</span><br><span class="line">    &#125;</span><br><span class="line">    url = &quot;http://www.google.com/search?hl=zh-cn&amp;newwindow=1&amp;q=中国大百科在线全文检索&amp;btng=搜索&amp;lr=&quot;;</span><br><span class="line">    if(!CharTools.isUtf8Url(url))&#123;</span><br><span class="line">        System.out.println(CharTools.Utf8URLencode(url));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中使用组件编写窗口实现网上图片的显示</title>
    <url>/2017/02/08/java-article41/</url>
    <content><![CDATA[<h2 id="这篇文章使用Java组件显示窗口，在通过输入的图片url地址在窗口中显示出来，可作为一个网络图片查看器，感兴趣的可以打包成jar或者-exe文件方便使用，这里我只挂出了源码，效果如下图。"><a href="#这篇文章使用Java组件显示窗口，在通过输入的图片url地址在窗口中显示出来，可作为一个网络图片查看器，感兴趣的可以打包成jar或者-exe文件方便使用，这里我只挂出了源码，效果如下图。" class="headerlink" title="这篇文章使用Java组件显示窗口，在通过输入的图片url地址在窗口中显示出来，可作为一个网络图片查看器，感兴趣的可以打包成jar或者.exe文件方便使用，这里我只挂出了源码，效果如下图。"></a>这篇文章使用Java组件显示窗口，在通过输入的图片url地址在窗口中显示出来，可作为一个网络图片查看器，感兴趣的可以打包成jar或者.exe文件方便使用，这里我只挂出了源码，效果如下图。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java15.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java16.jpg"
                     
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.image;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.event.*;</span><br><span class="line">import java.net.*;</span><br><span class="line">import javax.swing.*;</span><br><span class="line">//从网络取得图象</span><br><span class="line">public class GetImageDemo extends JFrame&#123;</span><br><span class="line">    JTextField jtfUrl;  //输入图像地址url</span><br><span class="line">    JButton jbGetImage;  //取图像按钮</span><br><span class="line">    Image image; //获取的图像</span><br><span class="line">    Toolkit toolKit;  //Toolkit对象,用于获取图像</span><br><span class="line">    public GetImageDemo()&#123;</span><br><span class="line">        super(&quot;网络图片查看器&quot;);  //调用父类构造函数</span><br><span class="line">        Container container=getContentPane();   //得到容器</span><br><span class="line">        jtfUrl=new JTextField(18); //实例化地址输入框</span><br><span class="line">        jbGetImage=new JButton(&quot;输入图片的URL&quot;);  //实例化按钮</span><br><span class="line">        container.setLayout(new FlowLayout()); //设置布局管理器</span><br><span class="line">        container.add(jtfUrl);  //增加组件到容器上</span><br><span class="line">        container.add(jbGetImage);</span><br><span class="line">        toolKit=getToolkit(); //得到工具包</span><br><span class="line">        jbGetImage.addActionListener(new ActionListener()&#123;  //按钮事件处理</span><br><span class="line">            public void actionPerformed(ActionEvent ent)&#123;</span><br><span class="line">                try&#123;</span><br><span class="line">                    String urlStr=jtfUrl.getText();    //得到图像的URL地址</span><br><span class="line">                    URL url=new URL(urlStr);</span><br><span class="line">                    image=toolKit.getImage(url); //获取图像</span><br><span class="line">                    repaint(); //重绘屏幕</span><br><span class="line">                &#125;</span><br><span class="line">                catch(MalformedURLException ex)&#123;</span><br><span class="line">                    ex.printStackTrace(); //输出出错信息</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        setSize(1280,640);  //设置窗口尺寸</span><br><span class="line">        setVisible(true);  //设置窗口可视</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //关闭窗口时退出程序</span><br><span class="line">    &#125;</span><br><span class="line">    public void paint(Graphics g)&#123;</span><br><span class="line">        super.paint(g);</span><br><span class="line">        if (image!=null)&#123;</span><br><span class="line">            g.drawImage(image,100,70,this); //在组件上绘制图像</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        new GetImageDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中使用组件编写窗口实现网上文件的下载</title>
    <url>/2017/02/09/java-article42/</url>
    <content><![CDATA[<h2 id="Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载如图"><a href="#Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载如图" class="headerlink" title="Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载如图"></a>Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载；Java中使用组件编写窗口实现网上文件的下载如图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java24.jpg"
                      alt=" "
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java25.jpg"
                      alt=" "
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java26.jpg"
                      alt=" "
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.get;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.event.*;</span><br><span class="line">import java.net.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">import javax.swing.*;</span><br><span class="line">//从网络取得文件</span><br><span class="line">public class GetFileDemo extends JFrame&#123;</span><br><span class="line">    JTextField jtfUrl;  //输入文件地址url</span><br><span class="line">    JButton jbGetFile;  //取文件按钮</span><br><span class="line">    JLabel jlInfo; //显示提示信息</span><br><span class="line">    public GetFileDemo()&#123;</span><br><span class="line">        super(&quot;从网络取得文件&quot;);  //调用父类构造函数</span><br><span class="line">        Container container=getContentPane();   //得到容器</span><br><span class="line">        jtfUrl=new JTextField(18); //实例化地址输入框</span><br><span class="line">        jbGetFile=new JButton(&quot;取文件&quot;);  //实例化按钮</span><br><span class="line">        jlInfo=new JLabel(); </span><br><span class="line">        JPanel p=new JPanel();  //实例化一个面板,用于容纳地址输入框和取文件按钮</span><br><span class="line">        p.add(jtfUrl); //增加组件到面板上</span><br><span class="line">        p.add(jbGetFile);</span><br><span class="line">        container.add(p,BorderLayout.NORTH);  //增加组件到容器上</span><br><span class="line">        container.add(jlInfo,BorderLayout.CENTER);</span><br><span class="line">        jbGetFile.addActionListener(new ActionListener()&#123;  //按钮事件处理</span><br><span class="line">            public void actionPerformed(ActionEvent ent)&#123;</span><br><span class="line">                try&#123;</span><br><span class="line">                    jlInfo.setText(&quot;正在读取&quot;);</span><br><span class="line">                    URL url=new URL(jtfUrl.getText());    //得到文件的URL地址</span><br><span class="line">                    InputStream in=url.openStream();  //得到文件输入流</span><br><span class="line">                    String outFilename=JOptionPane.showInputDialog(GetFileDemo.this,&quot;输入保存文件名 &quot;); //输入保存的文件名</span><br><span class="line">                    FileOutputStream out=new FileOutputStream(outFilename);  //得到文件输出流</span><br><span class="line">                    byte[] buffer=new byte[1024]; //缓冲区大小</span><br><span class="line">                    int length;</span><br><span class="line">                    while ((length=in.read(buffer))!=-1)&#123;  //读取数据</span><br><span class="line">                        out.write(buffer,0,length);  //写入数据到文件</span><br><span class="line">                    &#125; </span><br><span class="line">                    out.close(); //关闭文件输出流</span><br><span class="line">                    in.close();  //关闭输入流             </span><br><span class="line">                    jlInfo.setText(&quot;读取文件成功&quot;);  //显示提示信息</span><br><span class="line">                &#125;</span><br><span class="line">                catch(Exception ex)&#123;</span><br><span class="line">                    ex.printStackTrace(); //输出出错信息</span><br><span class="line">                    jlInfo.setText(&quot;读取文件失败&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        setSize(320,100);  //设置窗口尺寸</span><br><span class="line">        setVisible(true);  //设置窗口可视</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //关闭窗口时退出程序</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        new GetFileDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中导出jar包的方法以及错误处理</title>
    <url>/2017/02/10/java-article45/</url>
    <content><![CDATA[<h2 id="总结一下关于JAR-export-finished-with-warnings-See-details-for-additional-information和找不到清单，加载不了主类的错误解决。"><a href="#总结一下关于JAR-export-finished-with-warnings-See-details-for-additional-information和找不到清单，加载不了主类的错误解决。" class="headerlink" title="总结一下关于JAR export finished with warnings.See details for additional information和找不到清单，加载不了主类的错误解决。"></a>总结一下关于<code>JAR export finished with warnings.See details for additional information</code>和找不到清单，加载不了主类的错误解决。</h2><h2 id="今天在用java导出jar包的时候碰到了这个错误”JAR-export-finished-with-warnings-See-details-for-additional-information“，在网上查了很多解决方法但都不太一样，而且还是报错，没办法就直接运行一下，没想到可以运行，然后自己摸索着解决了这个问题，至于解决方法—–那就是什么都不要管。还有关于运行的时候提示没有主清单属性的问题，加载不了主类，或者主类错误。下面看图，按照图片里来应该没有问题。"><a href="#今天在用java导出jar包的时候碰到了这个错误”JAR-export-finished-with-warnings-See-details-for-additional-information“，在网上查了很多解决方法但都不太一样，而且还是报错，没办法就直接运行一下，没想到可以运行，然后自己摸索着解决了这个问题，至于解决方法—–那就是什么都不要管。还有关于运行的时候提示没有主清单属性的问题，加载不了主类，或者主类错误。下面看图，按照图片里来应该没有问题。" class="headerlink" title="今天在用java导出jar包的时候碰到了这个错误”JAR export finished with warnings.See details for additional information“，在网上查了很多解决方法但都不太一样，而且还是报错，没办法就直接运行一下，没想到可以运行，然后自己摸索着解决了这个问题，至于解决方法—–那就是什么都不要管。还有关于运行的时候提示没有主清单属性的问题，加载不了主类，或者主类错误。下面看图，按照图片里来应该没有问题。"></a>今天在用java导出jar包的时候碰到了这个错误”<code>JAR export finished with warnings.See details for additional information</code>“，在网上查了很多解决方法但都不太一样，而且还是报错，没办法就直接运行一下，没想到可以运行，然后自己摸索着解决了这个问题，至于解决方法—–那就是什么都不要管。还有关于运行的时候提示没有主清单属性的问题，加载不了主类，或者主类错误。下面看图，按照图片里来应该没有问题。</h2><h3 id="这是错误提示"><a href="#这是错误提示" class="headerlink" title="这是错误提示"></a>这是错误提示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java27.jpg"
                     
                ></p>
<h2 id="下面按照图片里的一步一步的来"><a href="#下面按照图片里的一步一步的来" class="headerlink" title="下面按照图片里的一步一步的来"></a>下面按照图片里的一步一步的来</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java28.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java29.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java30.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java31.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java32.jpg"
                     
                ></p>
<h2 id="最后，在cmd中输入Java-jar-xxx-jar就可以运行了"><a href="#最后，在cmd中输入Java-jar-xxx-jar就可以运行了" class="headerlink" title="最后，在cmd中输入Java -jar xxx.jar就可以运行了"></a>最后，在cmd中输入Java -jar xxx.jar就可以运行了</h2>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级应用之---文件目录的基本操作</title>
    <url>/2017/02/12/java-article50/</url>
    <content><![CDATA[<h2 id="文件的概念和类"><a href="#文件的概念和类" class="headerlink" title="文件的概念和类"></a>文件的概念和类</h2><h3 id="经常听到相对路径和绝对路径的说法，而这俩具体有什么区别："><a href="#经常听到相对路径和绝对路径的说法，而这俩具体有什么区别：" class="headerlink" title="经常听到相对路径和绝对路径的说法，而这俩具体有什么区别："></a>经常听到相对路径和绝对路径的说法，而这俩具体有什么区别：</h3><ul>
<li><p>绝对路径—从根路径开始写，比如d:\data\image.jpg</p>
</li>
<li><p>相对路径—以当前目录为参照对文件路径进行写，比如 data\image.jpg (web中多用相对路径来引用)</p>
</li>
</ul>
<h3 id="file类"><a href="#file类" class="headerlink" title="file类"></a>file类</h3><h4 id="java-io包中提供了一系列用于对文件进行处理的接口和类，其中的File类可以对文件。目录及其-属性进行管理和访问，下面是一些File类的常用方法。"><a href="#java-io包中提供了一系列用于对文件进行处理的接口和类，其中的File类可以对文件。目录及其-属性进行管理和访问，下面是一些File类的常用方法。" class="headerlink" title="java.io包中提供了一系列用于对文件进行处理的接口和类，其中的File类可以对文件。目录及其 属性进行管理和访问，下面是一些File类的常用方法。"></a>java.io包中提供了一系列用于对文件进行处理的接口和类，其中的File类可以对文件。目录及其 属性进行管理和访问，下面是一些File类的常用方法。</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java33.jpg"
                     
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java34.jpg"
                     
                ></p>
<h2 id="下面是示例代码，要注意windows下路径分隔使用-，而编程语言中、表示转义字符"><a href="#下面是示例代码，要注意windows下路径分隔使用-，而编程语言中、表示转义字符" class="headerlink" title="下面是示例代码，要注意windows下路径分隔使用\，而编程语言中、表示转义字符"></a>下面是示例代码，要注意windows下路径分隔使用\，而编程语言中、表示转义字符</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter01;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class FileDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 以当前路径来创建一个File对象,&quot;.&quot;代表当前路径</span><br><span class="line">        File file = new File(&quot;.&quot;);</span><br><span class="line">        // 直接获取文件名，输出&quot;.&quot;</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">        // 获取相对路径的父路径可能出错，下面代码输出null</span><br><span class="line">        System.out.println(file.getParent());</span><br><span class="line">        // 获取绝对路径</span><br><span class="line">        System.out.println(file.getAbsoluteFile());</span><br><span class="line">        // 获取上一级路径</span><br><span class="line">        System.out.println(file.getAbsoluteFile().getParent());</span><br><span class="line">        // 以指定的文件名创建File对象</span><br><span class="line">        File newFile = new File(&quot;C:\\file.txt&quot;);</span><br><span class="line">        System.out.println(&quot;newFile对象是否存在：&quot; + newFile.exists());</span><br><span class="line">        try &#123;</span><br><span class="line">            // 以指定newFile对象来创建一个文件</span><br><span class="line">            newFile.createNewFile();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        // 以newFile对象来创建一个目录，因为newFile已经存在</span><br><span class="line">        // 所以下面方法返回false，即无法创建该目录</span><br><span class="line">        System.out.println(&quot;创建目录：&quot;+newFile.mkdir());</span><br><span class="line">        // 使用list()方法来列出当前路径下的所有文件和路径</span><br><span class="line">        String[] fileList = file.list();</span><br><span class="line">        System.out.println(&quot;====当前路径下所有文件和路径如下====&quot;);</span><br><span class="line">        for (String fileName : fileList) &#123;</span><br><span class="line">            System.out.println(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        // listRoots()静态方法列出所有的磁盘根路径。</span><br><span class="line">        File[] roots = File.listRoots();</span><br><span class="line">        System.out.println(&quot;====系统所有根路径如下====&quot;);</span><br><span class="line">        for (File root : roots) &#123;</span><br><span class="line">            System.out.println(root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级应用之---文件的过滤接口使用</title>
    <url>/2017/02/12/java-article51/</url>
    <content><![CDATA[<h2 id="FilenameFilter是一个文件过滤接口，可以根据文件后缀等特征进行过滤，将符合条件的文件筛选出来。使用FilenameFilter时，只需要定义一个类实现接口的accpt-方法，或者直接使用一个匿名类。"><a href="#FilenameFilter是一个文件过滤接口，可以根据文件后缀等特征进行过滤，将符合条件的文件筛选出来。使用FilenameFilter时，只需要定义一个类实现接口的accpt-方法，或者直接使用一个匿名类。" class="headerlink" title="FilenameFilter是一个文件过滤接口，可以根据文件后缀等特征进行过滤，将符合条件的文件筛选出来。使用FilenameFilter时，只需要定义一个类实现接口的accpt()方法，或者直接使用一个匿名类。"></a>FilenameFilter是一个文件过滤接口，可以根据文件后缀等特征进行过滤，将符合条件的文件筛选出来。使用FilenameFilter时，只需要定义一个类实现接口的accpt()方法，或者直接使用一个匿名类。</h2><h2 id="下面是示例代码"><a href="#下面是示例代码" class="headerlink" title="下面是示例代码"></a>下面是示例代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter01;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line">public class FilenameFilterDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 根据路径名称创建File对象</span><br><span class="line">        File file = new File(&quot;C:\\Program Files\\Java&quot;);</span><br><span class="line">        // 得到文件名列表</span><br><span class="line">        if (file.exists() &amp;&amp; file.isDirectory()) &#123;</span><br><span class="line">            // 显示该目录下所有文件列表</span><br><span class="line">            String[] allFileNames = file.list();</span><br><span class="line"></span><br><span class="line">            for (String name : allFileNames) &#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">            // 创建FileNameFilter类型的匿名类，并作为参数传入到list()方法中</span><br><span class="line">            String[] filterFileNames = file.list(new FilenameFilter() &#123;</span><br><span class="line">                public boolean accept(File dir, String name) &#123;</span><br><span class="line">                    // 对文件名进行过滤，文件名的后缀为.zip或.txt</span><br><span class="line">                    return (name.endsWith(&quot;.zip&quot;)  name.endsWith(&quot;.txt&quot;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(&quot;过滤后的文件列表：&quot;);</span><br><span class="line">            for (String name : filterFileNames) &#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级应用之---IO流中字节流的输入输出</title>
    <url>/2017/02/12/java-article52/</url>
    <content><![CDATA[<h2 id="流的分类："><a href="#流的分类：" class="headerlink" title="流的分类："></a>流的分类：</h2><h3 id="按照流的流向来分，可以将流分为输入流和输出流。"><a href="#按照流的流向来分，可以将流分为输入流和输出流。" class="headerlink" title="按照流的流向来分，可以将流分为输入流和输出流。"></a>按照流的流向来分，可以将流分为输入流和输出流。</h3><ul>
<li>输入流：只能从输入流中读取数据，例如scanner</li>
<li>输出流：只能向输出流中写入数据，例如System.out.println</li>
</ul>
<h3 id="按照流所操作的基本数据单元来分，可以分为字节流和字符流"><a href="#按照流所操作的基本数据单元来分，可以分为字节流和字符流" class="headerlink" title="按照流所操作的基本数据单元来分，可以分为字节流和字符流"></a>按照流所操作的基本数据单元来分，可以分为字节流和字符流</h3><ul>
<li>字节流：所操作的基本数据单元是8位的字节（byte），输入和输出都是对字节进行操作<ul>
<li>输入流：InputStream</li>
<li>输出流：OutputStream</li>
</ul>
</li>
<li>字符流：所操作的基本数据单元是16位的字符（Unicode），输入输出都是对字符进行操作<ul>
<li>输入流：Reader</li>
<li>输出流：Writer</li>
</ul>
</li>
</ul>
<h3 id="按照流的角色来分，可以将流分为节点流和处理流"><a href="#按照流的角色来分，可以将流分为节点流和处理流" class="headerlink" title="按照流的角色来分，可以将流分为节点流和处理流"></a>按照流的角色来分，可以将流分为节点流和处理流</h3><ul>
<li>节点流：用于从&#x2F;向特定的IO设备中读写数据的流，这种流被称为节点流，节点流也称为低级流，节点通常是指文件，内存等其他管道</li>
<li>处理流：对一个已经存在的流进行连接或封装，通过封装后的流来实现数据的读写功能，这种流被称为处理流，处理流也被称为高级流，包装流</li>
</ul>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul>
<li><p>如果进行输入输出的内容是文本内容，则使用字符流</p>
</li>
<li><p>如果进行输入输出的内容是二进制内容，则使用字节流</p>
</li>
</ul>
<h3 id="使用FileInputStream读文件内容"><a href="#使用FileInputStream读文件内容" class="headerlink" title="使用FileInputStream读文件内容"></a>使用FileInputStream读文件内容</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter01;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">public class FileInputStreamDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 声明文件字节输入流</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 实例化文件字节输入流</span><br><span class="line">            fis = new FileInputStream(</span><br><span class="line">    &quot;src\\com\\rain\\chapter01\\FileInputStreamDemo.java&quot;);</span><br><span class="line">            // 创建一个长度为1024的字节数组作为缓冲区</span><br><span class="line">            byte[] bbuf = new byte[1024];</span><br><span class="line">            // 用于保存实际读取的字节数</span><br><span class="line">            int hasRead = 0;</span><br><span class="line">            // 使用循环重复读文件中的数据</span><br><span class="line">            while ((hasRead = fis.read(bbuf)) &gt; 0) &#123;</span><br><span class="line">                // 将缓冲区中的数据转换成字符串输出</span><br><span class="line">                System.out.print(new String(bbuf, 0, hasRead));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭文件输入流</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="使用FileOutputStream将用户输入的数据写到指定文件中，此方法会新建一个mytest-txt的文件，如果存在mytest-txt就清空里面的内容在输入，如果想要将新的内容追加到文件的末尾，需要使用FileOutputStream-String-name-boolean-append-构造方法创建一个文件输出流，其中设置append参数的值为true。"><a href="#使用FileOutputStream将用户输入的数据写到指定文件中，此方法会新建一个mytest-txt的文件，如果存在mytest-txt就清空里面的内容在输入，如果想要将新的内容追加到文件的末尾，需要使用FileOutputStream-String-name-boolean-append-构造方法创建一个文件输出流，其中设置append参数的值为true。" class="headerlink" title="使用FileOutputStream将用户输入的数据写到指定文件中，此方法会新建一个mytest.txt的文件，如果存在mytest.txt就清空里面的内容在输入，如果想要将新的内容追加到文件的末尾，需要使用FileOutputStream(String name, boolean append)构造方法创建一个文件输出流，其中设置append参数的值为true。"></a>使用FileOutputStream将用户输入的数据写到指定文件中，此方法会新建一个mytest.txt的文件，如果存在mytest.txt就清空里面的内容在输入，如果想要将新的内容追加到文件的末尾，需要使用FileOutputStream(String name, boolean append)构造方法创建一个文件输出流，其中设置append参数的值为true。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter01;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class FileOutputStreamDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 建立一个从键盘接收数据的扫描器</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        // 声明文件字节输出流</span><br><span class="line">        FileOutputStream fos = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 实例化文件字节输出流</span><br><span class="line">            fos = new FileOutputStream(&quot;D:\\mytest.txt&quot;);</span><br><span class="line">            System.out.println(&quot;请输入内容：&quot;);</span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            // 将数据写入文件中</span><br><span class="line">            fos.write(str.getBytes());</span><br><span class="line">            System.out.println(&quot;已保存！&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭文件输出流</span><br><span class="line">                fos.close();</span><br><span class="line">                scanner.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级应用之---IO流中字符流的输入输出</title>
    <url>/2017/02/12/java-article53/</url>
    <content><![CDATA[<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>###字符流所处理的数据基本单元是字符，其输入输出操作都是在字符的基础上进行，Java语言中的字符采用Unicode字符编码，每个字符占2个字节空间，而文本文件有可能采用其他类型的编码，如GBK，UTF8编码方式，因此有时需要字符编码之间的转换。</p>
<h3 id="字符流的两个基类Reader，Writer，其他字符流都是由这两个抽象类派生的。"><a href="#字符流的两个基类Reader，Writer，其他字符流都是由这两个抽象类派生的。" class="headerlink" title="字符流的两个基类Reader，Writer，其他字符流都是由这两个抽象类派生的。"></a>字符流的两个基类Reader，Writer，其他字符流都是由这两个抽象类派生的。</h3><h3 id="下面使用FileReader和BufferedReader读取文件的内容并输出。"><a href="#下面使用FileReader和BufferedReader读取文件的内容并输出。" class="headerlink" title="下面使用FileReader和BufferedReader读取文件的内容并输出。"></a>下面使用FileReader和BufferedReader读取文件的内容并输出。</h3><h4 id="注：BufferedReader类中的readLine-方法是按行读取，当读取到流的末尾时返回null，所以可以根据返回值是否为null来判断文件是否读取完毕。"><a href="#注：BufferedReader类中的readLine-方法是按行读取，当读取到流的末尾时返回null，所以可以根据返回值是否为null来判断文件是否读取完毕。" class="headerlink" title="注：BufferedReader类中的readLine()方法是按行读取，当读取到流的末尾时返回null，所以可以根据返回值是否为null来判断文件是否读取完毕。"></a>注：BufferedReader类中的readLine()方法是按行读取，当读取到流的末尾时返回null，所以可以根据返回值是否为null来判断文件是否读取完毕。</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter01;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">public class ReaderDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 声明一个BufferedReader流的对象</span><br><span class="line">        BufferedReader br = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 实例化BufferedReader流，连接FileReader流用于读文件</span><br><span class="line">            br = new BufferedReader(new FileReader(</span><br><span class="line">                    &quot;src\\com\\qst\\chapter01\\ReaderDemo.java&quot;));</span><br><span class="line">            String result = null;</span><br><span class="line">            //循环读文件，一次读一行</span><br><span class="line">            while ((result = br.readLine()) != null) &#123;</span><br><span class="line">                //输出</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭缓冲流</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="下面使用FileWrite将用户输入的数据写入到指定文件中"><a href="#下面使用FileWrite将用户输入的数据写入到指定文件中" class="headerlink" title="下面使用FileWrite将用户输入的数据写入到指定文件中"></a>下面使用FileWrite将用户输入的数据写入到指定文件中</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter01;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class WriterDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 建立一个从键盘接收数据的扫描器</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        // 声明文件字符输出流</span><br><span class="line">        FileWriter fw = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 实例化文件字符输出流</span><br><span class="line">            fw = new FileWriter(&quot;D:\\mytest2.txt&quot;);</span><br><span class="line">            System.out.println(&quot;请输入内容：&quot;);</span><br><span class="line">            String str = scanner.nextLine();</span><br><span class="line">            // 将数据写入文件中</span><br><span class="line">            fw.write(str);</span><br><span class="line">            System.out.println(&quot;已保存！&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 关闭文件字符输出流</span><br><span class="line">                fw.close();</span><br><span class="line">                scanner.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="流的分类："><a href="#流的分类：" class="headerlink" title="流的分类："></a>流的分类：</h2><h3 id="按照流的流向来分，可以将流分为输入流和输出流。"><a href="#按照流的流向来分，可以将流分为输入流和输出流。" class="headerlink" title="按照流的流向来分，可以将流分为输入流和输出流。"></a>按照流的流向来分，可以将流分为输入流和输出流。</h3><ul>
<li>输入流：只能从输入流中读取数据，例如scanner</li>
<li>输出流：只能向输出流中写入数据，例如System.out.println</li>
</ul>
<h3 id="按照流所操作的基本数据单元来分，可以分为字节流和字符流"><a href="#按照流所操作的基本数据单元来分，可以分为字节流和字符流" class="headerlink" title="按照流所操作的基本数据单元来分，可以分为字节流和字符流"></a>按照流所操作的基本数据单元来分，可以分为字节流和字符流</h3><ul>
<li>字节流：所操作的基本数据单元是8位的字节（byte），输入和输出都是对字节进行操作<ul>
<li>输入流：InputStream</li>
<li>输出流：OutputStream</li>
</ul>
</li>
<li>字符流：所操作的基本数据单元是16位的字符（Unicode），输入输出都是对字符进行操作<ul>
<li>输入流：Reader</li>
<li>输出流：Writer</li>
</ul>
</li>
</ul>
<h3 id="按照流的角色来分，可以将流分为节点流和处理流"><a href="#按照流的角色来分，可以将流分为节点流和处理流" class="headerlink" title="按照流的角色来分，可以将流分为节点流和处理流"></a>按照流的角色来分，可以将流分为节点流和处理流</h3><ul>
<li>节点流：用于从&#x2F;向特定的IO设备中读写数据的流，这种流被称为节点流，节点流也称为低级流，节点通常是指文件，内存等其他管道</li>
<li>处理流：对一个已经存在的流进行连接或封装，通过封装后的流来实现数据的读写功能，这种流被称为处理流，处理流也被称为高级流，包装流</li>
</ul>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul>
<li>如果进行输入输出的内容是文本内容，则使用字符流</li>
<li>如果进行输入输出的内容是二进制内容，则使用字节流</li>
</ul>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>使用java面向对象概念之把大象装进冰箱</title>
    <url>/2017/02/13/java-article55/</url>
    <content><![CDATA[<h2 id="一直想写一篇介绍面向对象的文章，面向对象对于初学者来说，不好理解。于是设计了一个把大象装进冰箱的程序，先看代码。"><a href="#一直想写一篇介绍面向对象的文章，面向对象对于初学者来说，不好理解。于是设计了一个把大象装进冰箱的程序，先看代码。" class="headerlink" title="一直想写一篇介绍面向对象的文章，面向对象对于初学者来说，不好理解。于是设计了一个把大象装进冰箱的程序，先看代码。"></a>一直想写一篇介绍面向对象的文章，面向对象对于初学者来说，不好理解。于是设计了一个把大象装进冰箱的程序，先看代码。</h2><h3 id="如何把大象装进冰箱？"><a href="#如何把大象装进冰箱？" class="headerlink" title="如何把大象装进冰箱？"></a>如何把大象装进冰箱？</h3><ul>
<li>（人或机器）把冰箱门打开</li>
<li>（人或机器）把大象装进去</li>
<li>（人或机器）把冰箱门关上</li>
</ul>
<h3 id="所以程序可以这样设计了："><a href="#所以程序可以这样设计了：" class="headerlink" title="所以程序可以这样设计了："></a>所以程序可以这样设计了：</h3><h3 id="冰箱是一个对象，大象也是一个对象，所以写两个类；"><a href="#冰箱是一个对象，大象也是一个对象，所以写两个类；" class="headerlink" title="冰箱是一个对象，大象也是一个对象，所以写两个类；"></a>冰箱是一个对象，大象也是一个对象，所以写两个类；</h3><h3 id="冰箱有门和放东西的空间，这是冰箱的属性；不需要用到大象的属性；"><a href="#冰箱有门和放东西的空间，这是冰箱的属性；不需要用到大象的属性；" class="headerlink" title="冰箱有门和放东西的空间，这是冰箱的属性；不需要用到大象的属性；"></a>冰箱有门和放东西的空间，这是冰箱的属性；不需要用到大象的属性；</h3><h3 id="冰箱有开门和关门这两种行为；大象有走进冰箱这一种行为；"><a href="#冰箱有开门和关门这两种行为；大象有走进冰箱这一种行为；" class="headerlink" title="冰箱有开门和关门这两种行为；大象有走进冰箱这一种行为；"></a>冰箱有开门和关门这两种行为；大象有走进冰箱这一种行为；</h3><h3 id="先写冰箱类："><a href="#先写冰箱类：" class="headerlink" title="先写冰箱类："></a>先写冰箱类：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">public class Fridge &#123;</span><br><span class="line">    //冰箱类</span><br><span class="line">    private static String Goods;//冰箱里的物品属性</span><br><span class="line">    private boolean state;  // 冰箱门的状态</span><br><span class="line">    public void OpenDoor()&#123;  //打开冰箱</span><br><span class="line">        this.state = true;</span><br><span class="line">        System.out.println(&quot;冰箱门打开&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void CloseDoor()&#123;//关闭冰箱</span><br><span class="line">        this.state = false;</span><br><span class="line">        System.out.println(&quot;冰箱门关闭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void Set_Goods(String name)&#123;//放入物品</span><br><span class="line">        this.Goods = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void Get_Goods()&#123;  //获取里面的物品</span><br><span class="line">        System.out.println(&quot;里面是&quot;+Goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="再写大象类："><a href="#再写大象类：" class="headerlink" title="再写大象类："></a>再写大象类：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">public class Elephant &#123;</span><br><span class="line">    //大象类</span><br><span class="line">    public void Walk_Fridge()&#123;</span><br><span class="line">        Fridge fridge = new Fridge();</span><br><span class="line">        fridge.Set_Goods(&quot;大象&quot;);</span><br><span class="line">        System.out.println(&quot;大象走进了冰箱&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="最后是main-方法："><a href="#最后是main-方法：" class="headerlink" title="最后是main()方法："></a>最后是main()方法：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">public class demo &#123;</span><br><span class="line">    //主类</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Fridge fridge = new Fridge();</span><br><span class="line">        Elephant elephant = new Elephant();</span><br><span class="line">        fridge.OpenDoor();</span><br><span class="line">        elephant.Walk_Fridge();</span><br><span class="line">        fridge.CloseDoor();</span><br><span class="line">        System.out.print(&quot;冰箱里有什么：&quot;);</span><br><span class="line">        fridge.Get_Goods(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">冰箱门打开</span><br><span class="line">大象走进了冰箱</span><br><span class="line">冰箱门关闭</span><br><span class="line">冰箱里有什么：里面是大象</span><br></pre></td></tr></table></figure></div>

<h2 id="在这里先简单说一下面向对象的三大特征，然后再说说代码中的体现。"><a href="#在这里先简单说一下面向对象的三大特征，然后再说说代码中的体现。" class="headerlink" title="在这里先简单说一下面向对象的三大特征，然后再说说代码中的体现。"></a>在这里先简单说一下面向对象的三大特征，然后再说说代码中的体现。</h2><ul>
<li><h3 id="封装：属性可以用来描述同一类事物的特征，行为可描述一类事物可做的操作，而封装就是把属于同一类事物的共性（包括属性和行为）归到一个类中，以方便使用。"><a href="#封装：属性可以用来描述同一类事物的特征，行为可描述一类事物可做的操作，而封装就是把属于同一类事物的共性（包括属性和行为）归到一个类中，以方便使用。" class="headerlink" title="封装：属性可以用来描述同一类事物的特征，行为可描述一类事物可做的操作，而封装就是把属于同一类事物的共性（包括属性和行为）归到一个类中，以方便使用。"></a>封装：属性可以用来描述同一类事物的特征，行为可描述一类事物可做的操作，而封装就是把属于同一类事物的共性（包括属性和行为）归到一个类中，以方便使用。</h3></li>
<li><h3 id="继承：由于封装，使得有共同特征的一类事物的所有描述信息都被归于一个类之中，但有些事物虽然有共性，但还是存在区别的。比如把冰箱这个类的品牌、容量、制冷等共性封装起来，但有的冰箱还能智能控温。智能控温冰箱有普通冰箱一样的有共性，但我们不能把智能控温这一行为也封装到冰箱类里面去，智能控温是智能控温冰箱的特征行为之一。为了省事地封装智能控温冰箱（代码的复用，这也是继承存在的原因之一），可以让智能控温冰箱取继承冰箱类："><a href="#继承：由于封装，使得有共同特征的一类事物的所有描述信息都被归于一个类之中，但有些事物虽然有共性，但还是存在区别的。比如把冰箱这个类的品牌、容量、制冷等共性封装起来，但有的冰箱还能智能控温。智能控温冰箱有普通冰箱一样的有共性，但我们不能把智能控温这一行为也封装到冰箱类里面去，智能控温是智能控温冰箱的特征行为之一。为了省事地封装智能控温冰箱（代码的复用，这也是继承存在的原因之一），可以让智能控温冰箱取继承冰箱类：" class="headerlink" title="继承：由于封装，使得有共同特征的一类事物的所有描述信息都被归于一个类之中，但有些事物虽然有共性，但还是存在区别的。比如把冰箱这个类的品牌、容量、制冷等共性封装起来，但有的冰箱还能智能控温。智能控温冰箱有普通冰箱一样的有共性，但我们不能把智能控温这一行为也封装到冰箱类里面去，智能控温是智能控温冰箱的特征行为之一。为了省事地封装智能控温冰箱（代码的复用，这也是继承存在的原因之一），可以让智能控温冰箱取继承冰箱类："></a>继承：由于封装，使得有共同特征的一类事物的所有描述信息都被归于一个类之中，但有些事物虽然有共性，但还是存在区别的。比如把冰箱这个类的品牌、容量、制冷等共性封装起来，但有的冰箱还能智能控温。智能控温冰箱有普通冰箱一样的有共性，但我们不能把智能控温这一行为也封装到冰箱类里面去，智能控温是智能控温冰箱的特征行为之一。为了省事地封装智能控温冰箱（代码的复用，这也是继承存在的原因之一），可以让智能控温冰箱取继承冰箱类：</h3></li>
<li><h3 id="多态：能站在抽象的角度去描述一件事-而针对这件抽象的事-对于每个个体-具体-又能找到其自身的行为去执行-这就是多态-比如说冰箱按用途可分为冷藏箱、冷藏冰冻箱、冰冻箱。冷藏箱至少有一个冷藏室，但没有冰冻室；冷藏冰冻箱至少有一间冷藏室、一间冰冻室；冰冻箱至少有一间冰冻室，可有冷冻食品储藏室。它们都同属冰箱类，都有各自的行为去收纳物品。"><a href="#多态：能站在抽象的角度去描述一件事-而针对这件抽象的事-对于每个个体-具体-又能找到其自身的行为去执行-这就是多态-比如说冰箱按用途可分为冷藏箱、冷藏冰冻箱、冰冻箱。冷藏箱至少有一个冷藏室，但没有冰冻室；冷藏冰冻箱至少有一间冷藏室、一间冰冻室；冰冻箱至少有一间冰冻室，可有冷冻食品储藏室。它们都同属冰箱类，都有各自的行为去收纳物品。" class="headerlink" title="多态：能站在抽象的角度去描述一件事,而针对这件抽象的事, 对于每个个体(具体)又能找到其自身的行为去执行, 这就是多态.比如说冰箱按用途可分为冷藏箱、冷藏冰冻箱、冰冻箱。冷藏箱至少有一个冷藏室，但没有冰冻室；冷藏冰冻箱至少有一间冷藏室、一间冰冻室；冰冻箱至少有一间冰冻室，可有冷冻食品储藏室。它们都同属冰箱类，都有各自的行为去收纳物品。"></a>多态：能站在抽象的角度去描述一件事,而针对这件抽象的事, 对于每个个体(具体)又能找到其自身的行为去执行, 这就是多态.比如说冰箱按用途可分为冷藏箱、冷藏冰冻箱、冰冻箱。冷藏箱至少有一个冷藏室，但没有冰冻室；冷藏冰冻箱至少有一间冷藏室、一间冰冻室；冰冻箱至少有一间冰冻室，可有冷冻食品储藏室。它们都同属冰箱类，都有各自的行为去收纳物品。</h3></li>
</ul>
<h2 id="分析代码中的面向对象思想的体现："><a href="#分析代码中的面向对象思想的体现：" class="headerlink" title="分析代码中的面向对象思想的体现："></a>分析代码中的面向对象思想的体现：</h2><ul>
<li><h3 id="封装：通过访问修饰符private把冰箱里的东西、门的打开和关闭状态封装起来变为冰箱类的私有属性，外部只能通过公共的方法去访问这些属性。"><a href="#封装：通过访问修饰符private把冰箱里的东西、门的打开和关闭状态封装起来变为冰箱类的私有属性，外部只能通过公共的方法去访问这些属性。" class="headerlink" title="封装：通过访问修饰符private把冰箱里的东西、门的打开和关闭状态封装起来变为冰箱类的私有属性，外部只能通过公共的方法去访问这些属性。"></a>封装：通过访问修饰符private把冰箱里的东西、门的打开和关闭状态封装起来变为冰箱类的私有属性，外部只能通过公共的方法去访问这些属性。</h3></li>
<li><h3 id="继承：假如要把大象关进海尔冰箱，只需要写一个海尔冰箱类去继承冰箱类（冰箱类的所有属性和行为都会被海尔冰箱类继承过来），然后让大象走进海尔冰箱即可。"><a href="#继承：假如要把大象关进海尔冰箱，只需要写一个海尔冰箱类去继承冰箱类（冰箱类的所有属性和行为都会被海尔冰箱类继承过来），然后让大象走进海尔冰箱即可。" class="headerlink" title="继承：假如要把大象关进海尔冰箱，只需要写一个海尔冰箱类去继承冰箱类（冰箱类的所有属性和行为都会被海尔冰箱类继承过来），然后让大象走进海尔冰箱即可。"></a>继承：假如要把大象关进海尔冰箱，只需要写一个海尔冰箱类去继承冰箱类（冰箱类的所有属性和行为都会被海尔冰箱类继承过来），然后让大象走进海尔冰箱即可。</h3></li>
<li><h3 id="多态：大象有很多品种，每个品种进冰箱的方式也不一样。比如让亚洲象走进去、赶非洲草原象进去、把非洲森林象抬进去等。"><a href="#多态：大象有很多品种，每个品种进冰箱的方式也不一样。比如让亚洲象走进去、赶非洲草原象进去、把非洲森林象抬进去等。" class="headerlink" title="多态：大象有很多品种，每个品种进冰箱的方式也不一样。比如让亚洲象走进去、赶非洲草原象进去、把非洲森林象抬进去等。"></a>多态：大象有很多品种，每个品种进冰箱的方式也不一样。比如让亚洲象走进去、赶非洲草原象进去、把非洲森林象抬进去等。</h3></li>
</ul>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级应用---线程的三种创建方式</title>
    <url>/2017/02/14/java-article56/</url>
    <content><![CDATA[<h2 id="线程和进程应该都听说过，Thread，Process，这里就不介绍概念了，基本的Java线程模型有Thread类，Runnable接口，Callable接口和Future接口等，这些线程模型都是面向对象的。"><a href="#线程和进程应该都听说过，Thread，Process，这里就不介绍概念了，基本的Java线程模型有Thread类，Runnable接口，Callable接口和Future接口等，这些线程模型都是面向对象的。" class="headerlink" title="线程和进程应该都听说过，Thread，Process，这里就不介绍概念了，基本的Java线程模型有Thread类，Runnable接口，Callable接口和Future接口等，这些线程模型都是面向对象的。"></a>线程和进程应该都听说过，Thread，Process，这里就不介绍概念了，基本的Java线程模型有Thread类，Runnable接口，Callable接口和Future接口等，这些线程模型都是面向对象的。</h2><h2 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h2><h2 id="其中Thread类的run-方法是线程中最重要的方法，用于执行线程要完成的任务，我们每次创建一个线程都要重写run方法，当然还有start-方法负责启动。"><a href="#其中Thread类的run-方法是线程中最重要的方法，用于执行线程要完成的任务，我们每次创建一个线程都要重写run方法，当然还有start-方法负责启动。" class="headerlink" title="其中Thread类的run(),方法是线程中最重要的方法，用于执行线程要完成的任务，我们每次创建一个线程都要重写run方法，当然还有start()方法负责启动。"></a>其中Thread类的run(),方法是线程中最重要的方法，用于执行线程要完成的任务，我们每次创建一个线程都要重写run方法，当然还有start()方法负责启动。</h2><h3 id="下面继承Thread类"><a href="#下面继承Thread类" class="headerlink" title="下面继承Thread类"></a>下面继承Thread类</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">public class ThreadDemo extends Thread &#123;//继承Thread类</span><br><span class="line">    public void run()&#123; //重写run方法</span><br><span class="line">        setName(&quot;子线程&quot;);  //定义子线程的name</span><br><span class="line">        for (int i=0;i&lt;5;i++)&#123;</span><br><span class="line">            System.out.println(this.getName()+&quot;:&quot;+i);//打印子线程的name和i值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] arge)&#123;</span><br><span class="line">        ThreadDemo td = new ThreadDemo(); //创建线程对象</span><br><span class="line">        td.start();                 //启动线程</span><br><span class="line">        for(int i=10;i&lt;15;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);//打印主线程的name和i值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:10</span><br><span class="line">main:11</span><br><span class="line">main:12</span><br><span class="line">子线程:0</span><br><span class="line">main:13</span><br><span class="line">子线程:1</span><br><span class="line">main:14</span><br><span class="line">子线程:2</span><br><span class="line">子线程:3</span><br><span class="line">子线程:4</span><br></pre></td></tr></table></figure></div>

<h2 id="2-实现Runable接口"><a href="#2-实现Runable接口" class="headerlink" title="2. 实现Runable接口"></a>2. 实现Runable接口</h2><h2 id="Runnable接口用于标识某个Java类可否作为线程类，该接口只有一个抽象方法run，用于执行线程中的任务。一个尅实现Runnable接口后，并不代表该类是个“线程”类，不能直接启动线程，必须通过Thread类的实例来创建并启动线程。"><a href="#Runnable接口用于标识某个Java类可否作为线程类，该接口只有一个抽象方法run，用于执行线程中的任务。一个尅实现Runnable接口后，并不代表该类是个“线程”类，不能直接启动线程，必须通过Thread类的实例来创建并启动线程。" class="headerlink" title="Runnable接口用于标识某个Java类可否作为线程类，该接口只有一个抽象方法run，用于执行线程中的任务。一个尅实现Runnable接口后，并不代表该类是个“线程”类，不能直接启动线程，必须通过Thread类的实例来创建并启动线程。"></a>Runnable接口用于标识某个Java类可否作为线程类，该接口只有一个抽象方法run，用于执行线程中的任务。一个尅实现Runnable接口后，并不代表该类是个“线程”类，不能直接启动线程，必须通过Thread类的实例来创建并启动线程。</h2><h2 id="通过Runnable接口创建并启动线程的步骤："><a href="#通过Runnable接口创建并启动线程的步骤：" class="headerlink" title="通过Runnable接口创建并启动线程的步骤："></a>通过Runnable接口创建并启动线程的步骤：</h2><blockquote>
<ul>
<li>(1)、定义一个雷实现Runnable接口，并实现该接口中的run方法；</li>
<li>(2)、创建一个Thread类的实例，并将Runnable接口的实现类所创建的对象作为参数传入Thread类的构造方法中；</li>
<li>(3)、调用Thread对象的start方法启动该线程。</li>
</ul>
</blockquote>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">//实现Runnable接口</span><br><span class="line">class ThreadTask implements Runnable &#123;</span><br><span class="line"> @Override</span><br><span class="line"> public void run() &#123;//重写run方法</span><br><span class="line">     // TODO Auto-generated method stub</span><br><span class="line">     for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">         //打印当前线程的name和i值</span><br><span class="line">         System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> //实现类</span><br><span class="line"> public class RunnableDemo&#123;</span><br><span class="line">     public static void main(String[] args) &#123;</span><br><span class="line">         //实例化Thread类，参数为ThreadTask对象</span><br><span class="line">         Thread td = new Thread(new ThreadTask());</span><br><span class="line">         td.start();//启动线程</span><br><span class="line">         for(int i=10;i&lt;=15;i++)&#123;</span><br><span class="line">             //打印主线程name和i值</span><br><span class="line">             System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:10</span><br><span class="line">Thread-0:0</span><br><span class="line">main:11</span><br><span class="line">Thread-0:1</span><br><span class="line">main:12</span><br><span class="line">Thread-0:2</span><br><span class="line">Thread-0:3</span><br><span class="line">Thread-0:4</span><br><span class="line">main:13</span><br><span class="line">main:14</span><br><span class="line">main:15</span><br></pre></td></tr></table></figure></div>

<h2 id="3-使用Callable和Future接口"><a href="#3-使用Callable和Future接口" class="headerlink" title="3. 使用Callable和Future接口"></a>3. 使用Callable和Future接口</h2><h2 id="Callable接口提供一个call方法作为线程的执行体，call方法比run方法功能更强大，call方法可以有返回值，也可以声明抛出异常，Future接口用来接收Callable接口中call方法的返回值，Future接口提供一个FutureTask实现类，该类同时实现了Future和Runnable两个接口，因此可以作为Thread类的target参数，使用Callable和Future接口的最大优势在于可以在线程执行完任务之后获取执行结果。"><a href="#Callable接口提供一个call方法作为线程的执行体，call方法比run方法功能更强大，call方法可以有返回值，也可以声明抛出异常，Future接口用来接收Callable接口中call方法的返回值，Future接口提供一个FutureTask实现类，该类同时实现了Future和Runnable两个接口，因此可以作为Thread类的target参数，使用Callable和Future接口的最大优势在于可以在线程执行完任务之后获取执行结果。" class="headerlink" title="Callable接口提供一个call方法作为线程的执行体，call方法比run方法功能更强大，call方法可以有返回值，也可以声明抛出异常，Future接口用来接收Callable接口中call方法的返回值，Future接口提供一个FutureTask实现类，该类同时实现了Future和Runnable两个接口，因此可以作为Thread类的target参数，使用Callable和Future接口的最大优势在于可以在线程执行完任务之后获取执行结果。"></a>Callable接口提供一个call方法作为线程的执行体，call方法比run方法功能更强大，call方法可以有返回值，也可以声明抛出异常，Future接口用来接收Callable接口中call方法的返回值，Future接口提供一个FutureTask实现类，该类同时实现了Future和Runnable两个接口，因此可以作为Thread类的target参数，使用Callable和Future接口的最大优势在于可以在线程执行完任务之后获取执行结果。</h2><h2 id="使用Callable和Future接口创建并启动线程的步骤："><a href="#使用Callable和Future接口创建并启动线程的步骤：" class="headerlink" title="使用Callable和Future接口创建并启动线程的步骤："></a>使用Callable和Future接口创建并启动线程的步骤：</h2><blockquote>
<ul>
<li>(1)、创建Callable接口的实现类，并实现call方法，该方法将作为线程的执行体，并具有返回值，然后创建Callable实现类的实例。</li>
<li>(2)实现FutureTask类来包装Callable对象，在FutureTask对象中封装了Callable对象的call方法的返回值</li>
<li>(3)使用FutureTask对象作为Thread对象的target创建并启动新线程</li>
<li>(4)调用FutureTaks对象的get方法来获得子线程执行结束后的返回值</li>
</ul>
</blockquote>
<h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line">//创建Callable接口实现类</span><br><span class="line">class Task implements Callable&lt;Integer&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        //实现call方法</span><br><span class="line">        public Integer call() throws Exception &#123;</span><br><span class="line">            // TODO Auto-generated method stub</span><br><span class="line">            int i = 0;</span><br><span class="line">            for(i=0;i&lt;5;i++)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span><br><span class="line">            &#125;</span><br><span class="line">            //返回call的返回值</span><br><span class="line">            return i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//主类</span><br><span class="line">public class CallableFutureDemo&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //使用Future类包装Callable实现类的实例</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;Integer&gt;(new Task());</span><br><span class="line">        //创建线程，使用futureTask对象的task作为Thread对象的targer，启动线程</span><br><span class="line">        new Thread(task,&quot;子线程&quot;).start();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(&quot;子线程返回值：&quot;+task.get());</span><br><span class="line">        &#125;catch(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=10;i&lt;15;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;:&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">子线程:0</span><br><span class="line">子线程:1</span><br><span class="line">子线程:2</span><br><span class="line">子线程:3</span><br><span class="line">子线程:4</span><br><span class="line">子线程返回值：5</span><br><span class="line">main:10</span><br><span class="line">main:11</span><br><span class="line">main:12</span><br><span class="line">main:13</span><br><span class="line">main:14</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中常用的24种文件操作方法</title>
    <url>/2017/02/14/java-article58/</url>
    <content><![CDATA[<h2 id="Java提供的File类有很多方法，这里封装了共24种常用的操作"><a href="#Java提供的File类有很多方法，这里封装了共24种常用的操作" class="headerlink" title="Java提供的File类有很多方法，这里封装了共24种常用的操作"></a>Java提供的File类有很多方法，这里封装了共24种常用的操作</h2><blockquote>
<ul>
<li>得到相对路径，</li>
<li>创建指定的目录，</li>
<li>读取文件的内容，</li>
<li>根据内容生成文件，</li>
<li>得到文件的名字部分，</li>
<li>返回文件的URL地址，</li>
<li>获取图片文件的扩展名</li>
<li>清空指定目录中的文件，</li>
<li>从文件路径得到文件名，</li>
<li>检查给定目录的存在性，</li>
<li>修改文件的最后访问时间</li>
<li>判断指定的文件是否存在，</li>
<li>计算图片数量，共24种方法</li>
<li>得到文件名中的父路径部分，</li>
<li>将目录中的内容添加到列表，</li>
<li>从文件名得到文件绝对路径，</li>
<li>将文件名中的类型部分去掉，</li>
<li>删除指定目录及其中的所有内容，</li>
<li>列出目录中的所有内容包括其子目录中的内容</li>
<li>得到路径分隔符在文件路径中首次出现的位置，</li>
<li>得到路径分隔符在文件路径中最后出现的位置，</li>
<li>得到路径分隔符在文件路径中指定位置前最后出现的位置，</li>
<li>从文件名得到UNIX风格的文件绝对路径，得到文件的类型，</li>
<li>将DOS&#x2F;Windows格式的路径转换为UNIX&#x2F;Linux格式的路径，</li>
</ul>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.gootrip.util;</span><br><span class="line">//Download by http://www.codefans.net</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.FilenameFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line">import javax.swing.filechooser.FileFilter;</span><br><span class="line">public class FileUtil &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 私有构造方法，防止类的实例化，因为工具类不需要实例化。</span><br><span class="line">   */</span><br><span class="line">  private FileUtil() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 修改文件的最后访问时间。</span><br><span class="line">   * 如果文件不存在则创建该文件。</span><br><span class="line">   * &lt;b&gt;目前这个方法的行为方式还不稳定，主要是方法有些信息输出，这些信息输出是否保留还在考虑中。&lt;/b&gt;</span><br><span class="line">   * @param file 需要修改最后访问时间的文件。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static void touch(File file) &#123;</span><br><span class="line">    long currentTime = System.currentTimeMillis();</span><br><span class="line">    if (!file.exists()) &#123;</span><br><span class="line">      System.err.println(&quot;file not found:&quot; + file.getName());</span><br><span class="line">      System.err.println(&quot;Create a new file:&quot; + file.getName());</span><br><span class="line">      try &#123;</span><br><span class="line">        if (file.createNewFile()) &#123;</span><br><span class="line">          System.out.println(&quot;Succeeded!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">          System.err.println(&quot;Create file failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      catch (IOException e) &#123;</span><br><span class="line">        System.err.println(&quot;Create file failed!&quot;);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean result = file.setLastModified(currentTime);</span><br><span class="line">    if (!result) &#123;</span><br><span class="line">      System.err.println(&quot;touch failed: &quot; + file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 修改文件的最后访问时间。</span><br><span class="line">   * 如果文件不存在则创建该文件。</span><br><span class="line">   * &lt;b&gt;目前这个方法的行为方式还不稳定，主要是方法有些信息输出，这些信息输出是否保留还在考虑中。&lt;/b&gt;</span><br><span class="line">   * @param fileName 需要修改最后访问时间的文件的文件名。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static void touch(String fileName) &#123;</span><br><span class="line">    File file = new File(fileName);</span><br><span class="line">    touch(file);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 修改文件的最后访问时间。</span><br><span class="line">   * 如果文件不存在则创建该文件。</span><br><span class="line">   * &lt;b&gt;目前这个方法的行为方式还不稳定，主要是方法有些信息输出，这些信息输出是否保留还在考虑中。&lt;/b&gt;</span><br><span class="line">   * @param files 需要修改最后访问时间的文件数组。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static void touch(File[] files) &#123;</span><br><span class="line">    for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">      touch(files[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 修改文件的最后访问时间。</span><br><span class="line">   * 如果文件不存在则创建该文件。</span><br><span class="line">   * &lt;b&gt;目前这个方法的行为方式还不稳定，主要是方法有些信息输出，这些信息输出是否保留还在考虑中。&lt;/b&gt;</span><br><span class="line">   * @param fileNames 需要修改最后访问时间的文件名数组。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static void touch(String[] fileNames) &#123;</span><br><span class="line">    File[] files = new File[fileNames.length];</span><br><span class="line">    for (int i = 0; i &lt; fileNames.length; i++) &#123;</span><br><span class="line">      files[i] = new File(fileNames[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    touch(files);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 判断指定的文件是否存在。</span><br><span class="line">   * @param fileName 要判断的文件的文件名</span><br><span class="line">   * @return 存在时返回true，否则返回false。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean isFileExist(String fileName) &#123;</span><br><span class="line">    return new File(fileName).isFile();</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 创建指定的目录。</span><br><span class="line">   * 如果指定的目录的父目录不存在则创建其目录书上所有需要的父目录。</span><br><span class="line">   * &lt;b&gt;注意：可能会在返回false的时候创建部分父目录。&lt;/b&gt;</span><br><span class="line">   * @param file 要创建的目录</span><br><span class="line">   * @return 完全创建成功时返回true，否则返回false。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean makeDirectory(File file) &#123;</span><br><span class="line">    File parent = file.getParentFile();</span><br><span class="line">    if (parent != null) &#123;</span><br><span class="line">      return parent.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 创建指定的目录。</span><br><span class="line">   * 如果指定的目录的父目录不存在则创建其目录书上所有需要的父目录。</span><br><span class="line">   * &lt;b&gt;注意：可能会在返回false的时候创建部分父目录。&lt;/b&gt;</span><br><span class="line">   * @param fileName 要创建的目录的目录名</span><br><span class="line">   * @return 完全创建成功时返回true，否则返回false。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean makeDirectory(String fileName) &#123;</span><br><span class="line">    File file = new File(fileName);</span><br><span class="line">    return makeDirectory(file);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 清空指定目录中的文件。</span><br><span class="line">   * 这个方法将尽可能删除所有的文件，但是只要有一个文件没有被删除都会返回false。</span><br><span class="line">   * 另外这个方法不会迭代删除，即不会删除子目录及其内容。</span><br><span class="line">   * @param directory 要清空的目录</span><br><span class="line">   * @return 目录下的所有文件都被成功删除时返回true，否则返回false.</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean emptyDirectory(File directory) &#123;</span><br><span class="line">    boolean result = true;</span><br><span class="line">    File[] entries = directory.listFiles();</span><br><span class="line">    for (int i = 0; i &lt; entries.length; i++) &#123;</span><br><span class="line">      if (!entries[i].delete()) &#123;</span><br><span class="line">        result = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 清空指定目录中的文件。</span><br><span class="line">   * 这个方法将尽可能删除所有的文件，但是只要有一个文件没有被删除都会返回false。</span><br><span class="line">   * 另外这个方法不会迭代删除，即不会删除子目录及其内容。</span><br><span class="line">   * @param directoryName 要清空的目录的目录名</span><br><span class="line">   * @return 目录下的所有文件都被成功删除时返回true，否则返回false。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean emptyDirectory(String directoryName) &#123;</span><br><span class="line">    File dir = new File(directoryName);</span><br><span class="line">    return emptyDirectory(dir);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 删除指定目录及其中的所有内容。</span><br><span class="line">   * @param dirName 要删除的目录的目录名</span><br><span class="line">   * @return 删除成功时返回true，否则返回false。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean deleteDirectory(String dirName) &#123;</span><br><span class="line">    return deleteDirectory(new File(dirName));</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 删除指定目录及其中的所有内容。</span><br><span class="line">   * @param dir 要删除的目录</span><br><span class="line">   * @return 删除成功时返回true，否则返回false。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static boolean deleteDirectory(File dir) &#123;</span><br><span class="line">    if ( (dir == null)  !dir.isDirectory()) &#123;</span><br><span class="line">      throw new IllegalArgumentException(&quot;Argument &quot; + dir +</span><br><span class="line">                                         &quot; is not a directory. &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    File[] entries = dir.listFiles();</span><br><span class="line">    int sz = entries.length;</span><br><span class="line">    for (int i = 0; i &lt; sz; i++) &#123;</span><br><span class="line">      if (entries[i].isDirectory()) &#123;</span><br><span class="line">        if (!deleteDirectory(entries[i])) &#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        if (!entries[i].delete()) &#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!dir.delete()) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 列出目录中的所有内容，包括其子目录中的内容。</span><br><span class="line">   * @param fileName 要列出的目录的目录名</span><br><span class="line">   * @return 目录内容的文件数组。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  /*public static File[] listAll(String fileName) &#123;</span><br><span class="line">    return listAll(new File(fileName));</span><br><span class="line">  &#125;*/</span><br><span class="line">  /**</span><br><span class="line">   * 列出目录中的所有内容，包括其子目录中的内容。</span><br><span class="line">   * @param file 要列出的目录</span><br><span class="line">   * @return 目录内容的文件数组。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  /*public static File[] listAll(File file) &#123;</span><br><span class="line">    ArrayList list = new ArrayList();</span><br><span class="line">    File[] files;</span><br><span class="line">    if (!file.exists()  file.isFile()) &#123;</span><br><span class="line">      return null;</span><br><span class="line">    &#125;</span><br><span class="line">    list(list, file, new AllFileFilter());</span><br><span class="line">    list.remove(file);</span><br><span class="line">    files = new File[list.size()];</span><br><span class="line">    list.toArray(files);</span><br><span class="line">    return files;</span><br><span class="line">  &#125;*/</span><br><span class="line">  /**</span><br><span class="line">   * 列出目录中的所有内容，包括其子目录中的内容。</span><br><span class="line">   * @param file 要列出的目录</span><br><span class="line">   * @param filter 过滤器</span><br><span class="line">   * @return 目录内容的文件数组。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static File[] listAll(File file,</span><br><span class="line">                               javax.swing.filechooser.FileFilter filter) &#123;</span><br><span class="line">    ArrayList list = new ArrayList();</span><br><span class="line">    File[] files;</span><br><span class="line">    if (!file.exists()  file.isFile()) &#123;</span><br><span class="line">      return null;</span><br><span class="line">    &#125;</span><br><span class="line">    list(list, file, filter);</span><br><span class="line">    files = new File[list.size()];</span><br><span class="line">    list.toArray(files);</span><br><span class="line">    return files;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 将目录中的内容添加到列表。</span><br><span class="line">   * @param list 文件列表</span><br><span class="line">   * @param filter 过滤器</span><br><span class="line">   * @param file 目录</span><br><span class="line">   */</span><br><span class="line">  private static void list(ArrayList list, File file,</span><br><span class="line">                           javax.swing.filechooser.FileFilter filter) &#123;</span><br><span class="line">    if (filter.accept(file)) &#123;</span><br><span class="line">      list.add(file);</span><br><span class="line">      if (file.isFile()) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (file.isDirectory()) &#123;</span><br><span class="line">      File files[] = file.listFiles();</span><br><span class="line">      for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">        list(list, files[i], filter);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 返回文件的URL地址。</span><br><span class="line">   * @param file 文件</span><br><span class="line">   * @return 文件对应的的URL地址</span><br><span class="line">   * @throws MalformedURLException</span><br><span class="line">   * @since  1.0</span><br><span class="line">   * @deprecated 在实现的时候没有注意到File类本身带一个toURL方法将文件路径转换为URL。</span><br><span class="line">   *             请使用File.toURL方法。</span><br><span class="line">   */</span><br><span class="line">  public static URL getURL(File file) throws MalformedURLException &#123;</span><br><span class="line">    String fileURL = &quot;file:/&quot; + file.getAbsolutePath();</span><br><span class="line">    URL url = new URL(fileURL);</span><br><span class="line">    return url;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 从文件路径得到文件名。</span><br><span class="line">   * @param filePath 文件的路径，可以是相对路径也可以是绝对路径</span><br><span class="line">   * @return 对应的文件名</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getFileName(String filePath) &#123;</span><br><span class="line">    File file = new File(filePath);</span><br><span class="line">    return file.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 从文件名得到文件绝对路径。</span><br><span class="line">   * @param fileName 文件名</span><br><span class="line">   * @return 对应的文件路径</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getFilePath(String fileName) &#123;</span><br><span class="line">    File file = new File(fileName);</span><br><span class="line">    return file.getAbsolutePath();</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 将DOS/Windows格式的路径转换为UNIX/Linux格式的路径。</span><br><span class="line">   * 其实就是将路径中的&quot;\&quot;全部换为&quot;/&quot;，因为在某些情况下我们转换为这种方式比较方便，</span><br><span class="line">   * 某中程度上说&quot;/&quot;比&quot;\&quot;更适合作为路径分隔符，而且DOS/Windows也将它当作路径分隔符。</span><br><span class="line">   * @param filePath 转换前的路径</span><br><span class="line">   * @return 转换后的路径</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String toUNIXpath(String filePath) &#123;</span><br><span class="line">    return filePath.replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 从文件名得到UNIX风格的文件绝对路径。</span><br><span class="line">   * @param fileName 文件名</span><br><span class="line">   * @return 对应的UNIX风格的文件路径</span><br><span class="line">   * @since  1.0</span><br><span class="line">   * @see #toUNIXpath(String filePath) toUNIXpath</span><br><span class="line">   */</span><br><span class="line">  public static String getUNIXfilePath(String fileName) &#123;</span><br><span class="line">    File file = new File(fileName);</span><br><span class="line">    return toUNIXpath(file.getAbsolutePath());</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到文件的类型。</span><br><span class="line">   * 实际上就是得到文件名中最后一个“.”后面的部分。</span><br><span class="line">   * @param fileName 文件名</span><br><span class="line">   * @return 文件名中的类型部分</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getTypePart(String fileName) &#123;</span><br><span class="line">    int point = fileName.lastIndexOf(&#x27;.&#x27;);</span><br><span class="line">    int length = fileName.length();</span><br><span class="line">    if (point == -1  point == length - 1) &#123;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      return fileName.substring(point + 1, length);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到文件的类型。</span><br><span class="line">   * 实际上就是得到文件名中最后一个“.”后面的部分。</span><br><span class="line">   * @param file 文件</span><br><span class="line">   * @return 文件名中的类型部分</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getFileType(File file) &#123;</span><br><span class="line">    return getTypePart(file.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到文件的名字部分。</span><br><span class="line">   * 实际上就是路径中的最后一个路径分隔符后的部分。</span><br><span class="line">   * @param fileName 文件名</span><br><span class="line">   * @return 文件名中的名字部分</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getNamePart(String fileName) &#123;</span><br><span class="line">    int point = getPathLsatIndex(fileName);</span><br><span class="line">    int length = fileName.length();</span><br><span class="line">    if (point == -1) &#123;</span><br><span class="line">      return fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (point == length - 1) &#123;</span><br><span class="line">      int secondPoint = getPathLsatIndex(fileName, point - 1);</span><br><span class="line">      if (secondPoint == -1) &#123;</span><br><span class="line">        if (length == 1) &#123;</span><br><span class="line">          return fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">          return fileName.substring(0, point);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        return fileName.substring(secondPoint + 1, point);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      return fileName.substring(point + 1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到文件名中的父路径部分。</span><br><span class="line">   * 对两种路径分隔符都有效。</span><br><span class="line">   * 不存在时返回&quot;&quot;。</span><br><span class="line">   * 如果文件名是以路径分隔符结尾的则不考虑该分隔符，例如&quot;/path/&quot;返回&quot;&quot;。</span><br><span class="line">   * @param fileName 文件名</span><br><span class="line">   * @return 父路径，不存在或者已经是父目录时返回&quot;&quot;</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getPathPart(String fileName) &#123;</span><br><span class="line">    int point = getPathLsatIndex(fileName);</span><br><span class="line">    int length = fileName.length();</span><br><span class="line">    if (point == -1) &#123;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (point == length - 1) &#123;</span><br><span class="line">      int secondPoint = getPathLsatIndex(fileName, point - 1);</span><br><span class="line">      if (secondPoint == -1) &#123;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">        return fileName.substring(0, secondPoint);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      return fileName.substring(0, point);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到路径分隔符在文件路径中首次出现的位置。</span><br><span class="line">   * 对于DOS或者UNIX风格的分隔符都可以。</span><br><span class="line">   * @param fileName 文件路径</span><br><span class="line">   * @return 路径分隔符在路径中首次出现的位置，没有出现时返回-1。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static int getPathIndex(String fileName) &#123;</span><br><span class="line">    int point = fileName.indexOf(&#x27;/&#x27;);</span><br><span class="line">    if (point == -1) &#123;</span><br><span class="line">      point = fileName.indexOf(&#x27;\\&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return point;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到路径分隔符在文件路径中指定位置后首次出现的位置。</span><br><span class="line">   * 对于DOS或者UNIX风格的分隔符都可以。</span><br><span class="line">   * @param fileName 文件路径</span><br><span class="line">   * @param fromIndex 开始查找的位置</span><br><span class="line">   * @return 路径分隔符在路径中指定位置后首次出现的位置，没有出现时返回-1。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static int getPathIndex(String fileName, int fromIndex) &#123;</span><br><span class="line">    int point = fileName.indexOf(&#x27;/&#x27;, fromIndex);</span><br><span class="line">    if (point == -1) &#123;</span><br><span class="line">      point = fileName.indexOf(&#x27;\\&#x27;, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    return point;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到路径分隔符在文件路径中最后出现的位置。</span><br><span class="line">   * 对于DOS或者UNIX风格的分隔符都可以。</span><br><span class="line">   * @param fileName 文件路径</span><br><span class="line">   * @return 路径分隔符在路径中最后出现的位置，没有出现时返回-1。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static int getPathLsatIndex(String fileName) &#123;</span><br><span class="line">    int point = fileName.lastIndexOf(&#x27;/&#x27;);</span><br><span class="line">    if (point == -1) &#123;</span><br><span class="line">      point = fileName.lastIndexOf(&#x27;\\&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return point;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到路径分隔符在文件路径中指定位置前最后出现的位置。</span><br><span class="line">   * 对于DOS或者UNIX风格的分隔符都可以。</span><br><span class="line">   * @param fileName 文件路径</span><br><span class="line">   * @param fromIndex 开始查找的位置</span><br><span class="line">   * @return 路径分隔符在路径中指定位置前最后出现的位置，没有出现时返回-1。</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static int getPathLsatIndex(String fileName, int fromIndex) &#123;</span><br><span class="line">    int point = fileName.lastIndexOf(&#x27;/&#x27;, fromIndex);</span><br><span class="line">    if (point == -1) &#123;</span><br><span class="line">      point = fileName.lastIndexOf(&#x27;\\&#x27;, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    return point;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 将文件名中的类型部分去掉。</span><br><span class="line">   * @param filename 文件名</span><br><span class="line">   * @return 去掉类型部分的结果</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String trimType(String filename) &#123;</span><br><span class="line">    int index = filename.lastIndexOf(&quot;.&quot;);</span><br><span class="line">    if (index != -1) &#123;</span><br><span class="line">      return filename.substring(0, index);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      return filename;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 得到相对路径。</span><br><span class="line">   * 文件名不是目录名的子节点时返回文件名。</span><br><span class="line">   * @param pathName 目录名</span><br><span class="line">   * @param fileName 文件名</span><br><span class="line">   * @return 得到文件名相对于目录名的相对路径，目录下不存在该文件时返回文件名</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">  public static String getSubpath(String pathName,String fileName) &#123;</span><br><span class="line">    int index = fileName.indexOf(pathName);</span><br><span class="line">    if (index != -1) &#123;</span><br><span class="line">      return fileName.substring(index + pathName.length() + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      return fileName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /**</span><br><span class="line">   * 检查给定目录的存在性</span><br><span class="line">   * 保证指定的路径可用，如果指定的路径不存在，那么建立该路径，可以为多级路径</span><br><span class="line">   * @param path</span><br><span class="line">   * @return 真假值</span><br><span class="line">   * @since  1.0</span><br><span class="line">   */</span><br><span class="line">   public static final boolean pathValidate(String path)</span><br><span class="line">   &#123;</span><br><span class="line">     //String path=&quot;d:/web/www/sub&quot;;</span><br><span class="line">     //System.out.println(path);</span><br><span class="line">     //path = getUNIXfilePath(path);</span><br><span class="line">     //path = ereg_replace(&quot;^\\/+&quot;, &quot;&quot;, path);</span><br><span class="line">     //path = ereg_replace(&quot;\\/+$&quot;, &quot;&quot;, path);</span><br><span class="line">     String[] arraypath = path.split(&quot;/&quot;);</span><br><span class="line">     String tmppath = &quot;&quot;;</span><br><span class="line">     for (int i = 0; i &lt; arraypath.length; i++)</span><br><span class="line">     &#123;</span><br><span class="line">       tmppath += &quot;/&quot; + arraypath[i];</span><br><span class="line">       File d = new File(tmppath.substring(1));</span><br><span class="line">       if (!d.exists()) &#123; //检查Sub目录是否存在</span><br><span class="line">           System.out.println(tmppath.substring(1));</span><br><span class="line">         if (!d.mkdir())</span><br><span class="line">         &#123;</span><br><span class="line">           return false;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return true;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 读取文件的内容</span><br><span class="line">    * 读取指定文件的内容</span><br><span class="line">    * @param path 为要读取文件的绝对路径</span><br><span class="line">    * @return 以行读取文件后的内容。</span><br><span class="line">    * @since  1.0</span><br><span class="line">    */</span><br><span class="line">   public static final String getFileContent(String path) throws IOException</span><br><span class="line">   &#123;</span><br><span class="line">     String filecontent = &quot;&quot;;</span><br><span class="line">     try &#123;</span><br><span class="line">       File f = new File(path);</span><br><span class="line">       if (f.exists()) &#123;</span><br><span class="line">         FileReader fr = new FileReader(path);</span><br><span class="line">         BufferedReader br = new BufferedReader(fr); //建立BufferedReader对象，并实例化为br</span><br><span class="line">         String line = br.readLine(); //从文件读取一行字符串</span><br><span class="line">         //判断读取到的字符串是否不为空</span><br><span class="line">         while (line != null) &#123;</span><br><span class="line">           filecontent += line + &quot;\n&quot;;</span><br><span class="line">           line = br.readLine(); //从文件中继续读取一行数据</span><br><span class="line">         &#125;</span><br><span class="line">         br.close(); //关闭BufferedReader对象</span><br><span class="line">         fr.close(); //关闭文件</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     catch (IOException e) &#123;</span><br><span class="line">       throw e;</span><br><span class="line">     &#125;</span><br><span class="line">     return filecontent;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 根据内容生成文件</span><br><span class="line">    * @param path要生成文件的绝对路径，</span><br><span class="line">    * @param 文件的内容。</span><br><span class="line">    * @return 真假值</span><br><span class="line">    * @since  1.0</span><br><span class="line">    */</span><br><span class="line">   public static final boolean genModuleTpl(String path, String modulecontent)  throws IOException</span><br><span class="line">   &#123;</span><br><span class="line">     path = getUNIXfilePath(path);</span><br><span class="line">     String[] patharray = path.split(&quot;\\/&quot;);</span><br><span class="line">     String modulepath = &quot;&quot;;</span><br><span class="line">     for (int i = 0; i &lt; patharray.length - 1; i++) &#123;</span><br><span class="line">       modulepath += &quot;/&quot; + patharray[i];</span><br><span class="line">     &#125;</span><br><span class="line">     File d = new File(modulepath.substring(1));</span><br><span class="line">     if (!d.exists()) &#123;</span><br><span class="line">       if (!pathValidate(modulepath.substring(1))) &#123;</span><br><span class="line">         return false;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     try &#123;</span><br><span class="line">       FileWriter fw = new FileWriter(path); //建立FileWriter对象，并实例化fw</span><br><span class="line">       //将字符串写入文件</span><br><span class="line">       fw.write(modulecontent);</span><br><span class="line">       fw.close();</span><br><span class="line">     &#125;</span><br><span class="line">     catch (IOException e) &#123;</span><br><span class="line">       throw e;</span><br><span class="line">     &#125;</span><br><span class="line">     return true;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 获取图片文件的扩展名（发布系统专用）</span><br><span class="line">    * @param picname 为图片名称加上前面的路径不包括扩展名</span><br><span class="line">    * @return 图片的扩展名</span><br><span class="line">    * @since  1.0</span><br><span class="line">    */</span><br><span class="line">   public static final String getPicExtendName(String pic_path)</span><br><span class="line">   &#123;</span><br><span class="line">     pic_path = getUNIXfilePath(pic_path);</span><br><span class="line">     String pic_extend = &quot;&quot;;</span><br><span class="line">     if (isFileExist(pic_path + &quot;.gif&quot;))</span><br><span class="line">     &#123;</span><br><span class="line">       pic_extend = &quot;.gif&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">     if (isFileExist(pic_path + &quot;.jpeg&quot;))</span><br><span class="line">     &#123;</span><br><span class="line">       pic_extend = &quot;.jpeg&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">     if (isFileExist(pic_path + &quot;.jpg&quot;))</span><br><span class="line">     &#123;</span><br><span class="line">       pic_extend = &quot;.jpg&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">     if (isFileExist(pic_path + &quot;.png&quot;))</span><br><span class="line">     &#123;</span><br><span class="line">       pic_extend = &quot;.png&quot;;</span><br><span class="line">     &#125;</span><br><span class="line">     return pic_extend; //返回图片扩展名</span><br><span class="line">   &#125;</span><br><span class="line">   //拷贝文件</span><br><span class="line">   public static final boolean CopyFile(File in, File out) throws Exception &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           FileInputStream fis = new FileInputStream(in);</span><br><span class="line">           FileOutputStream fos = new FileOutputStream(out);</span><br><span class="line">           byte[] buf = new byte[1024];</span><br><span class="line">           int i = 0;</span><br><span class="line">           while ((i = fis.read(buf)) != -1) &#123;</span><br><span class="line">               fos.write(buf, 0, i);</span><br><span class="line">           &#125;</span><br><span class="line">           fis.close();</span><br><span class="line">           fos.close();</span><br><span class="line">           return true;</span><br><span class="line">       &#125; catch (IOException ie) &#123;</span><br><span class="line">           ie.printStackTrace();</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   //拷贝文件</span><br><span class="line">   public static final boolean CopyFile(String infile, String outfile) throws Exception &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           File in = new File(infile);</span><br><span class="line">           File out = new File(outfile);</span><br><span class="line">           return CopyFile(in, out);</span><br><span class="line">       &#125; catch (IOException ie) &#123;</span><br><span class="line">           ie.printStackTrace();</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 计算图片数量</span><br><span class="line">    * @param id</span><br><span class="line">    * @param dtime</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public static final int countPics(String id,String dtime,String extensions)&#123;</span><br><span class="line">       int counts = 0; </span><br><span class="line">       MyFileFilter mfilter = new MyFileFilter(extensions.split(&quot;,&quot;));</span><br><span class="line">       PropsUtil pu = new PropsUtil();</span><br><span class="line">       String PICROOT = pu.readSingleProps(&quot;DestinationsPICROOT&quot;).trim();</span><br><span class="line">       String path = PICROOT + &quot;/&quot;+dtime.substring(0, 10) + &quot;/&quot;;</span><br><span class="line">       File lfile = new File(path);</span><br><span class="line">       String filename;</span><br><span class="line">       if(lfile.isDirectory())&#123;</span><br><span class="line">           File[] files = lfile.listFiles(mfilter);</span><br><span class="line">           for(int i=0;i&lt;files.length;i++)&#123;</span><br><span class="line">               filename = files[i].getName();</span><br><span class="line">               if((filename.indexOf(id + &quot;_&quot;)==0)&amp;&amp;(filename.indexOf(&quot;_small&quot;)&gt;-1))</span><br><span class="line">                   counts ++;</span><br><span class="line">           &#125;</span><br><span class="line">           files = null;</span><br><span class="line">       &#125;</span><br><span class="line">       filename = null;</span><br><span class="line">       lfile = null;</span><br><span class="line">       pu = null;</span><br><span class="line">       mfilter = null;</span><br><span class="line">       return counts;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中线程同步的两种方式</title>
    <url>/2017/02/24/java-article62/</url>
    <content><![CDATA[<p>Java中线程同步的两种方式</p>
<h2 id="在多线程中，需要控制线程的访问次数，频率和优先级。比如在取钱时如果多个线程同时修改了账户余额，就会出现同步错误，所以Java中提供了线程同步的概念以保证某个资源在某一时刻只能由一个线程访问，保证共享数据的一致性。"><a href="#在多线程中，需要控制线程的访问次数，频率和优先级。比如在取钱时如果多个线程同时修改了账户余额，就会出现同步错误，所以Java中提供了线程同步的概念以保证某个资源在某一时刻只能由一个线程访问，保证共享数据的一致性。" class="headerlink" title="在多线程中，需要控制线程的访问次数，频率和优先级。比如在取钱时如果多个线程同时修改了账户余额，就会出现同步错误，所以Java中提供了线程同步的概念以保证某个资源在某一时刻只能由一个线程访问，保证共享数据的一致性。"></a>在多线程中，需要控制线程的访问次数，频率和优先级。比如在取钱时如果多个线程同时修改了账户余额，就会出现同步错误，所以Java中提供了线程同步的概念以保证某个资源在某一时刻只能由一个线程访问，保证共享数据的一致性。</h2><h2 id="下面是一个模拟多线程存取钱时的操作。"><a href="#下面是一个模拟多线程存取钱时的操作。" class="headerlink" title="下面是一个模拟多线程存取钱时的操作。"></a>下面是一个模拟多线程存取钱时的操作。</h2><p>BankAccount.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/24.</span><br><span class="line"> *</span><br><span class="line"> * 模拟银行账户</span><br><span class="line"> * */</span><br><span class="line">public class BankAccount &#123;</span><br><span class="line">    //银行账户</span><br><span class="line">    private String bankNo;</span><br><span class="line">    //银行余额</span><br><span class="line">    private double balance;</span><br><span class="line">    public BankAccount(String bankNo,double balance) &#123;</span><br><span class="line">        this.bankNo = bankNo;</span><br><span class="line">        this.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBankNo(String bankNo) &#123;</span><br><span class="line">        this.bankNo = bankNo;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBalance(double balance) &#123;</span><br><span class="line">        this.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getBalance() &#123;</span><br><span class="line">        return balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getBankNo() &#123;</span><br><span class="line">        return bankNo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>NoSynBank.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/24.</span><br><span class="line"> */</span><br><span class="line">public class NoSynBank extends Thread&#123;</span><br><span class="line">    private BankAccount account;</span><br><span class="line">    private double money;</span><br><span class="line">    public NoSynBank(String name,BankAccount account,double money)&#123;</span><br><span class="line">        super(name);</span><br><span class="line">        this.account = account;</span><br><span class="line">        this.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        //获取当前金额</span><br><span class="line">        double d = this.account.getBalance();</span><br><span class="line">        //判断存取金额是否大于余额</span><br><span class="line">        if(money&lt;0 &amp;&amp; d - money &lt; 0)&#123;</span><br><span class="line">            System.out.println(&quot;操作失败&quot;);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            d += money;</span><br><span class="line">            System.out.println(this.getName()+&quot;操作成功，当前余额：&quot;+d);</span><br><span class="line">            //设定休眠一毫秒，使其他线程得以执行</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1);</span><br><span class="line">            &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            this.account.setBalance(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //实例化一个账户</span><br><span class="line">        BankAccount myAccount = new BankAccount(&quot;60001002&quot;,5000);</span><br><span class="line">        NoSynBank t1 = new NoSynBank(&quot;T001&quot;,myAccount,-3000);</span><br><span class="line">        NoSynBank t2 = new NoSynBank(&quot;T002&quot;, myAccount, -3000);</span><br><span class="line">        NoSynBank t3 = new NoSynBank(&quot;T003&quot;,myAccount,1000);</span><br><span class="line">        NoSynBank t4 = new NoSynBank(&quot;T004&quot;,myAccount,-2000);</span><br><span class="line">        NoSynBank t5 = new NoSynBank(&quot;T005&quot;,myAccount,2000);</span><br><span class="line">        //将线程全部启动</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">        //使用join方法等待所有线程执行完毕</span><br><span class="line">        try &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            t3.join();</span><br><span class="line">            t4.join();</span><br><span class="line">            t5.join();</span><br><span class="line">        &#125;catch (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //打印出当前账户的余额</span><br><span class="line">        System.out.println(&quot;账户：&quot;+myAccount.getBankNo()+&quot;,余额：&quot;+myAccount.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">T002操作成功，当前余额：2000.0</span><br><span class="line">T003操作成功，当前余额：6000.0</span><br><span class="line">T001操作成功，当前余额：2000.0</span><br><span class="line">T004操作成功，当前余额：3000.0</span><br><span class="line">T005操作成功，当前余额：7000.0</span><br><span class="line">账户：60001002,余额：7000.0</span><br></pre></td></tr></table></figure></div>

<h2 id="通过运行结果可以看出，余额发生错误，有时运行也可能没有问题，但没出现问题不等于没有问题，只要出现一个错误，那就是编程问题。"><a href="#通过运行结果可以看出，余额发生错误，有时运行也可能没有问题，但没出现问题不等于没有问题，只要出现一个错误，那就是编程问题。" class="headerlink" title="通过运行结果可以看出，余额发生错误，有时运行也可能没有问题，但没出现问题不等于没有问题，只要出现一个错误，那就是编程问题。"></a>通过运行结果可以看出，余额发生错误，有时运行也可能没有问题，但没出现问题不等于没有问题，只要出现一个错误，那就是编程问题。</h2><h2 id="线程同步通常采用以下三种方式：同步代码块，同步方法，同步锁。"><a href="#线程同步通常采用以下三种方式：同步代码块，同步方法，同步锁。" class="headerlink" title="线程同步通常采用以下三种方式：同步代码块，同步方法，同步锁。"></a>线程同步通常采用以下三种方式：同步代码块，同步方法，同步锁。</h2><h2 id="同步代码块："><a href="#同步代码块：" class="headerlink" title="同步代码块："></a>同步代码块：</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">synchronized(object)&#123;</span><br><span class="line">    //需要同步的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>synchronized是同步关键字</p>
</li>
<li><p>object是同步监视器，线程开始执行同步代码之前，必须先获得对同步监视器的锁定，</p>
</li>
</ul>
<h3 id="注意：任何时候都只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完后，该线程会释放对同步监视器的锁定。"><a href="#注意：任何时候都只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完后，该线程会释放对同步监视器的锁定。" class="headerlink" title="注意：任何时候都只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完后，该线程会释放对同步监视器的锁定。"></a>注意：任何时候都只能有一个线程可以获得对同步监视器的锁定，当同步代码块执行完后，该线程会释放对同步监视器的锁定。</h3><p>SynBlockBank.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/24.</span><br><span class="line"> */</span><br><span class="line">public class NoSynBank extends Thread&#123;</span><br><span class="line">    private BankAccount account;</span><br><span class="line">    private double money;</span><br><span class="line">    public NoSynBank(String name,BankAccount account,double money)&#123;</span><br><span class="line">        super(name);</span><br><span class="line">        this.account = account;</span><br><span class="line">        this.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        synchronized (this.account) &#123;</span><br><span class="line">            //获取当前金额</span><br><span class="line">            double d = this.account.getBalance();</span><br><span class="line">            //判断存取金额是否大于余额</span><br><span class="line">            if (money &lt; 0 &amp;&amp; d - money &lt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;操作失败&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                d += money;</span><br><span class="line">                System.out.println(this.getName() + &quot;操作成功，当前余额：&quot; + d);</span><br><span class="line">                //设定休眠一毫秒，使其他线程得以执行</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                this.account.setBalance(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //实例化一个账户</span><br><span class="line">        BankAccount myAccount = new BankAccount(&quot;60001002&quot;,5000);</span><br><span class="line">        NoSynBank t1 = new NoSynBank(&quot;T001&quot;,myAccount,-3000);</span><br><span class="line">        NoSynBank t2 = new NoSynBank(&quot;T002&quot;, myAccount, -3000);</span><br><span class="line">        NoSynBank t3 = new NoSynBank(&quot;T003&quot;,myAccount,1000);</span><br><span class="line">        NoSynBank t4 = new NoSynBank(&quot;T004&quot;,myAccount,-2000);</span><br><span class="line">        NoSynBank t5 = new NoSynBank(&quot;T005&quot;,myAccount,2000);</span><br><span class="line">        //将线程全部启动</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">        //使用join方法等待所有线程执行完毕</span><br><span class="line">        try &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            t3.join();</span><br><span class="line">            t4.join();</span><br><span class="line">            t5.join();</span><br><span class="line">        &#125;catch (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //打印出当前账户的余额</span><br><span class="line">        System.out.println(&quot;账户：&quot;+myAccount.getBankNo()+&quot;,余额：&quot;+myAccount.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">T001操作成功，当前余额：2000.0</span><br><span class="line">T005操作成功，当前余额：4000.0</span><br><span class="line">T004操作成功，当前余额：2000.0</span><br><span class="line">T003操作成功，当前余额：3000.0</span><br><span class="line">T002操作成功，当前余额：0.0</span><br><span class="line">账户：60001002,余额：0.0</span><br></pre></td></tr></table></figure></div>

<h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>[访问修饰符] synchronized 返回类型 方法名([参数列表]){ &#x2F;&#x2F;方法体 } * synchronized关键字修饰的实例方法无须显示的指定同步监视器，同步方法的同步监视器是this，即该方法所属的对象 * 一旦一个线程进入一个实例的任何同步方法，其他线程将不能进入该实例的所有同步方法，但该实例的非同步方法仍然能够被调用 * 使用同步方法可以非常方便的实现线程安全，一个具有同步方法的类也被称为“线程安全的类”，该类的对象可以被多个线程安全的访问，其每个线程调用该对象的方法后都将得到正确的结果</p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>BankAccount.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/24.</span><br><span class="line"> *</span><br><span class="line"> * 模拟银行账户</span><br><span class="line"> * */</span><br><span class="line">public class BankAccount &#123;</span><br><span class="line">    //银行账户</span><br><span class="line">    private String bankNo;</span><br><span class="line">    //银行余额</span><br><span class="line">    private double balance;</span><br><span class="line">    public BankAccount(String bankNo,double balance) &#123;</span><br><span class="line">        this.bankNo = bankNo;</span><br><span class="line">        this.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBankNo(String bankNo) &#123;</span><br><span class="line">        this.bankNo = bankNo;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBalance(double balance) &#123;</span><br><span class="line">        this.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getBalance() &#123;</span><br><span class="line">        return balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getBankNo() &#123;</span><br><span class="line">        return bankNo;</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void access(double money)&#123;</span><br><span class="line">        if (money &lt; 0 &amp;&amp; balance - money &lt; 0) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;操作失败&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            balance += money;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+&quot;操作成功，当前余额：&quot; + balance);</span><br><span class="line">            //设定休眠一毫秒，使其他线程得以执行</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>NosynBank.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/24.</span><br><span class="line"> */</span><br><span class="line">public class NoSynBank extends Thread&#123;</span><br><span class="line">    private BankAccount account;</span><br><span class="line">    private double money;</span><br><span class="line">    public NoSynBank(String name,BankAccount account,double money)&#123;</span><br><span class="line">        super(name);</span><br><span class="line">        this.account = account;</span><br><span class="line">        this.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        this.account.access(money);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //实例化一个账户</span><br><span class="line">        BankAccount myAccount = new BankAccount(&quot;60001002&quot;,5000);</span><br><span class="line">        NoSynBank t1 = new NoSynBank(&quot;T001&quot;,myAccount,-3000);</span><br><span class="line">        NoSynBank t2 = new NoSynBank(&quot;T002&quot;, myAccount, -3000);</span><br><span class="line">        NoSynBank t3 = new NoSynBank(&quot;T003&quot;,myAccount,1000);</span><br><span class="line">        NoSynBank t4 = new NoSynBank(&quot;T004&quot;,myAccount,-2000);</span><br><span class="line">        NoSynBank t5 = new NoSynBank(&quot;T005&quot;,myAccount,2000);</span><br><span class="line">        //将线程全部启动</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">        //使用join方法等待所有线程执行完毕</span><br><span class="line">        try &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            t3.join();</span><br><span class="line">            t4.join();</span><br><span class="line">            t5.join();</span><br><span class="line">        &#125;catch (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //打印出当前账户的余额</span><br><span class="line">        System.out.println(&quot;账户：&quot;+myAccount.getBankNo()+&quot;,余额：&quot;+myAccount.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">T001操作成功，当前余额：2000.0</span><br><span class="line">T003操作成功，当前余额：3000.0</span><br><span class="line">T005操作成功，当前余额：5000.0</span><br><span class="line">T004操作成功，当前余额：3000.0</span><br><span class="line">T002操作成功，当前余额：0.0</span><br><span class="line">账户：60001002,余额：0.0</span><br></pre></td></tr></table></figure></div>

<ul>
<li>注意：synchronized锁定的是对象，而不是方法或代码块，synchronized也可以修饰类，当用synchronized修饰类时，表示这个类的所有方法都是synchronized的</li>
</ul>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程同步之同步锁</title>
    <url>/2017/02/27/java-article63/</url>
    <content><![CDATA[<p>同步锁Lock是一种更强大的线程同步机制，通过显式定义同步锁对象来实现线程同步。同步锁提供了比同步代码块，同步方法更广泛的锁定操作，实现更灵活 Lock是控制多个线程对共享资源进行访问的工具，能够对共享资源进行独占访问，每次只能有一个线程对Lock对象加锁，线程访问共享资源之前需要先获得Lock对象，某些锁可能允许对共享资源并发访问。 【示例】使用ReentrantLock锁</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyClass&#123;</span><br><span class="line">    //1.定义锁对象</span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    //定义需要保证线程安全的方法</span><br><span class="line">    public void myMethod()&#123;</span><br><span class="line">        //2.加锁</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            //需要保证线程安全的代码</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            //3.释放锁</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>加锁和释放锁需要放在线程安全的方法中；</li>
<li>lock.unlock()放在finally语句中，不管发生异常与否，都需要释放锁</li>
</ul>
<h3 id="下面在银行账户类中增加一个同步锁"><a href="#下面在银行账户类中增加一个同步锁" class="headerlink" title="下面在银行账户类中增加一个同步锁"></a>下面在银行账户类中增加一个同步锁</h3><p>BankAccount.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/24.</span><br><span class="line"> *</span><br><span class="line"> * 模拟银行账户</span><br><span class="line"> * */</span><br><span class="line">public class BankAccount &#123;</span><br><span class="line">    //银行账户</span><br><span class="line">    private String bankNo;</span><br><span class="line">    //银行余额</span><br><span class="line">    private double balance;</span><br><span class="line">    //定义锁对象</span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    //构造方法</span><br><span class="line">    public BankAccount(String bankNo,double balance) &#123;</span><br><span class="line">        this.bankNo = bankNo;</span><br><span class="line">        this.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBankNo(String bankNo) &#123;</span><br><span class="line">        this.bankNo = bankNo;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setBalance(double balance) &#123;</span><br><span class="line">        this.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getBalance() &#123;</span><br><span class="line">        return balance;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getBankNo() &#123;</span><br><span class="line">        return bankNo;</span><br><span class="line">    &#125;</span><br><span class="line">    public void access(double money)&#123;</span><br><span class="line">        //加锁</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (money &lt; 0 &amp;&amp; balance - money &lt; 0) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;操作失败&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                balance += money;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;操作成功，当前余额：&quot; + balance);</span><br><span class="line">                //设定休眠一毫秒，使其他线程得以执行</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">T001操作成功，当前余额：2000.0</span><br><span class="line">T002操作成功，当前余额：-1000.0</span><br><span class="line">T003操作成功，当前余额：0.0</span><br><span class="line">T004操作成功，当前余额：-2000.0</span><br><span class="line">T005操作成功，当前余额：0.0</span><br><span class="line">账户：60001002,余额：0.0</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java网络编程的四种类</title>
    <url>/2017/03/10/java-article65/</url>
    <content><![CDATA[<p>Java网络编程</p>
<h2 id="Java网络API"><a href="#Java网络API" class="headerlink" title="Java网络API"></a>Java网络API</h2><h2 id="1-InetAddress类"><a href="#1-InetAddress类" class="headerlink" title="1. InetAddress类"></a>1. InetAddress类</h2><p>方法</p>
<p>功能</p>
<p>public static InetAddress getLocalHost</p>
<p>获取本机对应的InetAddress对象</p>
<p>public static InetAddress getByName(String host)</p>
<p>根据主机获得对应的InetAddress对象，参数host可以是ip地址或域名</p>
<p>public static InetAddress[] getAllByName(String host)</p>
<p>根据主机获得具有相同名字的一组InetAddress对象</p>
<p>public static InetAddress getByAddress(byte[] addr)</p>
<p>获取a对象ddr所封装的IP地址对应的InetAddress</p>
<p>public String getCanonicalHost()</p>
<p>获取此IP地址的全限定域名</p>
<p>public bytes[] getHostAddress()</p>
<p>获取该InetAddress对象对应的IP地址字符串</p>
<p>public String getHostName()</p>
<p>获取该InetAddress对象的主机名称</p>
<p>public boolean isReachable(int timeout)</p>
<p>判断是否可以到达该地址</p>
<h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/02/27.</span><br><span class="line"> * java网络编程</span><br><span class="line"> */</span><br><span class="line">public class InetAddressDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //本机操作，获取本机地址信息</span><br><span class="line">            InetAddress loca = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(&quot;本机的全限定域名:&quot;+loca.getCanonicalHostName());</span><br><span class="line">            System.out.println(&quot;本机的IP地址：&quot;+loca.getHostAddress());</span><br><span class="line">            System.out.println(&quot;本机的主机名称：&quot;+loca.getHostName());</span><br><span class="line">            System.out.println(&quot;本机的名称与IP：&quot;+loca.toString());</span><br><span class="line">            System.out.println(&quot;是否可以到达：&quot;+loca.isReachable(5000));</span><br><span class="line">            System.out.println(&quot;*********************************************************&quot;);</span><br><span class="line">            //访问我服务器上的博客</span><br><span class="line">            InetAddress loca_blog = InetAddress.getByName(&quot;www.rainweb.site&quot;);</span><br><span class="line">            System.out.println(&quot;博客的全限定域名:&quot;+loca_blog.getCanonicalHostName());</span><br><span class="line">            System.out.println(&quot;博客的IP地址：&quot;+loca_blog.getHostAddress());</span><br><span class="line">            System.out.println(&quot;博客的主机名称：&quot;+loca_blog.getHostName());</span><br><span class="line">            System.out.println(&quot;博客的名称与IP：&quot;+loca_blog.toString());</span><br><span class="line">            System.out.println(&quot;是否可以到达：&quot;+loca_blog.isReachable(5000));</span><br><span class="line">            System.out.println(&quot;*********************************************************&quot;);</span><br><span class="line">            //访问测试IP地址127.0.0.1</span><br><span class="line">            InetAddress loca_try = InetAddress.getByAddress(new byte[]&#123;127,0,0,1&#125;);</span><br><span class="line">            System.out.println(&quot;全限定域名:&quot;+loca_try.getCanonicalHostName());</span><br><span class="line">            System.out.println(&quot;IP地址：&quot;+loca_try.getHostAddress());</span><br><span class="line">            System.out.println(&quot;主机名称：&quot;+loca_try.getHostName());</span><br><span class="line">            System.out.println(&quot;名称与IP：&quot;+loca_try.toString());</span><br><span class="line">            System.out.println(&quot;是否可以到达：&quot;+loca_try.isReachable(5000));</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">本机的全限定域名:W-PC</span><br><span class="line">本机的IP地址：192.168.225.1</span><br><span class="line">本机的主机名称：W-PC</span><br><span class="line">本机的名称与IP：W-PC/192.168.225.1</span><br><span class="line">是否可以到达：true</span><br><span class="line">*********************************************************</span><br><span class="line">博客的全限定域名:59.111.97.112</span><br><span class="line">博客的IP地址：59.111.97.112</span><br><span class="line">博客的主机名称：www.rainweb.site</span><br><span class="line">博客的名称与IP：www.rainweb.site/59.111.97.112</span><br><span class="line">是否可以到达：true</span><br><span class="line">*********************************************************</span><br><span class="line">全限定域名:127.0.0.1</span><br><span class="line">IP地址：127.0.0.1</span><br><span class="line">主机名称：127.0.0.1</span><br><span class="line">名称与IP：127.0.0.1/127.0.0.1</span><br><span class="line">是否可以到达：true</span><br></pre></td></tr></table></figure></div>

<h2 id="2-URL类"><a href="#2-URL类" class="headerlink" title="2. URL类"></a>2. URL类</h2><p><code>protocol://host:port/resourceName</code></p>
<ul>
<li>protocol是协议名</li>
<li>host是主机名</li>
<li>port是端口号</li>
<li>resourceName是资源名</li>
</ul>
<p>方法</p>
<p>功能描述</p>
<p>public URL(String spec)</p>
<p>构造方法，根据指定的字符串来创建一个URL对象</p>
<p>public URL(String protocol,String host,int port,String file)</p>
<p>构造方法，根据指定的协议，主机名，端口号和文件资源来创建一个URL对象</p>
<p>public URL(String protocol String host,String file)</p>
<p>构造方法，根据指定的协议，主机名和文件资源来创建URL对象</p>
<p>方法</p>
<p>功能描述</p>
<p>public String getProtocol</p>
<p>返回协议名</p>
<p>public String getHost()</p>
<p>返回主机名</p>
<p>public int getPort()</p>
<p>返回端口号，如没有则返回-1</p>
<p>public String getFile()</p>
<p>返回文件名</p>
<p>public String getRef()</p>
<p>返回URL的锚</p>
<p>public String getQuery()</p>
<p>返回URL的查询信息</p>
<p>public String getPath()</p>
<p>返回URL的路径</p>
<p>public URLConnection openConnection()</p>
<p>返回一个URLConnection对象</p>
<p>public final InputStream openStream()</p>
<p>返回一个用于读取该URL资源的InputStream流</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/03/08.</span><br><span class="line"> */</span><br><span class="line">public class URLDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String url = &quot;http://www.rainweb.site:80/index.php&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL blog = new URL(url);</span><br><span class="line">            System.out.println(&quot;返回协议名：&quot;+blog.getProtocol());</span><br><span class="line">            System.out.println(&quot;返回主机名：&quot;+blog.getHost());</span><br><span class="line">            System.out.println(&quot;返回端口号：&quot;+blog.getPort());</span><br><span class="line">            System.out.println(&quot;返回文件名：&quot;+blog.getFile());</span><br><span class="line">            System.out.println(&quot;返回URL的锚：&quot;+blog.getRef());</span><br><span class="line">            System.out.println(&quot;返回URL的查询信息：&quot;+blog.getQuery());</span><br><span class="line">            System.out.println(&quot;返回URL的路径：&quot;+blog.getPath());</span><br><span class="line">            System.out.println(&quot;&quot;);</span><br><span class="line">        &#125;catch (MalformedURLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回协议名：http</span><br><span class="line">返回主机名：www.rainweb.site</span><br><span class="line">返回端口号：80</span><br><span class="line">返回文件名：/index.php</span><br><span class="line">返回URL的锚：null</span><br><span class="line">返回URL的查询信息：null</span><br><span class="line">返回URL的路径：/index.php</span><br></pre></td></tr></table></figure></div>

<h2 id="3-URLConnection类"><a href="#3-URLConnection类" class="headerlink" title="3.URLConnection类"></a>3.URLConnection类</h2><p>URLConnection代表与URL指定的数据源的动态连接，该类提供一些比URL类更强大的服务器交互控制的方法，允许使用POST或PUT和其他HTTP请求方法将数据送回服务器。URLConnection是一个抽象类。</p>
<p>方法</p>
<p>功能描述</p>
<p>public int getContentLength()</p>
<p>获得文件的长度</p>
<p>public String getContentType()</p>
<p>获得文件的类型</p>
<p>public long getDate()</p>
<p>获得文件创建的时间</p>
<p>public long getLastModified()</p>
<p>获得文件最后修改的时间</p>
<p>public InputStream getInputStream()</p>
<p>获得输入流，以便读取文件的数据</p>
<p>public OuputStream getOutputStream()</p>
<p>获得输出流，以便输出数据</p>
<p>public void setRequestProperty(String key,String value)</p>
<p>设置请求属性值</p>
<h3 id="获取网页源代码"><a href="#获取网页源代码" class="headerlink" title="获取网页源代码"></a>获取网页源代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/03/08.</span><br><span class="line"> */</span><br><span class="line">public class URLDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String url = &quot;http://www.rainweb.site:80/index.php&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            //构建URL对象</span><br><span class="line">            URL blog = new URL(url);</span><br><span class="line">            //由URL对象获取URLConnection对象</span><br><span class="line">            URLConnection urlConn = blog.openConnection();</span><br><span class="line">            //设置请求属性，字符集</span><br><span class="line">            urlConn.setRequestProperty(&quot;Charset&quot;, &quot;UTF-8&quot;);</span><br><span class="line">            //由URLConnection获取输入流，并构造BufferedReader对象</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));</span><br><span class="line">            String inputLine;</span><br><span class="line">            while ((inputLine = br.readLine()) != null)&#123;</span><br><span class="line">                System.out.println(inputLine);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;catch (MalformedURLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="4-URKDecoder类和URLEncoder类的使用"><a href="#4-URKDecoder类和URLEncoder类的使用" class="headerlink" title="4.URKDecoder类和URLEncoder类的使用"></a>4.URKDecoder类和URLEncoder类的使用</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.qst.chapter06;</span><br><span class="line">import java.io.UnsupportedEncodingException;</span><br><span class="line">import java.net.URLDecoder;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">public class URLDecoderDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 将普通字符串转换成application/x-www-form-urlencoded字符串</span><br><span class="line">            String urlStr = URLEncoder.encode(&quot;Java 8高级应用与开发&quot;, &quot;GBK&quot;);</span><br><span class="line">            System.out.println(urlStr);</span><br><span class="line"></span><br><span class="line">            // 将application/x-www-form-urlencoded字符串 转换成普通字符串</span><br><span class="line">            String keyWord = URLDecoder.decode(</span><br><span class="line">                    &quot;Java+8%B8%DF%BC%B6%D3%A6%D3%C3%D3%EB%BF%AA%B7%A2&quot;, &quot;GBK&quot;);</span><br><span class="line">            System.out.println(keyWord);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基于TCP的网络编程</title>
    <url>/2017/03/15/java-article66/</url>
    <content><![CDATA[<p>Java基于TCP的网络编程</p>
<h2 id="1-Socket类"><a href="#1-Socket类" class="headerlink" title="1.Socket类"></a>1.Socket类</h2><ul>
<li>构造方法<ul>
<li>Socket(InetAddress String host,int port) 创建连接到指定远程主机和端口号的Socket对象，该构造方法没有指定本地地址和本地端口号，默认使用本地主机IP地址和系统动态分配的端口；</li>
<li>Socket(InetAddress String host,int port,InetAddress localAddr ,int localPort)创建连接到指定主机和端口号的Socket对象，并指定本地IP地址和本地端口号，适用用本地主机有多个IP地址的情况</li>
</ul>
</li>
</ul>
<p>方法</p>
<p>功能描述</p>
<p>public InetAddress getInetAddress()</p>
<p>返回连接到远程主机的地址，如果连接失败则返回以前连接的主机</p>
<p>public int getPort()</p>
<p>返回Socket连接到远程主机的端口号</p>
<p>public int getLocalPort()</p>
<p>返回本地连接终端的端口号</p>
<p>public InputStream getInputStream()</p>
<p>返回一个输入流，从Socket读取数据</p>
<p>public OutputStream getOutputStream()</p>
<p>返回一个输出流，往Socket中写数据</p>
<p>public synchronized void close()</p>
<p>关闭当前Socket连接</p>
<ul>
<li>创建步骤：<ul>
<li><ol>
<li>根据指定IP地址和端口号创建一个socket对象</li>
</ol>
</li>
<li><ol>
<li>调用getInputStream()方法或getOutputStream()方法打开连接到Socket的输入&#x2F;输出流</li>
</ol>
</li>
<li><ol>
<li>客户端和服务器根据协议进行交互，直到关闭连接</li>
</ol>
</li>
<li><ol>
<li>关闭客户端的Socket</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">public class SocketDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建连接到本机、端口为28888的Socket对象</span><br><span class="line">            java.net.Socket socket = new java.net.Socket(&quot;127.0.0.1&quot;, 28888);</span><br><span class="line">            // 将Socket对应的输出流包装成PrintStream</span><br><span class="line">            PrintStream ps = new PrintStream(socket.getOutputStream());</span><br><span class="line">            // 往服务器发送信息</span><br><span class="line">            ps.println(&quot;我是121&quot;);</span><br><span class="line">            ps.flush();</span><br><span class="line">            // 将Socket对应的输入流包装成BufferedReader</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(</span><br><span class="line">                    socket.getInputStream()));</span><br><span class="line">            // 读服务器返回的信息并显示</span><br><span class="line">            String line = br.readLine();</span><br><span class="line">            System.out.println(&quot;来自服务器的数据：&quot; + line);</span><br><span class="line">            // 关闭</span><br><span class="line">            br.close();</span><br><span class="line">            ps.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="上面的代码创建了一个连接到本机，端口为28888的Socket对象；再使用getOutputStream-获取Socket对象的输出流，用于往服务器发送信息，然后使用getInputStream-获取Socket对象的输入流，读取服务器返回的数据；最后关闭输入-x2F-输出流和Socket连接，释放所有的资源"><a href="#上面的代码创建了一个连接到本机，端口为28888的Socket对象；再使用getOutputStream-获取Socket对象的输出流，用于往服务器发送信息，然后使用getInputStream-获取Socket对象的输入流，读取服务器返回的数据；最后关闭输入-x2F-输出流和Socket连接，释放所有的资源" class="headerlink" title="上面的代码创建了一个连接到本机，端口为28888的Socket对象；再使用getOutputStream()获取Socket对象的输出流，用于往服务器发送信息，然后使用getInputStream()获取Socket对象的输入流，读取服务器返回的数据；最后关闭输入&#x2F;输出流和Socket连接，释放所有的资源"></a>上面的代码创建了一个连接到本机，端口为28888的Socket对象；再使用getOutputStream()获取Socket对象的输出流，用于往服务器发送信息，然后使用getInputStream()获取Socket对象的输入流，读取服务器返回的数据；最后关闭输入&#x2F;输出流和Socket连接，释放所有的资源</h3><h2 id="2-ServerSocket类"><a href="#2-ServerSocket类" class="headerlink" title="2.ServerSocket类"></a>2.ServerSocket类</h2><h3 id="ServerSocket是服务器套接字，运行在服务器端，通过指定端口主动监听来自客户端的Socket连接，当客户端发送Socket请求并与服务器端建立连接时，服务器将验证并接受客户端的Socket，从而建立客户端与服务器之间的网络虚拟链路，一旦两端的实体之间建立了虚拟链路，就可以互相传送数据。"><a href="#ServerSocket是服务器套接字，运行在服务器端，通过指定端口主动监听来自客户端的Socket连接，当客户端发送Socket请求并与服务器端建立连接时，服务器将验证并接受客户端的Socket，从而建立客户端与服务器之间的网络虚拟链路，一旦两端的实体之间建立了虚拟链路，就可以互相传送数据。" class="headerlink" title="ServerSocket是服务器套接字，运行在服务器端，通过指定端口主动监听来自客户端的Socket连接，当客户端发送Socket请求并与服务器端建立连接时，服务器将验证并接受客户端的Socket，从而建立客户端与服务器之间的网络虚拟链路，一旦两端的实体之间建立了虚拟链路，就可以互相传送数据。"></a>ServerSocket是服务器套接字，运行在服务器端，通过指定端口主动监听来自客户端的Socket连接，当客户端发送Socket请求并与服务器端建立连接时，服务器将验证并接受客户端的Socket，从而建立客户端与服务器之间的网络虚拟链路，一旦两端的实体之间建立了虚拟链路，就可以互相传送数据。</h3><ul>
<li>构造方法<ul>
<li>ServerSocket(int port)—- 根据指定端口来创建一个ServerSocket对象；</li>
<li>ServerSocket(int port,int backlog)—-创建一个ServerSocket对象，指定端口和连接队列长度，此时增加一个用来改变连接队列长度的参数backlog；</li>
<li>ServerSocket(int port,int backlog,InetAddress localAddr)—-创建一个ServerSocket对象，指定端口，连接队列长度和IP地址；当机器拥有多个IP地址时，才允许使用localAddr参数指定具体的IP地址。</li>
</ul>
</li>
</ul>
<p>方法</p>
<p>功能描述</p>
<p>public Socket accept()</p>
<p>接受客户端Socket连接请求，并返回 一个与客户端Socket对应的Socket实例；该方法是一个阻塞方法，如果没有接收到客户端发送的Socket，则一直处于等待状态，线程也会被阻塞</p>
<p>public InetAddress getInetAddress()</p>
<p>返回当前ServerSocket实例的地址信息</p>
<p>public synchronized void close()</p>
<p>关闭当前Socket实例</p>
<ul>
<li>具体步骤：<ul>
<li><ol>
<li>根据指定的端口号来实例化一个ServerSocket对象；</li>
</ol>
</li>
<li><ol>
<li>调用serverSocket对象的accept()方法接受客户端发送的Socket对象；</li>
</ol>
</li>
<li><ol>
<li>调用Socket对象的getInputStream()&#x2F;getOutputStream()方法来建立与客户端进行交互的IO流</li>
</ol>
</li>
<li><ol>
<li>服务器与客户端根据一定的协议交互，直到关闭连接；</li>
</ol>
</li>
<li><ol>
<li>关闭服务器端的Socket；</li>
</ol>
</li>
<li><ol>
<li>回到第2步，继续监听下一次客户端发送的Socket请求连接；</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by w-pc on 2017/03/15.</span><br><span class="line"> */</span><br><span class="line">public class ServerSocketDemo extends Thread&#123;</span><br><span class="line">    ServerSocket server;</span><br><span class="line">    int num = 0;</span><br><span class="line">    public ServerSocketDemo()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            server = new ServerSocket(28888);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        this.start();</span><br><span class="line">        System.out.println(&quot;Start.....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        while (this.isAlive())&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Socket socket = server.accept();</span><br><span class="line">                BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String line = br.readLine();</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                PrintStream ps = new PrintStream(socket.getOutputStream());</span><br><span class="line">                ps.println(&quot;您是第&quot;+(++num)+&quot;个访问服务器的用户！&quot;);</span><br><span class="line">                ps.flush();</span><br><span class="line">                br.close();</span><br><span class="line">                ps.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;catch (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new ServerSocketDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="上述代码服务器端是一个多线程应用程序，能为多个客户提供服务。在ServerSocketDemo构造方法中，先创建一个用于监听28888端口的ServerSocket对象，在调用this-start-方法启动线程。在线程的run-方法中，先调用ServerSocket对象的accept-方法来接收客户端发送的Socket对象，再使用getInputStream-获取Socket对象的输入流，用于读取客户端发送的数据信息；然后使用getOutputStream-获取Socket对象的输出流，往客户端发送信息；最后关闭输入，输出流和Socket释放所有的资源。"><a href="#上述代码服务器端是一个多线程应用程序，能为多个客户提供服务。在ServerSocketDemo构造方法中，先创建一个用于监听28888端口的ServerSocket对象，在调用this-start-方法启动线程。在线程的run-方法中，先调用ServerSocket对象的accept-方法来接收客户端发送的Socket对象，再使用getInputStream-获取Socket对象的输入流，用于读取客户端发送的数据信息；然后使用getOutputStream-获取Socket对象的输出流，往客户端发送信息；最后关闭输入，输出流和Socket释放所有的资源。" class="headerlink" title="上述代码服务器端是一个多线程应用程序，能为多个客户提供服务。在ServerSocketDemo构造方法中，先创建一个用于监听28888端口的ServerSocket对象，在调用this.start()方法启动线程。在线程的run()方法中，先调用ServerSocket对象的accept()方法来接收客户端发送的Socket对象，再使用getInputStream()获取Socket对象的输入流，用于读取客户端发送的数据信息；然后使用getOutputStream()获取Socket对象的输出流，往客户端发送信息；最后关闭输入，输出流和Socket释放所有的资源。"></a>上述代码服务器端是一个多线程应用程序，能为多个客户提供服务。在ServerSocketDemo构造方法中，先创建一个用于监听28888端口的ServerSocket对象，在调用this.start()方法启动线程。在线程的run()方法中，先调用ServerSocket对象的accept()方法来接收客户端发送的Socket对象，再使用getInputStream()获取Socket对象的输入流，用于读取客户端发送的数据信息；然后使用getOutputStream()获取Socket对象的输出流，往客户端发送信息；最后关闭输入，输出流和Socket释放所有的资源。</h3>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Socket</tag>
        <tag>套接字</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现一键复制功能</title>
    <url>/2017/02/06/javascript-article29/</url>
    <content><![CDATA[<h3 id="在网页中有的文本框旁边有个一键复制的按钮，具体是怎么实现的呢，我一般都是使用JavaScript来操作文本框，记住必须是文本框，input标签是不可以的，下面这段代码就是关于调用JavaScript来实现的，有需要的可以根据自己的需求更改，效果图我放在博文最后了，大家可以参考。"><a href="#在网页中有的文本框旁边有个一键复制的按钮，具体是怎么实现的呢，我一般都是使用JavaScript来操作文本框，记住必须是文本框，input标签是不可以的，下面这段代码就是关于调用JavaScript来实现的，有需要的可以根据自己的需求更改，效果图我放在博文最后了，大家可以参考。" class="headerlink" title="在网页中有的文本框旁边有个一键复制的按钮，具体是怎么实现的呢，我一般都是使用JavaScript来操作文本框，记住必须是文本框，input标签是不可以的，下面这段代码就是关于调用JavaScript来实现的，有需要的可以根据自己的需求更改，效果图我放在博文最后了，大家可以参考。"></a>在网页中有的文本框旁边有个一键复制的按钮，具体是怎么实现的呢，我一般都是使用JavaScript来操作文本框，记住必须是文本框，input标签是不可以的，下面这段代码就是关于调用JavaScript来实现的，有需要的可以根据自己的需求更改，效果图我放在博文最后了，大家可以参考。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;一键复制功能&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function copyUrl2()</span><br><span class="line">&#123;</span><br><span class="line">var Url2=document.getElementById(&quot;biao&quot;);</span><br><span class="line">//alert(obj);</span><br><span class="line">Url2.select(); // 选择对象</span><br><span class="line">document.execCommand(&quot;Copy&quot;); // 执行浏览器复制命令</span><br><span class="line">alert(&quot;复制成功，快去贴粘吧。&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;table border=1 bordercolor=#FFFFFF style=&quot;border-collapse: collapse&quot;&gt;</span><br><span class="line">    &lt;TR vAlign=top align=center bgcolor=#FFF&gt;</span><br><span class="line">        &lt;TH width=90&gt;&lt;input style=&quot;width: 100px; height: 25px&quot; type=&quot;button&quot;</span><br><span class="line">            onClick=&quot;copyUrl2()&quot;</span><br><span class="line">            value=&quot;点击即可复制&quot; /&gt;&lt;br&gt;</span><br><span class="line">        &lt;/TH&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">    &lt;TR vAlign=top align=center bgcolor=#F1F1FD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;textarea cols=&quot;10&quot; rows=&quot;5&quot; id=&quot;biao&quot;&gt;这里是要复制的内容，你也可以在文本框里直接输入&lt;/textarea&gt;</span><br><span class="line">        &lt;/TD&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">&lt;/TABLE&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript打开和关闭窗口</title>
    <url>/2017/02/01/javascript-article0006/</url>
    <content><![CDATA[<h2 id="使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；"><a href="#使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；" class="headerlink" title="使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；"></a>使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；使用JS弹出一个窗口，并设置弹出窗口的页面；</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function open_win()</span><br><span class="line">&#123;</span><br><span class="line">window.open(&quot;http://www.baidu.com&quot;,&quot;_blank&quot;,&quot;toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;打开窗口&quot; onclick=&quot;open_win()&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="使用JS关闭当前弹出的窗口"><a href="#使用JS关闭当前弹出的窗口" class="headerlink" title="使用JS关闭当前弹出的窗口"></a>使用JS关闭当前弹出的窗口</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function closeWin()</span><br><span class="line">  &#123;</span><br><span class="line">  myWindow.close()</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">myWindow=window.open(&#x27;&#x27;,&#x27;&#x27;,&#x27;width=200,height=100&#x27;)</span><br><span class="line">myWindow.document.write(&quot;This is &#x27;myWindow&#x27;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;Close &#x27;myWindow&#x27;&quot; onclick=&quot;closeWin()&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="综上：源码本人亲自测试过，可以使用，有喜欢的可以收藏，我会持续更新，下次把我平时使用jquery的方法挂出来。"><a href="#综上：源码本人亲自测试过，可以使用，有喜欢的可以收藏，我会持续更新，下次把我平时使用jquery的方法挂出来。" class="headerlink" title="综上：源码本人亲自测试过，可以使用，有喜欢的可以收藏，我会持续更新，下次把我平时使用jquery的方法挂出来。"></a>综上：源码本人亲自测试过，可以使用，有喜欢的可以收藏，我会持续更新，下次把我平时使用jquery的方法挂出来。</h4>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现动态显示系统时间</title>
    <url>/2017/02/06/javascript-article30/</url>
    <content><![CDATA[<h3 id="使用js实现在网页中动态的显示当前时间，就是如下这种格式，大家也可以根据自己的需求更改"><a href="#使用js实现在网页中动态的显示当前时间，就是如下这种格式，大家也可以根据自己的需求更改" class="headerlink" title="使用js实现在网页中动态的显示当前时间，就是如下这种格式，大家也可以根据自己的需求更改"></a>使用js实现在网页中动态的显示当前时间，就是如下这种格式，大家也可以根据自己的需求更改</h3><h3 id="2017年02月06日11-12-47-星期一"><a href="#2017年02月06日11-12-47-星期一" class="headerlink" title="2017年02月06日11:12:47 星期一"></a>2017年02月06日11:12:47 星期一</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;动态的显示当前时间&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function show_cur_times()&#123;</span><br><span class="line">//获取当前日期</span><br><span class="line"> var date_time = new Date();</span><br><span class="line"> //定义星期</span><br><span class="line"> var week;</span><br><span class="line"> //switch判断</span><br><span class="line"> switch (date_time.getDay())&#123;</span><br><span class="line">case 1: week=&quot;星期一&quot;; break;</span><br><span class="line">case 2: week=&quot;星期二&quot;; break;</span><br><span class="line">case 3: week=&quot;星期三&quot;; break;</span><br><span class="line">case 4: week=&quot;星期四&quot;; break;</span><br><span class="line">case 5: week=&quot;星期五&quot;; break;</span><br><span class="line">case 6: week=&quot;星期六&quot;; break;</span><br><span class="line">default:week=&quot;星期天&quot;; break;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //年</span><br><span class="line"> var year = date_time.getFullYear();</span><br><span class="line">     //判断小于10，前面补0</span><br><span class="line">   if(year&lt;10)&#123;</span><br><span class="line">     year=&quot;0&quot;+year;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //月</span><br><span class="line"> var month = date_time.getMonth()+1;</span><br><span class="line">     //判断小于10，前面补0</span><br><span class="line">  if(month&lt;10)&#123;</span><br><span class="line">month=&quot;0&quot;+month;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //日</span><br><span class="line"> var day = date_time.getDate();</span><br><span class="line">     //判断小于10，前面补0</span><br><span class="line">   if(day&lt;10)&#123;</span><br><span class="line">     day=&quot;0&quot;+day;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //时</span><br><span class="line"> var hours =date_time.getHours();</span><br><span class="line">     //判断小于10，前面补0</span><br><span class="line">    if(hours&lt;10)&#123;</span><br><span class="line">     hours=&quot;0&quot;+hours;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //分</span><br><span class="line"> var minutes =date_time.getMinutes();</span><br><span class="line">     //判断小于10，前面补0</span><br><span class="line">    if(minutes&lt;10)&#123;</span><br><span class="line">     minutes=&quot;0&quot;+minutes;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //秒</span><br><span class="line"> var seconds=date_time.getSeconds();</span><br><span class="line">     //判断小于10，前面补0</span><br><span class="line">    if(seconds&lt;10)&#123;</span><br><span class="line">     seconds=&quot;0&quot;+seconds;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> //拼接年月日时分秒</span><br><span class="line"> var date_str = year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日&quot;+hours+&quot;:&quot;+minutes+&quot;:&quot;+seconds+&quot; &quot;+week;</span><br><span class="line"></span><br><span class="line"> //显示在id为showtimes的容器里</span><br><span class="line"> document.getElementById(&quot;showtimes&quot;).innerHTML= date_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> //设置1秒调用一次show_cur_times函数</span><br><span class="line">setInterval(&quot;show_cur_times()&quot;,100);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;label id=&quot;showtimes&quot;&gt;&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
        <tag>DateTime</tag>
      </tags>
  </entry>
  <entry>
    <title>关于JavaWeb中Tomcat端口被占用的解决方法</title>
    <url>/2017/02/07/javaweb-article36/</url>
    <content><![CDATA[<h2 id="今天想用javaweb写点东西，在EclipseEE中又出现了tomcat无法启动的情况，报错如下图。"><a href="#今天想用javaweb写点东西，在EclipseEE中又出现了tomcat无法启动的情况，报错如下图。" class="headerlink" title="今天想用javaweb写点东西，在EclipseEE中又出现了tomcat无法启动的情况，报错如下图。"></a>今天想用javaweb写点东西，在EclipseEE中又出现了tomcat无法启动的情况，报错如下图。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java10.png"
                     
                ></p>
<h2 id="上一次出现，我以为是项目的问题，调了半天项目，把servlet删了重新导入，各种折腾，不知道怎么就弄好了，这次很明显项目没法弄，好久没用过了，我也不知道哪个项目有问题，百度了错误以后发现是端口被占用，在cmd里查了一下，发现是QQ把我的8080给占了，很尴尬啊，先试试把QQkill掉，但没效果啊，重启系统QQ又启动了，查询端口号又进行关闭，也没用，后来在配置文件servlse中修改端口号还是不管用，重启系统，依旧不管用，当我无奈打开servlet时突然发现在eclipse中可以直接修改，而且就在左边，如下图，挑个没用过的端口号输进去就可以了。当然换端口号之前还需要查询一下现在空余的端口，不然就会发生冲突，端口号查询方式如下文。"><a href="#上一次出现，我以为是项目的问题，调了半天项目，把servlet删了重新导入，各种折腾，不知道怎么就弄好了，这次很明显项目没法弄，好久没用过了，我也不知道哪个项目有问题，百度了错误以后发现是端口被占用，在cmd里查了一下，发现是QQ把我的8080给占了，很尴尬啊，先试试把QQkill掉，但没效果啊，重启系统QQ又启动了，查询端口号又进行关闭，也没用，后来在配置文件servlse中修改端口号还是不管用，重启系统，依旧不管用，当我无奈打开servlet时突然发现在eclipse中可以直接修改，而且就在左边，如下图，挑个没用过的端口号输进去就可以了。当然换端口号之前还需要查询一下现在空余的端口，不然就会发生冲突，端口号查询方式如下文。" class="headerlink" title="上一次出现，我以为是项目的问题，调了半天项目，把servlet删了重新导入，各种折腾，不知道怎么就弄好了，这次很明显项目没法弄，好久没用过了，我也不知道哪个项目有问题，百度了错误以后发现是端口被占用，在cmd里查了一下，发现是QQ把我的8080给占了，很尴尬啊，先试试把QQkill掉，但没效果啊，重启系统QQ又启动了，查询端口号又进行关闭，也没用，后来在配置文件servlse中修改端口号还是不管用，重启系统，依旧不管用，当我无奈打开servlet时突然发现在eclipse中可以直接修改，而且就在左边，如下图，挑个没用过的端口号输进去就可以了。当然换端口号之前还需要查询一下现在空余的端口，不然就会发生冲突，端口号查询方式如下文。"></a>上一次出现，我以为是项目的问题，调了半天项目，把servlet删了重新导入，各种折腾，不知道怎么就弄好了，这次很明显项目没法弄，好久没用过了，我也不知道哪个项目有问题，百度了错误以后发现是端口被占用，在cmd里查了一下，发现是QQ把我的8080给占了，很尴尬啊，先试试把QQkill掉，但没效果啊，重启系统QQ又启动了，查询端口号又进行关闭，也没用，后来在配置文件servlse中修改端口号还是不管用，重启系统，依旧不管用，当我无奈打开servlet时突然发现在eclipse中可以直接修改，而且就在左边，如下图，挑个没用过的端口号输进去就可以了。当然换端口号之前还需要查询一下现在空余的端口，不然就会发生冲突，端口号查询方式如下文。</h2><p>直接修改HTTP的端口，因为要响应的是HTTP请求，我修改为8008就可以了 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java9.png"
                     
                ></p>
<h2 id="下面是端口号查询的命令"><a href="#下面是端口号查询的命令" class="headerlink" title="下面是端口号查询的命令"></a>下面是端口号查询的命令</h2><ol>
<li><p>查看所有的端口占用情况 C:&gt;netstat -ano 协议 本地地址 外部地址 状态 PID</p>
<p>TCP 127.0.0.1:1434 0.0.0.0:0 LISTENING 3236 TCP 127.0.0.1:5679 0.0.0.0:0 LISTENING 4168 TCP 127.0.0.1:7438 0.0.0.0:0 LISTENING 4168 TCP 127.0.0.1:8015 0.0.0.0:0 LISTENING 1456 TCP 192.168.3.230:139 0.0.0.0:0 LISTENING 4 TCP 192.168.3.230:1957 220.181.31.225:443 ESTABLISHED 3068 TCP 192.168.3.230:2020 183.62.96.189:1522 ESTABLISHED 1456 TCP 192.168.3.230:2927 117.79.91.18:80 ESTABLISHED 4732 TCP 192.168.3.230:2929 117.79.91.18:80 ESTABLISHED 4732 TCP 192.168.3.230:2930 117.79.91.18:80 ESTABLISHED 4732 TCP 192.168.3.230:2931 117.79.91.18:80 ESTABLISHED 4732</p>
</li>
<li><p>查看指定端口的占用情况 C:&gt;netstat -aonfindstr “9050” 协议 本地地址 外部地址 状态 PID TCP 127.0.0.1:9050 0.0.0.0:0 LISTENING 2016 P: 看到了吗，端口被进程号为2016的进程占用，继续执行下面命令： （也可以去任务管理器中查看pid对应的进程）</p>
</li>
<li><p>查看PID对应的进程 C:&gt;tasklistfindstr “2016” 映像名称 PID 会话名 会话# 内存使用 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; tor.exe 2016 Console 0 16,064 K</p>
</li>
<li><p>结束该进程 C:&gt;taskkill &#x2F;f &#x2F;t &#x2F;im tor.exe</p>
</li>
</ol>
]]></content>
      <categories>
        <category>programme</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb中Jsp使用include写法分析</title>
    <url>/2017/02/08/javaweb-article37/</url>
    <content><![CDATA[<h2 id="今天在整理JavaWeb里以前写的一个博客时，我把根目录下的文件重新排了一下，以前有四个菜单文件，然后新建了一个menu文件夹放了进去，这下其他jsp中的连接菜单的代码就报错了，找不到menu，这让我想起了刚学Javaweb时候很烦人的路径问题，HTML中的路径写法和Jsp中的写法不一样，有时候经常弄混了，傻傻发不清楚，现在这种小问题已经难不倒我了，但为了纪念一下以前的学习经过就认认真真的分析一次。"><a href="#今天在整理JavaWeb里以前写的一个博客时，我把根目录下的文件重新排了一下，以前有四个菜单文件，然后新建了一个menu文件夹放了进去，这下其他jsp中的连接菜单的代码就报错了，找不到menu，这让我想起了刚学Javaweb时候很烦人的路径问题，HTML中的路径写法和Jsp中的写法不一样，有时候经常弄混了，傻傻发不清楚，现在这种小问题已经难不倒我了，但为了纪念一下以前的学习经过就认认真真的分析一次。" class="headerlink" title="今天在整理JavaWeb里以前写的一个博客时，我把根目录下的文件重新排了一下，以前有四个菜单文件，然后新建了一个menu文件夹放了进去，这下其他jsp中的连接菜单的代码就报错了，找不到menu，这让我想起了刚学Javaweb时候很烦人的路径问题，HTML中的路径写法和Jsp中的写法不一样，有时候经常弄混了，傻傻发不清楚，现在这种小问题已经难不倒我了，但为了纪念一下以前的学习经过就认认真真的分析一次。"></a>今天在整理JavaWeb里以前写的一个博客时，我把根目录下的文件重新排了一下，以前有四个菜单文件，然后新建了一个menu文件夹放了进去，这下其他jsp中的连接菜单的代码就报错了，找不到menu，这让我想起了刚学Javaweb时候很烦人的路径问题，HTML中的路径写法和Jsp中的写法不一样，有时候经常弄混了，傻傻发不清楚，现在这种小问题已经难不倒我了，但为了纪念一下以前的学习经过就认认真真的分析一次。</h2><h3 id="由于这次只是一点问题，关于路径的情况还有很多，等我以后用到了再补充，先放图，按图分析"><a href="#由于这次只是一点问题，关于路径的情况还有很多，等我以后用到了再补充，先放图，按图分析" class="headerlink" title="由于这次只是一点问题，关于路径的情况还有很多，等我以后用到了再补充，先放图，按图分析"></a>由于这次只是一点问题，关于路径的情况还有很多，等我以后用到了再补充，先放图，按图分析</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/java15.png"
                     
                ></p>
<h3 id="一，最简单的在jsp页面中用include导入其他页面，不是在servlet中进行重定向或者请求转发"><a href="#一，最简单的在jsp页面中用include导入其他页面，不是在servlet中进行重定向或者请求转发" class="headerlink" title="一，最简单的在jsp页面中用include导入其他页面，不是在servlet中进行重定向或者请求转发"></a>一，<strong>最简单的在jsp页面中用include导入其他页面</strong>，不是在servlet中进行重定向或者请求转发</h3><ol>
<li>最先说的就是 <strong>根目录-根目录的链接方式</strong> 如果我想要在** index.jsp中显示article_show_All.jsp**中的内容改怎么样写： <code>&lt;jsp:include page=&quot;/article_show_All.jsp&quot;&gt;&lt;/jsp:include&gt;</code> ‘ &#x2F; ’表示是根目录，这个其他语言也是一样的。</li>
<li>如果是 <strong>根目录-子文件夹</strong> 如果我想要在** index.jsp中显示menu文件夹中的head.jsp** 内容怎么写： <code>&lt;jsp:include page=&quot;/menu/head.jsp&quot;&gt;&lt;/jsp:include&gt;</code> 这行代码的意思是根目录下的menu文件夹里的head.jsp</li>
<li>如果是在<strong>子文件夹-子文件夹</strong> 如果想要在** foot.jsp中导入head.jsp** 应该怎么写，两种写法，<ol>
<li><code>&lt;jsp:include page=&quot;/menu/head.jsp&quot;&gt;&lt;/jsp:include&gt;</code> 这是很标准的写法，还有就是</li>
<li><code>&lt;jsp:include page=&quot;head.jsp&quot;&gt;&lt;/jsp:include&gt;</code> 这两种写法都是通过的，但尽量使用第一种，写的清清楚楚，不会引起歧义</li>
</ol>
</li>
<li>如果在 <strong>子文件夹-根目录</strong> 如果想要在** foot.jsp中导入根目录下的index.jsp文件** <code>&lt;jsp:include page=&quot;/index.jsp&quot;&gt;&lt;/jsp:include&gt;</code></li>
</ol>
<h3 id="暂时就是这些，其实只要把路径写的清清楚楚就没有问题，jsp中的报错提示还是很准确的，至于”-”-的用法，等遇到的时候再写"><a href="#暂时就是这些，其实只要把路径写的清清楚楚就没有问题，jsp中的报错提示还是很准确的，至于”-”-的用法，等遇到的时候再写" class="headerlink" title="暂时就是这些，其实只要把路径写的清清楚楚就没有问题，jsp中的报错提示还是很准确的，至于” .. ” 的用法，等遇到的时候再写"></a>暂时就是这些，其实只要把路径写的清清楚楚就没有问题，jsp中的报错提示还是很准确的，至于” .. ” 的用法，等遇到的时候再写</h3>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JavaWeb编写的基于MySQL博客模板-可直接使用</title>
    <url>/2017/02/08/javaweb-article38/</url>
    <content><![CDATA[<h1 id="JavaWeb—Blog-code"><a href="#JavaWeb—Blog-code" class="headerlink" title="JavaWeb—Blog code"></a>JavaWeb—Blog code</h1><h2 id="本项目使用JavWeb编写，结构层次分明，使用Action-Factory，DAOImpl分级传递，前台功能基本完善，有顶部菜单和侧栏菜单底部菜单，支持首页展示功能，文章功能，文章包括列表显示和单篇文章显示功能。相册功能，可以按时间和上传者分别展示，留言版功能，支持留言和已有留言的游览，数据库db-blog-sql文件已经放到database文件夹中，导包即可使用"><a href="#本项目使用JavWeb编写，结构层次分明，使用Action-Factory，DAOImpl分级传递，前台功能基本完善，有顶部菜单和侧栏菜单底部菜单，支持首页展示功能，文章功能，文章包括列表显示和单篇文章显示功能。相册功能，可以按时间和上传者分别展示，留言版功能，支持留言和已有留言的游览，数据库db-blog-sql文件已经放到database文件夹中，导包即可使用" class="headerlink" title="本项目使用JavWeb编写，结构层次分明，使用Action,Factory，DAOImpl分级传递，前台功能基本完善，有顶部菜单和侧栏菜单底部菜单，支持首页展示功能，文章功能，文章包括列表显示和单篇文章显示功能。相册功能，可以按时间和上传者分别展示，留言版功能，支持留言和已有留言的游览，数据库db_blog.sql文件已经放到database文件夹中，导包即可使用"></a>本项目使用JavWeb编写，结构层次分明，使用Action,Factory，DAOImpl分级传递，前台功能基本完善，有顶部菜单和侧栏菜单底部菜单，支持首页展示功能，文章功能，文章包括列表显示和单篇文章显示功能。相册功能，可以按时间和上传者分别展示，留言版功能，支持留言和已有留言的游览，数据库db_blog.sql文件已经放到database文件夹中，导包即可使用</h2><p>》》》 <a class="link"   href="https://github.com/rainweb521/Java_Programm_Blog" >这是我github上的链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 项目Servlet结构 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/javablog2.jpg"
                     
                ></p>
<h3 id="首页展示"><a href="#首页展示" class="headerlink" title="首页展示"></a>首页展示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/javablog1.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Javaweb中封装servlet对post参数的各种类型转换方法</title>
    <url>/2017/02/14/javaweb-article55/</url>
    <content><![CDATA[<h2 id="在Javaweb中表单中的参数在提交给servlet时都是以字符串的类型出现，需要对各种参数进行类型的转换，而如果每次都写一遍类型转换方法，代码的实用性太低-其实是懒得写-，于是把这些方法写到一个类中，以后直接调用就好，其中有参数的空值判断，Int类型转换，Double类型转换，Array类型转换，Date类型的转换，Timestamp类型的转换。使用时放入util包中即可，下面是源代码。"><a href="#在Javaweb中表单中的参数在提交给servlet时都是以字符串的类型出现，需要对各种参数进行类型的转换，而如果每次都写一遍类型转换方法，代码的实用性太低-其实是懒得写-，于是把这些方法写到一个类中，以后直接调用就好，其中有参数的空值判断，Int类型转换，Double类型转换，Array类型转换，Date类型的转换，Timestamp类型的转换。使用时放入util包中即可，下面是源代码。" class="headerlink" title="在Javaweb中表单中的参数在提交给servlet时都是以字符串的类型出现，需要对各种参数进行类型的转换，而如果每次都写一遍类型转换方法，代码的实用性太低(其实是懒得写)，于是把这些方法写到一个类中，以后直接调用就好，其中有参数的空值判断，Int类型转换，Double类型转换，Array类型转换，Date类型的转换，Timestamp类型的转换。使用时放入util包中即可，下面是源代码。"></a>在Javaweb中表单中的参数在提交给servlet时都是以字符串的类型出现，需要对各种参数进行类型的转换，而如果每次都写一遍类型转换方法，代码的实用性太低(其实是懒得写)，于是把这些方法写到一个类中，以后直接调用就好，其中有参数的空值判断，Int类型转换，Double类型转换，Array类型转换，Date类型的转换，Timestamp类型的转换。使用时放入util包中即可，下面是源代码。</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package cn.itshixun;</span><br><span class="line">import java.sql.Date;</span><br><span class="line">import java.sql.Timestamp;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">public class RequestUtil &#123;</span><br><span class="line">    public static String getString(HttpServletRequest req, String name) &#123;</span><br><span class="line">        String str = req.getParameter(name);</span><br><span class="line">        str = isBlank(str) ? &quot;&quot; : str.trim();</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int getInt(HttpServletRequest req, String name) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return Integer.parseInt(RequestUtil.getString(req, name));</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static int[] getIntArray(HttpServletRequest req, String name) &#123;</span><br><span class="line">        String[] strs = req.getParameterValues(name);</span><br><span class="line">        if (strs == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int[] array = new int[strs.length];</span><br><span class="line">        for (int i = 0; i &lt; strs.length; i++) &#123;</span><br><span class="line">            array[i] = Integer.parseInt(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br><span class="line">    public static double getDouble(HttpServletRequest req, String name) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return Double.parseDouble(RequestUtil.getString(req, name));</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return 0.0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Date getDate(HttpServletRequest req, String name) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return Date.valueOf(RequestUtil.getString(req, name));</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Timestamp getTimestamp(HttpServletRequest req, String name) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return Timestamp.valueOf(RequestUtil.getString(req, name));</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private static boolean isBlank(String str) &#123;</span><br><span class="line">        return str == null  str.trim().length() == 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Java性能调优分享</title>
    <url>/2020/09/09/java%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h1 id="Java性能调优分享"><a href="#Java性能调优分享" class="headerlink" title="Java性能调优分享"></a>Java性能调优分享</h1><h3 id="这次分享还是之前在公司对项目进行性能调优时，前期的调研，以及积累的一些经验，之前公司产品面对的用户并发量较小，所以测试通过后直接上线，不需要根据其他维度来进行分析优化，后来领导对我负责的系统提出了并发的要求，想知道系统能承受的并发量是多少，时延会达到多长，根据这些需求，进行一系列压测。"><a href="#这次分享还是之前在公司对项目进行性能调优时，前期的调研，以及积累的一些经验，之前公司产品面对的用户并发量较小，所以测试通过后直接上线，不需要根据其他维度来进行分析优化，后来领导对我负责的系统提出了并发的要求，想知道系统能承受的并发量是多少，时延会达到多长，根据这些需求，进行一系列压测。" class="headerlink" title="这次分享还是之前在公司对项目进行性能调优时，前期的调研，以及积累的一些经验，之前公司产品面对的用户并发量较小，所以测试通过后直接上线，不需要根据其他维度来进行分析优化，后来领导对我负责的系统提出了并发的要求，想知道系统能承受的并发量是多少，时延会达到多长，根据这些需求，进行一系列压测。"></a>这次分享还是之前在公司对项目进行性能调优时，前期的调研，以及积累的一些经验，之前公司产品面对的用户并发量较小，所以测试通过后直接上线，不需要根据其他维度来进行分析优化，后来领导对我负责的系统提出了并发的要求，想知道系统能承受的并发量是多少，时延会达到多长，根据这些需求，进行一系列压测。</h3><h3 id="1-为什么要做性能优化"><a href="#1-为什么要做性能优化" class="headerlink" title="1.为什么要做性能优化"></a>1.为什么要做性能优化</h3><ol>
<li>#### 系统角度</li>
</ol>
<p>一款线上产品如果没有经过性能测试，那它就好比是一颗定时炸弹，你不知道它什么时候会出现问题，你也不清楚它能承受的极限在哪儿。有些性能问题是时间累积慢慢产生的，到了一定时间自然就爆炸了；而更多的性能问题是由访问量的波动导致的，等到用户量上来就会奔溃。 所有的系统在开发完之后，多多少少都会有性能问题，我们首先要做的就是想办法把问题暴露出来，例如进行压力测试、模拟可能的操作场景等等，再通过性能调优去解决这些问题。</p>
<ol>
<li>#### 个人角度</li>
</ol>
<p>对技术能力的提升，强化思维方式 调优的对象不是单一的应用服务，性能可能与操作系统、网络、数据库等组件相关，所以我们需要储备操作系统、网络协议以及数据库等基础知识。具体的性能问题往往还与传输、计算、存储数据等相关，那我们还需要储备数据结构、算法以及数学等基础知识。</p>
<ol>
<li><h4 id="从更高的角度思考和总结"><a href="#从更高的角度思考和总结" class="headerlink" title="从更高的角度思考和总结"></a>从更高的角度思考和总结</h4>我们在使用一项技术时，从来不问自己：为什么这项技术可以提升系统性能？对比其他技术它好在哪儿？实现的原理又是什么呢？只有深入源码，通过分析来学习、总结一项技术的实现原理和优缺点，这样我们就能更客观地去学习一项技术，才能在遇到性能问题时，做到触类旁通。</li>
</ol>
<h3 id="2-性能体现在哪里"><a href="#2-性能体现在哪里" class="headerlink" title="2. 性能体现在哪里"></a>2. 性能体现在哪里</h3><h4 id="哪些计算机资源会成为系统的性能瓶颈"><a href="#哪些计算机资源会成为系统的性能瓶颈" class="headerlink" title="哪些计算机资源会成为系统的性能瓶颈"></a>哪些计算机资源会成为系统的性能瓶颈</h4><ol>
<li>CPU 当CPU占用率太高时，需要去分析代码递归导致的无限循环，正则表达式引起的回溯，JVM 频繁的 FULL GC，以及多线程造成的大量上下文切换等，这些都有可能导致 CPU 资源繁忙。</li>
<li>内存 Java一般通过 JVM 对内存进行分配管理，主要使用JVM中的堆来存储创建的对象。当内存空间被占满，对象无法回收时，就会导致内存溢出、内存泄露等问题</li>
<li>磁盘 I&#x2F;O 磁盘读写性能影响</li>
<li>网络 带宽过低的话，对于传输数据比较大，或者是并发量比较大的系统，网络就很容易成为性能瓶颈。</li>
<li>数据库 数据库的操作往往是涉及到磁盘 I&#x2F;O 的读写。大量的数据库读写操作，会导致磁盘 I&#x2F;O 性能瓶颈，进而导致数据库操作的延迟性，由于Gateway不涉及数据库的操作，本次不作为分析重点</li>
<li>锁竞争 在并发编程中，经常需要多个线程共享读写操作同一个资源，这个时候为了保持数据的原子性，就会进行加锁操作。锁的使用可能会带来上下文切换，从而给系统带来性能开销。</li>
<li>异常处理 Java 应用中，抛出异常需要构建异常栈，对栈进行快照，以便对异常进行捕获和处理，这个过程非常消耗系统性能。如果在高并发的情况下引发异常，持续地进行异常处理，那么系统的性能就会明显地受到影响。</li>
</ol>
<h3 id="3-我们常说的用来衡量系统性能的指标到底是指什么，"><a href="#3-我们常说的用来衡量系统性能的指标到底是指什么，" class="headerlink" title="3. 我们常说的用来衡量系统性能的指标到底是指什么，"></a>3. 我们常说的用来衡量系统性能的指标到底是指什么，</h3><ol>
<li>响应时间 响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好 数据库响应时间 服务端响应时间 网络响应时间</li>
<li>吞吐量 TPS（每秒事务处理量） 体现了接口的性能，TPS 越大，性能越好 <strong>磁盘吞吐量</strong> <strong>网络吞吐量</strong></li>
<li>资源占用率 CPU 占用率、内存使用率、磁盘 I&#x2F;O、网络 I&#x2F;O 来表示资源使用率</li>
</ol>
<h3 id="4-遇到的坑"><a href="#4-遇到的坑" class="headerlink" title="4. 遇到的坑"></a>4. 遇到的坑</h3><ol>
<li><p>压测工具的选择</p>
</li>
<li><p>服务器的选择</p>
</li>
<li><p>代码逻辑的问题</p>
</li>
</ol>
<h3 id="5-不好测试"><a href="#5-不好测试" class="headerlink" title="5. 不好测试"></a>5. 不好测试</h3><ol>
<li><p>测试工具和服务器的选择 性能测试结果不稳定，我们在做性能测试时发现，每次测试处理的数据集都是一样的，但测试结果却有差异。这是因为测试时，伴随着很多不稳定因素，比如机器其他进程的影响、网络波动以及每个阶段 JVM 垃圾回收的不同等等。 我们可以通过多次测试，将测试结果求平均，或者统计一个曲线图，只要保证我们的平均值是在合理范围之内，而且波动不是很大，这种情况下，性能测试就是通过的</p>
</li>
<li><p>多 JVM 情况下的影响 如果我们的服务器有多个 Java 应用服务，部署在不同的 Tomcat 下，这就意味着我们的服务器会有多个 JVM。任意一个 JVM 都拥有整个系统的资源使用权。如果一台机器上只部署单独的一个 JVM，在做性能测试时，测试结果很好，或者你调优的效果很好，但在一台机器多个 JVM 的情况下就不一定了。所以我们应该尽量避免线上环境中一台机器部署多个 JVM 的情况。</p>
</li>
</ol>
<h3 id="6-不好分析"><a href="#6-不好分析" class="headerlink" title="6.不好分析"></a>6.不好分析</h3><p>吞吐量和延时是共同出现的，往往压测的时候没有标准可言，我们不知道性能的峰值是多少，这次Gateway因为使用的官方框架，所以有了可以参考的标准。</p>
<ol>
<li>不知道具体哪里出现问题，只能一步一步打印耗时</li>
<li>不好调优</li>
<li>优化代码</li>
<li>优化设计</li>
<li>优化算法</li>
<li>优化参数</li>
<li>保底做法：限流</li>
</ol>
<h3 id="7-Linux命令的使用"><a href="#7-Linux命令的使用" class="headerlink" title="7.Linux命令的使用"></a>7.Linux命令的使用</h3><p>top实时显示正在执行进程的 CPU 使用率、内存使用率以及系统负载等信息 mpstat -P ALL 查看多核CPU分核性能 vmstat 是一款指定采样周期和次数的功能性监测工具，我们可以使用它监控进程上下文切换的情况。 pidstat 命令可以监测到具体线程的上下文切换，监测线程的性能。</p>
<h3 id="8-优化的方向"><a href="#8-优化的方向" class="headerlink" title="8.优化的方向"></a>8.优化的方向</h3><h4 id="8-1-Java编程"><a href="#8-1-Java编程" class="headerlink" title="8.1 Java编程"></a>8.1 Java编程</h4><ol>
<li>从线程安全，数据变更的角度去选择String，StringBuffer，StringBuilder，重复性数据可使用String.intern 节省内存空间，慎用Split()，防止正则表达式带来的回溯问题。</li>
<li>处理大数据的集合时，尽量使用 Stream 的迭代方式进行处理。</li>
<li>使用 HashMap 时，可以结合自己的场景来设置初始容量和加载因子两个参数</li>
<li>try-catch 代码段会产生额外的性能开销，会影响 JVM 对代码进行优化，建议仅捕获有必要的代码段</li>
<li>Java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作，尽量直接抛出异常</li>
</ol>
<h4 id="8-2-多线程性能调优"><a href="#8-2-多线程性能调优" class="headerlink" title="8.2 多线程性能调优"></a>8.2 多线程性能调优</h4><ol>
<li>减少锁的持有时间</li>
<li>降低锁的粒度（读写锁分离，缩小锁住的代码段）</li>
<li>volatile关键字可以保障可见性及有序性，不会导致上下文切换，开销比较小。</li>
<li>合理地设置线程池大小，避免创建过多线程</li>
<li>减少 Java 虚拟机的垃圾回收</li>
<li>并发容器的使用，如Hashtable和ConcurrentHashMap，ArrayList和CopyOnWriteArrayList</li>
</ol>
<h4 id="8-3-JVM性能监测及调优"><a href="#8-3-JVM性能监测及调优" class="headerlink" title="8.3 JVM性能监测及调优"></a>8.3 JVM性能监测及调优</h4><p>GC 调优策略</p>
<ol>
<li>调整堆内存降低 Full GC 的频率</li>
<li>调整年轻代降低 Minor GC 频率</li>
<li>选择合适的 GC 回收器</li>
</ol>
<p>JVM命令 jstack 命令查看线程堆栈的运行情况，导出 Java 应用程序中的线程堆栈信息，排查一些死锁的异常。 jstat 可以监测 Java 应用程序的实时运行情况，包括堆内存信息以及垃圾回收信息。 jmap 查看堆内存初始化配置信息以及堆内存的使用情况，输出堆内存中的对象信息，包括产生了哪些对象，对象数量多少等。</p>
<h4 id="8-4-设计模式调优"><a href="#8-4-设计模式调优" class="headerlink" title="8.4 设计模式调优"></a>8.4 设计模式调优</h4><h4 id="8-5-数据库性能调优（只以Redis为例，缺失了传统数据库的分析）"><a href="#8-5-数据库性能调优（只以Redis为例，缺失了传统数据库的分析）" class="headerlink" title="8.5 数据库性能调优（只以Redis为例，缺失了传统数据库的分析）"></a>8.5 数据库性能调优（只以Redis为例，缺失了传统数据库的分析）</h4><h3 id="9-Java命令的参数"><a href="#9-Java命令的参数" class="headerlink" title="9.Java命令的参数"></a>9.Java命令的参数</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/20200622105620377.png"
                      alt="20200622105620377"
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Java默认接口方法引发的多继承问题</title>
    <url>/2021/06/28/java%E9%BB%98%E8%AE%A4%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E5%BC%95%E5%8F%91%E7%9A%84%E5%A4%9A%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Java默认接口方法引发的多继承问题 Java8中的抽象类和抽象接口区别 首先,一个类只能继承一个抽象类,但是一个类可以实现多个接口 其次,一个抽象类可以通过实例变量(字段)保存一个通用状态,而接ロ是不能有实例变量的 熟悉Java或者看过Java面试题的都知道，Java不支持多继承，原因是:</p>
<ul>
<li>安全性的考虑，如果子类继承的多个父类里面有相同的方法或者属性，子类将不知道具体要继承哪个。</li>
<li>Java提供了接口和内部类以达到实现多继承功能，弥补单继承的缺陷。</li>
</ul>
<p>所以在实际开发中可以通过多个接口来灵活实现，但Java8中支持接口编写默认方法，变相等于可以继承多个类。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface A&#123;</span><br><span class="line">    default void a()&#123;</span><br><span class="line">        System.out.println(&quot;a&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">abstract class B&#123;</span><br><span class="line">    public void b()&#123;</span><br><span class="line">        System.out.println(&quot;b&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C extends B implements A&#123;</span><br><span class="line">    public void c()&#123;</span><br><span class="line">        System.out.println(&quot;c&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Java8的这种改进源于接口升级迭代存在的问题，一旦在接口中新加入方法，异味着所有实现该接口的类都要实现该方法，例如List接口增加新的方法， ArrayList ，List, LinkedList, Vector以及所有相关的类都要发生变化，这简直就是灾难，对整个项目会产生非常大的影响，所以我理解Java开发者为了加入新的功能而又不影响现有代码的运行，容许接口中来编写默认方法，默认方法在Java8的API中已经大量地使用了。如大量使用的co11ection接口的 stream方法就是默认方法。list接口的sort方法也是默认方法。很多函数式接口,比如 Predicate、 Functionl以及 Comparator也引人了新的默认方法,比如 Predicate.and或者 Function. andthen，list新加入的sort排序。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">default void sort(Comparator&lt;? super E&gt; c) &#123;</span><br><span class="line">        Object[] a = this.toArray();</span><br><span class="line">        Arrays.sort(a, (Comparator) c);</span><br><span class="line">        ListIterator&lt;E&gt; i = this.listIterator();</span><br><span class="line">        for (Object e : a) &#123;</span><br><span class="line">            i.next();</span><br><span class="line">            i.set((E) e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>由于接口现在可以提供带实现的方法，这意味着Java已经在某种程度上实现了多继承，如果实现类也实现了同样的方法默认方法会被覆盖吗，Java8中已经定义了一些规则和机制来处理这些问题。 如果一个类使用相同的函数签名从多个地方(比如另一个类或接口)继承了方法,通过三条规则可以进行判断。 (1)类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。 (2)如果无法依据第一条进行判断,那么子接口的优先级更高:函数签名相同时,优先选择拥有最具体实现的默认方法的接口,即如果B继承了A,那么B就比A更加具体。 (3)最后,如果还是无法判断,继承了多个接口的类必须通过显式覆盖和调用期望的方法。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>jQyery选择器之基本选择器和层次选择器</title>
    <url>/2017/02/27/jqyery-article64/</url>
    <content><![CDATA[<h1 id="jQyery选择器之基本选择器和层次选择器"><a href="#jQyery选择器之基本选择器和层次选择器" class="headerlink" title="jQyery选择器之基本选择器和层次选择器"></a>jQyery选择器之基本选择器和层次选择器</h1><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a>1. 基本选择器</h3><p>选择器</p>
<p>描述</p>
<p>返回值</p>
<p><code>#ID</code></p>
<p>根据元素的ID属性进行匹配</p>
<p>单个jQuery对象</p>
<p><code>.class</code></p>
<p>根据元素的class属性进行匹配</p>
<p>jQuery对象数组</p>
<p><code>element</code></p>
<p>根据元素的标签名进行匹配</p>
<p>jQuery对象数组</p>
<p><code>selector1，selector2...</code></p>
<p>将每个选择器匹配的结果合并后一起返回</p>
<p>jQuery对象数组</p>
<p><code>*</code></p>
<p>匹配页面的所有元素，包括html，body，head等</p>
<p>jQuery对象数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;jQuery基本选择器&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.x.js&quot;&gt; &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;idDiv&quot;&gt;DOM对象与jQuery对象的相互转化&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;classDiv&quot;&gt;jQuery对象不能直接使用DOM对象的方法，&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;classDiv&quot;&gt;但可以通过将jQuery对象转换成DOM对象后再调用其方法。&lt;/div&gt;</span><br><span class="line">    &lt;span class=&quot;classSpan&quot;&gt;基本选择器是jQuery中最常用的选择器&lt;/span&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        $(function(e)&#123;</span><br><span class="line">            $(&quot;#idDiv&quot;).css(&quot;color&quot;,&quot;blue&quot;);</span><br><span class="line">            $(&quot;.classDiv&quot;).css(&quot;background-color&quot;,&quot;#dddddd&quot;);</span><br><span class="line">            $(&quot;span&quot;).css(&quot;background-color&quot;,&quot;gray&quot;).css(&quot;color&quot;,&quot;white&quot;);</span><br><span class="line">            $(&quot;*&quot;).css(&quot;font-size&quot;,&quot;20px&quot;);</span><br><span class="line">            $(&quot;#idDiv,.classSpan&quot;).css(&quot;font-style&quot;,&quot;italic&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2. 层次选择器"></a>2. 层次选择器</h3><p>选择器</p>
<p>描述</p>
<p>返回值</p>
<p><code>$(&quot;ancetor descendant&quot;)</code></p>
<p>选取ancestor元素中的所有子元素</p>
<p>jQuery对象数组</p>
<p><code>$(&quot;parent&gt;child&quot;)</code></p>
<p>选取parent元素中的直接子元素</p>
<p>jQuery对象数组</p>
<p><code>$(&quot;prev+next&quot;)</code></p>
<p>选取紧邻prev元素之后的next元素</p>
<p>jQuery对象数组</p>
<p><code>$(&quot;prev~siblings&quot;)</code></p>
<p>选取prev元素之后的siblings兄弟元素</p>
<p>jQuery对象数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;jQuery层次选择器&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.x.js&quot;&gt; &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        搜索条件&lt;input name=&quot;search&quot; /&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;label&gt;用户名:&lt;/label&gt;</span><br><span class="line">          &lt;input name=&quot;useName&quot; /&gt;</span><br><span class="line">          &lt;fieldset&gt;</span><br><span class="line">              &lt;label&gt;密　码:&lt;/label&gt;</span><br><span class="line">              &lt;input name=&quot;password&quot; /&gt;</span><br><span class="line">         &lt;/fieldset&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        身份证号：&lt;input name=&quot;none&quot; /&gt;&lt;br/&gt;</span><br><span class="line">        联系电话：&lt;input name=&quot;none&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        $(function(e)&#123;</span><br><span class="line">            $(&quot;form input&quot;).css(&quot;width&quot;,&quot;200px&quot;);</span><br><span class="line">            $(&quot;form &gt; input&quot;).css(&quot;background&quot;,&quot;pink&quot;);</span><br><span class="line">            $(&quot;label + input&quot;).css(&quot;border-color&quot;,&quot;blue&quot;);</span><br><span class="line">            //$(&quot;label&quot;).next(&quot;input&quot;).css(&quot;border-color&quot;,&quot;blue&quot;);</span><br><span class="line">            $(&quot;form ~ input&quot;).css(&quot;border-bottom-width&quot;,&quot;8px&quot;);</span><br><span class="line">            //$(&quot;form&quot;).nextAll(&quot;input&quot;).css(&quot;border-bottom-width&quot;,&quot;4px&quot;);</span><br><span class="line">            $(&quot;*&quot;).css(&quot;padding-top&quot;,&quot;3px&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/jquery1.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaSciprt</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 提交form表单和submit提交的区别</title>
    <url>/2017/01/30/js-article0005/</url>
    <content><![CDATA[<h3 id="JS-提交form表单-JS-提交form表单-JS-提交form表单；JS-提交form表单；JS-提交form表单；JS-提交form表单；JS-提交form表单-JS-提交form表单；JS-提交form表单；JS-提交form表单"><a href="#JS-提交form表单-JS-提交form表单-JS-提交form表单；JS-提交form表单；JS-提交form表单；JS-提交form表单；JS-提交form表单-JS-提交form表单；JS-提交form表单；JS-提交form表单" class="headerlink" title="JS 提交form表单;JS 提交form表单;JS 提交form表单；JS 提交form表单；JS 提交form表单；JS 提交form表单；JS 提交form表单;JS 提交form表单；JS 提交form表单；JS 提交form表单"></a>JS 提交form表单;JS 提交form表单;JS 提交form表单；JS 提交form表单；JS 提交form表单；JS 提交form表单；JS 提交form表单;JS 提交form表单；JS 提交form表单；JS 提交form表单</h3><p><strong>源码实例</strong> 1. <strong>javascript 页面加裁时自动提交表单</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Form表单：</span><br><span class="line"></span><br><span class="line">&lt;form id=&quot;myform&quot; action=&quot;a.php&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交表单&quot; /&gt;&lt;/form&gt;javascript 代码：</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function validate()&#123;</span><br><span class="line">document.getElementByIdx_x(&#x27;myform&#x27;).submit();</span><br><span class="line">&#125;</span><br><span class="line">window.load=validate();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注：用Javascript提交表单时最好form里的元素不要用id&#x3D;”submit”或name&#x3D;”submit”, 例如: <code>&amp;lt;input type=&quot;button&quot; name=&quot;submit&quot; /&amp;gt;或&amp;lt;input type=&quot;button&quot; id=&quot;submit&quot; /&amp;gt;</code> 这样JS可能不兼容各种浏览器，会导致JS报错。</p>
</blockquote>
<ol>
<li><strong>超链接提交表单</strong></li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Form表单：</span><br><span class="line"></span><br><span class="line">&lt;form id=&quot;myform&quot; action=&quot;a.php&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;test&quot; value=&quot;name&quot; /&gt;&lt;/form&gt;&lt;a&gt;提交&lt;/a&gt;</span><br><span class="line">javascript 代码：</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function validate()&#123;</span><br><span class="line">document.getElementByIdx_x(&#x27;myform&#x27;).submit();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>用javascript其实真的很方便的去干某些事情！</strong></li>
</ul>
<h3 id="js表单提交和submit提交的区别"><a href="#js表单提交和submit提交的区别" class="headerlink" title="js表单提交和submit提交的区别"></a>js表单提交和submit提交的区别</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">无标题文档</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">document.getElementById(&quot;myform&quot;).submit();</span><br><span class="line">alert(11);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;form id=&quot;myform&quot; action=&quot;b.php&quot; method=&quot;get&quot; name=&quot;myfrom&quot;&gt;&lt;input name=&quot;pwd&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;input name=&quot;sub&quot; type=&quot;submit&quot; value=&quot;111&quot; /&gt;</span><br><span class="line">&lt;input name=&quot;btn&quot; type=&quot;button&quot; value=&quot;btn&quot; /&gt;&lt;/form&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>注意：get方式提交表单时 action里面不能用url传值, post则可以这样传</strong></li>
</ul>
<blockquote>
<p>js提交和submit按钮提交的区别: 1. js提交表单时不会带上 submit 按钮的值(因为没有被单击) 所有浏览器 2. input 回车提交 w3c浏览器会带上submit按钮的值，ie6则不会带解决办 法：增加一个hidden域,用这个来判断，无论用哪种方式提交都会有值</p>
</blockquote>
<ul>
<li>submit按钮上绑定提交事件: 即:<input type="submit" name="btn" value="btn" onclick="test()" /> 都会带上submit的值, 用js提交都检测不到onsubmit状态 w3c： 提交一次 ie6: 分两次提交，先js在form提交 &gt; 解决办法：如果按钮为submit则 检测时用onsubmit事件检测 如果按钮为button，则检测通过后在触发submit事件 一定不要用js提交表单，然后又用onsubmit去检测 单纯的用js提交表单, alert, ff下阻塞表单的提交</li>
</ul>
<h4 id="喜欢的可以查看我笔记里的原版内容"><a href="#喜欢的可以查看我笔记里的原版内容" class="headerlink" title="喜欢的可以查看我笔记里的原版内容"></a><a class="link"   href="http://84b7da85.wiz01.com/share/s/24JZG50B3QHR23mv6A1JgkeG2z9Ncq3zV1ce1qEx_B11j7qW"  title="喜欢的可以查看我笔记里的原版内容">喜欢的可以查看我笔记里的原版内容 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JS实现可移动的Div</title>
    <url>/2017/04/30/js-article75/</url>
    <content><![CDATA[<p>使用JS实现可移动的Div</p>
<h3 id="这是老师上课要求做的，使用JS实现div的移动，其实就是获取鼠标和div的位置，然后进行修改，代码如下。想要试用一下的效果的，可以看最下面，我把HTML代码直接放到md文档中，应该可以直接编译。"><a href="#这是老师上课要求做的，使用JS实现div的移动，其实就是获取鼠标和div的位置，然后进行修改，代码如下。想要试用一下的效果的，可以看最下面，我把HTML代码直接放到md文档中，应该可以直接编译。" class="headerlink" title="这是老师上课要求做的，使用JS实现div的移动，其实就是获取鼠标和div的位置，然后进行修改，代码如下。想要试用一下的效果的，可以看最下面，我把HTML代码直接放到md文档中，应该可以直接编译。"></a>这是老师上课要求做的，使用JS实现div的移动，其实就是获取鼠标和div的位置，然后进行修改，代码如下。想要试用一下的效果的，可以看最下面，我把HTML代码直接放到md文档中，应该可以直接编译。</h3><h3 id="直接放到md中，整个页面就乱了，我还是新开一个页，想调试的可以戳这里www-rain1024-com-js75-html"><a href="#直接放到md中，整个页面就乱了，我还是新开一个页，想调试的可以戳这里www-rain1024-com-js75-html" class="headerlink" title="直接放到md中，整个页面就乱了，我还是新开一个页，想调试的可以戳这里www.rain1024.com-js75.html"></a>直接放到md中，整个页面就乱了，我还是新开一个页，想调试的可以戳这里<a class="link"   href="http://www.rain1024.com/page/js75.html" >www.rain1024.com-js75.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="下面是代码"><a href="#下面是代码" class="headerlink" title="下面是代码"></a>下面是代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var oldLeft,oldMouseLeft;</span><br><span class="line">    var oldRight,oldMouseRight;</span><br><span class="line">    var isDown=false;</span><br><span class="line">    function mousedown(e)&#123;</span><br><span class="line">        oldLeft=document.getElementById(&#x27;div1&#x27;).style.left;</span><br><span class="line">        oldMouseLeft= e.clientX;</span><br><span class="line">        oldRight=document.getElementById(&#x27;div1&#x27;).style.top;</span><br><span class="line">        oldMouseRight= e.clientY;</span><br><span class="line">        isDown = true;</span><br><span class="line">    &#125;</span><br><span class="line">    function mousemove(e)&#123;</span><br><span class="line">        if(isDown)&#123;</span><br><span class="line">            var newMouseLeft= e.clientX;</span><br><span class="line">            var newLeft=parseInt(oldLeft)+parseInt(newMouseLeft)-parseInt(oldMouseLeft)+&quot;px&quot;;</span><br><span class="line">            var newMouseRight= e.clientY;</span><br><span class="line">            var newRight=parseInt(oldRight)+parseInt(newMouseRight)-parseInt(oldMouseRight)+&quot;px&quot;;</span><br><span class="line">            document.getElementById(&#x27;div1&#x27;).style.left=newLeft;</span><br><span class="line">            document.getElementById(&#x27;div1&#x27;).style.top=newRight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function mouseup()&#123;</span><br><span class="line">        isDown=false;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot; style=&quot;background-color: blue;position: absolute;left: 100px;top: 100px;width: 100px;height: 100px&quot;</span><br><span class="line">     onmousedown=&quot;mousedown(event)&quot; onmousemove=&quot;mousemove(event)&quot;</span><br><span class="line">        onmouseup=&quot;mouseup()&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--onmousedown=&quot;getXY(event);&quot;--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现多个Div的切换显示</title>
    <url>/2017/04/30/js-article76/</url>
    <content><![CDATA[<p>JS实现多个Div的切换显示</p>
<h3 id="经常会在网页中看到有个便签里有多个按钮，每个按钮都能显示不同的内容，其实这就是多个Div放在一起然后轮流显示，下面是代码，直接查看代码效果的，可以戳这里www-rain1024-com-js76"><a href="#经常会在网页中看到有个便签里有多个按钮，每个按钮都能显示不同的内容，其实这就是多个Div放在一起然后轮流显示，下面是代码，直接查看代码效果的，可以戳这里www-rain1024-com-js76" class="headerlink" title="经常会在网页中看到有个便签里有多个按钮，每个按钮都能显示不同的内容，其实这就是多个Div放在一起然后轮流显示，下面是代码，直接查看代码效果的，可以戳这里www.rain1024.com-js76"></a>经常会在网页中看到有个便签里有多个按钮，每个按钮都能显示不同的内容，其实这就是多个Div放在一起然后轮流显示，下面是代码，直接查看代码效果的，可以戳这里<a class="link"   href="http://www.rain1024.com/page/js76.html" >www.rain1024.com-js76 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="下面是代码"><a href="#下面是代码" class="headerlink" title="下面是代码"></a>下面是代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //    设置每秒刷新一次</span><br><span class="line">//    function myshuaxing() &#123;</span><br><span class="line">//        window.location.reload();</span><br><span class="line">//    &#125;</span><br><span class="line">//    setTimeout(&#x27;myshuaxing()&#x27;,2000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .all&#123;</span><br><span class="line">        width: 306px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: #616378;</span><br><span class="line">        border-width: 2px;</span><br><span class="line">        border-style: solid;</span><br><span class="line">        border-color: #8C8EA3;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu1&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 25px;</span><br><span class="line">        background-color: #CCCCD4;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-right: 1px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu2&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 25px;</span><br><span class="line">        background-color: #FFFFFF;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-right: 2px;</span><br><span class="line">        margin-left: 2px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .menu3&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 25px;</span><br><span class="line">        background-color: #FFFFFF;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-left: 1px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .content1&#123;</span><br><span class="line">        width: 306px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        padding-top: 100px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        background-color: #CCCCD4;</span><br><span class="line">    &#125;</span><br><span class="line">    .content2&#123;</span><br><span class="line">        width: 306px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        padding-top: 100px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        background-color: #CCCCD4;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .content3&#123;</span><br><span class="line">        width: 306px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        padding-top: 100px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        background-color: #CCCCD4;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function display(value)&#123;</span><br><span class="line">        if(value==1)&#123;</span><br><span class="line">            document.getElementById(&#x27;menu1&#x27;).style.backgroundColor=&#x27;#CCCCD4&#x27;;</span><br><span class="line">            document.getElementById(&#x27;menu2&#x27;).style.backgroundColor=&#x27;#FFFFFF&#x27;;</span><br><span class="line">            document.getElementById(&#x27;menu3&#x27;).style.backgroundColor=&#x27;#FFFFFF&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content1&#x27;).style.display=&#x27;block&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content2&#x27;).style.display=&#x27;none&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content3&#x27;).style.display=&#x27;none&#x27;;</span><br><span class="line">        &#125;else if(value==2)&#123;</span><br><span class="line">            document.getElementById(&#x27;menu1&#x27;).style.backgroundColor=&#x27;#FFFFFF&#x27;;</span><br><span class="line">            document.getElementById(&#x27;menu2&#x27;).style.backgroundColor=&#x27;#CCCCD4&#x27;;</span><br><span class="line">            document.getElementById(&#x27;menu3&#x27;).style.backgroundColor=&#x27;#FFFFFF&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content1&#x27;).style.display=&#x27;none&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content2&#x27;).style.display=&#x27;block&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content3&#x27;).style.display=&#x27;none&#x27;;</span><br><span class="line">        &#125;else if(value==3)&#123;</span><br><span class="line">            document.getElementById(&#x27;menu1&#x27;).style.backgroundColor=&#x27;#FFFFFF&#x27;;</span><br><span class="line">            document.getElementById(&#x27;menu2&#x27;).style.backgroundColor=&#x27;#FFFFFF&#x27;;</span><br><span class="line">            document.getElementById(&#x27;menu3&#x27;).style.backgroundColor=&#x27;#CCCCD4&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content1&#x27;).style.display=&#x27;none&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content2&#x27;).style.display=&#x27;none&#x27;;</span><br><span class="line">            document.getElementById(&#x27;content3&#x27;).style.display=&#x27;block&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;all&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;menu1&quot; class=&quot;menu1&quot; onclick=&quot;display(1)&quot;&gt;tab1&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;menu2&quot; class=&quot;menu2&quot; onclick=&quot;display(2)&quot;&gt;tab2&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;menu3&quot; class=&quot;menu3&quot; onclick=&quot;display(3)&quot;&gt;tab3&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;content1&quot; class=&quot;content1&quot;&gt;&lt;h1&gt;123&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;content2&quot; class=&quot;content2&quot;&gt;&lt;h1&gt;456&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;content3&quot; class=&quot;content3&quot;&gt;&lt;h1&gt;789&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现跑马灯效果</title>
    <url>/2017/04/30/js-article77/</url>
    <content><![CDATA[<p>JS实现跑马灯效果</p>
<h3 id="上课无聊，没事写一个玩一玩，使用红黄绿三种也是切换，用js写一个颜色判断的函数，再用setInterval-39-color-39-100-调用函数，100为0-1秒，下面是代码，想要看效果的戳这里www-rain1024-com-js77"><a href="#上课无聊，没事写一个玩一玩，使用红黄绿三种也是切换，用js写一个颜色判断的函数，再用setInterval-39-color-39-100-调用函数，100为0-1秒，下面是代码，想要看效果的戳这里www-rain1024-com-js77" class="headerlink" title="上课无聊，没事写一个玩一玩，使用红黄绿三种也是切换，用js写一个颜色判断的函数，再用setInterval(&#39;color()&#39;,100);调用函数，100为0.1秒，下面是代码，想要看效果的戳这里www.rain1024.com-js77"></a>上课无聊，没事写一个玩一玩，使用红黄绿三种也是切换，用js写一个颜色判断的函数，再用<code>setInterval(&#39;color()&#39;,100);</code>调用函数，100为0.1秒，下面是代码，想要看效果的戳这里<a class="link"   href="http://www.rain1024.com/page/js77.html" >www.rain1024.com-js77 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="下面是代码"><a href="#下面是代码" class="headerlink" title="下面是代码"></a>下面是代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content&#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: auto;</span><br><span class="line">        margin-left: 50px;</span><br><span class="line">        color: chartreuse;</span><br><span class="line">        float:left;</span><br><span class="line">    &#125;</span><br><span class="line">    .content2&#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: auto;</span><br><span class="line">        color: chartreuse;</span><br><span class="line">    &#125;</span><br><span class="line">    .figure&#123;</span><br><span class="line">        width: 800px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        /*background-color: #FFFFFF;*/</span><br><span class="line">    &#125;</span><br><span class="line">    .all&#123;</span><br><span class="line">        width: 900px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //    设置每秒刷新一次</span><br><span class="line">    function myshuaxing() &#123;</span><br><span class="line">        window.location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">//    setTimeout(&#x27;fun()&#x27;,2000);</span><br><span class="line">    setInterval(&#x27;color()&#x27;,100);</span><br><span class="line">//    setInterval(&#x27;color_out()&#x27;,1000);</span><br><span class="line">//    setTimeout(&#x27;color_out()&#x27;,1000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//    setTimeout(&#x27;color_over()&#x27;,2000);</span><br><span class="line">//    setTimeout(&#x27;color_out()&#x27;,2000);</span><br><span class="line">//    alert(&#x27;123&#x27;);</span><br><span class="line">    function fun(value)&#123;</span><br><span class="line">        var value = prompt(&#x27;324&#x27;);</span><br><span class="line">        if(value==1)&#123;</span><br><span class="line">            document.getElementById(&#x27;state&#x27;).innerHTML = &#x27;true&#x27;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            document.getElementById(&#x27;state&#x27;).innerHTML = &#x27;false&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function color()&#123;</span><br><span class="line">        var show = document.getElementById(&#x27;show&#x27;).innerText;</span><br><span class="line">        var sum = document.getElementById(&#x27;number&#x27;).innerText;</span><br><span class="line">        if(show==1)&#123;</span><br><span class="line">            var value = document.getElementById(&#x27;content&#x27;);</span><br><span class="line">//        alert(value.style.backgroundColor);</span><br><span class="line">            value.style.backgroundColor=&#x27;red&#x27;;</span><br><span class="line">            document.getElementById(&#x27;show&#x27;).innerText = 2;</span><br><span class="line">            var value = document.getElementById(&#x27;content2&#x27;);</span><br><span class="line">            value.style.backgroundColor = &#x27;#FFFFFF&#x27;;</span><br><span class="line">            var value = document.getElementById(&#x27;content3&#x27;);</span><br><span class="line">            value.style.backgroundColor = &#x27;#FFFFFF&#x27;;</span><br><span class="line">        &#125;else if(show==2)&#123;</span><br><span class="line">            var value = document.getElementById(&#x27;content2&#x27;);</span><br><span class="line">//        alert(value.style.backgroundColor);</span><br><span class="line">            value.style.backgroundColor=&#x27;yellow&#x27;;</span><br><span class="line">            document.getElementById(&#x27;show&#x27;).innerText = 3;</span><br><span class="line">            var value = document.getElementById(&#x27;content&#x27;);</span><br><span class="line">            value.style.backgroundColor = &#x27;#FFFFFF&#x27;;</span><br><span class="line">            var value = document.getElementById(&#x27;content3&#x27;);</span><br><span class="line">            value.style.backgroundColor = &#x27;#FFFFFF&#x27;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            var value = document.getElementById(&#x27;content3&#x27;);</span><br><span class="line">//        alert(value.style.backgroundColor);</span><br><span class="line">            value.style.backgroundColor=&#x27;chartreuse&#x27;;</span><br><span class="line">            document.getElementById(&#x27;show&#x27;).innerText = 1;</span><br><span class="line">            var value = document.getElementById(&#x27;content&#x27;);</span><br><span class="line">            value.style.backgroundColor = &#x27;#FFFFFF&#x27;;</span><br><span class="line">            var value = document.getElementById(&#x27;content2&#x27;);</span><br><span class="line">            value.style.backgroundColor = &#x27;#FFFFFF&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = parseInt(sum);</span><br><span class="line">        sum = sum + 1;</span><br><span class="line">        document.getElementById(&#x27;number&#x27;).innerText = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    function color_over()&#123;</span><br><span class="line">//        document.getElementById(&#x27;state&#x27;).innerHTML = &#x27;true&#x27;;</span><br><span class="line">        var value = document.getElementById(&#x27;content&#x27;);</span><br><span class="line">        value.style.backgroundColor=&quot;blue&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function color_out()&#123;</span><br><span class="line">    //        document.getElementById(&#x27;state&#x27;).innerHTML = &#x27;true&#x27;;</span><br><span class="line">        var value = document.getElementById(&#x27;content&#x27;);</span><br><span class="line">        value.style.backgroundColor=&quot;red&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function counter()&#123;</span><br><span class="line">        var value1 = document.getElementById(&#x27;value1&#x27;).value;</span><br><span class="line">        var value2 = document.getElementById(&#x27;value2&#x27;).value;</span><br><span class="line">        var fig = document.getElementById(&#x27;fig&#x27;).value;</span><br><span class="line">        var result = 0;</span><br><span class="line">        value1 = parseFloat(value1);</span><br><span class="line">        value2 = parseFloat(value2);</span><br><span class="line">        if(fig==1)&#123; //+</span><br><span class="line">            result = value1 + value2;</span><br><span class="line">        &#125;else if(fig==2)&#123; //-</span><br><span class="line">            result = value1 - value2;</span><br><span class="line">        &#125;else if(fig==3)&#123;  //*</span><br><span class="line">            result = value1 * value2;</span><br><span class="line">        &#125;else if(fig==4)&#123;  // /</span><br><span class="line">            result = value1 / value2;</span><br><span class="line">        &#125;</span><br><span class="line">        document.getElementById(&#x27;result&#x27;).value = result;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">    &lt;label id=&quot;show&quot; style=&quot;display: none&quot;&gt;1&lt;/label&gt;</span><br><span class="line">    已刷新次数：&lt;label id=&quot;number&quot; &gt;0&lt;/label&gt;</span><br><span class="line">&lt;label id=&quot;state&quot; style=&quot;color: red;font-size: 30px;&quot;&gt;&lt;/label&gt;&lt;/div&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;div class=&quot;all&quot;&gt;</span><br><span class="line">&lt;div class=&quot;content&quot; id=&quot;content&quot; onmouseover=&quot;color_over();&quot; onmouseout=&quot;color_out();&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;content&quot; id=&quot;content2&quot; onmouseover=&quot;color_over();&quot; onmouseout=&quot;color_out();&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;content&quot; id=&quot;content3&quot; onmouseover=&quot;color_over();&quot; onmouseout=&quot;color_out();&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaSciprt</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka中再均衡的发生过程</title>
    <url>/2021/03/09/kafka%E4%B8%AD%E5%86%8D%E5%9D%87%E8%A1%A1%E7%9A%84%E5%8F%91%E7%94%9F%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Kafka中再均衡的发生过程"><a href="#Kafka中再均衡的发生过程" class="headerlink" title="Kafka中再均衡的发生过程"></a>Kafka中再均衡的发生过程</h1><h4 id="Kafka中消费者以消费组的形式存在，消费组来消费每个主题中分区的数据，因为主题中的分区数和消费者数量并不一一对应，这时候就涉及到如何为每个消费者分配分区，而当有消费者在中途退出时，就会触发再均衡的发生，再重新为剩余的消费者分配分区。每个消费组在服务端对应一个GroupCoordinator对其进行管理，而消费者客户端中的ConsumerCoordinator组件负责与GroupCoordinator进行交互，它们负责执行分区的分配，以及消费者再均衡的操作。"><a href="#Kafka中消费者以消费组的形式存在，消费组来消费每个主题中分区的数据，因为主题中的分区数和消费者数量并不一一对应，这时候就涉及到如何为每个消费者分配分区，而当有消费者在中途退出时，就会触发再均衡的发生，再重新为剩余的消费者分配分区。每个消费组在服务端对应一个GroupCoordinator对其进行管理，而消费者客户端中的ConsumerCoordinator组件负责与GroupCoordinator进行交互，它们负责执行分区的分配，以及消费者再均衡的操作。" class="headerlink" title="Kafka中消费者以消费组的形式存在，消费组来消费每个主题中分区的数据，因为主题中的分区数和消费者数量并不一一对应，这时候就涉及到如何为每个消费者分配分区，而当有消费者在中途退出时，就会触发再均衡的发生，再重新为剩余的消费者分配分区。每个消费组在服务端对应一个GroupCoordinator对其进行管理，而消费者客户端中的ConsumerCoordinator组件负责与GroupCoordinator进行交互，它们负责执行分区的分配，以及消费者再均衡的操作。"></a>Kafka中消费者以消费组的形式存在，消费组来消费每个主题中分区的数据，因为主题中的分区数和消费者数量并不一一对应，这时候就涉及到如何为每个消费者分配分区，而当有消费者在中途退出时，就会触发再均衡的发生，再重新为剩余的消费者分配分区。每个消费组在服务端对应一个GroupCoordinator对其进行管理，而消费者客户端中的ConsumerCoordinator组件负责与GroupCoordinator进行交互，它们负责执行分区的分配，以及消费者再均衡的操作。</h4><h4 id="目前在以下几种情况会触发再均衡操作。"><a href="#目前在以下几种情况会触发再均衡操作。" class="headerlink" title="目前在以下几种情况会触发再均衡操作。"></a>目前在以下几种情况会触发再均衡操作。</h4><ol>
<li><h5 id="有新的消费者加入消费组。"><a href="#有新的消费者加入消费组。" class="headerlink" title="有新的消费者加入消费组。"></a>有新的消费者加入消费组。</h5></li>
<li><h5 id="消费者宕机下线。消费者并不一定需要真正下线-例如遇到长时间的GC、网络延迟等情况，导致消费者长时间未向GroupCoordinator-发送心跳，GroupCoordinator认为消费者已经下线。"><a href="#消费者宕机下线。消费者并不一定需要真正下线-例如遇到长时间的GC、网络延迟等情况，导致消费者长时间未向GroupCoordinator-发送心跳，GroupCoordinator认为消费者已经下线。" class="headerlink" title="消费者宕机下线。消费者并不一定需要真正下线,例如遇到长时间的GC、网络延迟等情况，导致消费者长时间未向GroupCoordinator 发送心跳，GroupCoordinator认为消费者已经下线。"></a>消费者宕机下线。消费者并不一定需要真正下线,例如遇到长时间的GC、网络延迟等情况，导致消费者长时间未向GroupCoordinator 发送心跳，GroupCoordinator认为消费者已经下线。</h5></li>
<li><h5 id="有消费者主动退出消费组。"><a href="#有消费者主动退出消费组。" class="headerlink" title="有消费者主动退出消费组。"></a>有消费者主动退出消费组。</h5></li>
<li><h5 id="消费组所对应的GroupCoorinator-节点发生了变更。"><a href="#消费组所对应的GroupCoorinator-节点发生了变更。" class="headerlink" title="消费组所对应的GroupCoorinator 节点发生了变更。"></a>消费组所对应的GroupCoorinator 节点发生了变更。</h5></li>
<li><h5 id="消费组内所订阅的任一主题或者主题的分区数量发生变化。"><a href="#消费组内所订阅的任一主题或者主题的分区数量发生变化。" class="headerlink" title="消费组内所订阅的任一主题或者主题的分区数量发生变化。"></a>消费组内所订阅的任一主题或者主题的分区数量发生变化。</h5></li>
</ol>
<h4 id="在服务刚启动时，需要确立消费者协调器和消费组协调器，并根据已有的分区规则进行分配。"><a href="#在服务刚启动时，需要确立消费者协调器和消费组协调器，并根据已有的分区规则进行分配。" class="headerlink" title="在服务刚启动时，需要确立消费者协调器和消费组协调器，并根据已有的分区规则进行分配。"></a>在服务刚启动时，需要确立消费者协调器和消费组协调器，并根据已有的分区规则进行分配。</h4><h4 id="1-查找GroupCoordinator"><a href="#1-查找GroupCoordinator" class="headerlink" title="1.查找GroupCoordinator"></a>1.查找GroupCoordinator</h4><h5 id="消费者需要连接它所属的GroupCoordinator所在broker，如果没有保存对应GroupCoordinator节点信息，则像集群中负载最小的节点发送请求来查找，Kafka通过计算可以在-consumer-offsets找到此分区对应的leader副本所在的节点，这个broker节点就是GroupCoordinator节点，让此broker节点即扮演GroupCoordinator节又扮演保存分区分配方案和组内消费者位移的角色，可以省去很多不必要的中间轮转所带来的开销。"><a href="#消费者需要连接它所属的GroupCoordinator所在broker，如果没有保存对应GroupCoordinator节点信息，则像集群中负载最小的节点发送请求来查找，Kafka通过计算可以在-consumer-offsets找到此分区对应的leader副本所在的节点，这个broker节点就是GroupCoordinator节点，让此broker节点即扮演GroupCoordinator节又扮演保存分区分配方案和组内消费者位移的角色，可以省去很多不必要的中间轮转所带来的开销。" class="headerlink" title="消费者需要连接它所属的GroupCoordinator所在broker，如果没有保存对应GroupCoordinator节点信息，则像集群中负载最小的节点发送请求来查找，Kafka通过计算可以在__consumer_offsets找到此分区对应的leader副本所在的节点，这个broker节点就是GroupCoordinator节点，让此broker节点即扮演GroupCoordinator节又扮演保存分区分配方案和组内消费者位移的角色，可以省去很多不必要的中间轮转所带来的开销。"></a>消费者需要连接它所属的GroupCoordinator所在broker，如果没有保存对应GroupCoordinator节点信息，则像集群中负载最小的节点发送请求来查找，Kafka通过计算可以在__consumer_offsets找到此分区对应的leader副本所在的节点，这个broker节点就是GroupCoordinator节点，让此broker节点即扮演GroupCoordinator节又扮演保存分区分配方案和组内消费者位移的角色，可以省去很多不必要的中间轮转所带来的开销。</h5><h4 id="2-加入GroupCoordinator"><a href="#2-加入GroupCoordinator" class="headerlink" title="2.加入GroupCoordinator"></a>2.加入GroupCoordinator</h4><h5 id="在得知GroupCoordinator节点位置后，消费者便发送加入请求，GroupCoordinator节点会选举消费组的leader，消费组leader会负责之后具体分区分配策略。由于各个客户端的分区策略都可以自定义配置，这时还要进行投票选举，Kafka主要有以下几种分区策略。"><a href="#在得知GroupCoordinator节点位置后，消费者便发送加入请求，GroupCoordinator节点会选举消费组的leader，消费组leader会负责之后具体分区分配策略。由于各个客户端的分区策略都可以自定义配置，这时还要进行投票选举，Kafka主要有以下几种分区策略。" class="headerlink" title="在得知GroupCoordinator节点位置后，消费者便发送加入请求，GroupCoordinator节点会选举消费组的leader，消费组leader会负责之后具体分区分配策略。由于各个客户端的分区策略都可以自定义配置，这时还要进行投票选举，Kafka主要有以下几种分区策略。"></a>在得知GroupCoordinator节点位置后，消费者便发送加入请求，GroupCoordinator节点会选举消费组的leader，消费组leader会负责之后具体分区分配策略。由于各个客户端的分区策略都可以自定义配置，这时还要进行投票选举，Kafka主要有以下几种分区策略。</h5><ul>
<li><h5 id="RangeAssignor分配策略：按照消费者总数和分区总数进行整除运算来获得一个跨度，然后将分区按照跨度进行平均分配，以保证分区尽可能均匀地分配给所有的消费者。"><a href="#RangeAssignor分配策略：按照消费者总数和分区总数进行整除运算来获得一个跨度，然后将分区按照跨度进行平均分配，以保证分区尽可能均匀地分配给所有的消费者。" class="headerlink" title="RangeAssignor分配策略：按照消费者总数和分区总数进行整除运算来获得一个跨度，然后将分区按照跨度进行平均分配，以保证分区尽可能均匀地分配给所有的消费者。"></a>RangeAssignor分配策略：按照消费者总数和分区总数进行整除运算来获得一个跨度，然后将分区按照跨度进行平均分配，以保证分区尽可能均匀地分配给所有的消费者。</h5></li>
<li><h5 id="RoundRobinAssignor分配策略：将消费组内所有消费者及消费者订阅的所有主题的分区按照字典序排序，然后通过轮询方式逐个将分区依次分配给每个消费者。"><a href="#RoundRobinAssignor分配策略：将消费组内所有消费者及消费者订阅的所有主题的分区按照字典序排序，然后通过轮询方式逐个将分区依次分配给每个消费者。" class="headerlink" title="RoundRobinAssignor分配策略：将消费组内所有消费者及消费者订阅的所有主题的分区按照字典序排序，然后通过轮询方式逐个将分区依次分配给每个消费者。"></a>RoundRobinAssignor分配策略：将消费组内所有消费者及消费者订阅的所有主题的分区按照字典序排序，然后通过轮询方式逐个将分区依次分配给每个消费者。</h5></li>
<li><h5 id="StickyAssignor分配策略：Sticky翻译为黏性的，主要保证分区的分配要尽可能均匀，分区的分配尽可能与上次分配的保持相同，"><a href="#StickyAssignor分配策略：Sticky翻译为黏性的，主要保证分区的分配要尽可能均匀，分区的分配尽可能与上次分配的保持相同，" class="headerlink" title="StickyAssignor分配策略：Sticky翻译为黏性的，主要保证分区的分配要尽可能均匀，分区的分配尽可能与上次分配的保持相同，"></a>StickyAssignor分配策略：Sticky翻译为黏性的，主要保证分区的分配要尽可能均匀，分区的分配尽可能与上次分配的保持相同，</h5></li>
</ul>
<blockquote>
<p>StickyAssignor要比前两种策略更加复杂，它的优势是，当再均衡发生，不需要将所有消费者已经分配好的分区，再重新打乱分配一边，尽量保证与上一次结果相似。Kafka也支持自定义分区分配策略，根据业务需要来进行加权或其他方面的考虑，甚至还可以打破Kafka默认消费逻辑，不必局限于一个分区只能被同一个消费组内的一个消费者消费。</p>
</blockquote>
<h4 id="3-正常工作阶段"><a href="#3-正常工作阶段" class="headerlink" title="3.正常工作阶段"></a>3.正常工作阶段</h4><h5 id="当消费组的leader通过GroupCoordinator将分区分配方案同步到各个消费者之后，消费者确定好拉取消息的起始位置，开始正常工作，消费者通过向GroupCoordinator发送心跳来维持它们与消费组关系，在正常时间间隔内发送心跳就是活跃的，发送心跳是一个独立的线程，也可以在轮询消息的空档发送心跳。"><a href="#当消费组的leader通过GroupCoordinator将分区分配方案同步到各个消费者之后，消费者确定好拉取消息的起始位置，开始正常工作，消费者通过向GroupCoordinator发送心跳来维持它们与消费组关系，在正常时间间隔内发送心跳就是活跃的，发送心跳是一个独立的线程，也可以在轮询消息的空档发送心跳。" class="headerlink" title="当消费组的leader通过GroupCoordinator将分区分配方案同步到各个消费者之后，消费者确定好拉取消息的起始位置，开始正常工作，消费者通过向GroupCoordinator发送心跳来维持它们与消费组关系，在正常时间间隔内发送心跳就是活跃的，发送心跳是一个独立的线程，也可以在轮询消息的空档发送心跳。"></a>当消费组的leader通过GroupCoordinator将分区分配方案同步到各个消费者之后，消费者确定好拉取消息的起始位置，开始正常工作，消费者通过向GroupCoordinator发送心跳来维持它们与消费组关系，在正常时间间隔内发送心跳就是活跃的，发送心跳是一个独立的线程，也可以在轮询消息的空档发送心跳。</h5><h5 id="消费者的心跳间隔时间由参数heartbeat-interval-ms指定，超过一定时间未发送心跳，就会被认为已经死亡。"><a href="#消费者的心跳间隔时间由参数heartbeat-interval-ms指定，超过一定时间未发送心跳，就会被认为已经死亡。" class="headerlink" title="消费者的心跳间隔时间由参数heartbeat.interval.ms指定，超过一定时间未发送心跳，就会被认为已经死亡。"></a>消费者的心跳间隔时间由参数heartbeat.interval.ms指定，超过一定时间未发送心跳，就会被认为已经死亡。</h5><h5 id="如果消费者发生崩溃，并停止读取消息-那么GroupCoordinator会等待一小段时间，确认这个消费者死亡之后才会触发再均衡。这个一小段时间由session-timeout-ms参数控制。"><a href="#如果消费者发生崩溃，并停止读取消息-那么GroupCoordinator会等待一小段时间，确认这个消费者死亡之后才会触发再均衡。这个一小段时间由session-timeout-ms参数控制。" class="headerlink" title="如果消费者发生崩溃，并停止读取消息,那么GroupCoordinator会等待一小段时间，确认这个消费者死亡之后才会触发再均衡。这个一小段时间由session.timeout.ms参数控制。"></a>如果消费者发生崩溃，并停止读取消息,那么GroupCoordinator会等待一小段时间，确认这个消费者死亡之后才会触发再均衡。这个一小段时间由session.timeout.ms参数控制。</h5><h5 id="GroupCoordinator还会判断消费者调用poll-的时间期限，如果超过参数max-poll-interval-ms设定的值，则消费者被视为失败，并且分组将重新平衡，以便将分区重新分配给别的成员。"><a href="#GroupCoordinator还会判断消费者调用poll-的时间期限，如果超过参数max-poll-interval-ms设定的值，则消费者被视为失败，并且分组将重新平衡，以便将分区重新分配给别的成员。" class="headerlink" title="GroupCoordinator还会判断消费者调用poll()的时间期限，如果超过参数max.poll.interval.ms设定的值，则消费者被视为失败，并且分组将重新平衡，以便将分区重新分配给别的成员。"></a>GroupCoordinator还会判断消费者调用poll()的时间期限，如果超过参数max.poll.interval.ms设定的值，则消费者被视为失败，并且分组将重新平衡，以便将分区重新分配给别的成员。</h5><h4 id="最后，除了异常被动退出消费组，也可以调用LeaveGroupRequest请求主动退出消费者，或者使用unsubscrible方法取消对某些主题的订阅，都可以触发再均衡。"><a href="#最后，除了异常被动退出消费组，也可以调用LeaveGroupRequest请求主动退出消费者，或者使用unsubscrible方法取消对某些主题的订阅，都可以触发再均衡。" class="headerlink" title="最后，除了异常被动退出消费组，也可以调用LeaveGroupRequest请求主动退出消费者，或者使用unsubscrible方法取消对某些主题的订阅，都可以触发再均衡。"></a>最后，除了异常被动退出消费组，也可以调用LeaveGroupRequest请求主动退出消费者，或者使用unsubscrible方法取消对某些主题的订阅，都可以触发再均衡。</h4>]]></content>
      <categories>
        <category>Programme</category>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>Kafka实现订单超时取消的两种模拟策略</title>
    <url>/2021/03/01/kafka%E5%AE%9E%E7%8E%B0%E8%AE%A2%E5%8D%95%E8%B6%85%E6%97%B6%E5%8F%96%E6%B6%88%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E6%8B%9F%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h1 id="Kafka实现订单超时取消的两种模拟策略"><a href="#Kafka实现订单超时取消的两种模拟策略" class="headerlink" title="Kafka实现订单超时取消的两种模拟策略"></a>Kafka实现订单超时取消的两种模拟策略</h1><h4 id="在业务场景中有一个需要定时15分钟后取消用户订单的功能，可以使用Java的任务调度框架来实现，但还需要引入框架依赖和设置数据表等，对业务的侵入性很大，有点大材小用的感觉，所以这里使用延时队列就可以，Kafka本身是不支持延时队列的，需要在生产消息和消费时进行一些二次开发，以下是我对该业务具体实现的思考。"><a href="#在业务场景中有一个需要定时15分钟后取消用户订单的功能，可以使用Java的任务调度框架来实现，但还需要引入框架依赖和设置数据表等，对业务的侵入性很大，有点大材小用的感觉，所以这里使用延时队列就可以，Kafka本身是不支持延时队列的，需要在生产消息和消费时进行一些二次开发，以下是我对该业务具体实现的思考。" class="headerlink" title="在业务场景中有一个需要定时15分钟后取消用户订单的功能，可以使用Java的任务调度框架来实现，但还需要引入框架依赖和设置数据表等，对业务的侵入性很大，有点大材小用的感觉，所以这里使用延时队列就可以，Kafka本身是不支持延时队列的，需要在生产消息和消费时进行一些二次开发，以下是我对该业务具体实现的思考。"></a>在业务场景中有一个需要定时15分钟后取消用户订单的功能，可以使用Java的任务调度框架来实现，但还需要引入框架依赖和设置数据表等，对业务的侵入性很大，有点大材小用的感觉，所以这里使用延时队列就可以，Kafka本身是不支持延时队列的，需要在生产消息和消费时进行一些二次开发，以下是我对该业务具体实现的思考。</h4><h3 id="1-建立不同时间区间的topic"><a href="#1-建立不同时间区间的topic" class="headerlink" title="1.建立不同时间区间的topic"></a>1.建立不同时间区间的topic</h3><h4 id="Kafka内部有很多延时性的操作，如延时生产，延时拉取，延时数据删除等，这些延时功能由内部的延时操作管理器来做专门的处理，其底层是采用时间轮实现的，我们可以参照时间轮的设计，设置多个时间区间的topic，如60min，50min，40min，30min，20min，10min的topic，生产者在生产数据时，将要过期时间作为key存入消息中，而消费端需要自己实现一个类似于拦截器的功能，判断条件为：当前时间-过期时间-是否小于该时间区间的topic，大于的话则不进行处理，小于的话则进行位移提交，将该消息发送到下一级的topic中，依次往复遍历，到达最后一个topic时为预设好的过期时间，对数据库里的订单进行更新。"><a href="#Kafka内部有很多延时性的操作，如延时生产，延时拉取，延时数据删除等，这些延时功能由内部的延时操作管理器来做专门的处理，其底层是采用时间轮实现的，我们可以参照时间轮的设计，设置多个时间区间的topic，如60min，50min，40min，30min，20min，10min的topic，生产者在生产数据时，将要过期时间作为key存入消息中，而消费端需要自己实现一个类似于拦截器的功能，判断条件为：当前时间-过期时间-是否小于该时间区间的topic，大于的话则不进行处理，小于的话则进行位移提交，将该消息发送到下一级的topic中，依次往复遍历，到达最后一个topic时为预设好的过期时间，对数据库里的订单进行更新。" class="headerlink" title="Kafka内部有很多延时性的操作，如延时生产，延时拉取，延时数据删除等，这些延时功能由内部的延时操作管理器来做专门的处理，其底层是采用时间轮实现的，我们可以参照时间轮的设计，设置多个时间区间的topic，如60min，50min，40min，30min，20min，10min的topic，生产者在生产数据时，将要过期时间作为key存入消息中，而消费端需要自己实现一个类似于拦截器的功能，判断条件为：当前时间 - 过期时间 是否小于该时间区间的topic，大于的话则不进行处理，小于的话则进行位移提交，将该消息发送到下一级的topic中，依次往复遍历，到达最后一个topic时为预设好的过期时间，对数据库里的订单进行更新。"></a>Kafka内部有很多延时性的操作，如延时生产，延时拉取，延时数据删除等，这些延时功能由内部的延时操作管理器来做专门的处理，其底层是采用时间轮实现的，我们可以参照时间轮的设计，设置多个时间区间的topic，如60min，50min，40min，30min，20min，10min的topic，生产者在生产数据时，将要过期时间作为key存入消息中，而消费端需要自己实现一个类似于拦截器的功能，判断条件为：当前时间 - 过期时间 是否小于该时间区间的topic，大于的话则不进行处理，小于的话则进行位移提交，将该消息发送到下一级的topic中，依次往复遍历，到达最后一个topic时为预设好的过期时间，对数据库里的订单进行更新。</h4><h3 id="2-惰性数据加载变更"><a href="#2-惰性数据加载变更" class="headerlink" title="2.惰性数据加载变更"></a>2.惰性数据加载变更</h3><h4 id="基于第一种方法会存在一定的时间差，不会在刚过期就立刻失效，所以使用第二种方法作为方法一的补充，即在用户查询该订单的时候，判断订单状态是否超时，如果发现已经超时但状态没有更新，先更新订单状态再返回给用户。"><a href="#基于第一种方法会存在一定的时间差，不会在刚过期就立刻失效，所以使用第二种方法作为方法一的补充，即在用户查询该订单的时候，判断订单状态是否超时，如果发现已经超时但状态没有更新，先更新订单状态再返回给用户。" class="headerlink" title="基于第一种方法会存在一定的时间差，不会在刚过期就立刻失效，所以使用第二种方法作为方法一的补充，即在用户查询该订单的时候，判断订单状态是否超时，如果发现已经超时但状态没有更新，先更新订单状态再返回给用户。"></a>基于第一种方法会存在一定的时间差，不会在刚过期就立刻失效，所以使用第二种方法作为方法一的补充，即在用户查询该订单的时候，判断订单状态是否超时，如果发现已经超时但状态没有更新，先更新订单状态再返回给用户。</h4><h4 id="以上两种策略的实现是针对订单这类实时性要求并不高的场景，因为用户不会一直盯着订单等到超时，更多情况是创建订单后未支付便关闭了，再过一段时间打开，基于此场景可以使用这两种取巧的方法来处理。"><a href="#以上两种策略的实现是针对订单这类实时性要求并不高的场景，因为用户不会一直盯着订单等到超时，更多情况是创建订单后未支付便关闭了，再过一段时间打开，基于此场景可以使用这两种取巧的方法来处理。" class="headerlink" title="以上两种策略的实现是针对订单这类实时性要求并不高的场景，因为用户不会一直盯着订单等到超时，更多情况是创建订单后未支付便关闭了，再过一段时间打开，基于此场景可以使用这两种取巧的方法来处理。"></a>以上两种策略的实现是针对订单这类实时性要求并不高的场景，因为用户不会一直盯着订单等到超时，更多情况是创建订单后未支付便关闭了，再过一段时间打开，基于此场景可以使用这两种取巧的方法来处理。</h4>]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>Kafka涉及到的多种选举机制</title>
    <url>/2021/03/14/kafka%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84%E5%A4%9A%E7%A7%8D%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Kafka涉及到的多种选举机制"><a href="#Kafka涉及到的多种选举机制" class="headerlink" title="Kafka涉及到的多种选举机制"></a>Kafka涉及到的多种选举机制</h1><p>提起Kafka中的选举，第一印象肯定是broker节点之间的选举，它依赖于Zookeeper来进行选举，其实还有partition之间也有选举，以及其他地方都存在选举，但这些都是由Kafka内部完成，它们都需要一个leader来把控全场，由leader来负责读写请求，处理消息的同步，监听分区变化，监听主题变化，保存一些分区方案，记录消费位移等信息。我总结的有以下几种选举。</p>
<ol>
<li>broker Leader</li>
<li>partition Leader</li>
<li>GroupCoordinator Leader</li>
<li>Group Leader</li>
</ol>
<h3 id="控制器的选举"><a href="#控制器的选举" class="headerlink" title="控制器的选举"></a>控制器的选举</h3><p>在Kafka集群中会有一个或多个broker，只有其中一个broker会选举为控制器，即Kafka Controller，它负责管理整个集群中所有分区和副本的状态，当分区中leader 副本出现问题及时选举新的leader副本，更新ISR集合的元数据信息。broker的选举过程是在zookeeper中创建&#x2F;controller临时节点，临时节点的内容如下图 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210314173719523.png"
                      alt="image-20210314173719523"
                > 每个broker还是会对&#x2F;controller节点添加监听器,以此来监昕此节点的数据变化，当&#x2F;controller节点发生变更，就会触发新一轮的选举。</p>
<h3 id="分区Leader的选举"><a href="#分区Leader的选举" class="headerlink" title="分区Leader的选举"></a>分区Leader的选举</h3><p>分区leader副本的选举由控制器负责具体实施。当创建分区（创建主题或增加分区都有创建分区的动作），或分区上线（比如分区中原先的leader 副本下线，此时分区需要选举一个新的leader上线来对外提供服务）的时候，都需要执行leader的选举动作。基本策略是按照AR集合中副本的顺序查找第一个存活的副本，并且这个副本在ISR集合中 。一个分区的AR集合在分配的时候就被指定,并且只要不发生重分配的情况，集合内部副本的顺序是保持不变的，而分区的ISR集合中副本的顺序可能会改变。 partitions后的字符串中，方括号的就是Leader副本。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210314175648353.png"
                      alt="image-20210314175648353"
                ></p>
<h3 id="GroupCoordinator的选举"><a href="#GroupCoordinator的选举" class="headerlink" title="GroupCoordinator的选举"></a>GroupCoordinator的选举</h3><p>GroupCoordinator是负责执行消费者的分区分配和再均衡操作，在初始阶段，当消费者未保存与消费组对应的GroupCoordinator节点信息时，需要通过向集群中负载最小的节点发送请求来寻找，Kafka通过消费组的groupId的哈希值计算__consumer_offsets中的分区编号，找到分区后，再寻找分区leader副本所在的broker节点，该节点就是对应的GroupCoordinator，消费者最终的分区分配方案以及组内消费者所提交的消费位移信息都会发送给次分区leader副本所在的broker节点。</p>
<h3 id="消费组Leader的选举"><a href="#消费组Leader的选举" class="headerlink" title="消费组Leader的选举"></a>消费组Leader的选举</h3><p>GroupCoordinator需要为消费组内的消费者选举出一个消费组的leader，这个选举的算法很简单，当消费组内还没有leader，那么第一个加入消费组的消费者即为消费组的leader，如果当前leader退出消费组，则会挑选以HashMap结构保存的消费者节点数据中，第一个键值对来作为leader。</p>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>Kafka的主题删除机制</title>
    <url>/2020/09/14/kafka%E7%9A%84%E4%B8%BB%E9%A2%98%E5%88%A0%E9%99%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="命令删除"><a href="#命令删除" class="headerlink" title="命令删除"></a>命令删除</h3><p>在Kafka中当一个主题不再使用的时候，可以选择将其删除，以此来释放磁盘，文件句柄等资源，删除过程其实很简单，使用kafka-topics.sh脚本中的delete指令就可以。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper localhost:2181/kafka --delete --topic topic-delete</span><br></pre></td></tr></table></figure></div>

<p>在删除完毕后，会有相应的提示信息，提示信息与broker端配置参数delete.topic.enable有关，必须将delete.topic.enable参数配置为true才能删除主题，该参数的默认值就是true，如果配置为false，那么删除主题的操作将会被忽略。 如果要删除的主题是Kafka内部主题，那么删除时就会报错，截至Kafka2.0.0，Kafka的内部主题一共有两个，<code>__consumer_offsets,__transaction_state</code>。 使用kafka-topics.sh脚本删除主题的行为本质上只是在zookeeper中的&#x2F;admin&#x2F;delete_topics路径下创建一个与待删除主题同名的节点，以此标记该主题为待删除的状态。与创建主题相同的是，真正删除主题的动作也是由Kafka的控制器负责完成的。 我们可以直接通过zookeeper的客户端来删除主题，如使用zkCli.sh命令删除主题</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">create /admin/delete_topics/topic-delete &quot;&quot;</span><br></pre></td></tr></table></figure></div>

<h3 id="手动删除"><a href="#手动删除" class="headerlink" title="手动删除"></a>手动删除</h3><p>我们还可以通过手动的方式来删除主题，主题中的元数据存储在zookeeper中的&#x2F;brokers&#x2F;topics和&#x2F;config&#x2F;topics路径下，主题中的消息数据存储在log.dir或log.dirs配置的路径下，我们只需要手动删除这些地方的内容即可，总共分三个步骤 第一步，删除zookeeper中的节点&#x2F;config&#x2F;topics&#x2F;topic-delete</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /config/topics/topic-delete</span><br></pre></td></tr></table></figure></div>

<p>第二步，删除zookeeper中的节点&#x2F;brokers&#x2F;topics&#x2F;topic-delete及其子节点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete /brokers/topics/topic-delete</span><br></pre></td></tr></table></figure></div>

<p>第三步，删除集群中所有与主题topic-delete有关的文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">集群一：rm -rf /data/kafka-logs/topic-delete*</span><br><span class="line">集群二：rm -rf /data/kafka-logs/topic-delete*</span><br><span class="line">集群三：rm -rf /data/kafka-logs/topic-delete*</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>删除主题是不可逆的操作。</p>
</blockquote>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown编辑器的使用与下载</title>
    <url>/2017/01/26/markdown-article0003/</url>
    <content><![CDATA[<p> </p>
<h2 id="Markdown在线编辑器"><a href="#Markdown在线编辑器" class="headerlink" title="Markdown在线编辑器"></a>Markdown在线编辑器</h2><ul>
<li>上一篇文章介绍了markdown的语法和声明，我在笔记里就使用markdown编辑器，在线的也有不错的编辑器，界面很好，里面也有相关的语法建设，还可以登录以后在线保存和导出</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/148597671.png"
                     
                ></p>
<h4 id="这是网址—-》》》https-zybuluo-com-mdeditor"><a href="#这是网址—-》》》https-zybuluo-com-mdeditor" class="headerlink" title="这是网址—-》》》https://zybuluo.com/mdeditor"></a>这是网址—-》》》<a class="link"   href="https://zybuluo.com/mdeditor" >https://zybuluo.com/mdeditor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><h2 id="Markdown离线版的编辑器"><a href="#Markdown离线版的编辑器" class="headerlink" title="Markdown离线版的编辑器"></a>Markdown离线版的编辑器</h2><ul>
<li>CuteMarkEd 是一个 Markdown 编辑器，提供实时 HTML 预览、数学表达式和源码高亮。 CuteMarkEd</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/148962343.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/148981468.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/148992718.png"
                     
                ></p>
<h4 id="下载地址：—》》http-cloose-github-io-CuteMarkEd"><a href="#下载地址：—》》http-cloose-github-io-CuteMarkEd" class="headerlink" title="下载地址：—》》http://cloose.github.io/CuteMarkEd"></a>下载地址：—》》<a class="link"   href="http://cloose.github.io/CuteMarkEd" >http://cloose.github.io/CuteMarkEd <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li><p>由于我服务器资源有限，这个软件 37.2 MB (39,052,901 字节)，所以不在服务器挂出，有需要的可以去官网下载，下载失败的可以联系我，我发邮件给你。</p>
<h5 id="综上，markdown真的是很方便的一个编辑器，这篇文档也是我用markdown先写出来然后复制到博客里，虽然效果有所偏差但是比起用Html标签来写也是要方便很多的。补充：我发现复制的时候图片都没有了，很难过，还得重新上传图片，字体格式什么都没有变，我看了html源码，是图片的url的问题，只能重新上传。。。。"><a href="#综上，markdown真的是很方便的一个编辑器，这篇文档也是我用markdown先写出来然后复制到博客里，虽然效果有所偏差但是比起用Html标签来写也是要方便很多的。补充：我发现复制的时候图片都没有了，很难过，还得重新上传图片，字体格式什么都没有变，我看了html源码，是图片的url的问题，只能重新上传。。。。" class="headerlink" title="综上，markdown真的是很方便的一个编辑器，这篇文档也是我用markdown先写出来然后复制到博客里，虽然效果有所偏差但是比起用Html标签来写也是要方便很多的。补充：我发现复制的时候图片都没有了，很难过，还得重新上传图片，字体格式什么都没有变，我看了html源码，是图片的url的问题，只能重新上传。。。。"></a>综上，markdown真的是很方便的一个编辑器，这篇文档也是我用markdown先写出来然后复制到博客里，虽然效果有所偏差但是比起用Html标签来写也是要方便很多的。补充：我发现复制的时候图片都没有了，很难过，还得重新上传图片，字体格式什么都没有变，我看了html源码，是图片的url的问题，只能重新上传。。。。</h5><h4 id="这是我笔记里的原版内容的链接，有兴趣的可以查看"><a href="#这是我笔记里的原版内容的链接，有兴趣的可以查看" class="headerlink" title="这是我笔记里的原版内容的链接，有兴趣的可以查看"></a><a class="link"   href="http://84b7da85.wiz01.com/share/s/24JZG50B3QHR23mv6A1JgkeG294_v71pKQuI2BZZxr0gUYj2"  title="这是我笔记里的原版内容，有兴趣的可以查看">这是我笔记里的原版内容的链接，有兴趣的可以查看 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4></li>
</ul>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 语法说明</title>
    <url>/2017/01/25/markdown-article0002/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/52656332_11.jpg"
                     
                >概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括<a class="link"   href="http://docutils.sourceforge.net/mirror/setext.html" >Setext <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="http://www.aaronsw.com/2002/atx/" >atx <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="http://textism.com/tools/textile/" >Textile <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="http://docutils.sourceforge.net/rst.html" >reStructuredText <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、<a class="link"   href="http://www.triptico.com/software/grutatxt.html" >Grutatext <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和 <a class="link"   href="http://ettext.taint.org/doc/" >EtText <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像_强调_。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的_书写_语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想_不是_要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种_发布_的格式，Markdown 是一种_书写_的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure></div>

<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。 HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。 <code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></table></figure></div>

<p>你必须要把网址转换写为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;amp;q=larry+bird</span><br></pre></td></tr></table></figure></div>

<p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。 所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;copy;</span><br></pre></td></tr></table></figure></div>

<p>Markdown 会保留它不动。而若你写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></table></figure></div>

<p>Markdown 就会将它转为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT&amp;amp;T</span><br></pre></td></tr></table></figure></div>

<p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></table></figure></div>

<p>Markdown 将会把它转换为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 &amp;lt; 5</span><br></pre></td></tr></table></figure></div>

<p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都_一定_会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<hr>
<h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。 如果你_确实_想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 <a class="link"   href="http://docutils.sourceforge.net/mirror/setext.html" >Setext <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和类 <a class="link"   href="http://www.aaronsw.com/2002/atx/" >atx <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 形式。 类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure></div>

<p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure></div>

<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的<code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></table></figure></div>

<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></div>

<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></div>

<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></table></figure></div>

<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.   这是第一行列表项。</span><br><span class="line">&gt; 2.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec(&quot;echo $input  $markdown_script&quot;);</span><br></pre></td></tr></table></figure></div>

<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择_增加引用阶层_。</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure></div>

<p>等同于：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure></div>

<p>也等同于：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure></div>

<p>有序列表则使用数字接着一个英文句点：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></div>

<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;McHale&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Parish&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></div>

<p>如果你的列表标记写成：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">1.  McHale</span><br><span class="line">1.  Parish</span><br></pre></td></tr></table></figure></div>

<p>或甚至是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. Bird</span><br><span class="line">1. McHale</span><br><span class="line">8. Parish</span><br></pre></td></tr></table></figure></div>

<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></div>

<p>但是如果你懒，那也行：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></div>

<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code> 标签包起来，举例来说：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure></div>

<p>会被转换为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Magic&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div>

<p>但是这个：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Bird</span><br><span class="line"></span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure></div>

<p>会被转换为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div>

<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></div>

<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&#x27;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure></div>

<p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure></div>

<p>如果要放代码区块的话，该区块就需要缩进_两次_，也就是 8 个空格或是 2 个制表符：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure></div>

<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></table></figure></div>

<p>换句话说，也就是在行首出现_数字-句点-空白_，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure></div>

<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure></div>

<p>Markdown 会转换成：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;这是一个普通段落：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;这是一个代码区块。</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Here is an example of AppleScript:</span><br><span class="line"></span><br><span class="line">    tell application &quot;Foo&quot;</span><br><span class="line">        beep</span><br><span class="line">    end tell</span><br></pre></td></tr></table></figure></div>

<p>会被转换为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">    &amp;copy; 2004 Foo Corporation</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>

<p>会被转换为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;</span><br><span class="line">    &amp;amp;copy; 2004 Foo Corporation</span><br><span class="line">&amp;lt;/div&amp;gt;</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： _行内式_和_参考式_两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 要建立一个_行内式_的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure></div>

<p>会产生：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</span><br><span class="line">an example&lt;/a&gt; inline link.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</span><br><span class="line">title attribute.&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure></div>

<p>_参考式_的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure></div>

<p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure></div>

<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[id]: http://example.com/  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure></div>

<p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</span><br><span class="line">[foo]: http://example.com/  &#x27;Optional Title Here&#x27;</span><br><span class="line">[foo]: http://example.com/  (Optional Title Here)</span><br></pre></td></tr></table></figure></div>

<p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用方括号包起来：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure></div>

<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[id]: http://example.com/longish/path/to/resource/here</span><br><span class="line">    &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure></div>

<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个链接是一样的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[link text][a]</span><br><span class="line">[link text][A]</span><br></pre></td></tr></table></figure></div>

<p>_隐式链接标记_功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Google][]</span><br></pre></td></tr></table></figure></div>

<p>然后定义链接内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Google]: http://google.com/</span><br></pre></td></tr></table></figure></div>

<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Visit [Daring Fireball][] for more information.</span><br></pre></td></tr></table></figure></div>

<p>然后接着定义链接：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Daring Fireball]: http://daringfireball.net/</span><br></pre></td></tr></table></figure></div>

<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure></div>

<p>如果改成用链接名称的方式写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [Google][] than from</span><br><span class="line">[Yahoo][] or [MSN][].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure></div>

<p>上面两种写法都会产生下面的 HTML。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;</span><br><span class="line">title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from</span><br><span class="line">&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;</span><br><span class="line">or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)</span><br><span class="line">than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or</span><br><span class="line">[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</span><br></pre></td></tr></table></figure></div>

<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或<code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure></div>

<p>会转成：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;em&gt;single asterisks&lt;/em&gt;</span><br><span class="line"></span><br><span class="line">&lt;em&gt;single underscores&lt;/em&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;double asterisks&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;double underscores&lt;/strong&gt;</span><br></pre></td></tr></table></figure></div>

<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">un*frigging*believable</span><br></pre></td></tr></table></figure></div>

<p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure></div>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Use the `printf()` function.</span><br></pre></td></tr></table></figure></div>

<p>会产生：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">``There is a literal backtick (`) here.``</span><br></pre></td></tr></table></figure></div>

<p>这段语法会产生：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line"></span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure></div>

<p>会产生：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>在代码区段内，<code>&amp;</code> 和方括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please don&#x27;t use any `&lt;blink&gt;` tags.</span><br></pre></td></tr></table></figure></div>

<p>转为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Please don&#x27;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<p>你也可以这样写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</span><br></pre></td></tr></table></figure></div>

<p>以产生：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded</span><br><span class="line">equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。 Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： _行内式_和_参考式_。 行内式的图片语法看起来像是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></div>

<p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![Alt text][id]</span><br></pre></td></tr></table></figure></div>

<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[id]: url/to/image  &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure></div>

<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;http://example.com/&gt;</span><br></pre></td></tr></table></figure></div>

<p>Markdown 会转为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</span><br></pre></td></tr></table></figure></div>

<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure></div>

<p>Markdown 会转成：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;</span><br><span class="line">&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;</span><br><span class="line">&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;</span><br><span class="line">&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</span><br></pre></td></tr></table></figure></div>

<p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a class="link"   href="mailto:&#97;&#100;&#100;&#114;&#101;&#115;&#x73;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;" >&#97;&#100;&#100;&#114;&#101;&#115;&#x73;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>」链接。 （这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure></div>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2017/07/27/markdown/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>More Tool</title>
    <url>/2017/07/27/more-tool/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL与Redis中对LRU算法的使用</title>
    <url>/2021/04/15/mysql%E4%B8%8Eredis%E4%B8%AD%E5%AF%B9lru%E7%AE%97%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>MySQL与Redis中对LRU算法的使用 LRU也称为最近最少未使用算法，作为最常用的内存淘汰算法，在主流的系统中都可以见到相应的使用场景，而在MySQL与Redis中也有使用，可以说都是用来对存储空间进行管理，及时淘汰更新数据，提高存储空间利用率。</p>
<h3 id="Redis内存淘汰机制"><a href="#Redis内存淘汰机制" class="headerlink" title="Redis内存淘汰机制"></a>Redis内存淘汰机制</h3><p>在redis.conf中有一行参数用来配置内存淘汰策略的 <code>maxmemory-policy volatile-LRU</code> <strong>volatile-LRU</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 <strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰 <strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰 <strong>allkeys-LRU</strong>：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰 <strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰 <strong>no-enviction</strong>（驱逐）：禁止驱逐数据，新写入操作会报错 可以看得出来如果使用了 <strong>volatile-LRU</strong>策略，则将会使用LRU数据结构来对内存中的数据进行清理。</p>
<h3 id="Redis的LRU具体实现："><a href="#Redis的LRU具体实现：" class="headerlink" title="Redis的LRU具体实现："></a>Redis的LRU具体实现：</h3><p>传统的LRU是使用栈的形式，每次都将最新使用的移入栈顶，但是用栈的形式会导致执行select *的时候大量非热点数据占领头部数据，所以需要改进。Redis每次按key获取一个值的时候，都会更新value中的LRU字段为当前秒级别的时间戳。Redis初始的实现算法很简单，随机从dict中取出五个key，淘汰一个LRU字段值最小的。在3.0的时候，又改进了一版算法，首先第一次随机选取的key都会放入一个pool中(pool的大小为16)，pool中的key是按LRU大小顺序排列的。接下来每次随机选取的keyLRU值必须小于pool中最小的LRU才会继续放入，直到将pool放满。放满之后，每次如果有新的key需要放入，需要将pool中LRU最大的一个key取出。淘汰的时候，直接从pool中选取一个LRU最小的值然后将其淘汰。</p>
<h3 id="MySQL中InnoDB引擎中对LRU的使用场景"><a href="#MySQL中InnoDB引擎中对LRU的使用场景" class="headerlink" title="MySQL中InnoDB引擎中对LRU的使用场景"></a>MySQL中InnoDB引擎中对LRU的使用场景</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210415142630548.png"
                      alt="image-20210415142630548"
                > 缓冲池是一个很大的内存区域，其中存放各种类型的页。数据库中的缓冲池是通过LRU算法来进行管理的。因为缓冲池中的页还可能会被分配给自适应哈希索引、Lock信息、 Insert Buffer等页，而这部分页不需要LRU算法进行维护，因此不存在于LRU列表中。</p>
<h3 id="LRU存储过程"><a href="#LRU存储过程" class="headerlink" title="LRU存储过程"></a>LRU存储过程</h3><p>LRU列表用来管理已经读取的页，但当数据库刚启动时，LRU列表是空的，即没有任何的页。这时页都存放在Free列表中，当需要从缓冲池中分页时，首先从Free列表中查找是否有可用的空闲页，若有则将该页从Free列表中删除，放入到LRU列表中。否则,根据LRU算法,淘汰LRU列表末尾的页,将该内存空间分配给新的页。 最频繁使用的页在LRU列表的前端，而最少使用的页在LRU列表的尾端。当缓冲池不能存放新读取到的页时，将首先释放LRU列表中尾端的页。在 InnoDB存储引擎中，缓冲池中页的大小默认为16KB，同样使用LRU算法对缓冲池进行管理。稍有不同的是InnoDB存储引擎对传统的LRU算法做了一些优化在InnoDB的存储引擎中，LRU列表中还加入了 midpoint位置。新读取到的页，虽然是最新访问的页，但并不是直接放入到LRU列表的首部，而是放入到LRU列表的 midpoint 位置。这个算法在 InnoDB存储引擎下称为 midpoint insertion strategy。在默认配置下,该位置在LRU列表长度的58处。 midpoint 1位置可由参数 innodb old blocks pct:控制。 为什么不采用朴素的LRU算法，直接将读取的页放入到LRU列表的首部呢，这是因为若直接将读取到的页放入到LRU的首部，那么某些SQL操作可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。常见的这类操作为索引或数据的扫描操作。这类操作需要访问表中的许多页，甚至是全部的页，而这些页通常来说又仅在这次査询操作中需要，并不是活跃的热点数据。如果页被放入LRU列表的首部，那么非常可能将所需要的热点数据页从LRU列表中移除，而在下一次需要读取该页时，InnoDB存储引擎需要再次访问磁盘。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>关于平台构建以及编程语言说明</title>
    <url>/2017/01/20/myblog/</url>
    <content><![CDATA[<p><a class="link"   href="http://www.rain1024.com/2017/01/20/resume-article0001/" >个人简介 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="来自-2019年3月31日-下午6-27"><a href="#来自-2019年3月31日-下午6-27" class="headerlink" title="来自 2019年3月31日 下午6:27"></a>来自 2019年3月31日 下午6:27</h2><h4 id="发现自己很久没有更新博客的板式了，还是最初折腾了好多次再就没有更改，现在的主题倒是挺好看的，而且我加入了很多html代码，贸然换主题意味着要修改很多东西，今天像更新一下菜单栏，把以前的功能丰富些。加入一些自己的作品。"><a href="#发现自己很久没有更新博客的板式了，还是最初折腾了好多次再就没有更改，现在的主题倒是挺好看的，而且我加入了很多html代码，贸然换主题意味着要修改很多东西，今天像更新一下菜单栏，把以前的功能丰富些。加入一些自己的作品。" class="headerlink" title="发现自己很久没有更新博客的板式了，还是最初折腾了好多次再就没有更改，现在的主题倒是挺好看的，而且我加入了很多html代码，贸然换主题意味着要修改很多东西，今天像更新一下菜单栏，把以前的功能丰富些。加入一些自己的作品。"></a>发现自己很久没有更新博客的板式了，还是最初折腾了好多次再就没有更改，现在的主题倒是挺好看的，而且我加入了很多html代码，贸然换主题意味着要修改很多东西，今天像更新一下菜单栏，把以前的功能丰富些。加入一些自己的作品。</h4><h4 id="之前都是在博文里写一下自己的动态，年后就没有去公司一直待在学校做毕设，我目前的职位是大数据开发，自己也成功的跳入了这个坑，我会不断的督促自己去更新GitHub的代码，在未来更加专注开发。"><a href="#之前都是在博文里写一下自己的动态，年后就没有去公司一直待在学校做毕设，我目前的职位是大数据开发，自己也成功的跳入了这个坑，我会不断的督促自己去更新GitHub的代码，在未来更加专注开发。" class="headerlink" title="之前都是在博文里写一下自己的动态，年后就没有去公司一直待在学校做毕设，我目前的职位是大数据开发，自己也成功的跳入了这个坑，我会不断的督促自己去更新GitHub的代码，在未来更加专注开发。"></a>之前都是在博文里写一下自己的动态，年后就没有去公司一直待在学校做毕设，我目前的职位是大数据开发，自己也成功的跳入了这个坑，我会不断的督促自己去更新GitHub的代码，在未来更加专注开发。</h4><h4 id="我喜欢编程，从始到终都是。"><a href="#我喜欢编程，从始到终都是。" class="headerlink" title="我喜欢编程，从始到终都是。"></a>我喜欢编程，从始到终都是。</h4><h3 id="来自2018-11-13日的更新："><a href="#来自2018-11-13日的更新：" class="headerlink" title="来自2018-11-13日的更新："></a>来自2018-11-13日的更新：</h3><h4 id="果然，研究生的flag没有实现，我在北京也待了两个多月，经历了各种事情之后总算稳定下来了，签了满意的工作，以后可以专心干自己的事情。"><a href="#果然，研究生的flag没有实现，我在北京也待了两个多月，经历了各种事情之后总算稳定下来了，签了满意的工作，以后可以专心干自己的事情。" class="headerlink" title="果然，研究生的flag没有实现，我在北京也待了两个多月，经历了各种事情之后总算稳定下来了，签了满意的工作，以后可以专心干自己的事情。"></a>果然，研究生的flag没有实现，我在北京也待了两个多月，经历了各种事情之后总算稳定下来了，签了满意的工作，以后可以专心干自己的事情。</h4><h3 id="来自2018-5-26日的更新："><a href="#来自2018-5-26日的更新：" class="headerlink" title="来自2018-5-26日的更新："></a>来自2018-5-26日的更新：</h3><h4 id="回首望去，博客已经写了一年半，文章有120多篇，自己一直在坚持更新，积极的记录着点滴的成长，也慢慢发现技术在不断的进步，从以前发各种小脚本到现在写整站，经验越来越丰富，心态越来越平稳，从当初使用网易蜂巢的容器，到现在用三个云服务器协作，写了很多，但我会继续学下去，凭借自己的自学能力跟进潮流，最近想要研究机器学习，今年的flag如果能实现读研究生，就走这个方向，将以往的作为铺垫，继续前行。"><a href="#回首望去，博客已经写了一年半，文章有120多篇，自己一直在坚持更新，积极的记录着点滴的成长，也慢慢发现技术在不断的进步，从以前发各种小脚本到现在写整站，经验越来越丰富，心态越来越平稳，从当初使用网易蜂巢的容器，到现在用三个云服务器协作，写了很多，但我会继续学下去，凭借自己的自学能力跟进潮流，最近想要研究机器学习，今年的flag如果能实现读研究生，就走这个方向，将以往的作为铺垫，继续前行。" class="headerlink" title="回首望去，博客已经写了一年半，文章有120多篇，自己一直在坚持更新，积极的记录着点滴的成长，也慢慢发现技术在不断的进步，从以前发各种小脚本到现在写整站，经验越来越丰富，心态越来越平稳，从当初使用网易蜂巢的容器，到现在用三个云服务器协作，写了很多，但我会继续学下去，凭借自己的自学能力跟进潮流，最近想要研究机器学习，今年的flag如果能实现读研究生，就走这个方向，将以往的作为铺垫，继续前行。"></a>回首望去，博客已经写了一年半，文章有120多篇，自己一直在坚持更新，积极的记录着点滴的成长，也慢慢发现技术在不断的进步，从以前发各种小脚本到现在写整站，经验越来越丰富，心态越来越平稳，从当初使用网易蜂巢的容器，到现在用三个云服务器协作，写了很多，但我会继续学下去，凭借自己的自学能力跟进潮流，最近想要研究机器学习，今年的flag如果能实现读研究生，就走这个方向，将以往的作为铺垫，继续前行。</h4><h3 id="来自2017-7-25日的更新："><a href="#来自2017-7-25日的更新：" class="headerlink" title="来自2017-7-25日的更新："></a>来自2017-7-25日的更新：</h3><h4 id="6月28号网站域名突然停止解析，因为我一直没有备案，经过一个月的时间，7月25号，网站终于备案完成了，备案号是：蒙ICP备17003660号"><a href="#6月28号网站域名突然停止解析，因为我一直没有备案，经过一个月的时间，7月25号，网站终于备案完成了，备案号是：蒙ICP备17003660号" class="headerlink" title="6月28号网站域名突然停止解析，因为我一直没有备案，经过一个月的时间，7月25号，网站终于备案完成了，备案号是：蒙ICP备17003660号"></a>6月28号网站域名突然停止解析，因为我一直没有备案，经过一个月的时间，7月25号，网站终于备案完成了，备案号是：蒙ICP备17003660号</h4><h3 id="来自2017-4-28日的更新："><a href="#来自2017-4-28日的更新：" class="headerlink" title="来自2017-4-28日的更新："></a>来自2017-4-28日的更新：</h3><h4 id="最近犹豫网易蜂巢旧版服务下线，再三抉择，还是把整个博客迁移到了腾讯云里，折腾了一晚上，现场恢复的差不多了，网站采用LMAP方式构建，博文中若非注明转载，则均是原创，只是想把自己的知识，心得，感悟分享出来，文章使用markdown编辑，代码高亮使用crayon实现，学习的语言有很多种-其中python我使用的是2-7版本-使用python3的参考一下就好-由于服务器资源有限博文中的资源无法在网站中下载-一些源代码我会放到Github上，软件什么的放到百度云盘上方便大家下载-如有需要下载的地方-我会在博文里挂出。至于这个服务器暂时作为发表文章等个人博客功能，后续会开发能多的功能，有兴趣的朋友可以互相交流，如果喜欢请收藏，或者关注我的其他主页，我还是个大学生，技术都在学，文章里有什么错误请及时通知我，以便修改，大家共同学习，共同进步。当你对博客有什么意见或者建议请发邮件联系我。"><a href="#最近犹豫网易蜂巢旧版服务下线，再三抉择，还是把整个博客迁移到了腾讯云里，折腾了一晚上，现场恢复的差不多了，网站采用LMAP方式构建，博文中若非注明转载，则均是原创，只是想把自己的知识，心得，感悟分享出来，文章使用markdown编辑，代码高亮使用crayon实现，学习的语言有很多种-其中python我使用的是2-7版本-使用python3的参考一下就好-由于服务器资源有限博文中的资源无法在网站中下载-一些源代码我会放到Github上，软件什么的放到百度云盘上方便大家下载-如有需要下载的地方-我会在博文里挂出。至于这个服务器暂时作为发表文章等个人博客功能，后续会开发能多的功能，有兴趣的朋友可以互相交流，如果喜欢请收藏，或者关注我的其他主页，我还是个大学生，技术都在学，文章里有什么错误请及时通知我，以便修改，大家共同学习，共同进步。当你对博客有什么意见或者建议请发邮件联系我。" class="headerlink" title="最近犹豫网易蜂巢旧版服务下线，再三抉择，还是把整个博客迁移到了腾讯云里，折腾了一晚上，现场恢复的差不多了，网站采用LMAP方式构建，博文中若非注明转载，则均是原创，只是想把自己的知识，心得，感悟分享出来，文章使用markdown编辑，代码高亮使用crayon实现，学习的语言有很多种,其中python我使用的是2.7版本,使用python3的参考一下就好,由于服务器资源有限博文中的资源无法在网站中下载,一些源代码我会放到Github上，软件什么的放到百度云盘上方便大家下载,如有需要下载的地方,我会在博文里挂出。至于这个服务器暂时作为发表文章等个人博客功能，后续会开发能多的功能，有兴趣的朋友可以互相交流，如果喜欢请收藏，或者关注我的其他主页，我还是个大学生，技术都在学，文章里有什么错误请及时通知我，以便修改，大家共同学习，共同进步。当你对博客有什么意见或者建议请发邮件联系我。"></a>最近犹豫网易蜂巢旧版服务下线，再三抉择，还是把整个博客迁移到了腾讯云里，折腾了一晚上，现场恢复的差不多了，网站采用LMAP方式构建，博文中若非注明转载，则均是原创，只是想把自己的知识，心得，感悟分享出来，文章使用markdown编辑，代码高亮使用crayon实现，学习的语言有很多种,其中python我使用的是2.7版本,使用python3的参考一下就好,由于服务器资源有限博文中的资源无法在网站中下载,一些源代码我会放到Github上，软件什么的放到百度云盘上方便大家下载,如有需要下载的地方,我会在博文里挂出。至于这个服务器暂时作为发表文章等个人博客功能，后续会开发能多的功能，有兴趣的朋友可以互相交流，如果喜欢请收藏，或者关注我的其他主页，我还是个大学生，技术都在学，文章里有什么错误请及时通知我，以便修改，大家共同学习，共同进步。当你对博客有什么意见或者建议请发邮件联系我。</h4><h2 id=""><a href="#" class="headerlink" title=""></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/21.jpg"
                     
                ></h2><p>此时，前方一片迷茫，我所能做的只有走好眼前的路，我会继续写，更会继续学。</p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL查询缓存与Innodb引擎的自适应哈希索引</title>
    <url>/2021/03/16/mysql%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%B8%8Einnodb%E5%BC%95%E6%93%8E%E7%9A%84%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<p>MySQL查询缓存与Innodb引擎的自适应哈希索引</p>
<h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>MySQL与引擎之间更像是两套体系，相互之间协同提供更好的数据服务，查询缓存是MySQL在8.0版本之前提供的一个特性，当客户端与数据库连接完毕，需要执行查询语句时，查询缓存就会发挥作用，MySQL会将查询语句进行对比，如果之前执行过该语句，执行语句和执行结果会以键值对的形式被直接缓存到内存里，因为使用查询语句作为key，MySQL可以用语句来查询对应的key，在缓存中找到的话，就可以将key对应value的值返回给客户端，少去了后来再通过分析器，优化器，执行器，引擎等各个阶段复杂的处理。</p>
<h4 id="值得废弃"><a href="#值得废弃" class="headerlink" title="值得废弃"></a>值得废弃</h4><p>通过上面的执行过程就能看出一些问题，首先缓存语句的“范围”太大了，因为不同的语句可能会涉及很多复杂复合查询，简单粗暴的缓存起来的后果是，每当有对表的更新，这个表上所有的查询缓存都会被清空，如果是频繁更新的数据表，查询缓存的失效也会特别频繁，这时基本没有使用的意义了，查询缓存的意义更多是针对一些固定内容的表，或者是静态表，例如字典表或者配置表，但这样又有了新的问题，既然已经是固定的数据，那我们直接使用其他缓存数据库多好，查询效率快，也不用担心数据不一致的问题，为什么还要在MySQL中开启这个有些鸡肋的功能呢，所以查询缓存的功能被大大局限，原本的初衷是好的，但到了具体场景中，并没有达到预期的效果。</p>
<h3 id="自适应哈希索引（Adaptive-Hash-Index）"><a href="#自适应哈希索引（Adaptive-Hash-Index）" class="headerlink" title="自适应哈希索引（Adaptive Hash Index）"></a>自适应哈希索引（Adaptive Hash Index）</h3><h4 id="索引条件"><a href="#索引条件" class="headerlink" title="索引条件"></a>索引条件</h4><p>自适应哈希索引是Innodb的关键特性之一，其他特性还有诸如：</p>
<ul>
<li>插入缓存</li>
<li>两次写</li>
<li>异步IO</li>
<li>刷新邻接页</li>
</ul>
<p>自适应哈希索引位于innodb的缓存池中，属于单独的一块存储空间，不受LRU内存淘汰机制影响，之所以将查询缓存和哈希索引放一起说，因为他们的原理都是一样的，根据条件建立指定的键值对，下次查询可以通过键值对来直接获取结果，但自适应哈希索引做的更加细致，考虑到的场景也很多，innodb引擎对监控对表上各索引页的查询，如果观察到建立哈希索引可以提高查询速度，则建立哈希索引，索引的建立是通过构建缓存池里B+树页来的，不对整张表构建索引，所以速度很快。构建需要达到一定的条件：</p>
<ul>
<li>通过一种固定模式的查询语句访问该页100次</li>
<li>页通过固定模式访问了N次，其中N&#x3D;页中记录*1&#x2F;16</li>
</ul>
<p>访问模式可以是 where a&#x3D;xxx，哈希索引只能用来搜索等值的查询，对于其他范围查询是不可以使用的，官方文档显示，启动自适应哈希索引，读取和写入速度可以提高2倍，辅助索引的连接操作性能可以提高5倍，之所以成为自适应，就是整个过程无需人为干预调整，完全由数据库自身来优化。还以为通过命令 show engine innodb status来查询当前哈希索引的使用情况。</p>
<h4 id="索引优势"><a href="#索引优势" class="headerlink" title="索引优势"></a>索引优势</h4><p>说完这些可以分析一下为什么自适应哈希索引要比查询缓存好，首先它细粒度化控制数据的缓存，而不是一步到位，只有满足条件才可以加索引缓存，它的使用范围也有限，只能在等值查询条件使用，也能进一步缩小缓存区间，最重要的是，它缓存的并不是数据内容，而是索引页，这样就不需要考虑数据更新的问题，索引页的更新，合并都有插入缓存这些特性来实现，哈希索引只要能保证快速链接到所要访问的索引页即可。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>mysql自动合并索引(index merge)查询导致死锁问题</title>
    <url>/2021/03/17/mysql%E8%87%AA%E5%8A%A8%E5%90%88%E5%B9%B6%E7%B4%A2%E5%BC%95index-merge%E6%9F%A5%E8%AF%A2%E5%AF%BC%E8%87%B4%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>mysql自动合并索引(index merge)查询导致死锁问题 虽然在生产环境上加了分布式锁，但还是会出现某一个事务未结束，而下一个事务进入来修改数据，这时就会陷入等待，最后等待超时，事务进行了回滚，在运行几个月后第一次出现这种情况，发生死锁的是两条update语句，当sql语句的where语句中使用两个索引时，mysql的优化器可能会对这两个索引进行合并，使用explain分析会显示Using intersect(index1,index2); 表示将index1和index2合并来查询。该表中只有index1,index2两个索引。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE a SET a.data = a.data - 1  WHERE  index1_id = xxx AND index2_id = xxx</span><br></pre></td></tr></table></figure></div>

<p>首先出现这种情况是由于前一个事务一直没有释放所占用的资源，导致第二个事务无法获取资源，但其实两个事务之间在业务上没有关系，也不应该出现冲突，通过explain分析在type字段出现index_merge，表示对全表进行了查询，可能就是在将index1和index2索引取交集的时候锁定了index2的表，导致其他事务无法进行。 可以使用show engine innodb status\G;来查看最近一次的死锁信息。 至于mysql优化器为什么要合并索引，优化器选择索引的目的，是找到一个最优的执行方案，并用最小的代价去执行语句。在数据库里面，扫描行数是影响执行代价的因素之一。扫描的行数越少，意味着访问磁盘数据的次数越少，消耗的 CPU 资源越少，扫描行数并不是唯一的判断标准,优化器还会结合是否使用临时表、是否排序等因素进行综合判断。我们可以通过explain看一下扫描行数。 执行原SQL语句，扫描行数为1，因为优化器觉得通过两个索引可以唯一确定数据</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+----------+------------+-------------+---------------------------------+---------------------------------+---------+------+------+----------+---------------------------------------------------------------+</span><br><span class="line"> id  select_type  table     partitions  type         possible_keys                    key                              key_len  ref   rows  filtered  Extra                                                         </span><br><span class="line">+----+-------------+----------+------------+-------------+---------------------------------+---------------------------------+---------+------+------+----------+---------------------------------------------------------------+</span><br><span class="line">  1  UPDATE       a  NULL        index_merge  index1,index2  index1,index2  4,4      NULL     1    100.00  Using intersect(index1,index2); Using where </span><br><span class="line">+----+-------------+----------+------------+-------------+---------------------------------+---------------------------------+---------+------+------+----------+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure></div>

<p>使用force index() 来分别指定索引，先使用force index(index1) ，扫描行数为3</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+----------+------------+-------+-----------------+-----------------+---------+-------+------+----------+-------------+</span><br><span class="line"> id  select_type  table     partitions  type   possible_keys    key              key_len  ref    rows  filtered  Extra       </span><br><span class="line">+----+-------------+----------+------------+-------+-----------------+-----------------+---------+-------+------+----------+-------------+</span><br><span class="line">  1  UPDATE       recharge  NULL        range  index1  index1  4        const     3    100.00  Using where </span><br><span class="line">+----+-------------+----------+------------+-------+-----------------+-----------------+---------+-------+------+----------+-------------+</span><br></pre></td></tr></table></figure></div>

<p>使用force index(index2) ，扫描行数为114</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-------------+----------+------------+-------+-----------------+-----------------+---------+-------+------+----------+-------------+</span><br><span class="line"> id  select_type  table     partitions  type   possible_keys    key              key_len  ref    rows  filtered  Extra       </span><br><span class="line">+----+-------------+----------+------------+-------+-----------------+-----------------+---------+-------+------+----------+-------------+</span><br><span class="line">  1  UPDATE       recharge  NULL        range  index2  index2  4        const   114    100.00  Using where </span><br><span class="line">+----+-------------+----------+------------+-------+-----------------+-----------------+---------+-------+------+----------+-------------+</span><br></pre></td></tr></table></figure></div>

<p>所以优化器合并两个索引是有道理的，但没想到会造成其他事务的阻塞</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol>
<li>在SQL语句使用force index()来指定要使用的索引，但在实际开发中不太方便</li>
<li>将优化器的index merge优化关闭</li>
<li>删除掉index2或者index1的索引，这样也可以解决问题，让优化器只能使用一个索引</li>
<li>添加一个联合索引，包含index1+index2的，优化器会直接使用这个索引</li>
</ol>
<p>添加合理的索引是最合适的办法。</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>Base64专题---PHP实现base64加密和解密的方法</title>
    <url>/2017/02/04/php-article0017/</url>
    <content><![CDATA[<h4 id="Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。"><a href="#Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。" class="headerlink" title="Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。"></a>Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和python的使用代码我都会贴在文章最后。</h4><h5 id="下面是使用php进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收"><a href="#下面是使用php进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收" class="headerlink" title="下面是使用php进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收"></a>下面是使用php进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收</h5><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64_encode</span><br><span class="line">string base64_encode ( string $data )</span><br><span class="line">使用 base64 对 data 进行编码。</span><br><span class="line">参数data要编码的数据。</span><br><span class="line">返回值</span><br><span class="line">编码后的字符串数据， 或者在失败时返回 FALSE。</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;This is an encoded string&#x27;;</span><br><span class="line">echo base64_encode($str);</span><br><span class="line">?&gt;</span><br><span class="line">以上会输出：</span><br><span class="line">VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==</span><br></pre></td></tr></table></figure></div>

<h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64_decode</span><br><span class="line">string **base64_decode** ( string `$data` [, bool `$strict` = false ] )</span><br><span class="line">对 base64 编码的 `data` 进行解码。</span><br><span class="line">参数data编码过的数据。</span><br><span class="line">如果输入的数据超出了 base64 字母表，则返回 `FALSE`。</span><br><span class="line">返回值</span><br><span class="line">返回原始数据， 或者在失败时返回 **`FALSE`**。返回的数据可能是二进制的。</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">`&lt;?php</span><br><span class="line">$str = &#x27;VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==&#x27;;</span><br><span class="line">echo base64_decode($str);</span><br><span class="line">?&gt;`</span><br><span class="line">以上会输出：</span><br><span class="line">&lt;pre style=&quot;white-space: pre-wrap; margin: 0px;&quot;&gt;This is an encoded string&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>最后： 》》》这是一个能在线对base64进行加密解密的网站<a class="link"   href="http://tool.oschina.net/encrypt?type=3"  title="在线加密解密(采用Crypto-JS实现)">在线加密解密(采用Crypto-JS实现) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h5 id="附带我的关于base64的两篇文章"><a href="#附带我的关于base64的两篇文章" class="headerlink" title="附带我的关于base64的两篇文章"></a>附带我的关于base64的两篇文章</h5><p>》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/python-article0016/"  title="Python实现Base64加密和解密">Python实现Base64加密和解密 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/03/java-article0014/"  title="java中使用Base64加密解密的函数">java中使用Base64加密解密的函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Base64</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP连接mysql数据库</title>
    <url>/2017/02/03/php-article0010/</url>
    <content><![CDATA[<h4 id="使用php连接mysql数据库，代码经过测试没有问题，需要改的是username，和password，databasename，也就是你数据库安装时的用户名和密码，还有你要连接的数据库名。localhost换成127-0-0-1应该也是可以的，下面的mysql-query-quot-set-names-utf8-quot-使因为我的数据库有中文，我使用utf8编码，如果不加这句就会出现乱码，不是使用utf8编码的可以不加，至于报错提示die，也可以按照自己的需求改，这只是连接数据库和释放连接，下一篇再说php对mysql的具体操作。喜欢的可以收藏"><a href="#使用php连接mysql数据库，代码经过测试没有问题，需要改的是username，和password，databasename，也就是你数据库安装时的用户名和密码，还有你要连接的数据库名。localhost换成127-0-0-1应该也是可以的，下面的mysql-query-quot-set-names-utf8-quot-使因为我的数据库有中文，我使用utf8编码，如果不加这句就会出现乱码，不是使用utf8编码的可以不加，至于报错提示die，也可以按照自己的需求改，这只是连接数据库和释放连接，下一篇再说php对mysql的具体操作。喜欢的可以收藏" class="headerlink" title="使用php连接mysql数据库，代码经过测试没有问题，需要改的是username，和password，databasename，也就是你数据库安装时的用户名和密码，还有你要连接的数据库名。localhost换成127.0.0.1应该也是可以的，下面的mysql_query(&quot;set names utf8;&quot;);使因为我的数据库有中文，我使用utf8编码，如果不加这句就会出现乱码，不是使用utf8编码的可以不加，至于报错提示die，也可以按照自己的需求改，这只是连接数据库和释放连接，下一篇再说php对mysql的具体操作。喜欢的可以收藏"></a>使用php连接mysql数据库，代码经过测试没有问题，需要改的是username，和password，databasename，也就是你数据库安装时的用户名和密码，还有你要连接的数据库名。localhost换成127.0.0.1应该也是可以的，下面的<code>mysql_query(&quot;set names utf8;&quot;);</code>使因为我的数据库有中文，我使用utf8编码，如果不加这句就会出现乱码，不是使用utf8编码的可以不加，至于报错提示die，也可以按照自己的需求改，这只是连接数据库和释放连接，下一篇再说php对mysql的具体操作。喜欢的可以收藏</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$con = mysql_connect(&quot;localhost&quot;,&quot;username&quot;,&quot;password&quot;);</span><br><span class="line">mysql_query(&quot;set names utf8;&quot;);</span><br><span class="line">if (!$con)</span><br><span class="line">  &#123;</span><br><span class="line">  die(&#x27;Could not connect: &#x27; . mysql_error());</span><br><span class="line">  &#125;</span><br><span class="line">mysql_select_db(&quot;databasename&quot;, $con);</span><br><span class="line"></span><br><span class="line">mysql_close($con);</span><br><span class="line">// some code</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>邮件专题---使用php发送邮件</title>
    <url>/2017/02/04/php-article0020/</url>
    <content><![CDATA[<h4 id="这篇邮件发送专题里的使用php发送邮件的博文，其实用php发送邮件我并不是很建议，php发送邮件需要服务器有邮件程序，或者通常都是封装一个php的smtp邮件类来发送邮件。比起python要麻烦很多，而且本地测试是不通过的，我在我的电脑测试时就发送不了，但把代码挂到服务器上时就发送出去了，有需要在服务器上使用这个功能的可以尝试一下，后面我会再更新一篇php调用python脚本来发送邮件。"><a href="#这篇邮件发送专题里的使用php发送邮件的博文，其实用php发送邮件我并不是很建议，php发送邮件需要服务器有邮件程序，或者通常都是封装一个php的smtp邮件类来发送邮件。比起python要麻烦很多，而且本地测试是不通过的，我在我的电脑测试时就发送不了，但把代码挂到服务器上时就发送出去了，有需要在服务器上使用这个功能的可以尝试一下，后面我会再更新一篇php调用python脚本来发送邮件。" class="headerlink" title="这篇邮件发送专题里的使用php发送邮件的博文，其实用php发送邮件我并不是很建议，php发送邮件需要服务器有邮件程序，或者通常都是封装一个php的smtp邮件类来发送邮件。比起python要麻烦很多，而且本地测试是不通过的，我在我的电脑测试时就发送不了，但把代码挂到服务器上时就发送出去了，有需要在服务器上使用这个功能的可以尝试一下，后面我会再更新一篇php调用python脚本来发送邮件。"></a>这篇邮件发送专题里的使用php发送邮件的博文，其实用php发送邮件我并不是很建议，php发送邮件需要服务器有邮件程序，或者通常都是封装一个php的smtp邮件类来发送邮件。比起python要麻烦很多，而且本地测试是不通过的，我在我的电脑测试时就发送不了，但把代码挂到服务器上时就发送出去了，有需要在服务器上使用这个功能的可以尝试一下，后面我会再更新一篇php调用python脚本来发送邮件。</h4><h5 id="今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。"><a href="#今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。" class="headerlink" title="今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。"></a>今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。</h5><h5 id="使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。"><a href="#使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。" class="headerlink" title="使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。"></a>使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。</h5><ul>
<li>下面是php发送邮件的源代码压缩包，由于服务器资源有限，<strong>我把这些下载文件都放到了百度云盘里</strong>，然后把链接挂上来，这种小文件不需要登录百度，直接用游览器下载即可，如果失效或有其他问题，请及时联系我发邮件给你。下面的代码我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。</li>
</ul>
<p>》》》<a class="link"   href="http://pan.baidu.com/s/1dERoiq9"  title="下载链接">下载链接—php-email.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h5 id="压缩包里有三个文件，show-php是用来在服务器端显示的，显示效果如下图，可以根据需要改，采用的是from表单提交。"><a href="#压缩包里有三个文件，show-php是用来在服务器端显示的，显示效果如下图，可以根据需要改，采用的是from表单提交。" class="headerlink" title="压缩包里有三个文件，show.php是用来在服务器端显示的，显示效果如下图，可以根据需要改，采用的是from表单提交。"></a>压缩包里有三个文件，show.php是用来在服务器端显示的，显示效果如下图，可以根据需要改，采用的是from表单提交。</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/email2.png"
                     
                ></p>
<blockquote>
<p>注：本邮件类都是经过我测试成功了的，如果大家发送邮件的时候遇到了失败的问题，请从以下几点排查： * 用户名和密码是否正确； * 检查邮箱设置是否启用了smtp服务； * 是否是php环境的问题导致； * 将26行的$smtp-&gt;debug &#x3D; false改为true，可以显示错误信息，然后可以复制报错信息到网上搜一下错误的原因； * 或者联系我一起解决</p>
</blockquote>
<h4 id="这是我写的邮件专题里其他两篇发送邮件的博文"><a href="#这是我写的邮件专题里其他两篇发送邮件的博文" class="headerlink" title="这是我写的邮件专题里其他两篇发送邮件的博文"></a>这是我写的邮件专题里其他两篇发送邮件的博文</h4><p>》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/java-article0021/"  title="邮件专题---使用java发送邮件">邮件专题—使用java发送邮件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/python-article19/"  title="邮件专题---使用Python发送邮件">邮件专题—使用Python发送邮件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 有需要的可以查看原文 》》》<a class="link"   href="http://www.daixiaorui.com/read/16.html#viewpl"  title="请参考原文">请参考原文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中常用时间函数总结</title>
    <url>/2017/02/05/php-article24/</url>
    <content><![CDATA[<h3 id="今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。"><a href="#今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。" class="headerlink" title="今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。"></a>今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。今天写一篇平时经常会用到的关于php中data，time函数的使用总结。</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="PHP-Date"><a href="#PHP-Date" class="headerlink" title="PHP Date()"></a>PHP Date()</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">date(format,timestamp) 函数返回服务器的当前日期/时间</span><br><span class="line">format 规定日期和时间显示的格式。有&#x27;-&#x27;,&#x27;/&#x27;,&#x27;·&#x27;;</span><br><span class="line">timestamp 要显示的日期，不写的话，默认是当前时间和日期</span><br><span class="line">d - 表示月里的某天（01-31）</span><br><span class="line">m - 表示月（01-12）</span><br><span class="line">Y - 表示年（四位数）</span><br><span class="line">1 - 表示周里的某天</span><br><span class="line">h - 带有首位零的 12 小时小时格式</span><br><span class="line">i - 带有首位零的分钟</span><br><span class="line">s - 带有首位零的秒（00 -59）</span><br><span class="line">a - 小写的午前和午后（am 或 pm）</span><br><span class="line">time() 返回当前时间的 Unix 时间戳</span><br></pre></td></tr></table></figure></div>

<h3 id="实例，"><a href="#实例，" class="headerlink" title="实例，"></a>实例，</h3><p>使用大写Y和小写y的结果是不一样的<br><?php
//使用 - 符号
echo date('Y-m-h');
echo "<br>";
echo date('y-m-h');
echo "<br>";
结果：
2017-02-03
17-02-03
//使用 / 符号
echo date('Y/m/h');
echo "<br>";
echo date('y/m/h');
echo "<br>";
结果：
2017/02/03
17/02/03
//使用 · 符号
echo date('Y·m·h');
echo "<br>";
echo date('y·m·h');
echo "<br>";
结果：
2017·02·03
17·02·03
//输出一周内的哪一天
echo "今天是： " . date("l");
echo "<br>";
结果：
今天是： Sunday
//输出现在的时间
echo "时间:" . date("h:i:sa");
echo "<br>";
结果：
时间:03:29:18pm
//返回当前时间的 Unix 时间戳
echo time();
echo "<br>";
结果：、
1486280440
?></p>
<p> </p>
<hr>
<h4 id="以上就是我在php中经常用到的时间函数，有兴趣的可以深入了解。或者参考下面w3shool给出的php全部时间类型函数"><a href="#以上就是我在php中经常用到的时间函数，有兴趣的可以深入了解。或者参考下面w3shool给出的php全部时间类型函数" class="headerlink" title="以上就是我在php中经常用到的时间函数，有兴趣的可以深入了解。或者参考下面w3shool给出的php全部时间类型函数"></a>以上就是我在php中经常用到的时间函数，有兴趣的可以深入了解。或者参考下面w3shool给出的php全部时间类型函数</h4><p>》》》<a class="link"   href="http://www.w3school.com.cn/php/php_ref_date.asp"  title="PHP Date / Time 函数">PHP Date &#x2F; Time 函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>DateTime</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中结构化分级调用mysql数据库</title>
    <url>/2017/02/05/php-article25/</url>
    <content><![CDATA[<h3 id="在php中经常会有很多个文件，假如很多页面需要调用数据，而每个页面都写一遍连接数据库的代码，这在后期维护的时候就会特别麻烦，尤其是数据库名或者表名发生改变，那就得一个一个的改，所以在php中操作mysql数据库时我是尽量把数据库连接的操作写到另外一个文件中，使用时直接调用相应函数即可，这样使程序整体更加简洁高效，结构化设计更容易查阅和修改。"><a href="#在php中经常会有很多个文件，假如很多页面需要调用数据，而每个页面都写一遍连接数据库的代码，这在后期维护的时候就会特别麻烦，尤其是数据库名或者表名发生改变，那就得一个一个的改，所以在php中操作mysql数据库时我是尽量把数据库连接的操作写到另外一个文件中，使用时直接调用相应函数即可，这样使程序整体更加简洁高效，结构化设计更容易查阅和修改。" class="headerlink" title="在php中经常会有很多个文件，假如很多页面需要调用数据，而每个页面都写一遍连接数据库的代码，这在后期维护的时候就会特别麻烦，尤其是数据库名或者表名发生改变，那就得一个一个的改，所以在php中操作mysql数据库时我是尽量把数据库连接的操作写到另外一个文件中，使用时直接调用相应函数即可，这样使程序整体更加简洁高效，结构化设计更容易查阅和修改。"></a>在php中经常会有很多个文件，假如很多页面需要调用数据，而每个页面都写一遍连接数据库的代码，这在后期维护的时候就会特别麻烦，尤其是数据库名或者表名发生改变，那就得一个一个的改，所以在php中操作mysql数据库时我是尽量把数据库连接的操作写到另外一个文件中，使用时直接调用相应函数即可，这样使程序整体更加简洁高效，结构化设计更容易查阅和修改。</h3><h3 id="代码共分三级，最高级database-php，实现数据库的连接和释放，然后是tablename-db-php-响应在database中返回的连接值使用sql语句对数据库进行查询，在调用关闭函数，释放连接。最后是需要显示数据的php页面，直接使用调取回来的数据即可。其中database-php和tablename-db-php应该放在一个config文件夹里。"><a href="#代码共分三级，最高级database-php，实现数据库的连接和释放，然后是tablename-db-php-响应在database中返回的连接值使用sql语句对数据库进行查询，在调用关闭函数，释放连接。最后是需要显示数据的php页面，直接使用调取回来的数据即可。其中database-php和tablename-db-php应该放在一个config文件夹里。" class="headerlink" title="代码共分三级，最高级database.php，实现数据库的连接和释放，然后是tablename_db.php,响应在database中返回的连接值使用sql语句对数据库进行查询，在调用关闭函数，释放连接。最后是需要显示数据的php页面，直接使用调取回来的数据即可。其中database.php和tablename_db.php应该放在一个config文件夹里。"></a>代码共分三级，最高级database.php，实现数据库的连接和释放，然后是tablename_db.php,响应在database中返回的连接值使用sql语句对数据库进行查询，在调用关闭函数，释放连接。最后是需要显示数据的php页面，直接使用调取回来的数据即可。其中database.php和tablename_db.php应该放在一个config文件夹里。</h3><h3 id="下面是三个php页面的代码，我只写了查询功能了，其他功能相似，自己按照需求更改就可以，或者参考我写的关于php操作mysql数据库的博文，由于这三个文件的网址不在同一个目录下，使用时需要修改，有问题可以联系我，一起研究解决。"><a href="#下面是三个php页面的代码，我只写了查询功能了，其他功能相似，自己按照需求更改就可以，或者参考我写的关于php操作mysql数据库的博文，由于这三个文件的网址不在同一个目录下，使用时需要修改，有问题可以联系我，一起研究解决。" class="headerlink" title="下面是三个php页面的代码，我只写了查询功能了，其他功能相似，自己按照需求更改就可以，或者参考我写的关于php操作mysql数据库的博文，由于这三个文件的网址不在同一个目录下，使用时需要修改，有问题可以联系我，一起研究解决。"></a>下面是三个php页面的代码，我只写了查询功能了，其他功能相似，自己按照需求更改就可以，或者参考我写的关于php操作mysql数据库的博文，由于这三个文件的网址不在同一个目录下，使用时需要修改，有问题可以联系我，一起研究解决。</h3><h3 id="database-php"><a href="#database-php" class="headerlink" title="database.php"></a>database.php</h3><?php
    class DATABASE{
        public function conn\_mysql(){   //连接数据库函数
            $con = mysql\_connect("localhost","username","password");//数据库用户名和密码
            mysql\_query("set names utf8;");
            if (!$con){
                die('Could not connect: ' . mysql\_error());
            }
            mysql\_select\_db("databasename", $con); //要连接的数据库名
            return $con;
        }
        public function close\_mysql($con){  //释放连接的函数
            mysql\_close($con);
        }
    }
?>

<h3 id="tablename-db-php"><a href="#tablename-db-php" class="headerlink" title="tablename_db.php"></a>tablename_db.php</h3><?php
//defined ( 'SYSPATH' ) or die ( 'No direct access allowed.' );
require\_once 'database.php';       //导入上级database\_db.php文件
class DIARY\_DB{
     public function mysql\_db(){    
        $database = new DATABASE();   //实例化类
        $con = $database->conn\_mysql();  //连接mysql
        $result = mysql\_query("SELECT \* FROM tablename"); //进行查询操作
        $database->close\_mysql($con);   //释放连接
        return $result;  //返回结果
     }
}
?>

<h3 id="show-php"><a href="#show-php" class="headerlink" title="show.php"></a>show.php</h3><?php
require\_once 'config/tablename\_db.php';  //导入上级tablename\_db.php文件
$article\_db = new  ARTICLE\_DB();   //实例化类
$result = $article\_db->mysql\_db(); //调用函数
$row = mysql\_fetch\_array($result);  //获取查询到的数组
?>
<p>&#x2F;&#x2F;以下数据仅做参考，当数据不止一组时，应该使用while语句去遍历数组<br><?php echo $row\['a\_title'\];?><br><?php echo $row\['a\_adddate'\];?><br><?php echo $row\['a\_adduser'\];?><br><?php echo $row\['a\_visit'\];?><br><?php echo $row\['a\_comment'\];?><br><?php echo $row\['a\_text'\];?><br><?php echo $row\['a\_type'\]; ?></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP对mysql数据流进行增删改查</title>
    <url>/2017/02/05/php-article26/</url>
    <content><![CDATA[<h3 id="这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作，这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作；这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作"><a href="#这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作，这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作；这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作" class="headerlink" title="这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作，这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作；这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作"></a>这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作，这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作；这篇博文主要讲解我在使用PHP过程中常用的mysql语句操作</h3><h3 id="一-查询数据库"><a href="#一-查询数据库" class="headerlink" title="一.查询数据库"></a>一.查询数据库</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查询数据表中的所有数据</span><br><span class="line">$result = mysql_query(&quot;SELECT * FROM tablename&quot;);</span><br><span class="line">//查询某个id所对应的数据</span><br><span class="line">$id = 1;</span><br><span class="line">$result = mysql_query(&quot;SELECT * FROM article where id=&quot;.$id);</span><br><span class="line">//查询按照id排序的所有数据</span><br><span class="line">$result = mysql_query(&quot;SELECT * FROM users ORDER BY id DESC&quot;);</span><br><span class="line">//获取数据表的数据条数</span><br><span class="line">$dataCount = mysql_num_rows($result);</span><br><span class="line">#打印输出查询到的一条内容</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line">echo $row[&#x27;id&#x27;]&#x27;</span><br><span class="line">#打印输出查询到的所有内容，因为是多维数组，使用while循环</span><br><span class="line">while($row = mysql_fetch_array($result))&#123;</span><br><span class="line">echo $row[&#x27;id&#x27;]&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="二-添加数据"><a href="#二-添加数据" class="headerlink" title="二.添加数据"></a>二.添加数据</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//首先进行非空排错</span><br><span class="line">if(!isset($_POST[&#x27;username&#x27;]))&#123;</span><br><span class="line">die(&#x27;username is not define&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(empty($username))&#123;</span><br><span class="line">die(&#x27;username is empty&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">//执行类型转换，防止SQL注入</span><br><span class="line">$age=intval($age);</span><br><span class="line">//插入数据</span><br><span class="line">mysql_query(&quot;INSERT INTO tablename(username,password) VALUES (&#x27;$username&#x27;,$password)&quot;);</span><br><span class="line">//判断是否成功返回页面</span><br><span class="line">if(mysql_error())&#123;</span><br><span class="line">echo mysql_error();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">header(&quot;Location:index.php&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="特别提醒的是：字符串数据一定要加引号，非字符串一定要进行类型转换，防止SQL注入，以保证数据库安全。"><a href="#特别提醒的是：字符串数据一定要加引号，非字符串一定要进行类型转换，防止SQL注入，以保证数据库安全。" class="headerlink" title="特别提醒的是：字符串数据一定要加引号，非字符串一定要进行类型转换，防止SQL注入，以保证数据库安全。"></a>特别提醒的是：字符串数据一定要加引号，非字符串一定要进行类型转换，防止SQL注入，以保证数据库安全。</h5><h3 id="三-修改数据"><a href="#三-修改数据" class="headerlink" title="三.修改数据"></a>三.修改数据</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(empty($_POST[&#x27;id&#x27;]))&#123;</span><br><span class="line">die(&#x27;id is empty&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(empty($_POST[&#x27;username&#x27;]))&#123;</span><br><span class="line">die(&#x27;usernname is empty&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">$id=intval($_POST[&#x27;id&#x27;]);</span><br><span class="line">$username=$_POST[&#x27;username&#x27;];</span><br><span class="line">mysql_query(&quot;UPDATE users SET username=&#x27;$username&#x27;,password=$password WHERE id=$id&quot;);</span><br><span class="line">//排错并返回</span><br><span class="line">if(mysql_error())&#123;</span><br><span class="line">echo mysql_error();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">header(&quot;Location:index.php&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="四-删除数据"><a href="#四-删除数据" class="headerlink" title="四.删除数据"></a>四.删除数据</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//排空错误</span><br><span class="line">if(empty($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">die(&#x27;id is empty&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">$id=intval($_GET[&#x27;id&#x27;]);</span><br><span class="line">mysql_query(&quot;DELETE FROM users WHERE id=$id&quot;);</span><br><span class="line">//排错并返回页面</span><br><span class="line">if(mysql_error())&#123;</span><br><span class="line">echo mysql_error();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">header(&quot;Location:index.php&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PHP编写的基于MySQL博客模板-可直接使用</title>
    <url>/2017/02/07/php-article32/</url>
    <content><![CDATA[<h1 id="Blog-code"><a href="#Blog-code" class="headerlink" title="Blog code"></a>Blog code</h1><p>本项目使用php编写，前台功能基本完善，有顶部菜单和侧栏菜单底部菜单，支持首页展示功能，文章功能，文章包括列表显示和单篇文章显示功能，随记功能，以时间线展示，相册功能，每行会显示三张大小相同的照片，留言版功能，支持留言和已有留言的游览，还有About，包括扩展的更多功能，可登录后台，打赏作者，发送邮件功能（邮件可以发送），友情链接的显示，等待扩展功能，拥有后台结构编写完成，文章发布等功能还未添加，数据库sql文件已经放到config文件夹中 》》》<a class="link"   href="https://github.com/rainweb521/PHP_Programm_Blog"  title="Github地址">Github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="首页展示"><a href="#首页展示" class="headerlink" title="首页展示"></a>首页展示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog1.png"
                     
                ></p>
<h3 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog2.png"
                     
                ></p>
<h3 id="具体文章显示"><a href="#具体文章显示" class="headerlink" title="具体文章显示"></a>具体文章显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog10.png"
                     
                ></p>
<h3 id="随记列表显示"><a href="#随记列表显示" class="headerlink" title="随记列表显示"></a>随记列表显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog3.png"
                     
                ></p>
<h3 id="相册列表显示"><a href="#相册列表显示" class="headerlink" title="相册列表显示"></a>相册列表显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog4.png"
                     
                ></p>
<h3 id="留言版显示"><a href="#留言版显示" class="headerlink" title="留言版显示"></a>留言版显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog5.png"
                     
                ></p>
<h3 id="个人简介显示"><a href="#个人简介显示" class="headerlink" title="个人简介显示"></a>个人简介显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog6.png"
                     
                ></p>
<h3 id="更多功能页面显示"><a href="#更多功能页面显示" class="headerlink" title="更多功能页面显示"></a>更多功能页面显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog7.png"
                     
                ></p>
<h3 id="发送邮件功能页面显示"><a href="#发送邮件功能页面显示" class="headerlink" title="发送邮件功能页面显示"></a>发送邮件功能页面显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog8.png"
                     
                ></p>
<h3 id="底部菜单页面显示"><a href="#底部菜单页面显示" class="headerlink" title="底部菜单页面显示"></a>底部菜单页面显示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/githubblog/blog9.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现本地图片的上传和验证功能</title>
    <url>/2017/02/09/php-article44/</url>
    <content><![CDATA[<h2 id="今天研究了一下PHP的FILES函数，使用PHP实现本地图片的上传，验证文件是否为图片，并将图片保存在指定目录下，实现游览图片的功能，感觉还是很好玩的，一共有两个PHP页面，一个作为前台的上传和图片展示，另一个用来处理保存图片，代码里做了很详细的注释，并将FILES函数的语法，error报错类型写了出来，还有一些注意事项。"><a href="#今天研究了一下PHP的FILES函数，使用PHP实现本地图片的上传，验证文件是否为图片，并将图片保存在指定目录下，实现游览图片的功能，感觉还是很好玩的，一共有两个PHP页面，一个作为前台的上传和图片展示，另一个用来处理保存图片，代码里做了很详细的注释，并将FILES函数的语法，error报错类型写了出来，还有一些注意事项。" class="headerlink" title="今天研究了一下PHP的FILES函数，使用PHP实现本地图片的上传，验证文件是否为图片，并将图片保存在指定目录下，实现游览图片的功能，感觉还是很好玩的，一共有两个PHP页面，一个作为前台的上传和图片展示，另一个用来处理保存图片，代码里做了很详细的注释，并将FILES函数的语法，error报错类型写了出来，还有一些注意事项。"></a>今天研究了一下PHP的FILES函数，使用PHP实现本地图片的上传，验证文件是否为图片，并将图片保存在指定目录下，实现游览图片的功能，感觉还是很好玩的，一共有两个PHP页面，一个作为前台的上传和图片展示，另一个用来处理保存图片，代码里做了很详细的注释，并将FILES函数的语法，error报错类型写了出来，还有一些注意事项。</h2><h3 id="FILES函数"><a href="#FILES函数" class="headerlink" title="FILES函数"></a>FILES函数</h3><ol>
<li><code>$_FILES[&#39;myFile&#39;][&#39;name&#39;]</code> 客户端文件的原名称</li>
<li><code>$_FILES[&#39;myFile&#39;][&#39;type&#39;]</code> 文件的 MIME类型，需要浏览器提供该信息的支持，例如”image&#x2F;gif”</li>
<li><code>$_FILES[&#39;myFile&#39;][&#39;size&#39;]</code> 已上传文件的大小，单位为字节</li>
<li><code>$_FILES[&#39;myFile&#39;][&#39;tmp_name&#39;]</code> 文件被上传后在服务端储存的临时文件名，一般是系统默认，可以在php.ini的upload_tmp_dir指定</li>
</ol>
<h3 id="关于FILES中error报错类型及其注意："><a href="#关于FILES中error报错类型及其注意：" class="headerlink" title="关于FILES中error报错类型及其注意："></a>关于FILES中error报错类型及其注意：</h3><h4 id="过滤错误号"><a href="#过滤错误号" class="headerlink" title="过滤错误号"></a>过滤错误号</h4><ul>
<li>0: 没有错误发生，文件上传成功</li>
<li>1: 上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值</li>
<li>2: 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值</li>
<li>3: 文件只有部分被上传</li>
<li>4: 没有文件被上传</li>
<li>5: 上传文件大小为0</li>
</ul>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li>文件被上传结束后，默认地被存储在了临时目录中，这时必须将它从临时目录中删除或移动到其它地方，如果没有，则会被删除。也就是不管是否上传成功，脚本执行完后临时目录里的文件肯定会被删除。所以在删除之前要用PHP的copy() 函数将它复制到其它位置，此时，才算完成了上传文件过程。</li>
<li>在 PHP 4.1.0 版本以前该数组的名称为<code>$HTTP_POST_FILES</code>，它并不像$_FILES 一样是自动全局变量。PHP 3 不支持<code>$HTTP_POST_FILES</code>数组。</li>
<li>用form上传文件时，一定要加上属性内容<code>enctype=&quot;multipart/form-data&quot;</code>，否则用<code>$_FILES[filename]</code>获取文件信息时会报异常。</li>
</ol>
<h3 id="效果如下图"><a href="#效果如下图" class="headerlink" title="效果如下图"></a>效果如下图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php9.jpg"
                     
                ></p>
<h3 id="以下是代码"><a href="#以下是代码" class="headerlink" title="以下是代码"></a>以下是代码</h3><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--?php header(&quot;Content-Type:text/html;charset=utf-8&quot;); ?--&gt;</span><br><span class="line">&lt;pre class=&quot;lang:php decode:true &quot;&gt;&lt;?php</span><br><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;title&gt;PHP实现图片的上传和验证&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">table&#123;text-align:center;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">&lt;h1&gt;上传功能&lt;/h1&gt;</span><br><span class="line">&lt;form action=&quot;index_ok.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    上传图片：&lt;input type=&quot;file&quot; name=&quot;pic&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; name=&quot;sub&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;table width=&quot;500&quot;&gt;</span><br><span class="line">    &lt;tr bgcolor=&quot;#cccccc&quot;&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;图片&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;添加时间&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    //1 打开目录</span><br><span class="line">    $dir=opendir(&quot;./uploads&quot;);</span><br><span class="line">    //2 遍历目录，输出里面的图片</span><br><span class="line">    $i=0;</span><br><span class="line">    while($f=readdir($dir))&#123;</span><br><span class="line">        $i++;</span><br><span class="line">        //读取目录中的文件，模拟数据库操作</span><br><span class="line">        if($f!=&quot;.&quot; &amp;&amp; $f!=&quot;..&quot;)&#123;</span><br><span class="line">            $filename=&quot;./uploads/$f&quot;;</span><br><span class="line">            echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&#123;$i&#125;&lt;/td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&lt;img src=&#x27;./uploads/&#123;$f&#125;&#x27; width=&#x27;80&#x27; height=&#x27;60&#x27;&gt;&lt;/td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&quot;.date(&quot;Y-m-d&quot;,filectime($filename)).&quot;&lt;/td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&lt;a href=&#x27;./uploads/&#123;$f&#125;&#x27;&gt;查看&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //3 关闭目录</span><br><span class="line">    closedir($dir);</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;tr bgcolor=&quot;#cccccc&quot;&gt;&lt;td colspan=&quot;4&quot;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;&lt;/pre&gt;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;lang:php decode:true &quot;&gt;&lt;?php</span><br><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">    if($_FILES[&#x27;pic&#x27;][&#x27;error&#x27;]&gt;0)&#123;</span><br><span class="line">        echo $_FILES[&#x27;pic&#x27;][&#x27;error&#x27;];</span><br><span class="line">        echo &quot;上传文件错误！&quot;;</span><br><span class="line">        echo &#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=index.php&quot;&gt;&#x27;;  //自动跳转回index文件</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //开始获取上传文件的信息</span><br><span class="line">        $file=$_FILES[&#x27;pic&#x27;];</span><br><span class="line">        //var_dump($file);打印文件里的全部信息</span><br><span class="line">        //name:上传文件名</span><br><span class="line">        //type:上传文件的类型</span><br><span class="line">        //tmp_name:上传成功后的临时文件</span><br><span class="line">        //size:上传文件的大小</span><br><span class="line">        //error:上传文件的错误信息</span><br><span class="line">        $uploaddir=&quot;./uploads/&quot;;  //选择要上传的文件存放目录</span><br><span class="line">        //$uploadfile=$uploaddir.basename($file[&#x27;name&#x27;]);//获得上传文件的名称</span><br><span class="line">        //解析文件的名字</span><br><span class="line">        $fileinfo=pathinfo($file[&#x27;name&#x27;]);</span><br><span class="line">//      echo $fileinfo[&#x27;extension&#x27;];  获取文件的类型</span><br><span class="line">        do&#123;</span><br><span class="line">            $newfile=date(&quot;YmdHis&quot;).rand(1000,9999).&quot;.&quot;.$fileinfo[&#x27;extension&#x27;];//更改文件的名字，获取一个新的名字</span><br><span class="line">        &#125;while(file_exists($uploaddir.$newfile));</span><br><span class="line"></span><br><span class="line">        //上传文件的类型限制</span><br><span class="line">        if (!(($file[&#x27;type&#x27;] == &quot;image/gif&quot;)($file[&#x27;type&#x27;] == &quot;image/jpeg&quot;)($file[&#x27;type&#x27;] == &quot;image/pjpeg&quot;)))&#123;</span><br><span class="line">            die(&quot;文件类型错误！&quot;);</span><br><span class="line">            echo &#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=index.php&quot;&gt;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        //上传文件的大小限制</span><br><span class="line">        if($file[&#x27;size&#x27;] &gt; 2*1024*1024)&#123;</span><br><span class="line">            die(&quot;上传文件超过2MB！&quot;);</span><br><span class="line">            echo &#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=index.php&quot;&gt;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        //开始上传文件</span><br><span class="line">        if (is_uploaded_file($file[&#x27;tmp_name&#x27;])) &#123;</span><br><span class="line">            if (move_uploaded_file($file[&#x27;tmp_name&#x27;], $uploaddir.$newfile)) &#123;</span><br><span class="line">                echo &quot;上传成功！&quot;;</span><br><span class="line">                echo &#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=index.php&quot;&gt;&#x27;;//自动跳转回index文件</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                echo &quot;上传失败，请稍等！&quot;;</span><br><span class="line">                echo &#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=index.php&quot;&gt;&#x27;;  //自动跳转回index文件</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">?&gt;&lt;/pre&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP学习总结</title>
    <url>/2017/03/07/php-article64/</url>
    <content><![CDATA[<ol>
<li><p><a class="link"   href="http://www.test.com/index.php?m=home&c=index&a=add%EF%BC%8C" >http://www.test.com/index.php?m=home&amp;c=index&amp;a=add， <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 当想要访问application中home目录中的controller的主函数中其他方法时，m对应home目录，c对应的是controller中的php文件，indexController.class.php就是index，如果是userContriller.class.php文件，则对应的就是user，a对应的是php文件中的方法，index方法就写index，add方法就写a&#x3D;add</p>
</li>
<li><p>后台管理应该在Application中创建一个Admin的文件夹，里面包含Conf,Controller,view这三个文件夹。在Controller创建class类，而不是PHP文件，类中有use和namespace 变量。</p>
</li>
<li><p>关于layer的使用，在没有碰到layer时弹层是一个很简单但很麻烦的东西，layer只需要到官网下载绿色版，然后放在项目的js文件夹中，使用的时候按照官网的文档直接的 <code>&lt;script&gt;</code>中调用相应的函数即可。</p>
</li>
<li><p>有时文件中js方法做出修改而游览器没有变化，可能是游览器有了缓存，需要使用ctrl+F5刷新一下。</p>
</li>
<li><p>Ajax的调试可以通过谷歌游览器的F12来查看network的发送情况。</p>
</li>
<li><p>在使用layer弹窗时记得加exit() <code>if(!username) &#123; dialog.error(&#39;用户名不能为空&#39;); exit();&#125;</code></p>
</li>
<li><p>在新建一个class的Contrller时，要记得继承<code>extends Controller</code>,并且在头部添加名称空间<code>namespace Admin\Controller;use Think\Controller;</code></p>
</li>
<li><p>在html页面中遍历时</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;volist name=&quot;left_menu&quot; id=&quot;menu&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;li class=&quot;&#123;$menu.show&#125;&quot;&gt;</span><br><span class="line">                        &lt;a href=&quot;&#123;$menu.href&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;i class=&quot;menu-icon fa fa-&#123;$menu.icon&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">                            &lt;span class=&quot;menu-text&quot;&gt; &#123;$menu.name&#125; &lt;/span&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;b class=&quot;arrow&quot;&gt;&lt;/b&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;/volist&gt;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>thinkphp中向html页面传值时：<code>$this-&gt;assign(&#39;left_menu&#39;,$left_menu);</code></p>
</li>
<li><p>html中的if判断，在condition属性中可以支持eq等判断表达式，同上面的比较标签，但是不支持带有”&gt;”、”&lt;”等符号的用法，因为会混淆模板解析，eq或者 equal</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;if condition=&quot;$list.state == 1&quot;&gt;</span><br><span class="line">&lt;span class=&quot;label label-sm label-info arrowed arrowed-righ&quot;&gt;True&lt;/span&gt;</span><br><span class="line">&lt;/if&gt;</span><br></pre></td></tr></table></figure></div>

<p>2017-03-01 16:33:57 星期三 11. 在使用get请求和post请求时，路径写了我的 Controller中的函数，但总是提示模板不存在研究了很长时间,发现是show_list.html找不到，而我的函数名也是show_list，然后在view中新建了一个show_list.html就好了，原来thinkphp中每个函数都必须要有一个对应的html文件 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/index_files/1.jpg"
                     
                > 12. thinkphp中的模糊查询语句</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$like[&#x27;site&#x27;] = array(&#x27;like&#x27;,&#x27;%&#x27;.$select.&#x27;%&#x27;);</span><br><span class="line">$list = $this-&gt;_db-&gt;where($like)-&gt;select();</span><br></pre></td></tr></table></figure></div>

<ol>
<li>thinkphp中的重定向 <code>$this-&gt;redirect(&#39;/admin.php?c=login&#39;);</code></li>
</ol>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP+MySQL项目开发细节总结</title>
    <url>/2017/02/11/php-article49/</url>
    <content><![CDATA[<h2 id="PHP-MySQL项目开发细节总结"><a href="#PHP-MySQL项目开发细节总结" class="headerlink" title="PHP+MySQL项目开发细节总结"></a>PHP+MySQL项目开发细节总结</h2><ol>
<li><p>写出项目流程，要哪些页面，列出提纲</p>
</li>
<li><p>创建数据库</p>
</li>
<li><p>创建配置文件dbconfig.php</p>
</li>
<li><p>创建页面，添加信息</p>
</li>
<li><p>在需要的页面执行相应的操作处理，主要是添加，删除，修改等信息操作处理</p>
</li>
</ol>
<h3 id="操作数据库时"><a href="#操作数据库时" class="headerlink" title="操作数据库时"></a>操作数据库时</h3><ol>
<li><p>先导入数据库配置文件</p>
</li>
<li><p>获取要执行的信息</p>
</li>
<li><p>拼接SQL语句，并执行操作。一般是用switch语句实现，根据传递过来的变量做出处理。</p>
</li>
<li><p>完成操作后进行跳转，可以超级链接来实现，也可以用header(“location:url”);</p>
</li>
<li><p>对于一些可能会抛出异常的信息用@来屏蔽</p>
</li>
</ol>
<p>例如： $sql&#x3D;”select * from news where order by addtime desc”;     &#x2F;&#x2F;将最新的新闻先显示出来     $result&#x3D;@mysql_query($sql,$conn);</p>
<h2 id="在php-mysql开发有关数据库的项目常用的语句："><a href="#在php-mysql开发有关数据库的项目常用的语句：" class="headerlink" title="在php+mysql开发有关数据库的项目常用的语句："></a>在php+mysql开发有关数据库的项目常用的语句：</h2><ol>
<li>配置文件中的连接mysql服务器，选择数据库，设置编码</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">    //连接数据库配置，主机，数据库用户，密码</span><br><span class="line">    $conn=@mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;1234&quot;)or die(&quot;error:&quot;.mysql_error());</span><br><span class="line">    mysql_select_db(&quot;newsdb&quot;,$conn);//数据库名选择</span><br><span class="line">    mysql_query(&quot;set names utf8&quot;);//设置数据库编码</span><br></pre></td></tr></table></figure></div>

<ol>
<li>添加操作 根据上一次插入的数据的id来判断使用函数：mysql_insert_id($conn)&gt;0来做出处理。</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql=&quot;insert into news values(null,&#x27;&#123;$title&#125;&#x27;,&#x27;&#123;$keywords&#125;&#x27;,&#x27;&#123;$author&#125;&#x27;,&#x27;&#123;$addtime&#125;&#x27;,&#x27;&#123;$content&#125;&#x27;)&quot;;</span><br><span class="line">    //echo $sql;</span><br><span class="line">    //insert into news values(null,&#x27;大大&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;1367984131&#x27;,&#x27;4&#x27;)</span><br><span class="line">    //3 判断是否成功</span><br><span class="line">    if(empty($content))&#123;</span><br><span class="line">    die(&quot;内容不能为空！&quot;.&quot;&lt;a href=&#x27;add.php&#x27;&gt;添加新闻信息&lt;/a&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    mysql_query($sql,$conn);</span><br><span class="line">    if(mysql_insert_id($conn)&gt;0)&#123;</span><br><span class="line">    echo &quot;添加成功！&quot;;</span><br><span class="line">    &#125;else&#123;echo &quot;添加失败!&quot;.mysql_error();&#125;</span><br><span class="line">    echo &quot;&lt;a href=&#x27;javascript:window.history.back();&#x27;&gt;返回&lt;/a&gt;&quot;;//返回</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;a href=&#x27;index.php&#x27;&gt;浏览新闻信息&lt;/a&gt;&quot;;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>删除信息 通过影响的行数mysql_affected_rows($conn)&gt;0;来判断是否删除成功</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sd=$_GET[&#x27;id&#x27;];</span><br><span class="line">    $sql=&quot;delete from news where id=&#123;$sd&#125;&quot;;</span><br><span class="line">    mysql_query($sql,$conn);</span><br><span class="line">    if(mysql_affected_rows($conn)&gt;0)&#123;</span><br><span class="line">    echo &quot;删除成功！&quot;;</span><br><span class="line">    &#125;else&#123;echo &quot;删除失败！&quot;.mysql_error();&#125;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;a href=&#x27;index.php&#x27;&gt;浏览新闻信息&lt;/a&gt;&quot;;</span><br></pre></td></tr></table></figure></div>

<p>4 更新信息操作 也是用影响的行数来判断</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$id=$_POST[&#x27;id&#x27;];</span><br><span class="line">    $title=$_POST[&#x27;title&#x27;];</span><br><span class="line">    $keywords=$_POST[&#x27;keywords&#x27;];</span><br><span class="line">    $author=$_POST[&#x27;author&#x27;];</span><br><span class="line">    $content=$_POST[&#x27;content&#x27;];</span><br><span class="line">    $sql=&quot;update news set title=&#x27;&#123;$title&#125;&#x27;,keywords=&#x27;&#123;$keywords&#125;&#x27;,author=&#x27;&#123;$author&#125;&#x27;,content=&#x27;&#123;$content&#125;&#x27; where id=&#123;$id&#125;&quot;;</span><br><span class="line">    //判断是否打通线</span><br><span class="line">    //echo $sql;</span><br><span class="line">    mysql_query($sql,$conn);</span><br><span class="line">    if(mysql_affected_rows($conn)&gt;0)&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;修改成功！&#x27;);window.location=&#x27;index.php&#x27;;&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;修改失败！&#x27;);history.go(-1);&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //header(&quot;location:index.php&quot;);</span><br></pre></td></tr></table></figure></div>

<h3 id="无论是增，删，改，查等操作，重心是理清逻辑思路，然后做出响应的操作。"><a href="#无论是增，删，改，查等操作，重心是理清逻辑思路，然后做出响应的操作。" class="headerlink" title="无论是增，删，改，查等操作，重心是理清逻辑思路，然后做出响应的操作。"></a>无论是增，删，改，查等操作，重心是理清逻辑思路，然后做出响应的操作。</h3><ul>
<li>switch…case语句在执行信息的增加，删除，修改上发挥了很关键的重要。 比如说：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">    //导入数据库库配置文件</span><br><span class="line">    require(&quot;dbconfig.php&quot;);</span><br><span class="line">    switch($_GET[&#x27;action&#x27;])&#123;</span><br><span class="line">    case &quot;add&quot;:</span><br><span class="line">    //执行添加</span><br><span class="line">    //1 获取要添加的信息，并补充其他信息</span><br><span class="line">    $title=$_POST[&#x27;title&#x27;];</span><br><span class="line">    $keywords=$_POST[&#x27;keywords&#x27;];</span><br><span class="line">    $author=$_POST[&#x27;author&#x27;];</span><br><span class="line">    $content=$_POST[&#x27;content&#x27;];</span><br><span class="line">    $addtime=time();</span><br><span class="line">    //2 拼接sql语句，并执行添加操作</span><br><span class="line">    $sql=&quot;insert into news values(null,&#x27;&#123;$title&#125;&#x27;,&#x27;&#123;$keywords&#125;&#x27;,&#x27;&#123;$author&#125;&#x27;,&#x27;&#123;$addtime&#125;&#x27;,&#x27;&#123;$content&#125;&#x27;)&quot;;</span><br><span class="line">    //echo $sql;</span><br><span class="line">    //insert into news values(null,&#x27;大大&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;1367984131&#x27;,&#x27;4&#x27;)</span><br><span class="line">    //3 判断是否成功</span><br><span class="line">    if(empty($content))&#123;</span><br><span class="line">    die(&quot;内容不能为空！&quot;.&quot;&lt;a href=&#x27;add.php&#x27;&gt;添加新闻信息&lt;/a&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    mysql_query($sql,$conn);</span><br><span class="line">    if(mysql_insert_id($conn)&gt;0)&#123;</span><br><span class="line">    echo &quot;添加成功！&quot;;</span><br><span class="line">    &#125;else&#123;echo &quot;添加失败!&quot;.mysql_error();&#125;</span><br><span class="line">    echo &quot;&lt;a href=&#x27;javascript:window.history.back();&#x27;&gt;返回&lt;/a&gt;&quot;;//返回</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;a href=&#x27;index.php&#x27;&gt;浏览新闻信息&lt;/a&gt;&quot;;</span><br><span class="line">    break;</span><br><span class="line">    case &quot;del&quot;:</span><br><span class="line">    $sd=$_GET[&#x27;id&#x27;];</span><br><span class="line">    $sql=&quot;delete from news where id=&#123;$sd&#125;&quot;;</span><br><span class="line">    mysql_query($sql,$conn);</span><br><span class="line">    if(mysql_affected_rows($conn)&gt;0)&#123;</span><br><span class="line">    echo &quot;删除成功！&quot;;</span><br><span class="line">    &#125;else&#123;echo &quot;删除失败！&quot;.mysql_error();&#125;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;a href=&#x27;index.php&#x27;&gt;浏览新闻信息&lt;/a&gt;&quot;;</span><br><span class="line">    break;</span><br><span class="line">    case &quot;update&quot;:</span><br><span class="line">    //获取要修改的信息</span><br><span class="line">    $id=$_POST[&#x27;id&#x27;];</span><br><span class="line">    $title=$_POST[&#x27;title&#x27;];</span><br><span class="line">    $keywords=$_POST[&#x27;keywords&#x27;];</span><br><span class="line">    $author=$_POST[&#x27;author&#x27;];</span><br><span class="line">    $content=$_POST[&#x27;content&#x27;];</span><br><span class="line">    $sql=&quot;update news set title=&#x27;&#123;$title&#125;&#x27;,keywords=&#x27;&#123;$keywords&#125;&#x27;,author=&#x27;&#123;$author&#125;&#x27;,content=&#x27;&#123;$content&#125;&#x27; where id=&#123;$id&#125;&quot;;</span><br><span class="line">    //判断是否打通线</span><br><span class="line">    //echo $sql;</span><br><span class="line">    mysql_query($sql,$conn);</span><br><span class="line">    if(mysql_affected_rows($conn)&gt;0)&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;修改成功！&#x27;);window.location=&#x27;index.php&#x27;;&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;修改失败！&#x27;);history.go(-1);&lt;/script&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //header(&quot;location:index.php&quot;);</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP批量生成密码功能</title>
    <url>/2017/04/27/php-article72/</url>
    <content><![CDATA[<h3 id="平时注册账号的时候需要设置密码，而普通的密码太过容易被暴力破解，所以想着自己写一个能生成密码的功能，可以自己选择密码所包含的字符类型，密码的长度等，并且还加入了密码强度检测功能，基本可以实现一些小的需求。我已经将功能放到博客中，在顶部的扩展功能即可访问。"><a href="#平时注册账号的时候需要设置密码，而普通的密码太过容易被暴力破解，所以想着自己写一个能生成密码的功能，可以自己选择密码所包含的字符类型，密码的长度等，并且还加入了密码强度检测功能，基本可以实现一些小的需求。我已经将功能放到博客中，在顶部的扩展功能即可访问。" class="headerlink" title="平时注册账号的时候需要设置密码，而普通的密码太过容易被暴力破解，所以想着自己写一个能生成密码的功能，可以自己选择密码所包含的字符类型，密码的长度等，并且还加入了密码强度检测功能，基本可以实现一些小的需求。我已经将功能放到博客中，在顶部的扩展功能即可访问。"></a>平时注册账号的时候需要设置密码，而普通的密码太过容易被暴力破解，所以想着自己写一个能生成密码的功能，可以自己选择密码所包含的字符类型，密码的长度等，并且还加入了密码强度检测功能，基本可以实现一些小的需求。我已经将功能放到博客中，在顶部的扩展功能即可访问。</h3><h2 id="2017-4-26进行了一些更新"><a href="#2017-4-26进行了一些更新" class="headerlink" title="2017-4-26进行了一些更新"></a>2017-4-26进行了一些更新</h2><h3 id="1-文本框和多选框可以保存上一次输入的值，不必每次重新输入。"><a href="#1-文本框和多选框可以保存上一次输入的值，不必每次重新输入。" class="headerlink" title="1. 文本框和多选框可以保存上一次输入的值，不必每次重新输入。"></a>1. 文本框和多选框可以保存上一次输入的值，不必每次重新输入。</h3><h3 id="2-过滤字符功能也可以使用，直接输入要过滤的字符串即可。"><a href="#2-过滤字符功能也可以使用，直接输入要过滤的字符串即可。" class="headerlink" title="2.过滤字符功能也可以使用，直接输入要过滤的字符串即可。"></a>2.过滤字符功能也可以使用，直接输入要过滤的字符串即可。</h3><h3 id="3-生成密码字符串放到了文本框中，可以更好的复制和查看。"><a href="#3-生成密码字符串放到了文本框中，可以更好的复制和查看。" class="headerlink" title="3.生成密码字符串放到了文本框中，可以更好的复制和查看。"></a>3.生成密码字符串放到了文本框中，可以更好的复制和查看。</h3><h3 id="4-重新写了整个算法，以前是直接随机生成字符串，而可能导致有些字符类型没有出现在字符串中，使得密码强度降低。这次我先计算出每种字符类型出现的比例，根据比例生成固定的字符串，每个字符串都会先按照字符的比例随机填充，如果不够就重新运行一遍，并且对要过滤的字符串做了处理，这样就保证了所有字符类型都会出现。然后再对固定的字符串的位置进行随机分配，这样生成的密码更加合理，安全。"><a href="#4-重新写了整个算法，以前是直接随机生成字符串，而可能导致有些字符类型没有出现在字符串中，使得密码强度降低。这次我先计算出每种字符类型出现的比例，根据比例生成固定的字符串，每个字符串都会先按照字符的比例随机填充，如果不够就重新运行一遍，并且对要过滤的字符串做了处理，这样就保证了所有字符类型都会出现。然后再对固定的字符串的位置进行随机分配，这样生成的密码更加合理，安全。" class="headerlink" title="4. 重新写了整个算法，以前是直接随机生成字符串，而可能导致有些字符类型没有出现在字符串中，使得密码强度降低。这次我先计算出每种字符类型出现的比例，根据比例生成固定的字符串，每个字符串都会先按照字符的比例随机填充，如果不够就重新运行一遍，并且对要过滤的字符串做了处理，这样就保证了所有字符类型都会出现。然后再对固定的字符串的位置进行随机分配，这样生成的密码更加合理，安全。"></a>4. 重新写了整个算法，以前是直接随机生成字符串，而可能导致有些字符类型没有出现在字符串中，使得密码强度降低。这次我先计算出每种字符类型出现的比例，根据比例生成固定的字符串，每个字符串都会先按照字符的比例随机填充，如果不够就重新运行一遍，并且对要过滤的字符串做了处理，这样就保证了所有字符类型都会出现。然后再对固定的字符串的位置进行随机分配，这样生成的密码更加合理，安全。</h3><h3 id="这是效果图"><a href="#这是效果图" class="headerlink" title="这是效果图"></a>这是效果图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php13.jpg"
                     
                ></p>
<h3 id="下面是源代码，有需要的可以参考"><a href="#下面是源代码，有需要的可以参考" class="headerlink" title="下面是源代码，有需要的可以参考"></a>下面是源代码，有需要的可以参考</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    span&#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">    &#125;</span><br><span class="line">    li&#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        /*text-align: center;*/</span><br><span class="line">    &#125;</span><br><span class="line">    .state&#123;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">        width: 700px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: auto;</span><br><span class="line">        /*text-align: center;*/</span><br><span class="line">    &#125;</span><br><span class="line">    .left&#123;</span><br><span class="line">        widows: 400px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .right&#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height:200px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .footer&#123;</span><br><span class="line">        width: 700px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;h1 align=&quot;center&quot;&gt;密码生成功能&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    1. 密码长度(&lt;span class=&quot;state&quot;&gt;默认为6位&lt;/span&gt;)：</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    2. 要生成的密码数量(&lt;span class=&quot;state&quot;&gt;默认为一个&lt;/span&gt;)：</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    3. 密码字符类型(&lt;span class=&quot;state&quot;&gt;默认为全选&lt;/span&gt;)：</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    4. 要过滤的字符：</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">                &lt;div align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;生成&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;hidden&quot; name=&quot;flag&quot; value=&quot;flag&quot;&gt;</span><br><span class="line">                &lt;div&gt;&lt;input type=&quot;number&quot; name=&quot;length&quot; min=&quot;6&quot; max=&quot;20&quot; size=&quot;5&quot; value=&quot;&lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;echo &#x27;6&#x27;;&#125;else&#123;echo $_POST[&#x27;length&#x27;];&#125;?&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div&gt;&lt;input type=&quot;number&quot; min=&quot;1&quot; size=&quot;5&quot; max=&quot;20&quot; name=&quot;number&quot; value=&quot;&lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;echo &#x27;1&#x27;;&#125;else&#123;echo $_POST[&#x27;number&#x27;];&#125;?&gt;&quot;  &gt;&lt;/div&gt;</span><br><span class="line">                &lt;div&gt;&lt;input type=&quot;checkbox&quot; &lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;echo &#x27;checked&#x27;;&#125;else&#123;$type = $_POST[&#x27;type&#x27;];if(in_array(&#x27;1&#x27;,$type))&#123;echo &#x27;checked&#x27;;&#125;&#125;?&gt; name=&quot;type[]&quot; value=&quot;1&quot;&gt;A-Z</span><br><span class="line">                    &lt;input type=&quot;checkbox&quot; &lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;echo &#x27;checked&#x27;;&#125;else&#123;$type = $_POST[&#x27;type&#x27;];if(in_array(&#x27;20&#x27;,$type))&#123;echo &#x27;checked&#x27;;&#125;&#125;?&gt; name=&quot;type[]&quot; value=&quot;20&quot;&gt;a-z</span><br><span class="line">                    &lt;input type=&quot;checkbox&quot; &lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;echo &#x27;checked&#x27;;&#125;else&#123;$type = $_POST[&#x27;type&#x27;];if(in_array(&#x27;40&#x27;,$type))&#123;echo &#x27;checked&#x27;;&#125;&#125;?&gt; name=&quot;type[]&quot; value=&quot;40&quot;&gt;9-0</span><br><span class="line">                    &lt;input type=&quot;checkbox&quot; &lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;&#125;else&#123;$type = $_POST[&#x27;type&#x27;];if(in_array(&#x27;80&#x27;,$type))&#123;echo &#x27;checked&#x27;;&#125;&#125;?&gt; name=&quot;type[]&quot; value=&quot;80&quot;&gt;!@#$%&amp;*/.&lt;/div&gt;</span><br><span class="line">                &lt;div&gt;&lt;input type=&quot;text&quot; size=&quot;5&quot; value=&quot;&lt;?php if(empty($_POST[&#x27;flag&#x27;]))&#123;echo &#x27;&#x27;;&#125;else&#123; if(empty($_POST[&#x27;filter&#x27;]))&#123;echo &#x27;&#x27;;&#125;else&#123;echo $_POST[&#x27;filter&#x27;];&#125;&#125;?&gt;&quot; name=&quot;filter&quot; &gt;&lt;/div&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">                &lt;div &gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">            //                echo &quot;4324&quot;;</span><br><span class="line">            //            $type = $_POST[&#x27;type&#x27;];</span><br><span class="line">            //            $text = &#x27;43324&#x27;;</span><br><span class="line">            //            echo strlen($text);</span><br><span class="line">            //                echo rand(1,20);</span><br><span class="line">            //                exit();</span><br><span class="line">            //                echo &quot;12321&quot;;</span><br><span class="line">            if(empty($_POST[&#x27;flag&#x27;]))&#123;</span><br><span class="line">                exit();</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $number = $_POST[&#x27;number&#x27;];</span><br><span class="line">                $length = $_POST[&#x27;length&#x27;];</span><br><span class="line">                if(empty($_POST[&#x27;filter&#x27;]))&#123;</span><br><span class="line">                    $filter = &#x27;&#x27;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    $filter = $_POST[&#x27;filter&#x27;];</span><br><span class="line">                &#125;</span><br><span class="line">                $type = $_POST[&#x27;type&#x27;];</span><br><span class="line">                $A_letter = &#x27;ABCDEFGHIJKLMNOPQISTUVWXYZ&#x27;;</span><br><span class="line">                $a_letter = &#x27;abcdefghijklmnopqistuvwxyz&#x27;;</span><br><span class="line">                $S_figure = &#x27;0123456789&#x27;;</span><br><span class="line">                $S_string = &#x27;!@#$%&amp;*/.&#x27;;</span><br><span class="line">                if($number&lt;1) $number = 1;</span><br><span class="line">                if($length&lt;6) $length = 6;</span><br><span class="line">                $size = sizeof($type);</span><br><span class="line">                //计算字符比例</span><br><span class="line">                $scale = $length / $size;</span><br><span class="line">//                echo (int)$scale;</span><br><span class="line">                $scale = (int)$scale;</span><br><span class="line">                $text_arr = array();</span><br><span class="line">                /**</span><br><span class="line">                 *</span><br><span class="line">                 * 根据比例生成固定的字符串，每个字符串都会先按照字符的比例随机填充，如果不够就重新运行一遍</span><br><span class="line">                 * 并且对要过滤的字符串做了处理</span><br><span class="line">                 **/</span><br><span class="line">                for($l=1;$l&lt;=$number;$l++)&#123;</span><br><span class="line">                    $text = &#x27;&#x27;;</span><br><span class="line">                    $sum = 0;</span><br><span class="line">                    while(1)&#123;</span><br><span class="line">                        if($sum==$length)&#123;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        for($i=1;$i&lt;=$size;$i++)&#123;</span><br><span class="line">                            if($sum==$length)&#123;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if($type[$i-1]==1)&#123;</span><br><span class="line">                                for ($j=1;$j&lt;=$scale;$j++)&#123;</span><br><span class="line">                                    $rand_str = $A_letter[rand(0,25)];</span><br><span class="line">                                    while(1)&#123;</span><br><span class="line">                                        if(strpos($filter,$rand_str)===FALSE)&#123;</span><br><span class="line">                                            break;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        $rand_str = $A_letter[rand(0,25)];</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    $text = $text.$rand_str;</span><br><span class="line">                                    $sum = $sum + 1;</span><br><span class="line">                                    if($sum==$length)&#123;</span><br><span class="line">                                        break;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;else if($type[$i-1]==20)&#123;</span><br><span class="line">                                for ($j=1;$j&lt;=$scale;$j++)&#123;</span><br><span class="line">                                    $rand_str = $a_letter[rand(0,25)];</span><br><span class="line">                                    while(1)&#123;</span><br><span class="line">                                        if(strpos($filter,$rand_str)===FALSE)&#123;</span><br><span class="line">                                            break;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        $rand_str = $a_letter[rand(0,25)];</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    $text = $text.$rand_str;</span><br><span class="line">                                    $sum = $sum + 1;</span><br><span class="line">                                    if($sum==$length)&#123;</span><br><span class="line">                                        break;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;else if($type[$i-1]==40)&#123;</span><br><span class="line">                                for ($j=1;$j&lt;=$scale;$j++)&#123;</span><br><span class="line">                                    $rand_str = $S_figure[rand(0,9)];</span><br><span class="line">                                    while(1)&#123;</span><br><span class="line">                                        if(strpos($filter,$rand_str)===FALSE)&#123;</span><br><span class="line">                                            break;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        $rand_str = $S_figure[rand(0,9)];</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    $text = $text.$rand_str;</span><br><span class="line">                                    $sum = $sum + 1;</span><br><span class="line">                                    if($sum==$length)&#123;</span><br><span class="line">                                        break;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;else if($type[$i-1]==80)&#123;</span><br><span class="line">                                for ($j=1;$j&lt;=$scale;$j++)&#123;</span><br><span class="line">                                    $rand_str = $S_string[rand(0,8)];</span><br><span class="line">                                    while(1)&#123;</span><br><span class="line">                                        if(strpos($filter,$rand_str)===FALSE)&#123;</span><br><span class="line">                                            break;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        $rand_str = $S_string[rand(0,8)];</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    $text = $text.$rand_str;</span><br><span class="line">                                    $sum = $sum + 1;</span><br><span class="line">                                    if($sum==$length)&#123;</span><br><span class="line">                                        break;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $text_arr[$l-1] = $text;</span><br><span class="line">                &#125;</span><br><span class="line">//                var_dump($text_arr);</span><br><span class="line">                /**</span><br><span class="line">                 * 使用得到的字符串来随机位置</span><br><span class="line">                **/</span><br><span class="line">//                $text = &#x27;&#x27;;</span><br><span class="line">//                $text[2] = &#x27;1&#x27;;</span><br><span class="line">//                if(!isset($text[2])) echo &quot;34&quot;;</span><br><span class="line">                echo &#x27;&lt;h3 align=&quot;&quot;&gt;生成结果&lt;/h3&gt;&#x27;;</span><br><span class="line">                for ($i=1;$i&lt;=$number;$i++)&#123;</span><br><span class="line">//                    echo $text_arr[$i-1];</span><br><span class="line">                    $text = &#x27;&#x27;;</span><br><span class="line">                    for ($j=1;$j&lt;=$length;$j++)&#123;</span><br><span class="line">                        while(1)&#123;</span><br><span class="line">                            $rand_num = rand(0,50);</span><br><span class="line">                            if(!isset($text[$rand_num]))&#123;</span><br><span class="line">                                $text[$rand_num] = $text_arr[$i-1][$j-1];</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $password = &#x27;&#x27;;</span><br><span class="line">                    for($l=0;$l&lt;=50;$l++)&#123;</span><br><span class="line">                        if(isset($text[$l]))&#123;</span><br><span class="line">                            $password = $password.$text[$l];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    echo $i.&#x27;： &lt;textarea rows=&quot;1&quot; cols=&quot;20&quot; style=&quot;font-size=&quot;11px&quot;;&quot;&gt;&#x27;.$password.&#x27;&lt;/textarea&gt;    密码强度：&#x27;;</span><br><span class="line">                    $pass_num = testPassword($password);</span><br><span class="line">                    echo $pass_num.&#x27;/5   &#x27;;</span><br><span class="line">                    if($pass_num==1)&#123;</span><br><span class="line">                        echo &#x27;&lt;span style=&quot;color: maroon&quot;&gt;检测提示：密码过于简单(很容易就能破解你的密码)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">                    &#125;else if($pass_num==2)&#123;</span><br><span class="line">                        echo &#x27;&lt;span style=&quot;color: red&quot;&gt;检测提示：密码强度差(建议在设置复杂点)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">                    &#125;else if($pass_num==3)&#123;</span><br><span class="line">                        echo &#x27;&lt;span style=&quot;color: #98bc1b&quot;&gt;检测提示：密码强度中(呵呵，标准安全密码)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">                    &#125;else if($pass_num==4)&#123;</span><br><span class="line">                        echo &#x27;&lt;span style=&quot;color: green&quot;&gt;检测提示：密码强度高(你的密码很安全)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">                    &#125;else if($pass_num==5)&#123;</span><br><span class="line">                        echo &#x27;&lt;span style=&quot;color: blue&quot;&gt;检测提示：密码强度极高(暴力破解需要1万年以上)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">//                if($sum==1)&#123;</span><br><span class="line">//                    $text = $A_letter;</span><br><span class="line">//                &#125;else if($sum==20)&#123;</span><br><span class="line">//                    $text = $a_letter;</span><br><span class="line">//                &#125;else if($sum==40)&#123;</span><br><span class="line">//                    $text = $S_figure;</span><br><span class="line">//                &#125;else if($sum==80)&#123;</span><br><span class="line">//                    $text = $S_string;</span><br><span class="line">//                &#125;else if($sum==21)&#123;</span><br><span class="line">//                    $text = $A_letter.$a_letter;</span><br><span class="line">//                &#125;else if($sum==41)&#123;</span><br><span class="line">//                    $text = $A_letter.$S_figure;</span><br><span class="line">//                &#125;else if($sum==81)&#123;</span><br><span class="line">//                    $text = $A_letter.$S_string;</span><br><span class="line">//                &#125;else if($sum==61)&#123;</span><br><span class="line">//                    $text = $A_letter.$a_letter.$S_figure;</span><br><span class="line">//                &#125;else if($sum==101)&#123;</span><br><span class="line">//                    $text = $A_letter.$a_letter.$S_string;</span><br><span class="line">//                &#125;else if($sum==121)&#123;</span><br><span class="line">//                    $text = $A_letter.$S_figure.$S_string;</span><br><span class="line">//                &#125;else if($sum==60)&#123;</span><br><span class="line">//                    $text = $a_letter.$S_figure;</span><br><span class="line">//                &#125;else if($sum==100)&#123;</span><br><span class="line">//                    $text = $a_letter.$S_string;</span><br><span class="line">//                &#125;else if($sum==140)&#123;</span><br><span class="line">//                    $text = $a_letter.$S_figure.$S_string;</span><br><span class="line">//                &#125;else if($sum==120)&#123;</span><br><span class="line">//                    $text = $S_figure.$S_string;</span><br><span class="line">//                &#125;else&#123;</span><br><span class="line">//                    $text = $A_letter.$a_letter.$S_figure.$S_string;</span><br><span class="line">//                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//                $str_num = strlen($text) - 1;</span><br><span class="line">//</span><br><span class="line">//                for($i=1;$i&lt;=$number;$i++)&#123;</span><br><span class="line">//                    $password = &#x27;&#x27;;</span><br><span class="line">//                    for($j=1;$j&lt;=$length;$j++)&#123;</span><br><span class="line">//                        $rand_num = rand(1,$str_num);</span><br><span class="line">//                        $password = $password.$text[$rand_num];</span><br><span class="line">//                    &#125;</span><br><span class="line">//                    echo $i.&#x27;： &#x27;.$password.&#x27;    密码强度：&#x27;;</span><br><span class="line">//                    $pass_num = testPassword($password);</span><br><span class="line">//                    echo $pass_num.&#x27;/5   &#x27;;</span><br><span class="line">//                    if($pass_num==1)&#123;</span><br><span class="line">//                        echo &#x27;&lt;span style=&quot;color: maroon&quot;&gt;检测提示：密码过于简单(只要花点时间，就能破解你的密码了)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">//                    &#125;else if($pass_num==2)&#123;</span><br><span class="line">//                        echo &#x27;&lt;span style=&quot;color: red&quot;&gt;检测提示：密码强度差(建议在设置复杂点)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">//                    &#125;else if($pass_num==3)&#123;</span><br><span class="line">//                        echo &#x27;&lt;span style=&quot;color: #98bc1b&quot;&gt;检测提示：密码强度良好(呵呵，标准安全密码了)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">//                    &#125;else if($pass_num==4)&#123;</span><br><span class="line">//                        echo &#x27;&lt;span style=&quot;color: green&quot;&gt;检测提示：密码强度高(嘎嘎，你的密码很安全了)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">//                    &#125;else if($pass_num==5)&#123;</span><br><span class="line">//                        echo &#x27;&lt;span style=&quot;color: blue&quot;&gt;检测提示：密码强度极高(啊~~，暴力破解你的密码至少要1万年以上)&lt;/span&gt;&lt;br&gt;&#x27;;</span><br><span class="line">//                    &#125;</span><br><span class="line">//                &#125;</span><br><span class="line">//                    echo $type[0];</span><br><span class="line">//                    echo implode(&#x27;.&#x27;,$type);</span><br><span class="line">                exit();</span><br><span class="line">            &#125;</span><br><span class="line">            /**</span><br><span class="line">             *</span><br><span class="line">             * @检测密码强度</span><br><span class="line">             * @param string $password</span><br><span class="line">             * @return int</span><br><span class="line">             * @edit www.jbxue.com</span><br><span class="line">             */</span><br><span class="line">            function testPassword($password)</span><br><span class="line">            &#123;</span><br><span class="line">                if ( strlen( $password ) == 0 )</span><br><span class="line">                &#123;</span><br><span class="line">                    return 1;</span><br><span class="line">                &#125;</span><br><span class="line">                $strength = 0;</span><br><span class="line">                /*** get the length of the password ***/</span><br><span class="line">                $length = strlen($password);</span><br><span class="line">                /*** check if password is not all lower case ***/</span><br><span class="line">                if(strtolower($password) != $password)</span><br><span class="line">                &#123;</span><br><span class="line">                    $strength += 1;</span><br><span class="line">                &#125;</span><br><span class="line">                /*** check if password is not all upper case ***/</span><br><span class="line">                if(strtoupper($password) == $password)</span><br><span class="line">                &#123;</span><br><span class="line">                    $strength += 1;</span><br><span class="line">                &#125;</span><br><span class="line">                /*** check string length is 8 -15 chars ***/</span><br><span class="line">                if($length &gt;= 8 &amp;&amp; $length &lt;= 15)</span><br><span class="line">                &#123;</span><br><span class="line">                    $strength += 1;</span><br><span class="line">                &#125;</span><br><span class="line">                /*** check if lenth is 16 - 35 chars ***/</span><br><span class="line">                if($length &gt;= 16 &amp;&amp; $length &lt;=35)</span><br><span class="line">                &#123;</span><br><span class="line">                    $strength += 2;</span><br><span class="line">                &#125;</span><br><span class="line">                /*** check if length greater than 35 chars ***/</span><br><span class="line">                if($length &gt; 35)</span><br><span class="line">                &#123;</span><br><span class="line">                    $strength += 3;</span><br><span class="line">                &#125;</span><br><span class="line">                /*** get the numbers in the password ***/</span><br><span class="line">                preg_match_all(&#x27;/[0-9]/&#x27;, $password, $numbers);</span><br><span class="line">                $strength += count($numbers[0]);</span><br><span class="line">                /*** check for special chars ***/</span><br><span class="line">                preg_match_all(&#x27;/[!@#$%&amp;*\/=?,;.:\-_+~^\\\]/&#x27;, $password, $specialchars);</span><br><span class="line">                $strength += sizeof($specialchars[0]);</span><br><span class="line">                /*** get the number of unique chars ***/</span><br><span class="line">                $chars = str_split($password);</span><br><span class="line">                $num_unique_chars = sizeof( array_unique($chars) );</span><br><span class="line">                $strength += $num_unique_chars * 2;</span><br><span class="line">                /*** strength is a number 1-10; ***/</span><br><span class="line">                $strength = $strength &gt; 99 ? 99 : $strength;</span><br><span class="line">                $strength = floor($strength / 10 + 1);</span><br><span class="line">                return $strength;</span><br><span class="line">            &#125;</span><br><span class="line">            /*** 调用示例 ***/</span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>HTML</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>扩展功能</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>关于PHP添加搜索和分页浏览功能</title>
    <url>/2017/02/19/php-article59/</url>
    <content><![CDATA[<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><h3 id="1-分页后再做搜索"><a href="#1-分页后再做搜索" class="headerlink" title="1. 分页后再做搜索"></a>1. 分页后再做搜索</h3><h3 id="2-这里对于url的拼接，以及模糊查询，搜索时候的显示添加，SQL语句的拼接"><a href="#2-这里对于url的拼接，以及模糊查询，搜索时候的显示添加，SQL语句的拼接" class="headerlink" title="2. 这里对于url的拼接，以及模糊查询，搜索时候的显示添加，SQL语句的拼接"></a>2. 这里对于url的拼接，以及模糊查询，搜索时候的显示添加，SQL语句的拼接</h3><h3 id="3-对于页面传递过来的超级链接的变量，如果不存在就要设置，对于可能抛出异常的要加上-屏蔽错误"><a href="#3-对于页面传递过来的超级链接的变量，如果不存在就要设置，对于可能抛出异常的要加上-屏蔽错误" class="headerlink" title="3. 对于页面传递过来的超级链接的变量，如果不存在就要设置，对于可能抛出异常的要加上@屏蔽错误"></a>3. 对于页面传递过来的超级链接的变量，如果不存在就要设置，对于可能抛出异常的要加上@屏蔽错误</h3><h3 id="4-对于查询一般用一些关键字来获取"><a href="#4-对于查询一般用一些关键字来获取" class="headerlink" title="4. 对于查询一般用一些关键字来获取"></a>4. 对于查询一般用一些关键字来获取</h3><h3 id="5-分页显示的limit条件要写好"><a href="#5-分页显示的limit条件要写好" class="headerlink" title="5. 分页显示的limit条件要写好"></a>5. 分页显示的limit条件要写好</h3><h3 id="6-搜索时候的where条件"><a href="#6-搜索时候的where条件" class="headerlink" title="6. 搜索时候的where条件"></a>6. 搜索时候的where条件</h3><h2 id="1-搜索表单："><a href="#1-搜索表单：" class="headerlink" title="1. 搜索表单："></a>1. 搜索表单：</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--- 搜索表单---&gt;</span><br><span class="line">    &lt;form action=&quot;list3.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    标题：&lt;input type=&quot;text&quot; name=&quot;title&quot; size=&quot;10&quot; value=&quot;&lt;?php echo @$_GET[&#x27;title&#x27;];?&gt;&quot;/&gt; </span><br><span class="line">    关键字：&lt;input type=&quot;text&quot; name=&quot;keywords&quot; size=&quot;10&quot; value=&quot;&lt;?php echo @$_GET[&#x27;keywords&#x27;];?&gt;&quot;/&gt; </span><br><span class="line">    作者：&lt;input type=&quot;text&quot; name=&quot;author&quot; size=&quot;10&quot; value=&quot;&lt;?php echo @$_GET[&#x27;author&#x27;];?&gt;&quot;/&gt; </span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;全部信息&quot; onclick=&quot;window.location=&#x27;list3.php&#x27;&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;!----------------&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-分页封装"><a href="#2-分页封装" class="headerlink" title="2. 分页封装"></a>2. 分页封装</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //=======================</span><br><span class="line">    //封装搜索的信息</span><br><span class="line">    //定义一个封装搜索条件的数组变量</span><br><span class="line">    $wherelist=array();</span><br><span class="line">    //定义一个封装搜索的url，用于放置到url后面作为参数</span><br><span class="line">    $urllist=array();</span><br><span class="line">    //判断新闻标题是否有值就封装搜索条件</span><br><span class="line">    if(!empty($_GET[&#x27;title&#x27;]))&#123;</span><br><span class="line">    $wherelist[]=&quot;title like &#x27;%&#123;$_GET[&#x27;title&#x27;]&#125;%&#x27;&quot;;</span><br><span class="line">    $urllist[]=&quot;title=&#123;$_GET[&#x27;title&#x27;]&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断关键字是否有值就封装搜索条件</span><br><span class="line">    if(!empty($_GET[&#x27;keywords&#x27;]))&#123;</span><br><span class="line">    $wherelist[]=&quot;keywords like &#x27;%&#123;$_GET[&#x27;keywords&#x27;]&#125;%&#x27;&quot;;</span><br><span class="line">    $urllist[]=&quot;keywords=&#123;$_GET[&#x27;keywords&#x27;]&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断作者是否有值就封装搜索条件</span><br><span class="line">    if(!empty($_GET[&#x27;author&#x27;]))&#123;</span><br><span class="line">    $wherelist[]=&quot;author like &#x27;%&#123;$_GET[&#x27;author&#x27;]&#125;%&#x27;&quot;;</span><br><span class="line">    $urllist[]=&quot;author=&#123;$_GET[&#x27;author&#x27;]&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //组装搜索条件</span><br><span class="line">    //将数组合并成字符串用implode();</span><br><span class="line">    if(count($wherelist)&gt;0)&#123;</span><br><span class="line">    $where=&quot; where &quot;.implode(&quot; and &quot;,$wherelist);</span><br><span class="line">    $url=@&quot;&amp;&quot;.implode(&quot;&amp;&quot;,$urllist);</span><br><span class="line">    &#125;</span><br><span class="line">    //echo @$where;</span><br><span class="line">    //echo @$url;</span><br><span class="line">    //=======================</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-分页处理"><a href="#3-分页处理" class="headerlink" title="3. 分页处理"></a>3. 分页处理</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //=====插入分页处理代码=====</span><br><span class="line">    //1 定义分页的变量</span><br><span class="line">    $page=isset($_GET[&#x27;page&#x27;])?$_GET[&#x27;page&#x27;]:1;//当前页数，默认为1</span><br><span class="line">    $pageSize=4;    //页大小</span><br><span class="line">    $maxRows=&quot;&quot;;    //最大数据条数</span><br><span class="line">    $maxPages=&quot;&quot;;    //最大页数</span><br><span class="line">    //获取最大数据条数</span><br><span class="line">    @$sql=&quot;select count(*) from news &#123;$where&#125;&quot;;</span><br><span class="line">    $res=mysql_query($sql,$conn);</span><br><span class="line">    $maxRows=mysql_result($res,0,0);//定位从结果集中获取总数据的条数，就是获取第一个单元格中的值</span><br><span class="line">    //3 计算出最大页数</span><br><span class="line">    $maxPages=ceil($maxRows/$pageSize);//进一取整获取最大页数,7/3;</span><br><span class="line">    //4 判断页数是否越界，判断是否有效</span><br><span class="line">    if($page&gt;$maxPages)&#123;</span><br><span class="line">    $page=$maxPages;</span><br><span class="line">    //判断是否超出了最大页</span><br><span class="line">    &#125;</span><br><span class="line">    if($page&lt;1)&#123;</span><br><span class="line">    $page=1;</span><br><span class="line">    &#125;</span><br><span class="line">    //拼接$sql，限制每页显示的条数</span><br><span class="line">    $limit=&quot; limit &quot;.(($page-1)*$pageSize).&quot;,&#123;$pageSize&#125;&quot;;</span><br><span class="line">    //起始位置是当前页减1乘以每页显示的条数</span><br><span class="line">    //==========分页封装结束==============</span><br><span class="line">    @$sql=&quot;select * from news &#123;$where&#125; order by addtime desc &#123;$limit&#125;&quot;;</span><br><span class="line">    //limit 0,3表示从第一条记录到第三条记录</span><br><span class="line">    //将最新的新闻先显示出来</span><br><span class="line">    $result=@mysql_query($sql,$conn);</span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="具体实例：新闻搜索和分页程序："><a href="#具体实例：新闻搜索和分页程序：" class="headerlink" title="具体实例：新闻搜索和分页程序："></a>具体实例：新闻搜索和分页程序：</h2><h2 id="4-搜索和分页功能"><a href="#4-搜索和分页功能" class="headerlink" title="4. 搜索和分页功能"></a>4. 搜索和分页功能</h2><p>list3.php 完整代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-Type:text/html;charset=utf-8&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    require(&quot;menu.php&quot;);</span><br><span class="line">    require(&quot;dbconfig.php&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;title&gt;新闻信息管理系统&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function dodel(id)&#123;</span><br><span class="line">    //判断是否要删除</span><br><span class="line">    if(confirm(&quot;确定要删除吗？&quot;))&#123;</span><br><span class="line">    window.location=&quot;action.php?action=del&amp;id=&quot;+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;h2&gt;搜索和分页浏览新闻&lt;/h2&gt;</span><br><span class="line">    &lt;!--- 搜索表单---&gt;</span><br><span class="line">    &lt;form action=&quot;list3.php&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    标题：&lt;input type=&quot;text&quot; name=&quot;title&quot; size=&quot;10&quot; value=&quot;&lt;?php echo @$_GET[&#x27;title&#x27;];?&gt;&quot;/&gt; </span><br><span class="line">    关键字：&lt;input type=&quot;text&quot; name=&quot;keywords&quot; size=&quot;10&quot; value=&quot;&lt;?php echo @$_GET[&#x27;keywords&#x27;];?&gt;&quot;/&gt; </span><br><span class="line">    作者：&lt;input type=&quot;text&quot; name=&quot;author&quot; size=&quot;10&quot; value=&quot;&lt;?php echo @$_GET[&#x27;author&#x27;];?&gt;&quot;/&gt; </span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;全部信息&quot; onclick=&quot;window.location=&#x27;list3.php&#x27;&quot;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;!----------------&gt;</span><br><span class="line">    &lt;table border=&quot;1&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot;&gt;</span><br><span class="line">    &lt;tr&gt;&lt;th&gt;新闻id号&lt;/th&gt;&lt;th&gt;新闻标题&lt;/th&gt;&lt;th&gt;发布者&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;关键字&lt;/th&gt;&lt;th&gt;添加时间&lt;/th&gt;&lt;th&gt;新闻内容&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    //=======================</span><br><span class="line">    //封装搜索的信息</span><br><span class="line">    //定义一个封装搜索条件的数组变量</span><br><span class="line">    $wherelist=array();</span><br><span class="line">    //定义一个封装搜索的url，用于放置到url后面作为参数</span><br><span class="line">    $urllist=array();</span><br><span class="line">    //判断新闻标题是否有值就封装搜索条件</span><br><span class="line">    if(!empty($_GET[&#x27;title&#x27;]))&#123;</span><br><span class="line">    $wherelist[]=&quot;title like &#x27;%&#123;$_GET[&#x27;title&#x27;]&#125;%&#x27;&quot;;</span><br><span class="line">    $urllist[]=&quot;title=&#123;$_GET[&#x27;title&#x27;]&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断关键字是否有值就封装搜索条件</span><br><span class="line">    if(!empty($_GET[&#x27;keywords&#x27;]))&#123;</span><br><span class="line">    $wherelist[]=&quot;keywords like &#x27;%&#123;$_GET[&#x27;keywords&#x27;]&#125;%&#x27;&quot;;</span><br><span class="line">    $urllist[]=&quot;keywords=&#123;$_GET[&#x27;keywords&#x27;]&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断作者是否有值就封装搜索条件</span><br><span class="line">    if(!empty($_GET[&#x27;author&#x27;]))&#123;</span><br><span class="line">    $wherelist[]=&quot;author like &#x27;%&#123;$_GET[&#x27;author&#x27;]&#125;%&#x27;&quot;;</span><br><span class="line">    $urllist[]=&quot;author=&#123;$_GET[&#x27;author&#x27;]&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //组装搜索条件</span><br><span class="line">    //将数组合并成字符串用implode();</span><br><span class="line">    if(count($wherelist)&gt;0)&#123;</span><br><span class="line">    $where=&quot; where &quot;.implode(&quot; and &quot;,$wherelist);</span><br><span class="line">    $url=@&quot;&amp;&quot;.implode(&quot;&amp;&quot;,$urllist);</span><br><span class="line">    &#125;</span><br><span class="line">    //echo @$where;</span><br><span class="line">    //echo @$url;</span><br><span class="line">    //=======================</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    //=====插入分页处理代码=====</span><br><span class="line">    //1 定义分页的变量</span><br><span class="line">    $page=isset($_GET[&#x27;page&#x27;])?$_GET[&#x27;page&#x27;]:1;//当前页数，默认为1</span><br><span class="line">    $pageSize=4;    //页大小</span><br><span class="line">    $maxRows=&quot;&quot;;    //最大数据条数</span><br><span class="line">    $maxPages=&quot;&quot;;    //最大页数</span><br><span class="line">    //获取最大数据条数</span><br><span class="line">    @$sql=&quot;select count(*) from news &#123;$where&#125;&quot;;</span><br><span class="line">    $res=mysql_query($sql,$conn);</span><br><span class="line">    $maxRows=mysql_result($res,0,0);//定位从结果集中获取总数据的条数，就是获取第一个单元格中的值</span><br><span class="line">    //3 计算出最大页数</span><br><span class="line">    $maxPages=ceil($maxRows/$pageSize);//进一取整获取最大页数,7/3;</span><br><span class="line">    //4 判断页数是否越界，判断是否有效</span><br><span class="line">    if($page&gt;$maxPages)&#123;</span><br><span class="line">    $page=$maxPages;</span><br><span class="line">    //判断是否超出了最大页</span><br><span class="line">    &#125;</span><br><span class="line">    if($page&lt;1)&#123;</span><br><span class="line">    $page=1;</span><br><span class="line">    &#125;</span><br><span class="line">    //拼接$sql，限制每页显示的条数</span><br><span class="line">    $limit=&quot; limit &quot;.(($page-1)*$pageSize).&quot;,&#123;$pageSize&#125;&quot;;</span><br><span class="line">    //起始位置是当前页减1乘以每页显示的条数</span><br><span class="line">    //==========分页封装结束==============</span><br><span class="line">    @$sql=&quot;select * from news &#123;$where&#125; order by addtime desc &#123;$limit&#125;&quot;;</span><br><span class="line">    //limit 0,3表示从第一条记录到第三条记录</span><br><span class="line">    //将最新的新闻先显示出来</span><br><span class="line">    $result=@mysql_query($sql,$conn);</span><br><span class="line">    while($row=@mysql_fetch_assoc($result))&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&#123;$row[&#x27;id&#x27;]&#125;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&#123;$row[&#x27;title&#x27;]&#125;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&#123;$row[&#x27;author&#x27;]&#125;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&#123;$row[&#x27;keywords&#x27;]&#125;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&quot;.date(&quot;Y-m-d H:i:s&quot;,$row[&#x27;addtime&#x27;]).&quot;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&#123;$row[&#x27;content&#x27;]&#125;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&lt;a href=&#x27;javascript:dodel(&#123;$row[&#x27;id&#x27;]&#125;)&#x27;&gt;删除&lt;/a&gt;  &lt;a href=&#x27;edit.php?id=&#123;$row[&#x27;id&#x27;]&#125;&#x27;&gt;修改&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //释放结果集</span><br><span class="line">    @mysql_free_result($result);</span><br><span class="line">    mysql_close($conn);</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    //显示当前页数值，上一页和下一页</span><br><span class="line">    echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">    echo &quot;当前页 &#123;$page&#125;/&#123;$maxPages&#125;页 共计：&#123;$maxRows&#125;条  &quot;;?&gt;</span><br><span class="line">    &lt;a href=&quot;list3.php?page=1&lt;?php echo @$url;?&gt;&quot;&gt;首页&lt;/a&gt;  </span><br><span class="line">    &lt;a href=&quot;list3.php?page=&lt;?php echo ($page-1).@$url;?&gt;&quot;&gt;上一页&lt;/a&gt;  </span><br><span class="line">    &lt;!--这里用分割符号分离出来添加页数---&gt;</span><br><span class="line">    &lt;a href=&quot;list3.php?page=&lt;?php echo ($page+1).@$url;?&gt;&quot;&gt;下一页&lt;/a&gt;  </span><br><span class="line">    &lt;a href=&quot;list3.php?page=&lt;?php echo $maxPages.@$url;?&gt;&quot;&gt;尾页&lt;/a&gt; </span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中empty,isset,is_null用法和区别</title>
    <url>/2017/04/19/php-article70/</url>
    <content><![CDATA[<h3 id="PHP中empty-isset-is-null用法和区别"><a href="#PHP中empty-isset-is-null用法和区别" class="headerlink" title="PHP中empty,isset,is_null用法和区别"></a>PHP中empty,isset,is_null用法和区别</h3><h4 id="最近在阅读项目的源码，发现源码中就对empty、isset和is-null函数（语言特性）乱用，有的地方很明显的就挖坑了。不能正确的去理解这些东西，就很可能给后续的开发挖坑了。"><a href="#最近在阅读项目的源码，发现源码中就对empty、isset和is-null函数（语言特性）乱用，有的地方很明显的就挖坑了。不能正确的去理解这些东西，就很可能给后续的开发挖坑了。" class="headerlink" title="最近在阅读项目的源码，发现源码中就对empty、isset和is_null函数（语言特性）乱用，有的地方很明显的就挖坑了。不能正确的去理解这些东西，就很可能给后续的开发挖坑了。"></a>最近在阅读项目的源码，发现源码中就对empty、isset和is_null函数（语言特性）乱用，有的地方很明显的就挖坑了。不能正确的去理解这些东西，就很可能给后续的开发挖坑了。</h4><ol>
<li><p>empty用法 bool empty ( mixed var) 如果 var 是非空或非零的值，则 empty() 返回 FALSE。换句话说，””、0、”0”、NULL、FALSE、array()、var $var; 以及没有任何属性的对象都将被认为是空的，如果 var 为空，则返回 TRUE</p>
</li>
<li><p>isset() isset – 检测变量是否设置 描述 bool isset ( mixed var [, mixed var [, …]]) 如果 var 存在则返回 TRUE，否则返回 FALSE。 如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是一个 NULL 字节（”0”）并不等同于 PHP 的 NULL 常数。 注意：如果变量不存在，isset()和empty()都不会报错；is_null(),is_numeric()会报错 如何区别如下数组中 [0,’’,null] 三个元素 1.区别0:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = 0;</span><br><span class="line">isset($a) &amp;&amp; is_numeric($a) === true</span><br></pre></td></tr></table></figure></div>

<p>2.区别’’</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = &#x27;&#x27;;</span><br><span class="line">empty($a) &amp;&amp; $a=== &#x27;&#x27;</span><br></pre></td></tr></table></figure></div>

<p>3.区别null</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = null;</span><br><span class="line">is_null($a);</span><br></pre></td></tr></table></figure></div>

<p>另外在做表单提交的时候可能经常要检测一个变量是否存在，假如<code>$_REQUEST[&#39;status&#39;] = 0;</code>使用<code>empty($_REQUEST[&#39;status&#39;])</code>返回true，但是使用<code>isset($_REQUEST[&#39;status&#39;])</code> 判断就不是空</p>
</li>
<li><p>is_null()： <code>bool is_null ( mixed $var )</code> (php.net官方文档的函数定义) 当参数满足下面三种情况时，is_null()将返回TRUE，其它的情况就是FALSE 1、它被赋值为NULL 2、它还没有赋值 3、它未定义，相当于unset(),将一个变量unset()后，不就是没有定义吗 让我们来看一些例子：</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$myvar = NULL;  </span><br><span class="line">var_dump(is_null($myvar)); // TRUE </span><br><span class="line">$myvar1;      </span><br><span class="line">var_dump(is_null($myvar1)); // TRUE Notice: Undefined variable </span><br><span class="line">$num = 520; </span><br><span class="line">unset($num); </span><br><span class="line">var_dump(is_null($num)); //TRUE Notice: Undefined variable </span><br><span class="line">var_dump(is_null($some_undefined_var)); //TRUE Notice: Undefined variable </span><br><span class="line">$myvar = 0; is_null($myvar);   // FALSE </span><br><span class="line">$myvar = FALSE; is_null($myvar); // FALSE </span><br><span class="line">$myvar = &#x27;&#x27;; is_null($myvar);  // FALSE</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php中判断一个字符是否在字符串中</title>
    <url>/2017/04/30/php-article78/</url>
    <content><![CDATA[<p>php中判断一个字符是否在字符串中 下面介绍使用方法:</p>
<ol>
<li><p>strstr: 返回一个从被判断字符开始到结束的字符串,如果没有返回值,则不包含 代码如下:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">/*如手册上的举例*/ </span><br><span class="line">$email = &#x27;user@example.com&#x27;; </span><br><span class="line">$domain = strstr($email, &#x27;@&#x27;); </span><br><span class="line">echo $domain; // prints @example.com </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>stristr: 它和strstr的使用方法完全一样.唯一的区别是stristr不区分大小写.</p>
</li>
<li><p>用explode进行判断 代码如下:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function checkstr($str)&#123; </span><br><span class="line">$needle = &quot;a&quot;;//判断是否包含a这个字符 </span><br><span class="line">$tmparray = explode($needle,$str); </span><br><span class="line">if(count($tmparray)&gt;1)&#123; </span><br><span class="line">return true; </span><br><span class="line">&#125; else&#123; </span><br><span class="line">return false; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>strpos: 返回boolean值.FALSE和TRUE不用多说.用 “&#x3D;&#x3D;&#x3D;”进行判断.strpos在执行速度上都比以上两个函数快,另外strpos有一个参数指定判断的位置,但是默认为空.意思是判断整个字符串.缺点是对中文的支持不好.使用方法</p>
</li>
</ol>
<ul>
<li><p>strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）</p>
</li>
<li><p>stripos() - 查找字符串在另一字符串中第一次出现的位置（不区分大小写）</p>
</li>
<li><p>strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</p>
</li>
<li><p>strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</p>
<blockquote>
<p>参数： strripos(string,find,start) string：必需。规定要搜索的字符串。 find：必需。规定要查找的字符。 start：可选。规定开始搜索的位置。</p>
</blockquote>
<p>例子：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1#</span><br><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;abcdef&#x27;;</span><br><span class="line">$find   = &#x27;abc&#x27;;</span><br><span class="line">$pos = strpos($mystring, $findme);</span><br><span class="line">// 注意这里使用的是 ===不能使用==</span><br><span class="line">// 因为如果没有字符串 就返回false，如果这个字符串位于字符串的开始的地方，</span><br><span class="line">就会返回0为了区分0和false就必须使用等同操作符 === 或者 ！==</span><br><span class="line">if ($pos === false) &#123;</span><br><span class="line">echo &quot;$find不在$str中&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;$find在$str中&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2#</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
      <categories>
        <category>programme</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现数独破解(可以直接测试使用)</title>
    <url>/2017/05/03/php-article79/</url>
    <content><![CDATA[<h2 id="有时候会玩数独游戏，玩的多了会发现可以使用计算机来求解数独里的数字，使用递归进行进行遍历即可，所以就写了这么一个小功能，放在我的网站里，有兴趣的可以研究代码，或者也可以直接使用，要使用戳这里-数独破解测试使用"><a href="#有时候会玩数独游戏，玩的多了会发现可以使用计算机来求解数独里的数字，使用递归进行进行遍历即可，所以就写了这么一个小功能，放在我的网站里，有兴趣的可以研究代码，或者也可以直接使用，要使用戳这里-数独破解测试使用" class="headerlink" title="有时候会玩数独游戏，玩的多了会发现可以使用计算机来求解数独里的数字，使用递归进行进行遍历即可，所以就写了这么一个小功能，放在我的网站里，有兴趣的可以研究代码，或者也可以直接使用，要使用戳这里:数独破解测试使用"></a>有时候会玩数独游戏，玩的多了会发现可以使用计算机来求解数独里的数字，使用递归进行进行遍历即可，所以就写了这么一个小功能，放在我的网站里，有兴趣的可以研究代码，或者也可以直接使用，要使用戳这里:<a class="link"   href="http://www.rain1024.com/more/sudoku_web.php" >数独破解测试使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="本功能使用两个php页面完成，sudoku-web-php是用来输入数据的，而sudoku-with-php是用来处理数据的，不要随意访问php页面，否则会被重定向。使用时要注意输入的数据正确，数独只有1-9-共9个数字，请不要输入其他字符，破解结果中，灰色输入框是使用者自己输入的数据，本功能作为测试，如有雷同，纯属巧合。"><a href="#本功能使用两个php页面完成，sudoku-web-php是用来输入数据的，而sudoku-with-php是用来处理数据的，不要随意访问php页面，否则会被重定向。使用时要注意输入的数据正确，数独只有1-9-共9个数字，请不要输入其他字符，破解结果中，灰色输入框是使用者自己输入的数据，本功能作为测试，如有雷同，纯属巧合。" class="headerlink" title="本功能使用两个php页面完成，sudoku_web.php是用来输入数据的，而sudoku_with.php是用来处理数据的，不要随意访问php页面，否则会被重定向。使用时要注意输入的数据正确，数独只有1-9,共9个数字，请不要输入其他字符，破解结果中，灰色输入框是使用者自己输入的数据，本功能作为测试，如有雷同，纯属巧合。"></a>本功能使用两个php页面完成，sudoku_web.php是用来输入数据的，而sudoku_with.php是用来处理数据的，不要随意访问php页面，否则会被重定向。使用时要注意输入的数据正确，数独只有1-9,共9个数字，请不要输入其他字符，破解结果中，灰色输入框是使用者自己输入的数据，本功能作为测试，如有雷同，纯属巧合。</h2><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php15.jpg"
                     
                ></p>
<h3 id="破解结果"><a href="#破解结果" class="headerlink" title="破解结果"></a>破解结果</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/php16.jpg"
                     
                ></p>
<h2 id="下面是代码"><a href="#下面是代码" class="headerlink" title="下面是代码"></a>下面是代码</h2><h3 id="sudoku-web-php"><a href="#sudoku-web-php" class="headerlink" title="sudoku_web.php"></a>sudoku_web.php</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .form&#123;</span><br><span class="line">        width: 395px;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    input&#123;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    td&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">    &lt;h1&gt;数独破解&lt;/h1&gt;</span><br><span class="line">    （请在对应文本框中输入已经提示的数字，请保证输入的只有数字，然后点击提交）</span><br><span class="line">    &lt;form action=&quot;sudoku.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;table border=&quot;0&quot; &gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">            $sum = 0;</span><br><span class="line">            for ($i=0;$i&lt;9;$i++)&#123;</span><br><span class="line">                echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">                for ($j=0;$j&lt;9;$j++)&#123;</span><br><span class="line">                    $sum = $sum + 1;</span><br><span class="line">                    echo &quot;&lt;td&gt;&lt;input type=\&quot;text\&quot; name=\&quot;fig&quot;.$sum.&quot;\&quot; max=\&quot;9\&quot; min=\&quot;1\&quot; maxlength=\&quot;1\&quot; size=\&quot;1\&quot; value=\&quot;\&quot;&gt;&lt;/td&gt;&quot;;</span><br><span class="line">                    if($sum%3==0)&#123;</span><br><span class="line">                        echo &quot;&lt;td&gt;&lt;/td&gt;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">                if($sum%27==0)&#123;</span><br><span class="line">                    echo &quot;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot; style=&quot;width: 50px;height: 30px;&quot;&gt;   &lt;input type=&quot;reset&quot; value=&quot;重置&quot; style=&quot;width: 50px;height: 30px;&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="sudoku-with-php"><a href="#sudoku-with-php" class="headerlink" title="sudoku_with.php"></a>sudoku_with.php</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .form&#123;</span><br><span class="line">        width: 395px;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    input&#123;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    td&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: Rain</span><br><span class="line"> * Date: 2017/5/2</span><br><span class="line"> * Time: 21:29</span><br><span class="line"> */</span><br><span class="line">//$old_host =  $_SERVER[&#x27;HTTP_REFERER&#x27;];</span><br><span class="line">//if($old_host != &#x27;http://www.rain1024.com/more/sudoku_web.php&#x27;)&#123;</span><br><span class="line">//    $url = &#x27;http://www.rain1024.com/more/sudoku_web.php&#x27;;</span><br><span class="line">//    header(&quot;Locatio:$url&quot;);</span><br><span class="line">//    exit();</span><br><span class="line">//&#125;</span><br><span class="line">//$host = $_SERVER[&#x27;HTTP_HOST&#x27;];</span><br><span class="line">//if($host==&#x27;manage.rain1024.com&#x27;)&#123;</span><br><span class="line">//    $url = &#x27;manage.rain1024.com/manage/index.php&#x27;;</span><br><span class="line">//    header(&quot;Locatio:$url&quot;);</span><br><span class="line">//    exit();</span><br><span class="line">//&#125;</span><br><span class="line">$sudoku_arr = array();</span><br><span class="line">for ($i = 0; $i &lt; 20; $i++) &#123;</span><br><span class="line">    for ($j = 0; $j &lt; 20; $j++) &#123;</span><br><span class="line">        $sudoku_arr[$i][$j] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$sum = 0;</span><br><span class="line">for ($i = 0; $i &lt; 9; $i++) &#123;</span><br><span class="line">    for ($j = 0; $j &lt; 9; $j++) &#123;</span><br><span class="line"></span><br><span class="line">        $sum = $sum + 1;</span><br><span class="line">        /**</span><br><span class="line">         * 要先判断输入的类型，只能是1-9的数字</span><br><span class="line">         */</span><br><span class="line">        if (empty($_POST[&#x27;fig&#x27; . $sum])) &#123;</span><br><span class="line">            $sudoku_arr[$i][$j] = 0;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $sudoku_arr[$i][$j] = intval($_POST[&#x27;fig&#x27; . $sum]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$new_arr = $sudoku_arr;</span><br><span class="line">//var_dump($sudoku_arr);</span><br><span class="line">/* 数独求解程序</span><br><span class="line"> * Created on 2017-4-18</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">class Sudoku &#123;</span><br><span class="line">    var $matrix;</span><br><span class="line">    function __construct($arr = null) &#123;</span><br><span class="line">        if ($arr == null) &#123;</span><br><span class="line">            $this-&gt;clear();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;matrix = $arr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function clear() &#123;</span><br><span class="line">        for($i=0; $i&lt;9; $i++) &#123;</span><br><span class="line">            for($j=0; $j&lt;9; $j++) &#123;</span><br><span class="line">                $this-&gt;matrix[$i][$j] = array();</span><br><span class="line">                for ($k = 1; $k &lt;= 9; $k++) &#123;</span><br><span class="line">                    $this-&gt;matrix[$i][$j][$k] = $k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function setCell($row, $col, $value)&#123;</span><br><span class="line">        $this-&gt;matrix[$row][$col] = array($value =&gt; $value);</span><br><span class="line">        //row</span><br><span class="line">        for($i = 0; $i &lt; 9; $i++)&#123;</span><br><span class="line">            if($i != $col)&#123;</span><br><span class="line">                if(! $this-&gt;removeValue($row, $i, $value)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //col</span><br><span class="line">        for($i = 0; $i &lt; 9; $i++)&#123;</span><br><span class="line">            if($i != $row)&#123;</span><br><span class="line">                if(! $this-&gt;removeValue($i, $col, $value)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //square</span><br><span class="line">        $rs=intval($row / 3) * 3;</span><br><span class="line">        $cs=intval($col / 3) * 3;</span><br><span class="line">        for($i = $rs; $i &lt; $rs + 3; $i++)&#123;</span><br><span class="line">            for($j = $cs; $j &lt; $cs + 3; $j++)&#123;</span><br><span class="line">                if($i != $row &amp;&amp; $j != $col)&#123;</span><br><span class="line">                    if(! $this-&gt;removeValue($i, $j, $value))</span><br><span class="line">                        return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    function removeValue($row, $col, $value) &#123;</span><br><span class="line">        $count = count($this-&gt;matrix[$row][$col]);</span><br><span class="line">        if($count == 1)&#123;</span><br><span class="line">            $ret = !isset($this-&gt;matrix[$row][$col][$value]);</span><br><span class="line">            return $ret;</span><br><span class="line">        &#125;</span><br><span class="line">        if (isset($this-&gt;matrix[$row][$col][$value])) &#123;</span><br><span class="line">            unset($this-&gt;matrix[$row][$col][$value]);</span><br><span class="line">            if($count - 1 == 1) &#123;</span><br><span class="line">                return $this-&gt;setCell($row, $col, current($this-&gt;matrix[$row][$col]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    function set($arr) &#123;</span><br><span class="line">        for ($i = 0; $i &lt; 9; $i++) &#123;</span><br><span class="line">            for ($j = 0; $j &lt; 9; $j++) &#123;</span><br><span class="line">                if ($arr[$i][$j] &gt; 0) &#123;</span><br><span class="line">                    $this-&gt;setCell($i, $j, $arr[$i][$j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function dump() &#123;</span><br><span class="line">        for($i = 0; $i &lt; 9; $i++)&#123;</span><br><span class="line">            for($j = 0; $j &lt; 9; $j++)&#123;</span><br><span class="line">                $c = count($this-&gt;matrix[$i][$j]);</span><br><span class="line">                if($c == 1)&#123;</span><br><span class="line">                    echo &quot; &quot;.current($this-&gt;matrix[$i][$j]).&quot; &quot;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    echo &quot;(&quot;.$c.&quot;)&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function result() &#123;</span><br><span class="line">        global $new_arr;</span><br><span class="line">        for($i = 0; $i &lt; 9; $i++)&#123;</span><br><span class="line">            for($j = 0; $j &lt; 9; $j++)&#123;</span><br><span class="line">                $c = count($this-&gt;matrix[$i][$j]);</span><br><span class="line">                if($c == 1)&#123;</span><br><span class="line">                    $new_arr[$i][$j] = current($this-&gt;matrix[$i][$j]);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $new_arr[$i][$j] = $c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">//            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">//        echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function dumpAll() &#123;</span><br><span class="line">        for($i = 0; $i &lt; 9; $i++)&#123;</span><br><span class="line">            for($j = 0; $j &lt; 9; $j++)&#123;</span><br><span class="line">                echo implode(&#x27;&#x27;, $this-&gt;matrix[$i][$j]), &quot;  &quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function calc($data) &#123;</span><br><span class="line">        $this-&gt;clear();</span><br><span class="line">        $this-&gt;set($data);</span><br><span class="line">        $this-&gt;_calc();</span><br><span class="line">        $this-&gt;result();</span><br><span class="line">//        $this-&gt;dump();</span><br><span class="line">    &#125;</span><br><span class="line">    function _calc() &#123;</span><br><span class="line">        for($i = 0; $i &lt; 9; $i++)&#123;</span><br><span class="line">            for($j = 0; $j &lt; 9; $j++)&#123;</span><br><span class="line">                if(count($this-&gt;matrix[$i][$j]) == 1) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                foreach($this-&gt;matrix[$i][$j] as $v)&#123;</span><br><span class="line">                    $flag = false;</span><br><span class="line">                    $t = new Sudoku($this-&gt;matrix);</span><br><span class="line">                    if(!$t-&gt;setCell($i, $j, $v))&#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(!$t-&gt;_calc())&#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $this-&gt;matrix = $t-&gt;matrix;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$sudoku = new Sudoku();</span><br><span class="line">$sudoku-&gt;calc($sudoku_arr);</span><br><span class="line">//for ($i = 0; $i &lt; 9; $i++) &#123;</span><br><span class="line">//    for ($j = 0; $j &lt; 9; $j++) &#123;</span><br><span class="line">//        echo $new_arr[$i][$j].&quot;  &quot;;</span><br><span class="line">//    &#125;</span><br><span class="line">//    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">//&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;div align=&quot;center&quot;&gt;</span><br><span class="line">    &lt;h1&gt;破解结果&lt;/h1&gt;</span><br><span class="line">    （灰色输入框为自己输入的值，点击返回按钮可重新修改内容）</span><br><span class="line">        &lt;table border=&quot;0&quot; &gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">            $sum = 0;</span><br><span class="line">            for ($i=0;$i&lt;9;$i++)&#123;</span><br><span class="line">                echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">                for ($j=0;$j&lt;9;$j++)&#123;</span><br><span class="line">                    $sum = $sum + 1;</span><br><span class="line">                    if($sudoku_arr[$i][$j]==0)&#123;</span><br><span class="line">                        echo &quot;&lt;td&gt;&lt;input  type=\&quot;text\&quot; value=\&quot;&quot;.$new_arr[$i][$j].&quot;\&quot; max=\&quot;9\&quot; min=\&quot;1\&quot; maxlength=\&quot;1\&quot; size=\&quot;1\&quot; &gt;&lt;/td&gt;&quot;;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        echo &quot;&lt;td&gt;&lt;input style=&#x27;background-color: #cac5c9&#x27; type=\&quot;text\&quot; max=\&quot;9\&quot; min=\&quot;1\&quot; maxlength=\&quot;1\&quot; size=\&quot;1\&quot; value=\&quot;&quot;.$sudoku_arr[$i][$j].&quot;\&quot;&gt;&lt;/td&gt;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if($sum%3==0)&#123;</span><br><span class="line">                        echo &quot;&lt;td&gt;&lt;/td&gt;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">                if($sum%27==0)&#123;</span><br><span class="line">                    echo &quot;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;/tr&gt;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ?&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;返回&quot; style=&quot;width: 50px;height: 30px;&quot; onclick=&quot;goback()&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function goback()&#123;</span><br><span class="line">        history.go(-1);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>在PHP中使用jQuery调用ajax</title>
    <url>/2017/05/24/php-article82/</url>
    <content><![CDATA[<h2 id="这几天写网站想要使用ajax，jQuery已经将ajax封装的很好了，直接去官网下载jquery3的包就可以，但是关于PHP如何响应ajax的调用，PHP如何返回所需要的值，在html中如何使用返回值，官方没有写，网上的内容也是参差不齐，自己调试了好久，终于没什么问题，于是写出来，方便以后的使用吧。"><a href="#这几天写网站想要使用ajax，jQuery已经将ajax封装的很好了，直接去官网下载jquery3的包就可以，但是关于PHP如何响应ajax的调用，PHP如何返回所需要的值，在html中如何使用返回值，官方没有写，网上的内容也是参差不齐，自己调试了好久，终于没什么问题，于是写出来，方便以后的使用吧。" class="headerlink" title="这几天写网站想要使用ajax，jQuery已经将ajax封装的很好了，直接去官网下载jquery3的包就可以，但是关于PHP如何响应ajax的调用，PHP如何返回所需要的值，在html中如何使用返回值，官方没有写，网上的内容也是参差不齐，自己调试了好久，终于没什么问题，于是写出来，方便以后的使用吧。"></a>这几天写网站想要使用ajax，jQuery已经将ajax封装的很好了，直接去官网下载jquery3的包就可以，但是关于PHP如何响应ajax的调用，PHP如何返回所需要的值，在html中如何使用返回值，官方没有写，网上的内容也是参差不齐，自己调试了好久，终于没什么问题，于是写出来，方便以后的使用吧。</h2><h3 id="1-第一步要先去官网下载jQuery，我下载的是min版，然后导入"><a href="#1-第一步要先去官网下载jQuery，我下载的是min版，然后导入" class="headerlink" title="1.第一步要先去官网下载jQuery，我下载的是min版，然后导入"></a>1.第一步要先去官网下载jQuery，我下载的是min版，然后导入</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/Public/js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-第二步就是写一个js函数，使用什么控件调用一下这个函数，然后在函数里直接写ajax"><a href="#2-第二步就是写一个js函数，使用什么控件调用一下这个函数，然后在函数里直接写ajax" class="headerlink" title="2. 第二步就是写一个js函数，使用什么控件调用一下这个函数，然后在函数里直接写ajax"></a>2. 第二步就是写一个js函数，使用什么控件调用一下这个函数，然后在函数里直接写ajax</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">       function validate2()&#123;</span><br><span class="line">           $.get(&quot;index.php?c=plan&amp;a=ajax&quot;, function(data)&#123;</span><br><span class="line">               var res = eval(&quot;(&quot; + data + &quot;)&quot;);//转为Object对象</span><br><span class="line">               var str = res.name;</span><br><span class="line">               document.getElementById(&#x27;words_name&#x27;).innerHTML = str;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-然后就是在PHP中返回所需要的值，这里我只是简单的测试，在PHP中开一个数组，然后给name设置一个值，再转换为json格式，直接打印就可以，"><a href="#3-然后就是在PHP中返回所需要的值，这里我只是简单的测试，在PHP中开一个数组，然后给name设置一个值，再转换为json格式，直接打印就可以，" class="headerlink" title="3.然后就是在PHP中返回所需要的值，这里我只是简单的测试，在PHP中开一个数组，然后给name设置一个值，再转换为json格式，直接打印就可以，"></a>3.然后就是在PHP中返回所需要的值，这里我只是简单的测试，在PHP中开一个数组，然后给name设置一个值，再转换为json格式，直接打印就可以，</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function ajax()&#123;</span><br><span class="line">            $ret = array(&#x27;name&#x27;=&gt;&#x27;123&#x27;);</span><br><span class="line">            echo json_encode($ret);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="这样就把name以json的格式返回了，在第二步中，通过eval就返回的data值转换了，然后res-name就可以得到name的值了"><a href="#这样就把name以json的格式返回了，在第二步中，通过eval就返回的data值转换了，然后res-name就可以得到name的值了" class="headerlink" title="这样就把name以json的格式返回了，在第二步中，通过eval就返回的data值转换了，然后res.name就可以得到name的值了"></a>这样就把name以json的格式返回了，在第二步中，通过eval就返回的data值转换了，然后res.name就可以得到name的值了</h3>]]></content>
      <categories>
        <category>programme</category>
        <category>JavaScript</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>JavaSciprt</tag>
      </tags>
  </entry>
  <entry>
    <title>Python线程概念与实例</title>
    <url>/2017/02/01/python-article0004/</url>
    <content><![CDATA[<h2 id="Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例"><a href="#Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例-Python线程概念与实例" class="headerlink" title="Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;"></a>Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;Python线程概念与实例;</h2><h2 id="在单线程中"><a href="#在单线程中" class="headerlink" title="在单线程中"></a>在单线程中</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding=utf8 -*-</span><br><span class="line">import threading</span><br><span class="line">from time import ctime, sleep</span><br><span class="line">#单线程实例</span><br><span class="line">def frist(frist_name, length):</span><br><span class="line">    for i in range(4):</span><br><span class="line">        print(&#x27;I was listening to %s %s&#x27;% (frist_name, ctime()))</span><br><span class="line">        sleep(length)</span><br><span class="line">def second(second_name, length):</span><br><span class="line">    for i in range(2):</span><br><span class="line">        print(&#x27;I was at the movie %s %s&#x27;% (second_name, ctime()))</span><br><span class="line">        sleep(length)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    frist(&#x27;第一线程&#x27;, 2)</span><br><span class="line">    second(&#x27;第二线程&#x27;, 4)</span><br><span class="line">    print(&#x27;all over %s&#x27;% ctime())</span><br><span class="line">    &lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">I was listening to 第一线程 Tue Jan 17 23:13:07 2017</span><br><span class="line">I was listening to 第一线程 Tue Jan 17 23:13:09 2017</span><br><span class="line">I was listening to 第一线程 Tue Jan 17 23:13:11 2017</span><br><span class="line">I was listening to 第一线程 Tue Jan 17 23:13:13 2017</span><br><span class="line">I was at the movie 第二线程 Tue Jan 17 23:13:15 2017</span><br><span class="line">I was at the movie 第二线程 Tue Jan 17 23:13:19 2017</span><br><span class="line">all over Tue Jan 17 23:13:23 2017</span><br></pre></td></tr></table></figure></div>

<h2 id="多线程中"><a href="#多线程中" class="headerlink" title="多线程中"></a>多线程中</h2><ul>
<li>在多线程中，线程的调用时随机的，所以每次的结果并不一样</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding=utf8 -*-</span><br><span class="line">import threading</span><br><span class="line">from time import ctime, sleep</span><br><span class="line">#多线程</span><br><span class="line">def frist(frist_name, length):</span><br><span class="line">    for i in range(4):</span><br><span class="line">        print(&#x27;I was listening to %s %s&#x27;% (frist_name, ctime()))</span><br><span class="line">        sleep(length)</span><br><span class="line">def second(second_name, length):</span><br><span class="line">    for i in range(2):</span><br><span class="line">        print(&#x27;I was at the second %s %s&#x27;% (second_name, ctime()))</span><br><span class="line">        sleep(length)</span><br><span class="line">th1 = threading.Thread(target=frist, args=(&#x27;第一线程&#x27;, 1))</span><br><span class="line">th2 = threading.Thread(target=second, args=(&#x27;第二线程&#x27;, 2))</span><br><span class="line">threads = [th1,th2]</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    for t in threads:</span><br><span class="line">        t.setDaemon(True)</span><br><span class="line">        t.start()</span><br><span class="line">    t.join()</span><br><span class="line">print(&#x27;all over %s&#x27; % ctime())&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<p>####结果</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">I was listening to 第一线程 Tue Jan 17 23:25:22 2017</span><br><span class="line">I was at the second 第二线程 Tue Jan 17 23:25:22 2017</span><br><span class="line">I was listening to 第一线程 Tue Jan 17 23:25:23 2017</span><br><span class="line">I was listening to 第一线程 Tue Jan 17 23:25:24 2017</span><br><span class="line">I was at the second 第二线程 Tue Jan 17 23:25:24 2017</span><br><span class="line">I was listening to 第一线程 Tue Jan 17 23:25:25 2017</span><br><span class="line">all over Tue Jan 17 23:25:26 2017</span><br></pre></td></tr></table></figure></div>

<ul>
<li>threading是Python标准库中的模块，有些朋友查到会有thread这个模块，但是在python3里面只剩下threading这个模块了，因为threading模块用起来更简单也更安全一些</li>
</ul>
<ol>
<li><p>time模块中有ctime()，sleep()等函数，ctime()返回当前时间，用一个str表示，sleep(n)表示挂起n秒</p>
</li>
<li><p>import threading 导入threading模块</p>
</li>
<li><p>th1 &#x3D; threading.Thread(target&#x3D;music, args&#x3D;(‘第一线程’,1)) 创建一个线程th1，threading.Thread()是一个类，类的构造函数原型如下： class threading.Thread(group&#x3D;None,target&#x3D;None, name&#x3D;None, args&#x3D;(), kwargs&#x3D;{}, *, daemon&#x3D;None) 这里用到了target，表示要调用的函数名，args表示调用函数的参数</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">threads = [th1, th2]</span><br><span class="line">将两个线程放入一个列表中</span><br><span class="line">for t in threads:</span><br><span class="line">    t.setDaemon(True)</span><br><span class="line">    t.start()</span><br><span class="line">t.join()</span><br><span class="line">最后使用一个for循环，依次将列表中的线程开启</span><br><span class="line">t.setDaemon(True)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>将线程声明为守护线程，必须在start() 方法调用之前设置，如果不设置为守护线程程序会被无限挂起。子线程启动后，父线程也继续执行下去，当父线程执行完最后一条语句print “all over %s” %ctime()后，没有等待子线程，直接就退出了，同时子线程也一同结束。 t.start() 开始线程活动。 t.join()</p>
</blockquote>
<ul>
<li>join()方法，用于等待线程终止。join（）的作用是，在子线程完成运行之前，这个子线程的父线程将一直等待。</li>
</ul>
<blockquote>
<p>注意: join()方法的位置是在for循环外的，也就是说必须等待for循环里的两个进程都结束后，才去执行主进程。如果没有join()函数，那么父线程执行完之后就会立即结束，不会等待子线程执行完</p>
</blockquote>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python68个内置函数</title>
    <url>/2017/02/03/python-article0009/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/82956687.png"
                     
                ></p>
<h5 id="以下是摘录的python的68个内置函数，本来想认真的都敲一遍，后来发现有些可以直接用，没必要再重新写，看一下也就会用了，所以先更新这么多，有兴趣的可以自己多研究研究"><a href="#以下是摘录的python的68个内置函数，本来想认真的都敲一遍，后来发现有些可以直接用，没必要再重新写，看一下也就会用了，所以先更新这么多，有兴趣的可以自己多研究研究" class="headerlink" title="以下是摘录的python的68个内置函数，本来想认真的都敲一遍，后来发现有些可以直接用，没必要再重新写，看一下也就会用了，所以先更新这么多，有兴趣的可以自己多研究研究"></a>以下是摘录的python的68个内置函数，本来想认真的都敲一遍，后来发现有些可以直接用，没必要再重新写，看一下也就会用了，所以先更新这么多，有兴趣的可以自己多研究研究</h5><ol>
<li>abs：返回所给数的绝对值，可以是整数，浮点数，算术表达式，复数（返回复数实部和虚部的平方和开根号，勾股定理）</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码Code：</span><br><span class="line">int_num = -10</span><br><span class="line">float_num = -10.01</span><br><span class="line">print abs(int_num)</span><br><span class="line">print abs(float_num)</span><br><span class="line">print abs(10-20)</span><br><span class="line">----------分割线------------</span><br><span class="line">结果Result:</span><br><span class="line">10</span><br><span class="line">10.01</span><br><span class="line">10</span><br></pre></td></tr></table></figure></div>

<ol>
<li>all：遍历一个容器，如果容器为空或者所有元素都返回True，那么all返回True，容器为空，或者里面的值不为零，返回值都是True，只要有一个元素为0就返回False。</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码Code：</span><br><span class="line">list_empty = []</span><br><span class="line">list_num_first = [1,1,1]</span><br><span class="line">list_num_zero = [0]</span><br><span class="line">list_mixtrue = [1,0,1]</span><br><span class="line">print all(list_empty)</span><br><span class="line">print all(list_num_first)</span><br><span class="line">print all(list_num_zero)</span><br><span class="line">print all(list_mixtrue)</span><br><span class="line">----------分割线------------</span><br><span class="line">结果Result:</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure></div>

<ol>
<li>any: 若容器为空则返回False,或只有一个元素并且为0，就返回False。</li>
<li>ascii：—不常用</li>
<li>bin：将整数转换为二进制的<strong>字符串</strong></li>
<li>bool：将元素转换为bool类型，整数0为False，字符串为空时为False</li>
<li>bytearray：返回一个字节数据—不常用</li>
<li>bytes：根据一个编码转换成字节形式—不常用</li>
<li>chr：返回的是整数对应的ascii字符，比如97返回a，48返回0</li>
<li>classmethod：为函数返回一个类方法</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码Code：</span><br><span class="line">def fun():</span><br><span class="line">    print 123</span><br><span class="line">print classmethod(fun())</span><br><span class="line">----------分割线------------</span><br><span class="line">结果Result:</span><br><span class="line">123</span><br><span class="line">&lt;classmethod object at 0x02E555F0&gt;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>compile：编译一个资源进入一个代码里或一个AST对象–（没用过）</li>
<li>complex：创建一个复数的表达式</li>
<li>delattr：移除一个对象的属性</li>
<li>dict：创建一个词典结构(类似Map)</li>
<li>dir：如果没有参数返回本文件的路径，如果有参数返回一个对象的属性列表</li>
<li>divmod：两个整形数字做相除</li>
<li>enumerate：返回一个枚举对象</li>
<li>eval：执行一个表达式，或字符串作为运算</li>
<li>exec：支持python代码的动态执行</li>
<li>filter：在一个元组里面过滤出目标字符串</li>
<li>float：字符串转成浮点类型</li>
<li>format：格式化字符串</li>
<li>frozenset：返回一个新的克隆对象</li>
<li>getattr：获取对象的一个方法的结果，类似于x.foobar</li>
<li>globals:返回当前全局的字典表</li>
<li>hasattr：判断是否有某个属性值，返回true代表有</li>
<li>hash：取一个对象的hash值</li>
<li>help：调用系统内置的帮助系统</li>
<li>hex：转换一个整形数字，为小写的十六进制</li>
<li>id：返回一个对象的唯一标识值</li>
<li>input：从控制台读取数据</li>
<li>int：转换字符串为int型</li>
<li>isinstance：判断一个对象是否为该类的一个实例</li>
<li>issubclass：判断一个类是否为另一个类的子类</li>
<li>iter：返回一个可迭代的对象</li>
<li>len：返回一个字符串或容器的长度</li>
<li>list：打印一个集合对象</li>
<li>locals：更细并返回一个词典的本地标志表</li>
<li>map：返回一个可迭代的map函数</li>
<li>max：返回集合里面最大的一个或多个值</li>
<li>memoryview：返回一个python对象的内部数据</li>
<li>min：返回集合里面最小的一个或多个值</li>
<li>next：返回集合里面的下一项数值</li>
<li>object：返回一个新的对象，是所有的类的父类</li>
<li>oct：返回一个整形为八进制类型</li>
<li>open：打开一个系统文件</li>
<li>ord：得到一个字符或unicode类型的ascii数值</li>
<li>pow：返回的数字n次方值，跟**操作符是一样的效果</li>
<li>print：打印输出语句，在python3.0以后print就是一个函数了，需要加括号</li>
<li>property：返回一个属性值</li>
<li>range：产生一个数字序列</li>
<li>repr：返回一个字符串可打印对象</li>
<li>reversed：反转一个集合</li>
<li>round：返回一个四舍五入的浮点数</li>
<li>set：返回一个新的set对象</li>
<li>setattr：设置一个新的属性值</li>
<li>slice：返回一个集合的区间集合</li>
<li>sorted：对一个集合进行排序</li>
<li>staticmethod：声明返回一个静态方法</li>
<li>str：将数字类型转换为字符串</li>
<li>sum：对一个集合里面的值求和</li>
<li>super：返回一个代理父类的对象</li>
<li>tuple：返回一个不可变的元组</li>
<li>type：返回一个对象的类型</li>
<li>vars：返回对象的属性</li>
<li>zip：返回组合一个对等的项</li>
<li><strong>import</strong>：比import高级的导入方法</li>
</ol>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>邮件专题---使用Python发送邮件</title>
    <url>/2017/02/04/python-article19/</url>
    <content><![CDATA[<h4 id="今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。-使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。-下面是python发送邮件的源代码，我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。"><a href="#今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。-使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。-下面是python发送邮件的源代码，我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。" class="headerlink" title="今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。 ##### 使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。 * 下面是python发送邮件的源代码，我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。"></a>今天准备把笔记里关于python，java，php如何发送邮件的代码整理一下，发到博客里，作为一个写程序的用的最多的就是邮件，每天都要接收各种邮件，主流一些的邮箱我也都注册了，google，163邮箱，qq邮箱，阿里云邮箱，但用的最多的还是163，所以这几篇文章也都是讲如何使用163邮箱发送邮件，但道理都差不多，使用其他邮箱的更改一下smtp就行。 ##### 使用之前要记得把邮箱的smtp功能都开了，qq邮箱和163邮箱默认都没有开放功能，激活以后会有另外一个授权码，这时候用163就比较方便，因为他的密码是自己设置的，而qq邮箱是给了一长串授权码，很麻烦。邮件发送以后可能会被视为垃圾邮件，所以如果没有收到提醒，就去垃圾邮件里看一看。 * 下面是python发送邮件的源代码，我只是用来发送文本消息，没有附件的功能，有兴趣的可以去深入研究一下，等过段时间我有需求时，再更新一篇如何发送附件的博文。</h4><p> </p>
<p>#-*- coding&#x3D;utf-8 -*- #如果要发送中文的内容，这个是必加<br>import smtplib<br>from email.mime.text import MIMEText<br>from email.header import Header<br>sender &#x3D; “<a class="link"   href="mailto:&#120;&#x78;&#120;&#x78;&#120;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#111;&#x6d;" >&#120;&#x78;&#120;&#x78;&#120;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ #发送方的邮箱<br>password &#x3D; “xxxxx” #邮箱的授权码<br>receiver &#x3D; “<a class="link"   href="mailto:&#120;&#x78;&#x78;&#120;&#120;&#x78;&#x40;&#x6d;&#x79;&#x77;&#x69;&#122;&#x2e;&#x63;&#110;" >&#120;&#x78;&#x78;&#120;&#120;&#x78;&#x40;&#x6d;&#x79;&#x77;&#x69;&#122;&#x2e;&#x63;&#110; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ #接收方的邮箱<br>subject &#x3D; “123” #title邮件标题<br>words &#x3D; “46878” #text邮件内容<br>smtpserver &#x3D; ‘smtp.163.com’<br>msg &#x3D; MIMEText(words, ‘plain’, ‘utf-8’)#中文需参数‘utf-8’，单字节字符不需要<br>msg[‘Subject’] &#x3D; Header(subject, ‘utf-8’) #邮件标题<br>msg[‘from’] &#x3D; sender #发信人地址<br>msg[‘to’] &#x3D; receiver #收信人地址<br>smtp &#x3D; smtplib.SMTP()<br>smtp.connect(‘smtp.163.com’)<br>smtp.login(sender, password)<br>smtp.sendmail(sender, receiver, msg.as_string())<br>smtp.quit()<br>print “邮件发送成功!”</p>
<p> </p>
<h4 id="以上代码是我测试过的，应该没有问题，有问题的可以发邮件联系我，我的python是2-7，IDE使用pycharm，这里只是最简单的源码，使用时建议写成一个函数，直接调用即可，或者直接保存为文件，再导入"><a href="#以上代码是我测试过的，应该没有问题，有问题的可以发邮件联系我，我的python是2-7，IDE使用pycharm，这里只是最简单的源码，使用时建议写成一个函数，直接调用即可，或者直接保存为文件，再导入" class="headerlink" title="以上代码是我测试过的，应该没有问题，有问题的可以发邮件联系我，我的python是2.7，IDE使用pycharm，这里只是最简单的源码，使用时建议写成一个函数，直接调用即可，或者直接保存为文件，再导入"></a>以上代码是我测试过的，应该没有问题，有问题的可以发邮件联系我，我的python是2.7，IDE使用pycharm，这里只是最简单的源码，使用时建议写成一个函数，直接调用即可，或者直接保存为文件，再导入</h4><h4 id="这是我写的邮件专题里其他两篇发送邮件的博文"><a href="#这是我写的邮件专题里其他两篇发送邮件的博文" class="headerlink" title="这是我写的邮件专题里其他两篇发送邮件的博文"></a>这是我写的邮件专题里其他两篇发送邮件的博文</h4><p>》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/java-article0021/"  title="邮件专题---使用java发送邮件">邮件专题—使用java发送邮件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/php-article0020/"  title="邮件专题---使用php发送邮件">邮件专题—使用php发送邮件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>Base64专题---Python实现Base64加密和解密</title>
    <url>/2017/02/04/python-article0016/</url>
    <content><![CDATA[<h4 id="Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和java的使用代码我都会贴在文章最后。"><a href="#Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和java的使用代码我都会贴在文章最后。" class="headerlink" title="Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和java的使用代码我都会贴在文章最后。"></a>Base加密方法很方便，在保存一些特别数据时可以直接调用方法进行加密和解密的操作，我会发一篇专门介绍base64原理的文章，有兴趣的可以先去查看。还有php和java的使用代码我都会贴在文章最后。</h4><h5 id="下面是使用python进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收"><a href="#下面是使用python进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收" class="headerlink" title="下面是使用python进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收"></a>下面是使用python进行base64加密与解密的源码，使用时建议将代码写到一个函数里，方便使用的时候自己调用即可，记住值的传递与接收</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">#对字符串加密解密</span><br><span class="line">string = &quot;3423&quot;</span><br><span class="line">base64_encode_string = base64.encodestring(string)</span><br><span class="line">print base64_encode_string</span><br><span class="line">base64_decode_string = base64.decodestring(base64_encode_string)</span><br><span class="line">print base64_decode_string</span><br><span class="line">#当对文件整体进行加密或解密时使用encode</span><br><span class="line">file_render = open(&#x27;file1.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">file_write = open(&#x27;file2.txt&#x27;,&#x27;w&#x27;)</span><br><span class="line">base64.encode(file_render,file_write)</span><br><span class="line">file_render.close()</span><br><span class="line">file_write.close()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>最后： 》》》这是一个能在线对base64进行加密解密的网站<a class="link"   href="http://tool.oschina.net/encrypt?type=3"  title="在线加密解密(采用Crypto-JS实现)">在线加密解密(采用Crypto-JS实现) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h5 id="我的其他两篇文章"><a href="#我的其他两篇文章" class="headerlink" title="我的其他两篇文章"></a>我的其他两篇文章</h5><p>》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/03/java-article0014/"  title="java中使用Base64加密解密的函数">java中使用Base64加密解密的函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/04/php-article0016/"  title="PHP实现base64加密和解密的方法">PHP实现base64加密和解密的方法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Base64</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python爬取有道首页做一个翻译程序</title>
    <url>/2017/02/05/python-article23/</url>
    <content><![CDATA[<h3 id="今天想写一篇关于python爬虫的博文，正好这几天有几百个单词要翻译，而翻译软件我最常用的就是有道，去有道首页抓个包看一下，是http协议而且还是get请求这就好办了，使用时要注意是有道http-www-youdao-com-，-不是有道翻译，有道翻译采用的是post请求，这次我们使用有道首页，下面是我抓到的包分析的。"><a href="#今天想写一篇关于python爬虫的博文，正好这几天有几百个单词要翻译，而翻译软件我最常用的就是有道，去有道首页抓个包看一下，是http协议而且还是get请求这就好办了，使用时要注意是有道http-www-youdao-com-，-不是有道翻译，有道翻译采用的是post请求，这次我们使用有道首页，下面是我抓到的包分析的。" class="headerlink" title="今天想写一篇关于python爬虫的博文，正好这几天有几百个单词要翻译，而翻译软件我最常用的就是有道，去有道首页抓个包看一下，是http协议而且还是get请求这就好办了，使用时要注意是有道http://www.youdao.com/， 不是有道翻译，有道翻译采用的是post请求，这次我们使用有道首页，下面是我抓到的包分析的。"></a>今天想写一篇关于python爬虫的博文，正好这几天有几百个单词要翻译，而翻译软件我最常用的就是有道，去有道首页抓个包看一下，是http协议而且还是get请求这就好办了，使用时要注意是有道<a class="link"   href="http://www.youdao.com/%EF%BC%8C" >http://www.youdao.com/， <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 不是有道翻译，有道翻译采用的是post请求，这次我们使用有道首页，下面是我抓到的包分析的。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/python10.png"
                     
                ></p>
<h3 id="箭头里标注的就是获取到的，由于是get请求，很简单，不需要其他什么参数，只看content里的内容即可。下面开始写python程序，既然发现是http协议，那我自己有urllib2库去抓就好，我使用的是python2-7，IDE为pycharm，下面是代码，分两段函数，不喜欢把所有代码写到一起，写成函数使用的时候直接调用就行，不需要到处找，到处注释掉。"><a href="#箭头里标注的就是获取到的，由于是get请求，很简单，不需要其他什么参数，只看content里的内容即可。下面开始写python程序，既然发现是http协议，那我自己有urllib2库去抓就好，我使用的是python2-7，IDE为pycharm，下面是代码，分两段函数，不喜欢把所有代码写到一起，写成函数使用的时候直接调用就行，不需要到处找，到处注释掉。" class="headerlink" title="箭头里标注的就是获取到的，由于是get请求，很简单，不需要其他什么参数，只看content里的内容即可。下面开始写python程序，既然发现是http协议，那我自己有urllib2库去抓就好，我使用的是python2.7，IDE为pycharm，下面是代码，分两段函数，不喜欢把所有代码写到一起，写成函数使用的时候直接调用就行，不需要到处找，到处注释掉。"></a>箭头里标注的就是获取到的，由于是get请求，很简单，不需要其他什么参数，只看content里的内容即可。下面开始写python程序，既然发现是http协议，那我自己有urllib2库去抓就好，我使用的是python2.7，IDE为pycharm，下面是代码，分两段函数，不喜欢把所有代码写到一起，写成函数使用的时候直接调用就行，不需要到处找，到处注释掉。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">def get_html(url):  #获取网页内容</span><br><span class="line">    result = urllib2.urlopen(url)</span><br><span class="line">    return result.read()</span><br><span class="line">def save_file(text,filename):  #保存到文件</span><br><span class="line">    f = open(filename, &#x27;w&#x27;)</span><br><span class="line">    f.write(text)</span><br><span class="line">    f.close()</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    url = &#x27;http://www.youdao.com/w/result/#keyfrom=dict2.top&#x27;</span><br><span class="line">    save_file(get_html(url), &#x27;thefile.txt&#x27;)  #将得到的网页直接存到文件里</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="然后到你这个执行的项目的文件夹下找thefile-txt这个文件，是执行的这个程序的文件夹里。打开可以看到果然获取了全部网页内容。"><a href="#然后到你这个执行的项目的文件夹下找thefile-txt这个文件，是执行的这个程序的文件夹里。打开可以看到果然获取了全部网页内容。" class="headerlink" title="然后到你这个执行的项目的文件夹下找thefile.txt这个文件，是执行的这个程序的文件夹里。打开可以看到果然获取了全部网页内容。"></a>然后到你这个执行的项目的文件夹下找thefile.txt这个文件，是执行的这个程序的文件夹里。打开可以看到果然获取了全部网页内容。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/python11.png"
                     
                ></p>
<h4 id="但是我想做的是一个翻译程序，需要获取具体的意思，这时候就要用到正则表达式来提取关键内容了，现在开始分析我们所需要的其实就是下面这个框里的内容"><a href="#但是我想做的是一个翻译程序，需要获取具体的意思，这时候就要用到正则表达式来提取关键内容了，现在开始分析我们所需要的其实就是下面这个框里的内容" class="headerlink" title="但是我想做的是一个翻译程序，需要获取具体的意思，这时候就要用到正则表达式来提取关键内容了，现在开始分析我们所需要的其实就是下面这个框里的内容"></a>但是我想做的是一个翻译程序，需要获取具体的意思，这时候就要用到正则表达式来提取关键内容了，现在开始分析我们所需要的其实就是下面这个框里的内容</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/python12.png"
                     
                ></p>
<h4 id="其实就在网页这里-包含在一个ul下面"><a href="#其实就在网页这里-包含在一个ul下面" class="headerlink" title="其实就在网页这里,包含在一个ul下面"></a>其实就在网页这里,包含在一个ul下面</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/python13.png"
                     
                ></p>
<h3 id="…-写了一会完全提取不出来这对ul里的内容，网页里的ul太多，没有明显的特征，只好弃用正则表达式，用我的另外一个神器，BeautifulSoup库，简直就是万能的提取库。没有安装的可以去官网下载，安装方式参考我下面的这篇博文。"><a href="#…-写了一会完全提取不出来这对ul里的内容，网页里的ul太多，没有明显的特征，只好弃用正则表达式，用我的另外一个神器，BeautifulSoup库，简直就是万能的提取库。没有安装的可以去官网下载，安装方式参考我下面的这篇博文。" class="headerlink" title="…..写了一会完全提取不出来这对ul里的内容，网页里的ul太多，没有明显的特征，只好弃用正则表达式，用我的另外一个神器，BeautifulSoup库，简直就是万能的提取库。没有安装的可以去官网下载，安装方式参考我下面的这篇博文。"></a>…..写了一会完全提取不出来这对ul里的内容，网页里的ul太多，没有明显的特征，只好弃用正则表达式，用我的另外一个神器，BeautifulSoup库，简直就是万能的提取库。没有安装的可以去官网下载，安装方式参考我下面的这篇博文。</h3><p>》》》<a class="link"   href="https://pypi.python.org/pypi/beautifulsoup4/4.3.2"  title="这是官网下载地址">这是官网下载地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 》》》<a class="link"   href="http://www.rainweb.site/index.php/2017/02/05/python-article22/"  title="强大的BeautifulSoup库">强大的BeautifulSoup库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="这是我提取出来的结果，直接就找到了，而且显示的还是中文，用正则表达式一般都会把中文给编码以后再显示，因为我们需要的ul是在第二个所，以提取出去全部内容以后直接显示第二个。"><a href="#这是我提取出来的结果，直接就找到了，而且显示的还是中文，用正则表达式一般都会把中文给编码以后再显示，因为我们需要的ul是在第二个所，以提取出去全部内容以后直接显示第二个。" class="headerlink" title="这是我提取出来的结果，直接就找到了，而且显示的还是中文，用正则表达式一般都会把中文给编码以后再显示，因为我们需要的ul是在第二个所，以提取出去全部内容以后直接显示第二个。"></a>这是我提取出来的结果，直接就找到了，而且显示的还是中文，用正则表达式一般都会把中文给编码以后再显示，因为我们需要的ul是在第二个所，以提取出去全部内容以后直接显示第二个。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/python14.png"
                     
                ></p>
<h3 id="现在问题又来了，如何显示li里面的内容，我想用了正则表达式，但提取出来的是编码以后的中文，只能继续使用Beautifulsoup这个神器，具体研究的过程不再详细阐述，大家看代码就可以。这样代码基本完成，但是不方便使用啊，url是可以变得，于是我弄一个变量放进去，在给一个提示框，把每次要查的单词输入即可。"><a href="#现在问题又来了，如何显示li里面的内容，我想用了正则表达式，但提取出来的是编码以后的中文，只能继续使用Beautifulsoup这个神器，具体研究的过程不再详细阐述，大家看代码就可以。这样代码基本完成，但是不方便使用啊，url是可以变得，于是我弄一个变量放进去，在给一个提示框，把每次要查的单词输入即可。" class="headerlink" title="现在问题又来了，如何显示li里面的内容，我想用了正则表达式，但提取出来的是编码以后的中文，只能继续使用Beautifulsoup这个神器，具体研究的过程不再详细阐述，大家看代码就可以。这样代码基本完成，但是不方便使用啊，url是可以变得，于是我弄一个变量放进去，在给一个提示框，把每次要查的单词输入即可。"></a>现在问题又来了，如何显示li里面的内容，我想用了正则表达式，但提取出来的是编码以后的中文，只能继续使用Beautifulsoup这个神器，具体研究的过程不再详细阐述，大家看代码就可以。这样代码基本完成，但是不方便使用啊，url是可以变得，于是我弄一个变量放进去，在给一个提示框，把每次要查的单词输入即可。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">def get_html(url):  #获取网页内容</span><br><span class="line">    result = urllib2.urlopen(url)</span><br><span class="line">    return result.read()</span><br><span class="line">def save_file(text,filename):  #保存到文件</span><br><span class="line">    f = open(filename, &#x27;ab&#x27;)</span><br><span class="line">    f.write(text)</span><br><span class="line">    f.close()</span><br><span class="line">def open_file(filename):   #打开文件</span><br><span class="line">    f = open(filename,&#x27;r&#x27;)</span><br><span class="line">    text = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    return text</span><br><span class="line">def soup_html(text,word):   # 使用beautifulsoup提取的函数</span><br><span class="line">    soup = BeautifulSoup(text)</span><br><span class="line">    result = soup.find_all(&#x27;ul&#x27;)  #这是第一次提取出来的ul结果，需要进行下一步提取</span><br><span class="line">    ul_list = str(result[1])   # beautifulsoup要求使用字符串类型，所以先转换一下</span><br><span class="line">    soup_ul = BeautifulSoup(ul_list)  #建立第二个提取实例</span><br><span class="line">    for line in soup_ul.stripped_strings:   #对获取到的ul里的内容进行提取</span><br><span class="line">        print line</span><br><span class="line">def manage():   #封装所有函数的main</span><br><span class="line">    word = raw_input(&#x27;请输入要翻译的单词.....&#x27;)</span><br><span class="line">    url = &#x27;http://www.youdao.com/w/&#x27;+word+&#x27;/#keyfrom=dict2.top&#x27;</span><br><span class="line">    soup_html(get_html(url),word)</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    manage()</span><br></pre></td></tr></table></figure></div>

<h3 id="最后，这次的爬取比较简单，是http和get请求，没有参数和头部什么的要写，只是简单的爬取内容，然后再去分析提取，有兴趣的可以继续研究，这个可以用于大量单词的查找，代码是没有问题的，如果有疑问可与我联系。"><a href="#最后，这次的爬取比较简单，是http和get请求，没有参数和头部什么的要写，只是简单的爬取内容，然后再去分析提取，有兴趣的可以继续研究，这个可以用于大量单词的查找，代码是没有问题的，如果有疑问可与我联系。" class="headerlink" title="最后，这次的爬取比较简单，是http和get请求，没有参数和头部什么的要写，只是简单的爬取内容，然后再去分析提取，有兴趣的可以继续研究，这个可以用于大量单词的查找，代码是没有问题的，如果有疑问可与我联系。"></a>最后，这次的爬取比较简单，是http和get请求，没有参数和头部什么的要写，只是简单的爬取内容，然后再去分析提取，有兴趣的可以继续研究，这个可以用于大量单词的查找，代码是没有问题的，如果有疑问可与我联系。</h3>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>强大的BeautifulSoup库</title>
    <url>/2017/02/05/python-article22/</url>
    <content><![CDATA[<h2 id="BeautifulSoup简直就是神器，省去了复杂的正则表达式，而且还能自动将字符编码，下面是关于我在爬虫中使用BeautifulSoup库的总结，最常用，最好用的一些功能。下面会把我使用的示例HTML代码放出来。"><a href="#BeautifulSoup简直就是神器，省去了复杂的正则表达式，而且还能自动将字符编码，下面是关于我在爬虫中使用BeautifulSoup库的总结，最常用，最好用的一些功能。下面会把我使用的示例HTML代码放出来。" class="headerlink" title="BeautifulSoup简直就是神器，省去了复杂的正则表达式，而且还能自动将字符编码，下面是关于我在爬虫中使用BeautifulSoup库的总结，最常用，最好用的一些功能。下面会把我使用的示例HTML代码放出来。"></a>BeautifulSoup简直就是神器，省去了复杂的正则表达式，而且还能自动将字符编码，下面是关于我在爬虫中使用BeautifulSoup库的总结，最常用，最好用的一些功能。下面会把我使用的示例HTML代码放出来。</h2><h2 id="为了格式整齐，都写在代码里了"><a href="#为了格式整齐，都写在代码里了" class="headerlink" title="为了格式整齐，都写在代码里了"></a>为了格式整齐，都写在代码里了</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">导入库： from bs4 import BeautifulSoup</span><br><span class="line">实例化： soup = BeautifulSoup(text)</span><br><span class="line"></span><br><span class="line">1. 最常用的功能:soup.title,表示查找到title标签，或者soup.div，注意此时输出的值是是整个标签，结果：【2016年国内公映电影排期】，如果此时你想要获取里面的内容，就要这样写:soup.title.string，结果：【2016年国内公映电影排期】，但是你要确定标签里有字符，如果里面是一层套一层的标签，就获取不到内容，返回none，如果举一反三，其他标签里也是这样的。</span><br><span class="line"></span><br><span class="line">2. 获取标签里的属性值，如果现在有这样一行文本：</span><br><span class="line"></span><br><span class="line">，我想要获取class的值：soup.div[&#x27;class&#x27;]，得到结果：[u&#x27;global-nav-items&#x27;],可以看出来这是个列表，我想要的是值，所以再加一步：soup.div[&#x27;class&#x27;][0],就能得到：global-nav-items</span><br><span class="line"></span><br><span class="line">3. 好用的contents，在提取时有时会碰到多层嵌套的标签，比如这样的：</span><br><span class="line"></span><br><span class="line">更多</span><br><span class="line">，三层嵌套在一起，而我想得到’更多‘这个内容，结果是这样的：</span><br><span class="line">re = soup.find_all(&#x27;li&#x27;)  print re[0].contents[1].contents[1].string</span><br><span class="line">如果使用的是soup.li，则re后没有[]，很好理解，三层嵌套所以是本体加两个contens，最后用string得到内容。</span><br><span class="line"></span><br><span class="line">4. 查找指定标签，比如</span><br><span class="line"></span><br><span class="line">，我要找到这个标签就写成：print soup.find_all(&#x27;div&#x27;, class_=&#x27;abstract&#x27;)，这是查找多个，如果查找一个，则使用find。</span><br><span class="line"></span><br><span class="line">5. 提取比较多的而且不规则的标签内容，在上一个例子中我已经查到指定标签，而这个标签里的内容是这样的，</span><br><span class="line"></span><br><span class="line">导演: 张猛</span><br><span class="line"></span><br><span class="line">主演: 张国立 / 姚晨 / 窦骁</span><br><span class="line"></span><br><span class="line">类型: 剧情 / 家庭</span><br><span class="line"></span><br><span class="line">制片国家/地区: 中国大陆</span><br><span class="line"></span><br><span class="line">年份: 2016</span><br><span class="line"></span><br><span class="line">有空格，有换行符，这个内容就很乱了，用soup.find(&#x27;div&#x27;, class_=&#x27;abstract&#x27;).string已经无法解决问题，于是使用下面这张方法，完美解决，提取到的内容很整齐。</span><br><span class="line">info = soup.find_all(&#x27;div&#x27;, class_=&#x27;abstract&#x27;)</span><br><span class="line">soup_info = BeautifulSoup(str(info[0])) # beautifulsoup要求使用字符串类型</span><br><span class="line">for line in soup_info.stripped_strings: #对&lt;div&gt;里的内容进行提取</span><br><span class="line">print line</span><br><span class="line">结果：</span><br><span class="line">导演: 张猛</span><br><span class="line">主演: 张国立 / 姚晨 / 窦骁</span><br><span class="line">类型: 剧情 / 家庭</span><br><span class="line">制片国家/地区: 中国大陆</span><br><span class="line">年份: 2016</span><br><span class="line">6.&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>基于腾讯COS对象存储SDK使用Python编写的文件上传工具</title>
    <url>/2017/02/07/python-article31/</url>
    <content><![CDATA[<h1 id="COS-upload"><a href="#COS-upload" class="headerlink" title="COS-upload"></a>COS-upload</h1><h3 id="基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具，发布于github上，有需要的可以访问"><a href="#基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具，发布于github上，有需要的可以访问" class="headerlink" title="基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具，发布于github上，有需要的可以访问"></a>基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具，发布于github上，有需要的可以访问</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h5 id="COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud-Object-Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。"><a href="#COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud-Object-Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。" class="headerlink" title="COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud Object Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。"></a>COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud Object Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。</h5><h4 id="而我对COS的理解就是，我存如一份资源，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。"><a href="#而我对COS的理解就是，我存如一份资源，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。" class="headerlink" title="而我对COS的理解就是，我存如一份资源，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。"></a>而我对COS的理解就是，我存如一份资源，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。</h4><h4 id="而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。"><a href="#而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。" class="headerlink" title="而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。"></a>而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。</h4><h3 id="基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法："><a href="#基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法：" class="headerlink" title="基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法："></a>基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法：</h3><ol>
<li>先将upload.py和compile.pyc下载，放到同一个文件夹中</li>
<li>将你在官网的APPID，密钥，Bucket分别填入upload.py中，华北地区对应tj。</li>
<li>打开compile.pyc文件，一定是pyc编译好的，直接双击运行，会将upload.py编译成为upload.pyc格式。</li>
<li>然后把uploda.pyc放到要上传的文件目录下，打开，输入要上传的文件夹名称（随便的名称），然后把文件拉如即可，enter以后，会询问continue，是否继续上传</li>
</ol>
<h3 id="这是我发布的P1-0版，后续会根据需求继续更新"><a href="#这是我发布的P1-0版，后续会根据需求继续更新" class="headerlink" title="这是我发布的P1.0版，后续会根据需求继续更新"></a>这是我发布的P1.0版，后续会根据需求继续更新</h3><p>如图 <a href="http://blog-1252406596.costj.myqcloud.com/photo/python.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/photo/python.png"
                     
                ></a></p>
<blockquote>
<p>&gt;&gt;<a class="link"   href="https://github.com/rainweb521/COS-upload/tree/master"  title="这是github上的地址">这是github上的地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>programme</category>
        <category>Technique</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python正则表达式函数实例和常见符号的使用</title>
    <url>/2017/02/07/python-article35/</url>
    <content><![CDATA[<h2 id="今天要说的是正则表达式！！！"><a href="#今天要说的是正则表达式！！！" class="headerlink" title="今天要说的是正则表达式！！！"></a>今天要说的是正则表达式！！！</h2><h3 id="正则表达式，顾名思义是对表达式的一种筛选，处理，判断。当然我也只是一知半解，偶尔在爬虫里会用一些，但都是很简单的表达式，所以今天浅谈一下python中re模块"><a href="#正则表达式，顾名思义是对表达式的一种筛选，处理，判断。当然我也只是一知半解，偶尔在爬虫里会用一些，但都是很简单的表达式，所以今天浅谈一下python中re模块" class="headerlink" title="正则表达式，顾名思义是对表达式的一种筛选，处理，判断。当然我也只是一知半解，偶尔在爬虫里会用一些，但都是很简单的表达式，所以今天浅谈一下python中re模块"></a>正则表达式，顾名思义是对表达式的一种筛选，处理，判断。当然我也只是一知半解，偶尔在爬虫里会用一些，但都是很简单的表达式，所以今天浅谈一下python中re模块</h3><h3 id="先说理论的，re库里包含了正则表达式的处理函数"><a href="#先说理论的，re库里包含了正则表达式的处理函数" class="headerlink" title="先说理论的，re库里包含了正则表达式的处理函数"></a>先说理论的，re库里包含了正则表达式的处理函数</h3><ol>
<li><p>re.match(pattem,string,flags) re.match是从字符串的开始去匹配一个正则表达式模式，函数有三个参数，第一个是要匹配的正则表达式 第二个是要匹配的字符串文本 第三个是控制正则表达式的匹配方式</p>
</li>
<li><p>re.search(pattem,string,flags) re.search会在字符串中查找到第一个匹配模式然后返回参数与re.match相同</p>
</li>
<li><p>re.sub(pattern,repl,string,count) re.sub用于替换字符串中的匹配项，pattern是要匹配的正则表达式， repl是要替换的字符串，string表示字符串文本count表示要替换的个数，可不写，默认全部替换re.split（pattern，string）</p>
</li>
<li><p>re.findall（pattern，string）（我最常用） 按照匹配模式分割字符串为一个列表获取所有匹配的字符串</p>
</li>
<li><p>re.compile（） 可以把正则表达式编译成一个正则表达式对象</p>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">text = &quot;JGood is a handsome boy, he is cool, clever, and so on...&quot;</span><br><span class="line">regex = re.compile(r&#x27;\woo\w&#x27;)</span><br><span class="line">print regex.findall(text)   #查找所有包含&#x27;oo&#x27;的单词</span><br><span class="line">print regex.sub(lambda m: &#x27;[&#x27; + m.group(0) + &#x27;]&#x27;, text) #将字符串中含有&#x27;oo&#x27;的单词用[]括起来。</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python22.png"
                     
                ></p>
<h2 id="下面说一说正则表达式中几个常用符号"><a href="#下面说一说正则表达式中几个常用符号" class="headerlink" title="下面说一说正则表达式中几个常用符号"></a>下面说一说正则表达式中几个常用符号</h2><h4 id="1-使用‘-’符号"><a href="#1-使用‘-’符号" class="headerlink" title="1. 使用‘ . ’符号"></a>1. 使用‘ . ’符号</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用几个‘ . ’则往后匹配几个字符</span><br><span class="line">import re</span><br><span class="line">code = &#x27;abcahf123afr&#x27;</span><br><span class="line">b = re.findall(&#x27;a..&#x27;,code)</span><br><span class="line">print b</span><br><span class="line">&gt;&gt;&gt;[&#x27;abc&#x27;, &#x27;ahf&#x27;, &#x27;afr&#x27;]</span><br></pre></td></tr></table></figure></div>

<h4 id="2-使用‘-’-和-‘-？-’贪婪模式与非贪婪模式"><a href="#2-使用‘-’-和-‘-？-’贪婪模式与非贪婪模式" class="headerlink" title="2. 使用‘ .* ’ 和 ‘ .*？ ’贪婪模式与非贪婪模式"></a>2. 使用‘ .* ’ 和 ‘ .*？ ’贪婪模式与非贪婪模式</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">code = &#x27;abcahf123afr&#x27;</span><br><span class="line">b = re.findall(&#x27;a.*a&#x27;,code)</span><br><span class="line">print b</span><br><span class="line">&gt;&gt;&gt;[&#x27;abcahf123a&#x27;]  #贪婪模式匹配开始和结束字符中间内容时，内容越多越好，直到匹配到最后一个相同的字符。</span><br><span class="line">b = re.findall(&#x27;a.*?a&#x27;,code)</span><br><span class="line">print b</span><br><span class="line">&gt;&gt;&gt;[&#x27;abca&#x27;]  #非贪婪模式匹配开始和结束字符中间内容时，内容越少越好，一旦匹配到相同的字符就会结束。</span><br></pre></td></tr></table></figure></div>

<h4 id="3-括号的使用可以提取想要的内容"><a href="#3-括号的使用可以提取想要的内容" class="headerlink" title="3. 括号的使用可以提取想要的内容"></a>3. 括号的使用可以提取想要的内容</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">code = &#x27;abcahf123afr&#x27;</span><br><span class="line">b = re.findall(&#x27;a(.*a)&#x27;,code)</span><br><span class="line">print b</span><br><span class="line">b = re.findall(&#x27;a(.*?)a&#x27;,code)</span><br><span class="line">print b</span><br><span class="line">&gt;&gt;&gt;[&#x27;bcahf123a&#x27;]</span><br><span class="line">&gt;&gt;&gt;[&#x27;bc&#x27;]</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>基于腾讯COS对象存储SDK使用Python编写NR-TCloud1.1</title>
    <url>/2017/02/08/python-article39/</url>
    <content><![CDATA[<h1 id="NR-TCloud-1-1，更新于2017-02-08"><a href="#NR-TCloud-1-1，更新于2017-02-08" class="headerlink" title="NR-TCloud 1.1，更新于2017-02-08"></a>NR-TCloud 1.1，更新于2017-02-08</h1><h2 id="更新说明："><a href="#更新说明：" class="headerlink" title="更新说明："></a>更新说明：</h2><h4 id="第一版上传时需要将upload-pyc复制到要上传对象的同一目录下，不然会找不到对象链接而上传失败，在使用时很麻烦，需要多次移动工具，"><a href="#第一版上传时需要将upload-pyc复制到要上传对象的同一目录下，不然会找不到对象链接而上传失败，在使用时很麻烦，需要多次移动工具，" class="headerlink" title="第一版上传时需要将upload.pyc复制到要上传对象的同一目录下，不然会找不到对象链接而上传失败，在使用时很麻烦，需要多次移动工具，"></a>第一版上传时需要将upload.pyc复制到要上传对象的同一目录下，不然会找不到对象链接而上传失败，在使用时很麻烦，需要多次移动工具，</h4><h3 id="而这一版增加了临时复制功能（即将所上传的对象复制到工具目录下，完成上传后便立即删除），你只需将编译好的upload-pyc放置到任意目录下（不要上传对象的目录下），然后打开工具，填写要上传的文件夹，直接将要上传的对象拉入对话框即可。本次版本去除了询问继续功能，可以连续上传，上传完毕后点击关闭，即完成上传。"><a href="#而这一版增加了临时复制功能（即将所上传的对象复制到工具目录下，完成上传后便立即删除），你只需将编译好的upload-pyc放置到任意目录下（不要上传对象的目录下），然后打开工具，填写要上传的文件夹，直接将要上传的对象拉入对话框即可。本次版本去除了询问继续功能，可以连续上传，上传完毕后点击关闭，即完成上传。" class="headerlink" title="而这一版增加了临时复制功能（即将所上传的对象复制到工具目录下，完成上传后便立即删除），你只需将编译好的upload.pyc放置到任意目录下（不要上传对象的目录下），然后打开工具，填写要上传的文件夹，直接将要上传的对象拉入对话框即可。本次版本去除了询问继续功能，可以连续上传，上传完毕后点击关闭，即完成上传。"></a>而这一版增加了临时复制功能（即将所上传的对象复制到工具目录下，完成上传后便立即删除），你只需将编译好的upload.pyc放置到任意目录下（不要上传对象的目录下），然后打开工具，填写要上传的文件夹，直接将要上传的对象拉入对话框即可。本次版本去除了询问继续功能，可以连续上传，上传完毕后点击关闭，即完成上传。</h3><h2 id="COS-upload"><a href="#COS-upload" class="headerlink" title="COS-upload"></a>COS-upload</h2><h3 id="基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具"><a href="#基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具" class="headerlink" title="基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具"></a>基于腾讯COS云对象存储SDK，使用Python编写的文件上传工具</h3><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><h5 id="COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud-Object-Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。"><a href="#COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud-Object-Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。" class="headerlink" title="COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud Object Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。"></a>COS云对象存储，听起来是一个很玄的概念，官方的概念是对象存储服务（Cloud Object Service）是面向企业和个人开发者提供的高可用，高稳定，强安全的云端存储服务。您可以将任意数量和形式的非结构化数据放入COS，并在其中实现数据的管理和处理。</h5><h4 id="而我对COS的理解就是，我存入一个对象，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。"><a href="#而我对COS的理解就是，我存入一个对象，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。" class="headerlink" title="而我对COS的理解就是，我存入一个对象，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。"></a>而我对COS的理解就是，我存入一个对象，COS给我返回一个url地址，这个地址在全球只要是有网络的地方都可以访问的到，这就给我们解决了一些在线Markdown或者其他文档素材的问题，例如我本地的一份md文档，里面的图片是以链接的方式存在，而不是像word文档中直接把图片放到文档中，还有HTML页面等都是用链接的形式去展现，如果此时我把MD复制到其他地方，链接就会失效。</h4><h4 id="而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。"><a href="#而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。" class="headerlink" title="而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。"></a>而COS的出现，我只需要使用已经上传的素材的url地址即可，不论在哪里，这个地址是永远有效的。当然，COS的作用还有很多，我只是使用的最简单的。</h4><h3 id="基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法："><a href="#基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法：" class="headerlink" title="基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法："></a>基于以上需求，获取url地址的前提是我需要上传文件，官网提供了控制台，但每次都需要打开游览器一个一个的上传太过低效，于是我使用了官方提供的SDK功能，使用python写了这样一个简单的上传文件功能，下面是使用方法：</h3><ol>
<li>先将upload.py和compile.pyc下载，放到同一个文件夹中</li>
<li>将你在官网的APPID，密钥，Bucket分别填入upload.py中，华北地区对应tj。</li>
<li>打开compile.pyc文件，一定是pyc编译好的，直接双击运行，再将upload.py拖入，会把upload.py编译成为pyc格式。</li>
<li>然后把uploda.pyc放置到任意目录下（不要上传对象的目录下），然后打开工具，填写要上传的文件夹，直接将要上传的对象拉入对话框即可。</li>
</ol>
<p>》》》<a class="link"   href="https://github.com/rainweb521/COS-upload" >这是项目的github地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="这是我发布的NR-TCloud1-1版，后续会根据需求继续更新"><a href="#这是我发布的NR-TCloud1-1版，后续会根据需求继续更新" class="headerlink" title="这是我发布的NR-TCloud1.1版，后续会根据需求继续更新"></a>这是我发布的NR-TCloud1.1版，后续会根据需求继续更新</h3><ul>
<li>如图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/nr2.jpg"
                     
                ></li>
</ul>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>技术知识</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用爬虫多种姿势爬取学校OnlineJudge上的题目</title>
    <url>/2017/02/07/python-article34/</url>
    <content><![CDATA[<h2 id="爬虫每日篇—-使用爬虫多种姿势爬取学校OnlineJudge上的题目。学校的oj里有两千多道题，到访问的时候必须连校园网，在外面就看不到了，所以我想着把上面所有的题都弄下来，然后把所有题目集合到一起做一个-chm方便用的时候看。效果如下图。"><a href="#爬虫每日篇—-使用爬虫多种姿势爬取学校OnlineJudge上的题目。学校的oj里有两千多道题，到访问的时候必须连校园网，在外面就看不到了，所以我想着把上面所有的题都弄下来，然后把所有题目集合到一起做一个-chm方便用的时候看。效果如下图。" class="headerlink" title="爬虫每日篇—-使用爬虫多种姿势爬取学校OnlineJudge上的题目。学校的oj里有两千多道题，到访问的时候必须连校园网，在外面就看不到了，所以我想着把上面所有的题都弄下来，然后把所有题目集合到一起做一个.chm方便用的时候看。效果如下图。"></a>爬虫每日篇—-使用爬虫多种姿势爬取学校OnlineJudge上的题目。学校的oj里有两千多道题，到访问的时候必须连校园网，在外面就看不到了，所以我想着把上面所有的题都弄下来，然后把所有题目集合到一起做一个.chm方便用的时候看。效果如下图。</h2><h2 id="学校OJ网站的配置很简单，普通的http协议，使用get请求就可以。直接上代码，有不懂的可以联系我的邮箱。"><a href="#学校OJ网站的配置很简单，普通的http协议，使用get请求就可以。直接上代码，有不懂的可以联系我的邮箱。" class="headerlink" title="学校OJ网站的配置很简单，普通的http协议，使用get请求就可以。直接上代码，有不懂的可以联系我的邮箱。"></a>学校OJ网站的配置很简单，普通的http协议，使用get请求就可以。直接上代码，有不懂的可以联系我的邮箱。</h2><h2 id="爬取1000-1050题号之间所有的题目"><a href="#爬取1000-1050题号之间所有的题目" class="headerlink" title="爬取1000-1050题号之间所有的题目"></a>爬取1000-1050题号之间所有的题目</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import string</span><br><span class="line">url = &#x27;http://210.31.181.254/JudgeOnline/showproblem?problem_id=&#x27;</span><br><span class="line">for id in range(1000,1050):</span><br><span class="line">    result = urllib2.urlopen(url+str(id))</span><br><span class="line">    f = open(&#x27;test/&#x27;+str(id)+&#x27;.html&#x27;,&#x27;w&#x27;)</span><br><span class="line">    f.write(result.read())</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></div>

<h1 id="爬取对应账号做过的所有题目"><a href="#爬取对应账号做过的所有题目" class="headerlink" title="## 爬取对应账号做过的所有题目"></a>## 爬取对应账号做过的所有题目</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">import string</span><br><span class="line">import re</span><br><span class="line">url = &#x27;http://210.31.181.254/JudgeOnline/showproblem?problem_id=&#x27;</span><br><span class="line">login_url = &#x27;http://210.31.181.254/JudgeOnline/login?action=login&#x27;</span><br><span class="line">problem_list_url = &#x27;http://210.31.181.254/JudgeOnline/problemlist&#x27;</span><br><span class="line">user_url = &#x27;http://210.31.181.254/JudgeOnline/userstatus?user_id=&#x27;</span><br><span class="line">user_id = 0;</span><br><span class="line">data = urllib.urlencode(&#123;</span><br><span class="line">    &#x27;user_id1&#x27;:&#x27;2015xxxxxx&#x27;,</span><br><span class="line">    &#x27;password1&#x27;:&#x27;xxxxxx&#x27;,</span><br><span class="line">    &#x27;B1&#x27;:&#x27;login&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">user_agent = &#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span><br><span class="line">headers = &#123;&#x27;User-Agent&#x27;:user_agent&#125;</span><br><span class="line">request = urllib2.Request(login_url,data,headers)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line">print response.read()</span><br><span class="line">user_id = 2015110;</span><br><span class="line">result = urllib2.urlopen(user_url+str(user_id)).read()</span><br><span class="line">result = re.findall(&#x27;problem_id=?([\d][\d][\d][\d])&#x27;,result)</span><br><span class="line">for id in result:</span><br><span class="line">    problem = urllib2.urlopen(url+id)</span><br><span class="line">    f = open(&#x27;test/&#x27;+id+&#x27;.html&#x27;,&#x27;w&#x27;)</span><br><span class="line">    f.write(problem.read())</span><br><span class="line">    f.close()</span><br><span class="line"># &lt;a href.*problem_id=.*&gt;</span><br><span class="line"># f = open(&#x27;thefile.txt&#x27;,&#x27;w&#x27;)</span><br><span class="line"># f.write(result.)</span><br><span class="line"># f.close()</span><br><span class="line">print result</span><br></pre></td></tr></table></figure></div>

<h4 id="下面是效果图"><a href="#下面是效果图" class="headerlink" title="下面是效果图"></a>下面是效果图</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python15.png"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用爬虫爬取豆瓣2016电影榜单中所有电影信息</title>
    <url>/2017/02/09/python-article43/</url>
    <content><![CDATA[<p> </p>
<h2 id="爬虫每日篇—-今天使用爬虫爬取豆瓣2016电影榜上所有电影信息，本来以为豆瓣这种大社区的防御做的会很好，看到是HTTPS协议，我都准备写一大串头部去模拟用户了，没想到一个urlopen就直接获取了，可能是网站设计者故意没做的很封闭，让我有机可乘。这是网址-https-www-douban-com-doulist-3516235-start-0-amp-sort-seq-amp-sub-type-，大家可以先看看。"><a href="#爬虫每日篇—-今天使用爬虫爬取豆瓣2016电影榜上所有电影信息，本来以为豆瓣这种大社区的防御做的会很好，看到是HTTPS协议，我都准备写一大串头部去模拟用户了，没想到一个urlopen就直接获取了，可能是网站设计者故意没做的很封闭，让我有机可乘。这是网址-https-www-douban-com-doulist-3516235-start-0-amp-sort-seq-amp-sub-type-，大家可以先看看。" class="headerlink" title="爬虫每日篇—-今天使用爬虫爬取豆瓣2016电影榜上所有电影信息，本来以为豆瓣这种大社区的防御做的会很好，看到是HTTPS协议，我都准备写一大串头部去模拟用户了，没想到一个urlopen就直接获取了，可能是网站设计者故意没做的很封闭，让我有机可乘。这是网址(https://www.douban.com/doulist/3516235/?start=0&amp;sort=seq&amp;sub\_type=)，大家可以先看看。"></a>爬虫每日篇—-今天使用爬虫爬取豆瓣2016电影榜上所有电影信息，本来以为豆瓣这种大社区的防御做的会很好，看到是HTTPS协议，我都准备写一大串头部去模拟用户了，没想到一个urlopen就直接获取了，可能是网站设计者故意没做的很封闭，让我有机可乘。这是网址(<a class="link"   href="https://www.douban.com/doulist/3516235/?start=0&sort=seq&sub%5C_type=)%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%8F%AF%E4%BB%A5%E5%85%88%E7%9C%8B%E7%9C%8B%E3%80%82" >https://www.douban.com/doulist/3516235/?start=0&amp;sort=seq&amp;sub\_type=)，大家可以先看看。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python28.jpg"
                     
                ></p>
<h3 id="如图，这就是网页的基本情况，大家可以先去看看网页源代码，我现在要做的就是把每个电影的整个-lt-div-gt-提取出来-代码直接用urlopen弄了出来，我先保存到一个文件里，要慢慢的测试，直接用文件里的代码就可以了，省得每次都抓取页面。"><a href="#如图，这就是网页的基本情况，大家可以先去看看网页源代码，我现在要做的就是把每个电影的整个-lt-div-gt-提取出来-代码直接用urlopen弄了出来，我先保存到一个文件里，要慢慢的测试，直接用文件里的代码就可以了，省得每次都抓取页面。" class="headerlink" title="如图，这就是网页的基本情况，大家可以先去看看网页源代码，我现在要做的就是把每个电影的整个\&lt;div\&gt;提取出来,代码直接用urlopen弄了出来，我先保存到一个文件里，要慢慢的测试，直接用文件里的代码就可以了，省得每次都抓取页面。"></a>如图，这就是网页的基本情况，大家可以先去看看网页源代码，我现在要做的就是把每个电影的整个\&lt;div\&gt;提取出来,代码直接用urlopen弄了出来，我先保存到一个文件里，要慢慢的测试，直接用文件里的代码就可以了，省得每次都抓取页面。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;lang:php decode:true &quot;&gt;# -*- coding: utf-8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">def get_html(url):</span><br><span class="line">result = urllib2.urlopen(url)</span><br><span class="line">return result.read()</span><br><span class="line">def save_file(text, filename):</span><br><span class="line">f= open(filename,&#x27;w&#x27;)</span><br><span class="line">f.write(text)</span><br><span class="line">f.close()</span><br><span class="line">def read_file(filename):</span><br><span class="line">f = open(filename,&#x27;r&#x27;)</span><br><span class="line">text = f.read()</span><br><span class="line">f.close()</span><br><span class="line">return text</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">url = &#x27;https://www.douban.com/doulist/3516235/&#x27;</span><br><span class="line">html = get_html(url)</span><br><span class="line">save_file(html,&#x27;thefile.txt&#x27;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="下一步对抓取的代码开始提取，每个电影的介绍都包含在一对div中"><a href="#下一步对抓取的代码开始提取，每个电影的介绍都包含在一对div中" class="headerlink" title="下一步对抓取的代码开始提取，每个电影的介绍都包含在一对div中"></a>下一步对抓取的代码开始提取，每个电影的介绍都包含在一对div中</h3><div class="bd doulist-subject"> </div>

<h3 id="使用BeautifulSoup来提取"><a href="#使用BeautifulSoup来提取" class="headerlink" title="使用BeautifulSoup来提取"></a>使用BeautifulSoup来提取</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">html = read_file(&#x27;thefile.txt&#x27;)</span><br><span class="line">soup = BeautifulSoup(html)</span><br><span class="line">text = soup.find_all(&#x27;div&#x27;, class_=&#x27;bd doulist-subject&#x27;)</span><br><span class="line">save_file(str(text),&#x27;thefile.txt&#x27;)</span><br></pre></td></tr></table></figure></div>

<p>效果如下图 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python29.jpg"
                     
                ></p>
<h3 id="每个电影的信息都提取出来了，我想要的是电影的名称，评分，人员，上映日期，所以我只提取这些内容，大家可以按照自己的需求写。"><a href="#每个电影的信息都提取出来了，我想要的是电影的名称，评分，人员，上映日期，所以我只提取这些内容，大家可以按照自己的需求写。" class="headerlink" title="每个电影的信息都提取出来了，我想要的是电影的名称，评分，人员，上映日期，所以我只提取这些内容，大家可以按照自己的需求写。"></a>每个电影的信息都提取出来了，我想要的是电影的名称，评分，人员，上映日期，所以我只提取这些内容，大家可以按照自己的需求写。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_movie_one(movie):</span><br><span class="line">result = []</span><br><span class="line">soup_all = BeautifulSoup(str(movie))</span><br><span class="line">title = soup_all.find_all(&#x27;div&#x27;, class_=&#x27;title&#x27;)</span><br><span class="line">soup_title = BeautifulSoup(str(title[0]))</span><br><span class="line">for line in soup_title.stripped_strings: # 对获取到的&lt;a&gt;里的内容进行提取</span><br><span class="line">print line</span><br><span class="line">num = soup_all.find_all(&#x27;span&#x27;, class_=&#x27;rating_nums&#x27;)</span><br><span class="line">print num[0].contents[0]</span><br><span class="line">info = soup_all.find_all(&#x27;div&#x27;, class_=&#x27;abstract&#x27;)</span><br><span class="line">soup_info = BeautifulSoup(str(info[0]))</span><br><span class="line">for line in soup_info.stripped_strings: # 对获取到的&lt;/a&gt;&lt;a&gt;里的内容进行提取</span><br><span class="line">print line&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">## 结果：</span><br><span class="line">一切都好</span><br><span class="line">6.4</span><br><span class="line">导演: 张猛</span><br><span class="line">主演: 张国立 / 姚晨 / 窦骁</span><br><span class="line">类型: 剧情 / 家庭</span><br><span class="line">制片国家/地区: 中国大陆</span><br><span class="line">年份: 2016</span><br></pre></td></tr></table></figure></div>

<h3 id="第一个已经成功了，现在就开始批量的操作，一共有425个电影，我每提取一个就存到文件里，这是第一页25个电影提取出来的效果。"><a href="#第一个已经成功了，现在就开始批量的操作，一共有425个电影，我每提取一个就存到文件里，这是第一页25个电影提取出来的效果。" class="headerlink" title="第一个已经成功了，现在就开始批量的操作，一共有425个电影，我每提取一个就存到文件里，这是第一页25个电影提取出来的效果。"></a>第一个已经成功了，现在就开始批量的操作，一共有425个电影，我每提取一个就存到文件里，这是第一页25个电影提取出来的效果。</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python30.jpg"
                     
                > 下面是全部的代码，大家可以参考一下。</p>
<p>#!&#x2F;usr&#x2F;bin&#x2F;env python</p>
<h1 id="coding-x3D-utf-8"><a href="#coding-x3D-utf-8" class="headerlink" title="-*- coding&#x3D;utf-8 -*-"></a>-*- coding&#x3D;utf-8 -*-</h1><p>import sys<br>reload(sys)<br>sys.setdefaultencoding( “utf-8” )<br>import urllib2<br>import re<br>import time<br>from bs4 import BeautifulSoup<br>def get_html(url):  #通过url获取网页内容<br>    result &#x3D; urllib2.urlopen(url)<br>    return result.read()<br>    # save_file(result.read(), ‘thefile.txt’)<br>def get_movie_all(html):     #通过soup提取到每个电影的全部信息，以list返回<br>    soup &#x3D; BeautifulSoup(html)<br>    movie_list &#x3D; soup.find_all(‘div’, class_&#x3D;’bd doulist-subject’)<br>    return movie_list<br>def get_movie_one(movie):<br>    result &#x3D; []  # 用于存储提取出来的电影信息<br>    soup_all &#x3D; BeautifulSoup(str(movie))<br>    title &#x3D; soup_all.find_all(‘div’, class_&#x3D;’title’)<br>    soup_title &#x3D; BeautifulSoup(str(title[0]))<br>    for line in soup_title.stripped_strings:  # 对获取到的<a>里的内容进行提取<br>        result.append(line)</p>
<pre><code># num = soup\_all.find\_all(&#39;span&#39;, class\_=&#39;rating\_nums&#39;)
num = soup\_all.find\_all(&#39;span&#39;)
result.append(num\[1\].contents\[0\])

soup\_num = BeautifulSoup(str(num\[0\]))
for line in soup\_num.stripped\_strings:  # 对获取到的&lt;span&gt;里的内容进行提取
    result = result + line

info = soup\_all.find\_all(&#39;div&#39;, class\_=&#39;abstract&#39;)
soup\_info = BeautifulSoup(str(info\[0\]))
result\_str = &quot;&quot;
for line in soup\_info.stripped\_strings:  # 对获取到的&lt;div&gt;里的内容进行提取
    result\_str = result\_str + line
result.append(result\_str)
return result  #返回获取到的结果
</code></pre>
<p>def save_file(text, filename):  #保存网页到文件<br>    f&#x3D; open(filename,’ab’)<br>    f.write(text)<br>    f.close()<br>def read_file(filename):  #读取文件<br>    f &#x3D; open(filename,’r’)<br>    text &#x3D; f.read()<br>    f.close()<br>    return text</p>
<p>if __name__&#x3D;&#x3D;’__main__‘:<br>    for i in range(0,426,25):<br>        url &#x3D; ‘<a class="link"   href="https://www.douban.com/doulist/3516235/?start=%27+str(i)+%27&sort=seq&sub%5C_type=" >https://www.douban.com/doulist/3516235/?start=&#39;+str(i)+&#39;&amp;sort=seq&amp;sub\_type= <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘<br>        html &#x3D; get_html(url)<br>        movie_list &#x3D; get_movie_all(html)<br>        for movie in movie_list:  #将每一页中的每个电影信息放入函数中提取<br>            result &#x3D; get_movie_one(movie)<br>            text &#x3D; ‘’+’电影名：’+str(result[0])+’  评分：’+str(result[1])+’  ‘+str(result[2])+’\n’+’\t’<br>            save_file(text,’thee.txt’)<br>        time.sleep(5)  #每隔5秒抓取一页的信息</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python连接mysql数据库并进行增删改查操作</title>
    <url>/2017/02/02/python-article48/</url>
    <content><![CDATA[<h2 id="今天在使用Python连数据库的时候忘了怎么写了，到博客里看了一下只有PHP和Java的，只好去笔记里找了以前的记录，写完代码就把关于Python连数据库的文章补了，顺便把一些常用的操作写出来，方便用的时候看一看。"><a href="#今天在使用Python连数据库的时候忘了怎么写了，到博客里看了一下只有PHP和Java的，只好去笔记里找了以前的记录，写完代码就把关于Python连数据库的文章补了，顺便把一些常用的操作写出来，方便用的时候看一看。" class="headerlink" title="今天在使用Python连数据库的时候忘了怎么写了，到博客里看了一下只有PHP和Java的，只好去笔记里找了以前的记录，写完代码就把关于Python连数据库的文章补了，顺便把一些常用的操作写出来，方便用的时候看一看。"></a>今天在使用Python连数据库的时候忘了怎么写了，到博客里看了一下只有PHP和Java的，只好去笔记里找了以前的记录，写完代码就把关于Python连数据库的文章补了，顺便把一些常用的操作写出来，方便用的时候看一看。</h2><h2 id="记得我刚使用Python连数据库的时候研究很长时间，我电脑里的mysql是phpstudy集成的，我又在虚拟机里测试，最后才发现下面是又报错代号的，主机名出现错误是2003，而我一直忽略了这个最下面的错误，查了错误代号发现是localhost的错，将主机名由原来的localhost更改为127-0-0-1，这个是主机测试地址，在使用Django的时候就出现过这个测试地址。在PHP和Java上用习惯了，我在PHP上试了一下127-0-0-1也是可以的，都是主机测试地址，可能Python比较奇怪吧，解决了这个问题再连接就很简单了。"><a href="#记得我刚使用Python连数据库的时候研究很长时间，我电脑里的mysql是phpstudy集成的，我又在虚拟机里测试，最后才发现下面是又报错代号的，主机名出现错误是2003，而我一直忽略了这个最下面的错误，查了错误代号发现是localhost的错，将主机名由原来的localhost更改为127-0-0-1，这个是主机测试地址，在使用Django的时候就出现过这个测试地址。在PHP和Java上用习惯了，我在PHP上试了一下127-0-0-1也是可以的，都是主机测试地址，可能Python比较奇怪吧，解决了这个问题再连接就很简单了。" class="headerlink" title="记得我刚使用Python连数据库的时候研究很长时间，我电脑里的mysql是phpstudy集成的，我又在虚拟机里测试，最后才发现下面是又报错代号的，主机名出现错误是2003，而我一直忽略了这个最下面的错误，查了错误代号发现是localhost的错，将主机名由原来的localhost更改为127.0.0.1，这个是主机测试地址，在使用Django的时候就出现过这个测试地址。在PHP和Java上用习惯了，我在PHP上试了一下127.0.0.1也是可以的，都是主机测试地址，可能Python比较奇怪吧，解决了这个问题再连接就很简单了。"></a>记得我刚使用Python连数据库的时候研究很长时间，我电脑里的mysql是phpstudy集成的，我又在虚拟机里测试，最后才发现下面是又报错代号的，主机名出现错误是2003，而我一直忽略了这个最下面的错误，查了错误代号发现是localhost的错，将主机名由原来的localhost更改为127.0.0.1，这个是主机测试地址，在使用Django的时候就出现过这个测试地址。在PHP和Java上用习惯了，我在PHP上试了一下127.0.0.1也是可以的，都是主机测试地址，可能Python比较奇怪吧，解决了这个问题再连接就很简单了。</h2><h2 id="注意connect里的charset-x3D-utf8，这个是要和你数据库的字符集匹配的，如果不写这个，查出来的中文数据就是乱码，而不是编码字符，下面还有常用的一些操作，"><a href="#注意connect里的charset-x3D-utf8，这个是要和你数据库的字符集匹配的，如果不写这个，查出来的中文数据就是乱码，而不是编码字符，下面还有常用的一些操作，" class="headerlink" title="注意connect里的charset&#x3D;utf8，这个是要和你数据库的字符集匹配的，如果不写这个，查出来的中文数据就是乱码，而不是编码字符，下面还有常用的一些操作，"></a>注意connect里的charset&#x3D;utf8，这个是要和你数据库的字符集匹配的，如果不写这个，查出来的中文数据就是乱码，而不是编码字符，下面还有常用的一些操作，</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.连接的建立和释放</span><br><span class="line">-- coding=utf-8 --</span><br><span class="line">import MySQLdb</span><br><span class="line">conn= MySQLdb.connect(</span><br><span class="line">        host=&#x27;127.0.0.1&#x27;,</span><br><span class="line">        port = 3306,</span><br><span class="line">        user=&#x27;root&#x27;,</span><br><span class="line">        passwd=&#x27;root&#x27;,</span><br><span class="line">        db =&#x27;manage&#x27;,</span><br><span class="line">        charset=&#x27;utf8&#x27;,</span><br><span class="line">        )</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">#创建数据表</span><br><span class="line">#cur.execute(&quot;create table student(id int ,name varchar(20),class varchar(30),age varchar(10))&quot;)</span><br><span class="line">#插入一条数据</span><br><span class="line">#cur.execute(&quot;insert into student values(&#x27;2&#x27;,&#x27;Tom&#x27;,&#x27;3 year 2 class&#x27;,&#x27;9&#x27;)&quot;)</span><br><span class="line">#修改查询条件的数据</span><br><span class="line">#cur.execute(&quot;update student set class=&#x27;3 year 1 class&#x27; where name = &#x27;Tom&#x27;&quot;)</span><br><span class="line">#删除查询条件的数据</span><br><span class="line">#cur.execute(&quot;delete from student where age=&#x27;9&#x27;&quot;)</span><br><span class="line">cur.close()</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br><span class="line">查询操作</span><br><span class="line">cursor用来接收返回值的方法:</span><br><span class="line">fetchall(self) 接收全部的返回结果行.</span><br><span class="line">fetchmany(self, size=None) 接收size条返回结果行.如果size的值大于返回的结果行的数量,则会返回cursor.arraysize条数据.</span><br><span class="line">fetchone(self) 返回一条结果行.</span><br><span class="line">rowcount 这是一个只读属性,并返回执行execute() 方法后影响的行数。</span><br><span class="line">scroll(self, value, mode=&#x27;relative&#x27;) 移动指针到某一行; 如果mode=&#x27;relative&#x27;,则表示从当前所在行移动value条,如果 mode=&#x27;absolute&#x27;,则表示从结果集的第一行移动value条.</span><br><span class="line">#获得表中有多少条数据</span><br><span class="line">aa=cur.execute(&quot;select * from student&quot;)</span><br><span class="line">print aa</span><br><span class="line">#打印表中的多少数据</span><br><span class="line">info = cur.fetchmany(aa)</span><br><span class="line">for ii in info:</span><br><span class="line">  print ii</span><br><span class="line">插入操作</span><br><span class="line">cursor用来执行命令的方法:</span><br><span class="line">callproc(self, procname, args) 用来执行存储过程,接收的参数为存储过程名和参数列表,返回值为受影响的行数</span><br><span class="line">execute(self, query, args) 执行单条sql语句,接收的参数为sql语句本身和使用的参数列表,返回值为受影响的行数</span><br><span class="line">executemany(self, query, args) 执行单挑sql语句,但是重复执行参数列表里的参数,返回值为受影响的行数</span><br><span class="line">nextset(self) 移动到下一个结果集</span><br><span class="line">#插入一条数据</span><br><span class="line">sqli=&quot;insert into student values(%s,%s,%s,%s)&quot;</span><br><span class="line">cur.execute(sqli,(&#x27;3&#x27;,&#x27;Huhu&#x27;,&#x27;2 year 1 class&#x27;,&#x27;7&#x27;))</span><br><span class="line">#一次插入多条记录</span><br><span class="line">sqli=&quot;insert into student values(%s,%s,%s,%s)&quot;</span><br><span class="line">cur.executemany(sqli,[</span><br><span class="line">(&#x27;3&#x27;,&#x27;Tom&#x27;,&#x27;1 year 1 class&#x27;,&#x27;6&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;Jack&#x27;,&#x27;2 year 1 class&#x27;,&#x27;7&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;Yaheng&#x27;,&#x27;2 year 2 class&#x27;,&#x27;7&#x27;),</span><br><span class="line">])</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>转:Python编码的前世今生</title>
    <url>/2017/02/11/python-article46/</url>
    <content><![CDATA[<p>本文导航 - -ASCII - -EASCII （ISO&#x2F;8859-1） - -GBK - -Unicode - -UTF-8 - -Python 字符编码 - -str 与 unicode 的转换 - -str(s) 与 unicode(s) - -乱码 - -其他技巧 一旦走上了编程之路，如果你不把编码问题搞清楚，那么它将像幽灵一般纠缠你整个职业生涯，各种灵异事件会接踵而来，挥之不去。只有充分发挥程序员死磕到底的精神你才有可能彻底摆脱编码问题带来的烦恼。 我第一次遇到编码问题是写 JavaWeb 相关的项目，一串字符从浏览器游离到应用程序代码中，翻江倒海沉浸到数据库中，随时随地都有可能踩到编码的地雷。 第二次遇到编码问题就是学 Python 的时候，在爬取网页数据时，编码问题又出现了，当时我的心情是崩溃的，用时下最ing的一句话就是：“我当时就懵逼了”。 为了搞清字符编码，我们得从计算机的起源开始，计算机中的所有数据，不论是文字、图片、视频、还是音频文件，本质上最终都是按照类似 01010101 的数字形式存储的。我们是幸运的，我们也是不幸的，幸运的是时代赋予了我们都有机会接触计算机，不幸的是，计算机不是我们国人发明的，所以计算机的标准得按美帝国人的习惯来设计，那么最开始计算机是通过什么样的方式来表现字符的呢？这要从计算机编码的发展史说起。 <strong>ASCII</strong> 每个做 JavaWeb 开发的新手都会遇到乱码问题，每个做 Python 爬虫的新手都会遇到编码问题，为什么编码问题那么蛋疼呢？ 这个问题要从1992年 Guido van Rossum 创造 Python 这门语言说起，那时的 Guido 绝对没想到的是 Python 这门语言在今天会如此受大家欢迎，也不会想到计算机发展速度会如此惊人。Guido 在当初设计这门语言时是不需要关心编码的，因为在英语世界里，字符的个数非常有限，26个字母（大小写）、10个数字、标点符号、控制符，也就是键盘上所有的键所对应的字符加起来也不过是一百多个字符而已。这在计算机中用一个字节的存储空间来表示一个字符是绰绰有余的，因为一个字节相当于8个比特位，8个比特位可以表示256个符号。于是聪明的美国人就制定了一套字符编码的标准叫 ASCII(American Standard Code for Information Interchange)，每个字符都对应唯一的一个数字，比如字符<code>A</code>对应的二进制数值是<code>01000001</code>，对应的十进制就是 65。最开始 ASCII 只定义了 128 个字符编码，包括 96 个文字和 32 个控制符号，一共 128 个字符，只需要一个字节的 7 位就能表示所有的字符，因此 ASCII 只使用了一个字节的后7位，最高位都为 0。每个字符与ASCII码的对应关系可查看网站ascii-code[2]。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python32.jpg"
                     
                > <strong>EASCII （ISO&#x2F;8859-1）</strong> 然而计算机慢慢地普及到其他西欧地区时，他们发现还有很多西欧所特有的字符是 ASCII 编码表中没有的，于是后来出现了可扩展的 ASCII 叫 EASCII ，顾名思义，它是在 ASCII 的基础上扩展而来，把原来的 7 位扩充到 8 位，它完全兼容 ASCII，扩展出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号。然而 EASCII 时代是一个混乱的时代，大家没有统一标准，他们各自把最高位按照自己的标准实现了自己的一套字符编码标准，比较著名的就有 <strong>CP437</strong>， CP437 是 Windows 系统中使用的字符编码 <em>cp437</em> 另外一种被广泛使用的 EASCII 还有 **ISO&#x2F;8859-1(Latin-1)**，它是国际标准化组织（ISO）及国际电工委员会（IEC）联合制定的一系列8位元字符集的标准，ISO&#x2F;8859-1 只继承了 CP437 字符编码的 128-159 之间的字符，所以它是从 160 开始定义的，不幸的是这些众多的 ASCII 扩充字集之间互不兼容。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python33.jpg"
                     
                > <em>iso8859-1</em> <strong>GBK</strong> 随着时代的进步，计算机开始普及到千家万户，比尔盖茨让每个人桌面都有一台电脑的梦想得以实现。但是计算机进入中国不得不面临的一个问题就是字符编码，虽然咱们国家的汉字是人类使用频率最多的文字，汉字博大精深，常见的汉字就有成千上万，这已经大大超出了 ASCII 编码所能表示的字符范围了，即使是 EASCII 也显得杯水车薪，于是聪明的中国人自己弄了一套编码叫 <strong>GB2312</strong>，又称GB0，1981由中国国家标准总局发布。GB2312 编码共收录了6763个汉字，同时它还兼容 ASCII。GB2312 的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆 99.75% 的使用频率。不过 GB2312 还是不能 100% 满足中国汉字的需求，对一些罕见的字和繁体字 GB2312 没法处理，后来就在 GB2312 的基础上创建了一种叫 GBK 的编码。GBK 不仅收录了 27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。同样 GBK 也是兼容 ASCII 编码的，对于英文字符用 1 个字节来表示，汉字用两个字节来标识。 <strong>Unicode</strong> 对于如何处理中国人自己的文字我们可以另立山头，按照我们自己的需求制定一套编码规范，但是计算机不止是美国人和中国人用啊，还有欧洲、亚洲其他国家的文字诸如日文、韩文全世界各地的文字加起来估计也有好几十万，这已经大大超出了 ASCII 码甚至 GBK 所能表示的范围了，况且人家为什么用采用你 GBK 标准呢？如此庞大的字符库究竟用什么方式来表示好呢？于是统一联盟国际组织提出了 Unicode 编码，Unicode 的学名是“Universal Multiple-Octet Coded Character Set”，简称为UCS。 Unicode 有两种格式：UCS-2 和 UCS-4。UCS-2 就是用两个字节编码，一共 16 个比特位，这样理论上最多可以表示 65536个字符，不过要表示全世界所有的字符显然 65536 个数字还远远不够，因为光汉字就有近 10 万个，因此 Unicode 4.0 规范定义了一组附加的字符编码，UCS-4 就是用 4 个字节（实际上只用了 31 位，最高位必须为 0）。 Unicode 理论上完全可以涵盖一切语言所用的符号。世界上任何一个字符都可以用一个 Unicode 编码来表示，一旦字符的 Unicode 编码确定下来后，就不会再改变了。但是 Unicode 有一定的局限性，一个 Unicode 字符在网络上传输或者最终存储起来的时候，并不见得每个字符都需要两个字节，比如一字符“<code>A</code>“，用一个字节就可以表示的字符，偏偏还要用两个字节，显然太浪费空间了。第二问题是，一个 Unicode 字符保存到计算机里面时就是一串 01 数字，那么计算机怎么知道一个 2 字节的 Unicode 字符是表示一个 2 字节的字符呢，还是表示两个 1 字节的字符呢，如果你不事先告诉计算机，那么计算机也会懵逼了。Unicode 只是规定如何编码，并没有规定如何传输、保存这个编码。例如“<code>汉</code>”字的 Unicode 编码是<code>6C49</code>，我可以用 4 个 ASCII 数字来传输、保存这个编码；也可以用 UTF-8 编码的 3 个连续的字节<code>E6 B1 89</code>来表示它。关键在于通信双方都要认可。因此 Unicode 编码有不同的实现方式，比如：UTF-8、UTF-16 等等。这里的 Unicode 就像英语一样，做为国与国之间交流世界通用的标准，每个国家有自己的语言，他们把标准的英文文档翻译成自己国家的文字，这是实现方式，就像 UTF-8。 <strong>UTF-8</strong> UTF-8（Unicode Transformation Format）作为 Unicode 的一种实现方式，广泛应用于互联网，它是一种变长的字符编码，可以根据具体情况用 1-4 个字节来表示一个字符。比如英文字符这些原本就可以用 ASCII 码表示的字符用 UTF-8 表示时就只需要一个字节的空间，和 ASCII 是一样的。对于多字节（n 个字节）的字符，第一个字节的前 n 为都设为 1，第 n+1 位设为 0，后面字节的前两位都设为 10。剩下的二进制位全部用该字符的 UNICODE 码填充。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python34.jpg"
                     
                > 以汉字“<code>好</code>”为例，“<code>好</code>”对应的 Unicode 是<code>597D</code>，对应的区间是<code>0000 0800</code>--<code>0000 FFFF</code>，因此它用 UTF-8 表示时需要用 3 个字节来存储，<code>597D</code>用二进制表示是：<code>0101100101111101</code>，填充到<code>1110xxxx 10xxxxxx 10xxxxxx</code>得到<code>11100101 10100101 10111101</code>，转换成 16 进制：<code>E5A5BD</code>，因此“<code>好</code>”的 Unicode “<code>597D</code>”对应的 UTF-8 编码是“<code>E5A5BD</code>”。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">中文 好unicode 0101 100101 111101编码规则 1110xxxx 10xxxxxx 10xxxxxx--------------------------utf-8 11100101 10100101 10111101--------------------------16进制utf-8 e 5 a 5 b d</span><br></pre></td></tr></table></figure></div>

<p><strong>Python 字符编码</strong> 现在总算把理论说完了。再来说说 Python 中的编码问题。Python 的诞生时间比 Unicode 要早很多，Python 的默认编码是ASCII。 所以在 Python 源代码文件中如果不显式地指定编码的话，将出现语法错误</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#test.pyprint &quot;你好&quot;</span><br></pre></td></tr></table></figure></div>

<p>上面是 test.py 脚本，运行 <code>python test.py</code>就会包如下错误：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">File “test.py”, line 1 yntaxError: Non-ASCII character ‘\xe4′ in file test.py on line 1, but no encoding declared; see http://www.python.org/ ps/pep-0263.html for details</span><br></pre></td></tr></table></figure></div>

<p>为了在源代码中支持非 ASCII 字符，必须在源文件的第一行或者第二行显示地指定编码格式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=utf-8</span><br></pre></td></tr></table></figure></div>

<p>或者是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python# -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure></div>

<p>在 Python 中和字符串相关的数据类型，分别是 <strong>str</strong>、<strong>unicode</strong> 两种，他们都是<strong>basestring</strong>的子类，可见 str 与 unicode 是两种不同类型的字符串对象。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">basestring/ \ / \str unicode</span><br></pre></td></tr></table></figure></div>

<p>对于同一个汉字“<code>好</code>”，用 str 表示时，它对应的就是 UTF-8 编码<code>&#39;\xe5\xa5\xbd&#39;</code>，而用 Unicode 表示时，它对应的符号就是<code>u&#39;\u597d&#39;</code>，与<code>u&quot;好&quot;</code>是等同的。需要补充一点的是，str 类型的字符其具体的编码格式是 UTF-8 还是 GBK，还是其它格式，根据操作系统相关。比如在 Windows 系统中，cmd 命令行中显示的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># windows终端&gt;&gt;&gt; a = &#x27;好&#x27;&gt;&gt;&gt; type(a)&lt;type &#x27;str&#x27;&gt;&gt;&gt;&gt; a&#x27;\xba\xc3&#x27;</span><br></pre></td></tr></table></figure></div>

<p>而在 Linux 系统的命令行中显示的是：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># linux终端&gt;&gt;&gt; a=&#x27;好&#x27;&gt;&gt;&gt; type(a)&lt;type &#x27;str&#x27;&gt;&gt;&gt;&gt; a&#x27;\xe5\xa5\xbd&#x27;&gt;&gt;&gt; b=u&#x27;好&#x27;&gt;&gt;&gt; type(b)&lt;type &#x27;unicode&#x27;&gt;&gt;&gt;&gt; bu&#x27;\u597d&#x27;</span><br></pre></td></tr></table></figure></div>

<p>不论是 Python3x、Java 还是其他编程语言，Unicode 编码都成为了语言的默认编码格式，而数据最后保存到介质中的时候，不同的介质可有用不同的方式，有些人喜欢用 UTF-8，有些人喜欢用 GBK，这都无所谓，只要平台统一的编码规范，具体怎么实现并不关心。 <em>encode</em> <strong>str 与 unicode 的转换</strong> 那么在 Python 中 str 和 unicode 之间是如何转换的呢？这两种类型的字符串类型之间的转换就是靠这两个方法：<code>decode</code>和<code>encode</code>。 <em>py-encode</em></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#从str类型转换到unicodes.decode(encoding) =====&gt; &lt;type &#x27;str&#x27;&gt; to &lt;type &#x27;unicode&#x27;&gt;#从unicode转换到stru.encode(encoding) =====&gt; &lt;type &#x27;unicode&#x27;&gt; to &lt;type &#x27;str&#x27;&gt;&gt;&gt;&gt; c = b.encode(&#x27;utf-8&#x27;)&gt;&gt;&gt; type(c)&lt;type &#x27;str&#x27;&gt;&gt;&gt;&gt; c&#x27;\xe5\xa5\xbd&#x27;&gt;&gt;&gt; d = c.decode(&#x27;utf-8&#x27;)&gt;&gt;&gt; type(d)&lt;type &#x27;unicode&#x27;&gt;&gt;&gt;&gt; du&#x27;\u597d&#x27;</span><br></pre></td></tr></table></figure></div>

<p>这个<code>&#39;\xe5\xa5\xbd&#39;</code>就是 Unicode<code>u&#39;好&#39;</code>通过函数<code>encode</code>编码得到的 UTF-8 编码的 str 类型的字符串。反之亦然，str 类型的 c 通过函数<code>decode</code>解码成 Unicode 字符串 d。 <strong>str(s) 与 unicode(s)</strong> <code>str(s)</code>和<code>unicode(s)</code>是两个工厂方法，分别返回 str 字符串对象和 Unicode 字符串对象，<code>str(s)</code>是<code>s.encode(‘ascii’)</code>的简写。实验：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s3 = u&quot;你好&quot;&gt;&gt;&gt; s3u&#x27;\u4f60\u597d&#x27;&gt;&gt;&gt; str(s3)Traceback (most recent call last):File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;UnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in position 0-1: ordinal not in range(128)</span><br></pre></td></tr></table></figure></div>

<p>上面 <code>s3</code>是 Unicode 类型的字符串，<code>str(s3)</code>相当于是执行<code>s3.encode(‘ascii’)</code>，因为“<code>你好</code>”两个汉字不能用 ASCII 码来表示，所以就报错了，指定正确的编码：<code>s3.encode(&#39;gbk&#39;)</code>或者<code>s3.encode(&#39;utf-8&#39;)</code>就不会出现这个问题了。类似的 Unicode 有同样的错误：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s4 = &quot;你好&quot;&gt;&gt;&gt; unicode(s4)Traceback (most recent call last):File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;UnicodeDecodeError: &#x27;ascii&#x27; codec can&#x27;t decode byte 0xc4 in position 0: ordinal not in range(128)&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>unicode(s4)</code>等效于<code>s4.decode(&#39;ascii&#39;)</code>，因此要正确的转换就要正确指定其编码<code>s4.decode(&#39;gbk&#39;)</code>或者<code>s4.decode(&#39;utf-8&#39;)</code>。 <strong>乱码</strong> 所有出现乱码的原因都可以归结为字符经过不同编码解码在编码的过程中使用的编码格式不一致，比如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding: utf-8&gt;&gt;&gt; a=&#x27;好&#x27;&gt;&gt;&gt; a&#x27;\xe5\xa5\xbd&#x27;&gt;&gt;&gt; b=a.decode(&quot;utf-8&quot;)&gt;&gt;&gt; bu&#x27;\u597d&#x27;&gt;&gt;&gt; c=b.encode(&quot;gbk&quot;)&gt;&gt;&gt; c&#x27;\xba\xc3&#x27;&gt;&gt;&gt; print c</span><br></pre></td></tr></table></figure></div>

<p>UTF-8 编码的字符‘<code>好</code>’占用 3 个字节，解码成 Unicode 后，如果再用 GBK 来解码后，只有 2 个字节的长度了，最后出现了乱码的问题，因此防止乱码的最好方式就是始终坚持使用同一种编码格式对字符进行编码和解码操作。 <em>decode-encode</em> <strong>其他技巧</strong> 对于如 Unicode 形式的字符串（str 类型)：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;id\u003d215903184\u0026index\u003d0\u0026st\u003d52\u0026sid&#x27;</span><br></pre></td></tr></table></figure></div>

<p>转换成真正的 Unicode 需要使用：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.decode(&#x27;unicode-escape&#x27;)</span><br></pre></td></tr></table></figure></div>

<p>测试：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &#x27;id\u003d215903184\u0026index\u003d0\u0026st\u003d52\u0026sid\u003d95000\u0026i&#x27;&gt;&gt;&gt; print(type(s))&lt;type &#x27;str&#x27;&gt;&gt;&gt;&gt; s = s.decode(&#x27;unicode-escape&#x27;)&gt;&gt;&gt; su&#x27;id=215903184&amp;index=0&amp;st=52&amp;sid=95000&amp;i&#x27;&gt;&gt;&gt; print(type(s))&lt;type &#x27;unicode&#x27;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></div>

<p>以上代码和概念都是基于 Python2.x。 以上代码和概念都是基于 Python2.x。 参考：</p>
<blockquote>
<p>转载自： <a class="link"   href="http://foofish.net/blog/111/python-character-encode" >http://foofish.net/blog/111/python-character-encode <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>作者： _zhijun</p>
</blockquote>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>关于《Python写网络爬虫》第一章总结</title>
    <url>/2017/02/14/python-article57/</url>
    <content><![CDATA[<h1 id="关于《Python写网络爬虫》第一章总结"><a href="#关于《Python写网络爬虫》第一章总结" class="headerlink" title="关于《Python写网络爬虫》第一章总结"></a>关于《Python写网络爬虫》第一章总结</h1><h2 id="1-关于爬虫错误处理"><a href="#1-关于爬虫错误处理" class="headerlink" title="1. 关于爬虫错误处理"></a>1. 关于爬虫错误处理</h2><h3 id="比如在爬虫里-下载网页时，-我们可能会遇到一些无法控制的错误，-比如请求的页面可能不存-在。-此时，urlli-b2-会抛出异常，-然后退出脚本。下面再给出一个更健壮的版-本，-可以捕获这些异常。"><a href="#比如在爬虫里-下载网页时，-我们可能会遇到一些无法控制的错误，-比如请求的页面可能不存-在。-此时，urlli-b2-会抛出异常，-然后退出脚本。下面再给出一个更健壮的版-本，-可以捕获这些异常。" class="headerlink" title="比如在爬虫里 下载网页时， 我们可能会遇到一些无法控制的错误， 比如请求的页面可能不存 在。 此时，urlli b2 会抛出异常， 然后退出脚本。下面再给出一个更健壮的版 本， 可以捕获这些异常。"></a>比如在爬虫里 下载网页时， 我们可能会遇到一些无法控制的错误， 比如请求的页面可能不存 在。 此时，urlli b2 会抛出异常， 然后退出脚本。下面再给出一个更健壮的版 本， 可以捕获这些异常。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">def download(url):</span><br><span class="line">    try:</span><br><span class="line">        print urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:  #也可以是HTTPError等，看实际报错修改</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line">        print e.code   #可以打印出来错误代号如404。</span><br><span class="line">        print e.reason  #可以捕获异常</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">  url = &#x27;http://www.rainweb.site/footer.php&#x27;</span><br><span class="line">  download(url)</span><br></pre></td></tr></table></figure></div>

<h2 id="2-重试下载"><a href="#2-重试下载" class="headerlink" title="2. 重试下载"></a>2. 重试下载</h2><h3 id="下载时遇到的错误经常-是临时性的，-比如服务器-过载时返回的-503Service-Unavailable错误。对于此类错误-我们可以尝试重新下载，不过，-我们不需要对所有错误都尝试重新下载。-如果服务器返回的是404-Not-Found-这种错误，则说明该网页目前并不存-在，再次尝试-同样的请求一般-也不会出现不同的结果。4xx-错误发生在请求存在问题时，而5xx-错误则发生在服务端存在问题时。-所以，-我们只需要确保download函数在-发生Sxx-错误时重试下载-即可。"><a href="#下载时遇到的错误经常-是临时性的，-比如服务器-过载时返回的-503Service-Unavailable错误。对于此类错误-我们可以尝试重新下载，不过，-我们不需要对所有错误都尝试重新下载。-如果服务器返回的是404-Not-Found-这种错误，则说明该网页目前并不存-在，再次尝试-同样的请求一般-也不会出现不同的结果。4xx-错误发生在请求存在问题时，而5xx-错误则发生在服务端存在问题时。-所以，-我们只需要确保download函数在-发生Sxx-错误时重试下载-即可。" class="headerlink" title="下载时遇到的错误经常 是临时性的， 比如服务器 过载时返回的 503Service Unavailable错误。对于此类错误 我们可以尝试重新下载，不过， 我们不需要对所有错误都尝试重新下载。 如果服务器返回的是404 Not Found 这种错误，则说明该网页目前并不存 在，再次尝试 同样的请求一般 也不会出现不同的结果。4xx 错误发生在请求存在问题时，而5xx 错误则发生在服务端存在问题时。 所以， 我们只需要确保download函数在 发生Sxx 错误时重试下载 即可。"></a>下载时遇到的错误经常 是临时性的， 比如服务器 过载时返回的 503Service Unavailable错误。对于此类错误 我们可以尝试重新下载，不过， 我们不需要对所有错误都尝试重新下载。 如果服务器返回的是404 Not Found 这种错误，则说明该网页目前并不存 在，再次尝试 同样的请求一般 也不会出现不同的结果。4xx 错误发生在请求存在问题时，而5xx 错误则发生在服务端存在问题时。 所以， 我们只需要确保download函数在 发生Sxx 错误时重试下载 即可。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">def download(url, num=2):</span><br><span class="line">    try:</span><br><span class="line">        print urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:</span><br><span class="line">        print &quot;error&quot;, e.reason  #可以捕获异常</span><br><span class="line">        if num&gt;0:</span><br><span class="line">            if hasattr(e,&#x27;code&#x27;) and 500&lt;=e.code&lt;600:</span><br><span class="line">                download(url,num-1)</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">  url = &#x27;http://www.rainweb.site/footer.php&#x27;</span><br><span class="line">  download(url)</span><br></pre></td></tr></table></figure></div>

<h3 id="当-download函数遇到Sxx-错误码时，-将会递归调用-函数自身进行重试。-此外，-该函数还增加了一个参数，-用于设定重试下载的次数，-其默认值为两次"><a href="#当-download函数遇到Sxx-错误码时，-将会递归调用-函数自身进行重试。-此外，-该函数还增加了一个参数，-用于设定重试下载的次数，-其默认值为两次" class="headerlink" title="当 download函数遇到Sxx 错误码时， 将会递归调用 函数自身进行重试。 此外， 该函数还增加了一个参数， 用于设定重试下载的次数， 其默认值为两次"></a>当 download函数遇到Sxx 错误码时， 将会递归调用 函数自身进行重试。 此外， 该函数还增加了一个参数， 用于设定重试下载的次数， 其默认值为两次</h3><h2 id="3-设置用户代理"><a href="#3-设置用户代理" class="headerlink" title="3. 设置用户代理"></a>3. 设置用户代理</h2><p>### 默认情况下，urllib2 使用 Python-urllib&#x2F; 2 . 7 作为用户代理下载网 页内容， 其中 2 . 7是 Python 的版本号 。User-Agent：python-urllib2&#x2F;.7</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">User_agent = &#x27;wswp&#x27;</span><br><span class="line">headers = &#123;&#x27;User_agent&#x27;:user_agent&#125;</span><br><span class="line">request = urllib2.Request(url,headers=headers)</span><br><span class="line">html = urllib2.urlopen(request)</span><br></pre></td></tr></table></figure></div>

<h2 id="4-抓取页面中所有符合要求的链接"><a href="#4-抓取页面中所有符合要求的链接" class="headerlink" title="4. 抓取页面中所有符合要求的链接"></a>4. 抓取页面中所有符合要求的链接</h2><h3 id="有时页面中许多链接需要下载，单单改变url中几个数字是无法全部找到的，下面的例子可以根据你所输入的正则表达式匹配到所有符合要求的url，并且可以将网页中的相对链接转换为绝对链接"><a href="#有时页面中许多链接需要下载，单单改变url中几个数字是无法全部找到的，下面的例子可以根据你所输入的正则表达式匹配到所有符合要求的url，并且可以将网页中的相对链接转换为绝对链接" class="headerlink" title="有时页面中许多链接需要下载，单单改变url中几个数字是无法全部找到的，下面的例子可以根据你所输入的正则表达式匹配到所有符合要求的url，并且可以将网页中的相对链接转换为绝对链接"></a>有时页面中许多链接需要下载，单单改变url中几个数字是无法全部找到的，下面的例子可以根据你所输入的正则表达式匹配到所有符合要求的url，并且可以将网页中的相对链接转换为绝对链接</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">import urllib2</span><br><span class="line">import re</span><br><span class="line">import urlparse</span><br><span class="line">def download(url):</span><br><span class="line">    try:</span><br><span class="line">        html = urllib2.urlopen(url).read()</span><br><span class="line">    except urllib2.URLError as e:</span><br><span class="line">        print &quot;error&quot;</span><br><span class="line">        print e.code   #可以打印出来错误代号如404。</span><br><span class="line">        print e.reason  #可以捕获异常</span><br><span class="line">        html = None</span><br><span class="line">    return html</span><br><span class="line">#要抓取的主页面和匹配的正则表达式</span><br><span class="line">def link_crawler(seed_url,link_regex):</span><br><span class="line">    crawl_queue = [seed_url]   #将第一个url放入</span><br><span class="line">    html = download(seed_url)  #获取页面所以信息</span><br><span class="line">    for link in get_links(html):#遍历所得到的url</span><br><span class="line">        if re.match(link_regex, link):#匹配输入的正则表达式</span><br><span class="line">            link = urlparse.urljoin(seed_url,link)</span><br><span class="line">            print link</span><br><span class="line">            crawl_queue.append(link)</span><br><span class="line">    print crawl_queue</span><br><span class="line">    # for url in crawl_queue:</span><br><span class="line">    #     html = download(url)</span><br><span class="line">def get_links(html):#返回所需要的url</span><br><span class="line">    webpage_regex = re.compile(&#x27;&lt;a[^&gt;]+href=[&quot;\&#x27;](.*?)[&quot;\&#x27;]&#x27;,re.IGNORECASE)</span><br><span class="line">    # print webpage_regex.findall(html)</span><br><span class="line">    # exit()</span><br><span class="line">    return webpage_regex.findall(html)</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    link_crawler(&#x27;&#x27;,&#x27;&#x27;)</span><br></pre></td></tr></table></figure></div>

<h2 id="5-增加延时的爬虫"><a href="#5-增加延时的爬虫" class="headerlink" title="5. 增加延时的爬虫"></a>5. 增加延时的爬虫</h2><h2 id="6-增加页面深度，避免爬虫陷阱"><a href="#6-增加页面深度，避免爬虫陷阱" class="headerlink" title="6. 增加页面深度，避免爬虫陷阱"></a>6. 增加页面深度，避免爬虫陷阱</h2>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python编写的文件备份程序</title>
    <url>/2017/03/15/python-article67/</url>
    <content><![CDATA[<p>使用Python编写的文件备份程序</p>
<h2 id="作为程序员平时需要备份许多东西，生怕有些文件改了就找不回来了，尤其是U盘里的经常会被修改，而我又不能一个文件一个文件的对比着去备份，全复制又太浪费时间，网上关于备份的程序很多，但有很多限制，没有我想要的功能，而且有的还会收费，所以决定自己来造个轮子。"><a href="#作为程序员平时需要备份许多东西，生怕有些文件改了就找不回来了，尤其是U盘里的经常会被修改，而我又不能一个文件一个文件的对比着去备份，全复制又太浪费时间，网上关于备份的程序很多，但有很多限制，没有我想要的功能，而且有的还会收费，所以决定自己来造个轮子。" class="headerlink" title="作为程序员平时需要备份许多东西，生怕有些文件改了就找不回来了，尤其是U盘里的经常会被修改，而我又不能一个文件一个文件的对比着去备份，全复制又太浪费时间，网上关于备份的程序很多，但有很多限制，没有我想要的功能，而且有的还会收费，所以决定自己来造个轮子。"></a>作为程序员平时需要备份许多东西，生怕有些文件改了就找不回来了，尤其是U盘里的经常会被修改，而我又不能一个文件一个文件的对比着去备份，全复制又太浪费时间，网上关于备份的程序很多，但有很多限制，没有我想要的功能，而且有的还会收费，所以决定自己来造个轮子。</h2><h2 id="平时用PHP比较多，我也有想过用PHP写一个类似的文件游览器，但这个轮子就造的有些大了，我只是想自动备份U盘里的东西，能够自动对比匹配目标文件就可以，不需要太臃肿，而Python简单，快速，连界面都不用写，每次直接运行就行。所以我决定使用Python来编写，原理就是对备份目录进行递归，把找到的文件和本地的文件进行对比，对比时使用文件生成md5码来匹配，如果本地不存在，则创建目录，再复制文件。如果没有Python环境，可以直接下载我编译好的-exe程序直接使用，输入时要注意，由于没有写图形界面，文件夹的地址需要输入，一定要保证文件地址的正确，如果是主盘符如d盘，直接写’d-’-n如果是文件夹，例如d盘下的test文件夹，则输入d-x2F-test。下面是源代码，注释写的非常详细，需要的可以按照自己的需求更改。"><a href="#平时用PHP比较多，我也有想过用PHP写一个类似的文件游览器，但这个轮子就造的有些大了，我只是想自动备份U盘里的东西，能够自动对比匹配目标文件就可以，不需要太臃肿，而Python简单，快速，连界面都不用写，每次直接运行就行。所以我决定使用Python来编写，原理就是对备份目录进行递归，把找到的文件和本地的文件进行对比，对比时使用文件生成md5码来匹配，如果本地不存在，则创建目录，再复制文件。如果没有Python环境，可以直接下载我编译好的-exe程序直接使用，输入时要注意，由于没有写图形界面，文件夹的地址需要输入，一定要保证文件地址的正确，如果是主盘符如d盘，直接写’d-’-n如果是文件夹，例如d盘下的test文件夹，则输入d-x2F-test。下面是源代码，注释写的非常详细，需要的可以按照自己的需求更改。" class="headerlink" title="平时用PHP比较多，我也有想过用PHP写一个类似的文件游览器，但这个轮子就造的有些大了，我只是想自动备份U盘里的东西，能够自动对比匹配目标文件就可以，不需要太臃肿，而Python简单，快速，连界面都不用写，每次直接运行就行。所以我决定使用Python来编写，原理就是对备份目录进行递归，把找到的文件和本地的文件进行对比，对比时使用文件生成md5码来匹配，如果本地不存在，则创建目录，再复制文件。如果没有Python环境，可以直接下载我编译好的.exe程序直接使用，输入时要注意，由于没有写图形界面，文件夹的地址需要输入，一定要保证文件地址的正确，如果是主盘符如d盘，直接写’d:’,\n如果是文件夹，例如d盘下的test文件夹，则输入d:&#x2F;test。下面是源代码，注释写的非常详细，需要的可以按照自己的需求更改。"></a>平时用PHP比较多，我也有想过用PHP写一个类似的文件游览器，但这个轮子就造的有些大了，我只是想自动备份U盘里的东西，能够自动对比匹配目标文件就可以，不需要太臃肿，而Python简单，快速，连界面都不用写，每次直接运行就行。所以我决定使用Python来编写，原理就是对备份目录进行递归，把找到的文件和本地的文件进行对比，对比时使用文件生成md5码来匹配，如果本地不存在，则创建目录，再复制文件。如果没有Python环境，可以直接下载我编译好的.exe程序直接使用，输入时要注意，由于没有写图形界面，文件夹的地址需要输入，一定要保证文件地址的正确，如果是主盘符如d盘，直接写’d:’,\n如果是文件夹，例如d盘下的test文件夹，则输入d:&#x2F;test。下面是源代码，注释写的非常详细，需要的可以按照自己的需求更改。</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#-*- coding=utf8 -*-</span><br><span class="line">#使用函数对指定目录进行深层次遍历，先列出来所有的文件和目录</span><br><span class="line">#再去指定的目录里再次查找文件和目录，一直深入下去</span><br><span class="line"># 如果是文件，就不再深入下去，而去判断路径是否存在于电脑中，</span><br><span class="line"># 不存在则将其复制</span><br><span class="line">import hashlib</span><br><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">#用于判断两个文件是否相同，提取每个文件中的前4字节的内容然后输出md5码进行比较</span><br><span class="line">def md5check(fname):</span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    with open(fname) as fobj:</span><br><span class="line">        while True:</span><br><span class="line">            data = fobj.read(4096)</span><br><span class="line">            if not data:</span><br><span class="line">                break</span><br><span class="line">            m.update(data)</span><br><span class="line">    return m.hexdigest()</span><br><span class="line">#文件复制的函数</span><br><span class="line">def copy(path):</span><br><span class="line">    new_path = path</span><br><span class="line">    new_path = new_path.replace(old_scoure, new_scoure) #将原盘符替换为我所要存放的目标盘符</span><br><span class="line">    print path + &quot;---copy---&quot; + new_path</span><br><span class="line">    if os.path.isfile(new_path): #如果目标文件存在</span><br><span class="line">        old_md = md5check(path)  #提取源文件的md5</span><br><span class="line">        new_md = md5check(new_path)  #提取目标文件的md5</span><br><span class="line">        if old_md != new_md:  #如果不相等，说明源文件有修改</span><br><span class="line">            shutil.copy(path, new_path) #因为已经判断了目标文件的存在，所以不需要创建目录，直接复制就可以</span><br><span class="line">    else: #如果目标文件不存在</span><br><span class="line">        dirname = os.path.dirname(new_path) # 提取目标的目录</span><br><span class="line">        if os.path.exists(dirname): #目录存在</span><br><span class="line">            shutil.copy(path, new_path) #直接复制文件</span><br><span class="line">        else: #目录不存在</span><br><span class="line">            try:</span><br><span class="line">                os.makedirs(dirname) #使用多级目录创建函数创建目录</span><br><span class="line">                shutil.copy(path, new_path) #直接复制文件</span><br><span class="line">            except WindowsError: #错误反馈，而不会停止操作</span><br><span class="line">                print &quot;创建目录出错&quot;</span><br><span class="line"># 查找所有目录文件的递归函数</span><br><span class="line">def lsdir(forder):</span><br><span class="line">    path = os.listdir(forder) #分离出来的文件列表</span><br><span class="line">    # print forder</span><br><span class="line">    # print path</span><br><span class="line">    for line in path: #逐个判断</span><br><span class="line">        line = forder + &quot;/&quot; + line #没有使用join函数，因为会出现 \</span><br><span class="line">        if (os.path.isdir(line)): #是目录就继续进行递归</span><br><span class="line">            lsdir(line)</span><br><span class="line">        else:</span><br><span class="line">            # path = os.path.join(forder,line)</span><br><span class="line">            # print &#x27;l:&#x27;+line</span><br><span class="line">            copy(line) #将文件的地址传到copy函数中去复制</span><br><span class="line">        # break</span><br><span class="line">def test():</span><br><span class="line">    print new_scoure</span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    # lsdir(&#x27;e:/test&#x27;)</span><br><span class="line">    global old_scoure</span><br><span class="line">    global new_scoure #设置为全局变量</span><br><span class="line">    concent = &quot;请保证地址的正确性，如果是主盘符如d盘，直接写&#x27;d:&#x27;,\n如果是文件夹，例如d盘下的test文件夹，则输入d:/test&quot;</span><br><span class="line">    c_unicode = concent.decode(&quot;utf-8&quot;) #为了在cmd显示中文，需要进行转码</span><br><span class="line">    # c_gbk = c_unicode.encode(&quot;gbk&quot;)</span><br><span class="line">    print c_unicode</span><br><span class="line">    concent = &quot;输入要备份的文件地址：&quot;</span><br><span class="line">    c_unicode = concent.decode(&quot;utf-8&quot;)</span><br><span class="line">    print c_unicode</span><br><span class="line">    old_scoure = raw_input()</span><br><span class="line">    concent = &quot;输入备份文件要存放的地址,请保证地址存在：&quot;</span><br><span class="line">    c_unicode = concent.decode(&quot;utf-8&quot;)</span><br><span class="line">    print c_unicode</span><br><span class="line">    new_scoure = raw_input()</span><br><span class="line">    # path = &#x27;e:/Markdown&#x27;</span><br><span class="line">    lsdir(old_scoure)</span><br><span class="line">    concent = &quot;输入任意键关闭&quot;</span><br><span class="line">    c_unicode = concent.decode(&quot;utf-8&quot;)</span><br><span class="line">    print c_unicode</span><br><span class="line">    raw_input()</span><br></pre></td></tr></table></figure></div>

<h2 id="下载地址http-blog-1252406596-costj-myqcloud-com-blog-test-exe"><a href="#下载地址http-blog-1252406596-costj-myqcloud-com-blog-test-exe" class="headerlink" title="下载地址http://blog-1252406596.costj.myqcloud.com/blog/test.exe"></a><a class="link"   href="http://blog-1252406596.costj.myqcloud.com/blog/test.exe" >下载地址http://blog-1252406596.costj.myqcloud.com/blog/test.exe <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="下面是运行的效果图片"><a href="#下面是运行的效果图片" class="headerlink" title="下面是运行的效果图片"></a>下面是运行的效果图片</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/python40.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>文件IO</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Python中使用SQL语句进行模糊查询</title>
    <url>/2017/02/11/python-article47/</url>
    <content><![CDATA[<h2 id="今天想写个脚本查一下数据库里的一些数据，但有些名称我只记得一些，便想到使用SQL语句中的模糊查询，正常的模糊查询应该是这样的"><a href="#今天想写个脚本查一下数据库里的一些数据，但有些名称我只记得一些，便想到使用SQL语句中的模糊查询，正常的模糊查询应该是这样的" class="headerlink" title="今天想写个脚本查一下数据库里的一些数据，但有些名称我只记得一些，便想到使用SQL语句中的模糊查询，正常的模糊查询应该是这样的"></a>今天想写个脚本查一下数据库里的一些数据，但有些名称我只记得一些，便想到使用SQL语句中的模糊查询，正常的模糊查询应该是这样的</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tables where like %关键字%</span><br></pre></td></tr></table></figure></div>

<h2 id="但是Python对-会转义，总是出错，改了好多次，最后发现不用全部都写出来，写成下面这样就可以了"><a href="#但是Python对-会转义，总是出错，改了好多次，最后发现不用全部都写出来，写成下面这样就可以了" class="headerlink" title="但是Python对%会转义，总是出错，改了好多次，最后发现不用全部都写出来，写成下面这样就可以了"></a>但是Python对%会转义，总是出错，改了好多次，最后发现不用全部都写出来，写成下面这样就可以了</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select_name = raw_input()</span><br><span class="line">domain_str = &quot;%&quot; + select_name + &quot;%&quot;</span><br><span class="line">sql = &quot;&quot;&quot;select * from pass where site like %s &quot;&quot;&quot;</span><br><span class="line">result = cur.execute(sql, (domain_str))</span><br><span class="line">for line in cur.fetchmany(result):</span><br><span class="line">    print line[1]</span><br></pre></td></tr></table></figure></div>

<h2 id="Python对中文各种报错，关于Python连接数据库和对数据的其他操作，以及报错处理，可以看我其他的文章"><a href="#Python对中文各种报错，关于Python连接数据库和对数据的其他操作，以及报错处理，可以看我其他的文章" class="headerlink" title="Python对中文各种报错，关于Python连接数据库和对数据的其他操作，以及报错处理，可以看我其他的文章"></a>Python对中文各种报错，关于Python连接数据库和对数据的其他操作，以及报错处理，可以看我其他的文章</h2>]]></content>
      <categories>
        <category>programme</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ</title>
    <url>/2017/07/27/qq/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>个人简介</title>
    <url>/2017/01/20/resume-article0001/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2017/02/47.jpg"
                     
                ></h2><ul>
<li>The reasonable man adapts himself to the world; The unreasonable one persists in trying to adapt the world himself. 明白事理的人使自己适应世界；不明事理的人想让世界适应自己。 ——-萧伯纳</li>
</ul>
<h1 id="Just-about-me"><a href="#Just-about-me" class="headerlink" title="Just about me"></a>Just about me</h1><p>魏春雨，90后。15年上大学，写程序已经有两年多了。一直想做一个博客，去记录自己的知识，心得，感悟，理想，前行的脚步太过匆忙，需要不断的整理走过的这一切。从最开始的C,C++一直到JAVA,JAVAWeb,JAVAScript,HTML,PHP,Python，SQL，学得语言很多用好的却不多，在这里想要凭借着自己的一知半解来和大家相互学习，探讨，研究，进步，让我能有更多的收获。从刚开始碰到C++的整夜整夜刷竞赛题，到现在通宵写程序。技术在进步，学的也越来越多，但也越来越累。不过既然选择了这个职业，就要继续坚持下去，庆幸我喜欢编程，就当是苦中作乐。现在最喜欢做的事就是能闲下来的时候看看书，想一想自己学的东西。静静的最好。在未来的日子里不让自己过得太枯燥。 人生就是一个得与失的过程，而我却是一个幸运者，得到的永远比失去的多。虽然当个程序员很累，但是我仍然很享受那些熬得只剩下黑眼圈的日子，因为我可以学到越来越多的东西，在以后的路上越走越远….</p>
<h1 id="About-my-blog"><a href="#About-my-blog" class="headerlink" title="About my blog"></a>About my blog</h1><ul>
<li>域 名：<a class="link"   href="http://www.rain1024.com/" >www.rain1024.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 创建 于2017年01月20日</li>
<li>服务器： 发布于腾讯云</li>
<li>程 序： Centos6.5 + mysql5.6 + php5</li>
</ul>
]]></content>
      <categories>
        <category>Self</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Sign in</title>
    <url>/2017/07/27/sign-in/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>关于新增发送邮件功能的说明</title>
    <url>/2017/02/15/sendemail/</url>
    <content><![CDATA[<h2 id="想了一下还是把邮件发送功能弄了上来，希望大家友好使用，暂不对IP进行限制，这是我自己写的，不是用的插件，在主菜单的功能下拉列表中，如果有需要的直接填写收件邮箱和标题内容即可，发件邮箱是我用域名在网易注册的，www-rainweb-115-105-116-101-x40-49-54-x33-46-x63-x6f-x6d-，不用回复，本功能属于测试版，由于服务器资源有限，可发送文本内容，暂不支持附件发送，请在标题和内容中填写有意义的文字，例如“我是中国人”等等，如果只是字母数字如“test，demo1”等可能会被系统拦截为垃圾邮件或者发送失败。后续会发布更多功能，请继续支持。"><a href="#想了一下还是把邮件发送功能弄了上来，希望大家友好使用，暂不对IP进行限制，这是我自己写的，不是用的插件，在主菜单的功能下拉列表中，如果有需要的直接填写收件邮箱和标题内容即可，发件邮箱是我用域名在网易注册的，www-rainweb-115-105-116-101-x40-49-54-x33-46-x63-x6f-x6d-，不用回复，本功能属于测试版，由于服务器资源有限，可发送文本内容，暂不支持附件发送，请在标题和内容中填写有意义的文字，例如“我是中国人”等等，如果只是字母数字如“test，demo1”等可能会被系统拦截为垃圾邮件或者发送失败。后续会发布更多功能，请继续支持。" class="headerlink" title="想了一下还是把邮件发送功能弄了上来，希望大家友好使用，暂不对IP进行限制，这是我自己写的，不是用的插件，在主菜单的功能下拉列表中，如果有需要的直接填写收件邮箱和标题内容即可，发件邮箱是我用域名在网易注册的，www_rainweb_&#115;&#105;&#116;&#101;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;，不用回复，本功能属于测试版，由于服务器资源有限，可发送文本内容，暂不支持附件发送，请在标题和内容中填写有意义的文字，例如“我是中国人”等等，如果只是字母数字如“test，demo1”等可能会被系统拦截为垃圾邮件或者发送失败。后续会发布更多功能，请继续支持。"></a>想了一下还是把邮件发送功能弄了上来，希望大家友好使用，暂不对IP进行限制，这是我自己写的，不是用的插件，在主菜单的功能下拉列表中，如果有需要的直接填写收件邮箱和标题内容即可，发件邮箱是我用域名在网易注册的，www_rainweb_<a class="link"   href="mailto:&#115;&#105;&#116;&#101;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;" >&#115;&#105;&#116;&#101;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，不用回复，本功能属于测试版，由于服务器资源有限，可发送文本内容，暂不支持附件发送，请在标题和内容中填写有意义的文字，例如“我是中国人”等等，如果只是字母数字如“test，demo1”等可能会被系统拦截为垃圾邮件或者发送失败。后续会发布更多功能，请继续支持。</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://blog-1252406596.costj.myqcloud.com/blog/email4.jpg"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中@ConfigurationProperties对于多层嵌套参数的正确加载方法</title>
    <url>/2020/04/10/springboot%E4%B8%ADconfigurationproperties%E5%AF%B9%E4%BA%8E%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E5%8F%82%E6%95%B0%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="SpringBoot中-ConfigurationProperties对于多层嵌套参数的正确加载方法"><a href="#SpringBoot中-ConfigurationProperties对于多层嵌套参数的正确加载方法" class="headerlink" title="SpringBoot中@ConfigurationProperties对于多层嵌套参数的正确加载方法"></a>SpringBoot中@ConfigurationProperties对于多层嵌套参数的正确加载方法</h1><h3 id="今天想重构一下Kafka代码，将之前用-Value引入的一些参数全部替换掉，因为可读性和维护性太差，这是以前的样子。"><a href="#今天想重构一下Kafka代码，将之前用-Value引入的一些参数全部替换掉，因为可读性和维护性太差，这是以前的样子。" class="headerlink" title="今天想重构一下Kafka代码，将之前用@Value引入的一些参数全部替换掉，因为可读性和维护性太差，这是以前的样子。"></a>今天想重构一下Kafka代码，将之前用@Value引入的一些参数全部替换掉，因为可读性和维护性太差，这是以前的样子。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    @Value(&quot;$&#123;spring.kafka.bootstrap-servers&#125;&quot;)</span><br><span class="line">private String servers;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.group-id&#125;&quot;)</span><br><span class="line">private String groupId;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.auto-offset-reset:&#125;&quot;)</span><br><span class="line">private String reset;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.enable-auto-commit&#125;&quot;)</span><br><span class="line">private String commit;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.max-poll-records&#125;&quot;)</span><br><span class="line">private String records;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.max-poll-interval-ms&#125;&quot;)</span><br><span class="line">private String intervams;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.auto-commit-interval&#125;&quot;)</span><br><span class="line">private String interval;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.key-deserializer&#125;&quot;)</span><br><span class="line">private String key;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.value-deserializer&#125;&quot;)</span><br><span class="line">private String value;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.properties.sasl.mechanism:&#125;&quot;)</span><br><span class="line">private String mechanism;</span><br><span class="line">@Value(&quot;$&#123;spring.kafka.consumer.properties.security.protocol:&#125;&quot;)</span><br><span class="line">private String protocol;</span><br></pre></td></tr></table></figure></div>

<h3 id="有同学可能会问，为什么不直接用spring集成好的Kafka，因为它封装的太好，反而不能使用一些原生的接口，所以打算重构一遍代码，至于重构的过程和优化的内容，留给以后的文章去讲解，这篇只是想使用-ConfigurationProperties把参数格式化掉，可以直接提取使用，在网上搜了一些文章，写的很乱，有的甚至完全不能实现功能，最后在一通乱怼下终于符合了自己的需求，Kafka的配置参数存在多层结构，所以不能直接配置参数。"><a href="#有同学可能会问，为什么不直接用spring集成好的Kafka，因为它封装的太好，反而不能使用一些原生的接口，所以打算重构一遍代码，至于重构的过程和优化的内容，留给以后的文章去讲解，这篇只是想使用-ConfigurationProperties把参数格式化掉，可以直接提取使用，在网上搜了一些文章，写的很乱，有的甚至完全不能实现功能，最后在一通乱怼下终于符合了自己的需求，Kafka的配置参数存在多层结构，所以不能直接配置参数。" class="headerlink" title="有同学可能会问，为什么不直接用spring集成好的Kafka，因为它封装的太好，反而不能使用一些原生的接口，所以打算重构一遍代码，至于重构的过程和优化的内容，留给以后的文章去讲解，这篇只是想使用@ConfigurationProperties把参数格式化掉，可以直接提取使用，在网上搜了一些文章，写的很乱，有的甚至完全不能实现功能，最后在一通乱怼下终于符合了自己的需求，Kafka的配置参数存在多层结构，所以不能直接配置参数。"></a>有同学可能会问，为什么不直接用spring集成好的Kafka，因为它封装的太好，反而不能使用一些原生的接口，所以打算重构一遍代码，至于重构的过程和优化的内容，留给以后的文章去讲解，这篇只是想使用@ConfigurationProperties把参数格式化掉，可以直接提取使用，在网上搜了一些文章，写的很乱，有的甚至完全不能实现功能，最后在一通乱怼下终于符合了自己的需求，Kafka的配置参数存在多层结构，所以不能直接配置参数。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  kafka:</span><br><span class="line">    bootstrap-servers: xxx.xxx.xxx.xxx:9092</span><br><span class="line">    producer:</span><br><span class="line">      retries: 0</span><br><span class="line">      batch-size: 16384</span><br><span class="line">      buffer-memory: 33554432</span><br><span class="line">      key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">      value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">    consumer:</span><br><span class="line">      group-id: views.invoke</span><br><span class="line">      auto-offset-reset: earliest</span><br><span class="line">      enable-auto-commit: true</span><br><span class="line">      max-poll-records: 100</span><br><span class="line">      max-poll-interval-ms: 60000</span><br><span class="line">      auto-commit-interval: 100</span><br><span class="line">      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure></div>

<p>只要是类似于这样结构的参数，都可以参考我的写法，理论上是没有问题的。</p>
<h3 id="下面是我怼出来的写法"><a href="#下面是我怼出来的写法" class="headerlink" title="下面是我怼出来的写法"></a>下面是我怼出来的写法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.kafka&quot;)</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class KafkaConfig &#123;</span><br><span class="line"></span><br><span class="line">    private String bootstrapServers;</span><br><span class="line">    private ProducerProperties producer = new ProducerProperties() ;</span><br><span class="line">    private ConsumerProperties consumer = new ConsumerProperties();</span><br><span class="line"></span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    @AllArgsConstructor</span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    public class ProducerProperties &#123;</span><br><span class="line">        private String retries;</span><br><span class="line">        private String batchSize;</span><br><span class="line">        private String bufferMemory;</span><br><span class="line">        private String keySerializer;</span><br><span class="line">        private String valueSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    @AllArgsConstructor</span><br><span class="line">    @Getter</span><br><span class="line">    @Setter</span><br><span class="line">    public class ConsumerProperties &#123;</span><br><span class="line">        private String groupId;</span><br><span class="line">        private String autoOffsetReset;</span><br><span class="line">        private String enableAutoCommit;</span><br><span class="line">        private String maxPollRecords;</span><br><span class="line">        private String maxPollIntervalMs;</span><br><span class="line">        private String autoCommitInterval;</span><br><span class="line">        private String keyDeserializer;</span><br><span class="line">        private String valueDeserializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="这里用到了lombok，代码结构也比较简洁，参数中间的-可以用大写来替代，spring会自动匹配的。"><a href="#这里用到了lombok，代码结构也比较简洁，参数中间的-可以用大写来替代，spring会自动匹配的。" class="headerlink" title="这里用到了lombok，代码结构也比较简洁，参数中间的-可以用大写来替代，spring会自动匹配的。"></a>这里用到了lombok，代码结构也比较简洁，参数中间的-可以用大写来替代，spring会自动匹配的。</h3><h2 id="错误的做法"><a href="#错误的做法" class="headerlink" title="错误的做法"></a>错误的做法</h2><h3 id="下面这种是很多文章里写的，测试了很多遍，基本获取不到参数，就能得到bootstrapServers。"><a href="#下面这种是很多文章里写的，测试了很多遍，基本获取不到参数，就能得到bootstrapServers。" class="headerlink" title="下面这种是很多文章里写的，测试了很多遍，基本获取不到参数，就能得到bootstrapServers。"></a>下面这种是很多文章里写的，测试了很多遍，基本获取不到参数，就能得到bootstrapServers。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class KafkaConfig &#123;</span><br><span class="line"></span><br><span class="line">    private String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConfigurationProperties(prefix=&quot;spring.kafka.producer&quot;)</span><br><span class="line">    public ProducerMyConfig getProducerConfig()&#123;</span><br><span class="line">        return new ProducerMyConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConfigurationProperties(prefix=&quot;spring.kafka.consumer&quot;)</span><br><span class="line">    public ConsumerMyConfig getConsumerConfig()&#123;</span><br><span class="line">        return new ConsumerMyConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private  class ProducerMyConfig &#123;</span><br><span class="line">        private String retries;</span><br><span class="line">        private String batchSize;</span><br><span class="line">        private String bufferMemory;</span><br><span class="line">        private String keySerializer;</span><br><span class="line">        private String valueSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private  class ConsumerMyConfig &#123;</span><br><span class="line">        private String groupId;</span><br><span class="line">        private String autoOffsetReset;</span><br><span class="line">        private String enableAutoCommit;</span><br><span class="line">        private String maxPollRecords;</span><br><span class="line">        private String maxPollIntervalMs;</span><br><span class="line">        private String autoCommitInterval;</span><br><span class="line">        private String keyDeserializer;</span><br><span class="line">        private String valueDeserializer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud-Gateway对multipart/form-data等其他POST请求类型的body体进行多次打开</title>
    <url>/2020/11/10/springcloud-gateway%E5%AF%B9multipart-form-data%E7%AD%89%E5%85%B6%E4%BB%96post%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B%E7%9A%84body%E4%BD%93%E8%BF%9B%E8%A1%8C%E5%A4%9A%E6%AC%A1%E6%89%93%E5%BC%80/</url>
    <content><![CDATA[<h3 id="本次代码仅在以下版本中测试通过"><a href="#本次代码仅在以下版本中测试通过" class="headerlink" title="本次代码仅在以下版本中测试通过"></a>本次代码仅在以下版本中测试通过</h3><blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Greenwich.RELEASE&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line">    </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h3 id="这几天在用gateway进行鉴权校验的时候遇到很多坑，以前使用的都是x-www-form-urlencoded这种格式的Body，很容易就可以用gateway打开进行操作，但这次因为涉及到图片上传，所以请求格式变了，打开的过程变得非常曲折。"><a href="#这几天在用gateway进行鉴权校验的时候遇到很多坑，以前使用的都是x-www-form-urlencoded这种格式的Body，很容易就可以用gateway打开进行操作，但这次因为涉及到图片上传，所以请求格式变了，打开的过程变得非常曲折。" class="headerlink" title="这几天在用gateway进行鉴权校验的时候遇到很多坑，以前使用的都是x-www-form-urlencoded这种格式的Body，很容易就可以用gateway打开进行操作，但这次因为涉及到图片上传，所以请求格式变了，打开的过程变得非常曲折。"></a>这几天在用gateway进行鉴权校验的时候遇到很多坑，以前使用的都是x-www-form-urlencoded这种格式的Body，很容易就可以用gateway打开进行操作，但这次因为涉及到图片上传，所以请求格式变了，打开的过程变得非常曲折。</h3><h3 id="先是找到了下面这种办法，确实可以打开并获取body里的内容，而且还是非常规则的类型，不需要二次提取，formData即是我们想要的内容，后来在路由之后的controller中发现body里没有数据了，原来gateway只能打开一次。"><a href="#先是找到了下面这种办法，确实可以打开并获取body里的内容，而且还是非常规则的类型，不需要二次提取，formData即是我们想要的内容，后来在路由之后的controller中发现body里没有数据了，原来gateway只能打开一次。" class="headerlink" title="先是找到了下面这种办法，确实可以打开并获取body里的内容，而且还是非常规则的类型，不需要二次提取，formData即是我们想要的内容，后来在路由之后的controller中发现body里没有数据了，原来gateway只能打开一次。"></a>先是找到了下面这种办法，确实可以打开并获取body里的内容，而且还是非常规则的类型，不需要二次提取，formData即是我们想要的内容，后来在路由之后的controller中发现body里没有数据了，原来gateway只能打开一次。</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">MediaType mediaType = exchange.getRequest().getHeaders().getContentType();</span><br><span class="line">        if (MediaType.MULTIPART_FORM_DATA.isCompatibleWith(mediaType)) &#123;</span><br><span class="line">            return exchange.getMultipartData().flatMap(formData-&gt;&#123;</span><br><span class="line">                exchange.getAttributes().put(GateWayFilterDict.FORM_DATA_ATTR,formData);</span><br><span class="line">                return chain.filter(exchange.mutate().build());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="后来换成了这个样子，先使用GlobalFilter对body内容进行缓存，之后便可以在方法里进行调用"><a href="#后来换成了这个样子，先使用GlobalFilter对body内容进行缓存，之后便可以在方法里进行调用" class="headerlink" title="后来换成了这个样子，先使用GlobalFilter对body内容进行缓存，之后便可以在方法里进行调用"></a>后来换成了这个样子，先使用GlobalFilter对body内容进行缓存，之后便可以在方法里进行调用</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class CacheBodyGlobalFilter implements Ordered, GlobalFilter &#123;</span><br><span class="line"></span><br><span class="line">  public static final String CACHE_REQUEST_BODY_OBJECT_KEY = &quot;cachedRequestBodyObject&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        if (exchange.getRequest().getHeaders().getContentType() == null) &#123;</span><br><span class="line">            return chain.filter(exchange);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return DataBufferUtils.join(exchange.getRequest().getBody())</span><br><span class="line">                    .flatMap(dataBuffer -&gt; &#123;</span><br><span class="line">                        DataBufferUtils.retain(dataBuffer);</span><br><span class="line">                        Flux&lt;DataBuffer&gt; cachedFlux = Flux</span><br><span class="line">                                .defer(() -&gt; Flux.just(dataBuffer.slice(0, dataBuffer.readableByteCount())));</span><br><span class="line">                        ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(</span><br><span class="line">                                exchange.getRequest()) &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                                return cachedFlux;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;;</span><br><span class="line">                        exchange.getAttributes().put(CACHE_REQUEST_BODY_OBJECT_KEY, cachedFlux);</span><br><span class="line"></span><br><span class="line">                        return chain.filter(exchange.mutate().request(mutatedRequest).build());</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class VerificationFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line"></span><br><span class="line">        String bodyContent = resolveBodyFromRequest(exchange.getRequest());</span><br><span class="line"></span><br><span class="line">        return chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String resolveBodyFromRequest(ServerHttpRequest serverHttpRequest)&#123;</span><br><span class="line">        //获取请求体</span><br><span class="line">        Flux&lt;DataBuffer&gt; body = serverHttpRequest.getBody();</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line"></span><br><span class="line">        body.subscribe(buffer -&gt; &#123;</span><br><span class="line">            byte[] bytes = new byte[buffer.readableByteCount()];</span><br><span class="line">            buffer.read(bytes);</span><br><span class="line">//            DataBufferUtils.release(buffer);</span><br><span class="line">            String bodyString = new String(bytes, StandardCharsets.UTF_8);</span><br><span class="line">            sb.append(bodyString);</span><br><span class="line">        &#125;);</span><br><span class="line">        return formatStr(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 去掉空格,换行和制表符</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String formatStr(String str)&#123;</span><br><span class="line">        if (str != null &amp;&amp; str.length() &gt; 0) &#123;</span><br><span class="line">            Pattern p = Pattern.compile(&quot;\\s*\t\r\n&quot;);</span><br><span class="line">            Matcher m = p.matcher(str);</span><br><span class="line">            return m.replaceAll(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="这里是提取出来的内容，需要根据规则进行二次加工，但不复杂"><a href="#这里是提取出来的内容，需要根据规则进行二次加工，但不复杂" class="headerlink" title="这里是提取出来的内容，需要根据规则进行二次加工，但不复杂"></a>这里是提取出来的内容，需要根据规则进行二次加工，但不复杂</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">----------------------------582918735041218588371746Content-Disposition:form-data;name=&quot;appKey&quot;4324----------------------------582918735041218588371746Content-Disposition:form-data;name=&quot;appSecret&quot;43244----------------------------582918735041218588371746--</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloudGateway手动编写路由规则对请求进行转发</title>
    <url>/2021/06/25/springcloudgateway%E6%89%8B%E5%8A%A8%E7%BC%96%E5%86%99%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99%E5%AF%B9%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<p>这篇文章主要是提供一种转发路由的代码实现方式，之前说的gateway都是使用配置文件来对请求进行路由，这样虽然很简单，但是不够灵活，如果后端对应很多服务实例，网关想要根据自己的规则来转发请求，比如编写不同的负载均衡策略，做一些特别的权重，以及在运行过程中动态的变更转发地址，这些用配置文件来做都不够灵活，没法自由的定义规则。 涉及的gateway版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>主要实现过程还是实现GatewayFilter接口，获取到要指定的IP地址与端口，然后组装成URI与Route，最后转发出去</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cn.hutool.core.util.ObjectUtil;</span><br><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line">import com.ecwid.consul.v1.health.model.HealthService;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.route.Route;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import org.springframework.web.util.UriComponentsBuilder;</span><br><span class="line"></span><br><span class="line">import java.net.URI;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Optional;</span><br><span class="line"></span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 转发路由，通过负载均衡对后端服务进行访问</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class RouteFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private LoadBalanceHandler loadBalance;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">        //获取原来的请求路径</span><br><span class="line">        String requestPath = exchange.getAttribute(FilterDict.SYSTEM_REQUEST_PATH);</span><br><span class="line">      //randomSelectInstance方法会获取到一个&quot;ip:port&quot;这样结构的字符串</span><br><span class="line">        String instanceInfo = loadBalance.randomSelectInstance();</span><br><span class="line">        //如果没有服务，则直接返回报错</span><br><span class="line">        if (StrUtil.isEmpty(instanceInfo)) &#123;</span><br><span class="line">            return response.writeWith(Mono.just(GateWayFilterUtils.writeData(exchange, RecoError.GEN_SERVER_BUSY)));</span><br><span class="line">        &#125;</span><br><span class="line">        //用于测试负载均衡算法对IP分配是否均衡</span><br><span class="line">//        redisUtil.zIncrementScore(&quot;test:gateway:load:ip&quot;,instanceInfo,1);</span><br><span class="line">        //分割地址中IP和端口</span><br><span class="line">        String[] serviceAddress = instanceInfo.split(StrUtil.COLON);</span><br><span class="line">        String requestSchema = exchange.getRequest().getURI().getScheme();</span><br><span class="line">        //拼接URL的数据</span><br><span class="line">        assert ObjectUtil.isNotNull(requestPath);</span><br><span class="line">        URI uri = UriComponentsBuilder.</span><br><span class="line">                newInstance().scheme(requestSchema).</span><br><span class="line">                host(serviceAddress[0].trim()).port(Integer.parseInt(serviceAddress[1].trim()))</span><br><span class="line">                .path(requestPath).query(exchange.getRequest().getURI().getRawQuery()).build(true)</span><br><span class="line">                .toUri();</span><br><span class="line">        //将拼接好的URL装入新的exchange</span><br><span class="line">        ServerWebExchange mutateExchange = exchange.mutate().request(builder -&gt; builder.uri(uri).build()).build();</span><br><span class="line">        Optional&lt;Route&gt; route = Optional.of(exchange.getAttribute(GATEWAY_ROUTE_ATTR));</span><br><span class="line">        Route newRoute = Route.async()</span><br><span class="line">                .asyncPredicate(route.get().getPredicate())</span><br><span class="line">                .filters(route.get().getFilters())</span><br><span class="line">                .id(route.get().getId())</span><br><span class="line">                .order(route.get().getOrder())</span><br><span class="line">                .uri(uri).build();</span><br><span class="line">        mutateExchange.getAttributes().put(GATEWAY_ROUTE_ATTR, newRoute);</span><br><span class="line">        mutateExchange.getAttributes().put(FilterDict.SYSTEM_APP_IP_ADDR, serviceAddress[0]);</span><br><span class="line">        return chain.filter(mutateExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return FilterDict.SYSTEM_FILTER_ORDER + 4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>单独编写路由filter以后，还需要引入才能执行，在全局配置中倒入bean，最后启动就可以执行了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter;</span><br><span class="line">import org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line">import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import java.time.Duration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全局过滤器配置加载</span><br><span class="line"> *</span><br><span class="line"> * @author :wcy</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Configuration</span><br><span class="line">public class GlobalFilterConfigure &#123;</span><br><span class="line">    //用于设置路由的</span><br><span class="line">    @Bean</span><br><span class="line">    public RouteFilter routeFilter()&#123;</span><br><span class="line">        return new RouteFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将所有自定义的filter加载进来</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public RouteLocator customerRouteLocator(RouteLocatorBuilder builder, RedisRateLimiter redisRateLimiter) &#123;</span><br><span class="line">        return builder.routes()</span><br><span class="line">                .route(r -&gt; r.path(FilterDict.GATEWAY_BASE_INTERCEPT_URL)</span><br><span class="line">                        //将自定义的filter加载进来</span><br><span class="line">                        .filters(f -&gt; f.filters(routeFilter())</span><br><span class="line">                                //请求大小</span><br><span class="line">                                .setRequestSize(requestLimitSize)</span><br><span class="line">                                //请求限流,目前使用请求IP,以后可以扩展使用其他限定组合</span><br><span class="line">//                                .filter(rateLimitByIpGatewayFilter())</span><br><span class="line">                        )</span><br><span class="line">                        .uri(&quot;http://127.0.0.1:&quot; + servicePort + &quot;/actuator/health&quot;)</span><br><span class="line">                        .order(FilterDict.SYSTEM_FILTER_ORDER)</span><br><span class="line">                        .id(FilterDict.GATEWAY_ROUTE_NAME)</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第七章适配器模式与外观模式-读书笔记</title>
    <url>/2019/11/02/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第七章适配器模式与外观模式-读书笔记"><a href="#《HeadFirst设计模式》第七章适配器模式与外观模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第七章适配器模式与外观模式-读书笔记"></a>《HeadFirst设计模式》第七章适配器模式与外观模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="什么是适配器"><a href="#什么是适配器" class="headerlink" title="什么是适配器"></a>什么是适配器</h2><p>因为现实中到处都有适配器。比方说: 如果你需要在欧洲国家使用美国制造的笔记本电脑,你可能需要使用个交流电的适配器，适配器的作用:它位于美式插头和欧式插座的中间,它的工作是将欧式插座转换成美式插座,好让美式插头可以插进这个插座得到电力。或者也可以这么认为:适配器改变了插座的接口,以符合美式笔记本电脑的需求。</p>
<blockquote>
<p>好了,这是真实世界的适配器,那面向对象适配器又是什么?其实,OO适配器和真实世界的适配器扮演着同样的角色:将一个接口转换成另一个接口,以符合客户的期望。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191028082439929.png"
                      alt="image-20191028082439929"
                ></p>
<blockquote>
<p>正如图所示，在现有系统和厂商类之间加入一层适配器，可以在不修改原有类的基础上，实现功能。</p>
</blockquote>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>客户使间适配器的过程如下:</p>
<ol>
<li>客户通过目标接口调用适配器的方法对适配器发出请求。</li>
<li>适配器使用被适配者接口把请求转换成被适配者的一个或多个调用接口。</li>
<li>客户接收到调用的结果,但并未察觉这一切是适配器在起转换作用。</li>
</ol>
<blockquote>
<p>适配器模式：将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191028083534152.png"
                      alt="image-20191028083534152"
                ></p>
<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>封装子系统的类，提供一个比较简单的接口，简化了接口，也将客户从组件的子系统中解耦，外观和适配器可以包装很多类，但是外观的意图是简化接口，而适配器的意图是将接口转换成不同的接口。</p>
<blockquote>
<p>外观模式：提供了一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层接口，让子系统更容易使用。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191028085243065.png"
                      alt="image-20191028085243065"
                ></p>
<h2 id="“最少知识”原则"><a href="#“最少知识”原则" class="headerlink" title="“最少知识”原则"></a>“最少知识”原则</h2><p>最少知识( Least Knowledge)原则告诉我们要减少对象之间的交互,只留下几个“密友”。这个原则通常是这么说的:</p>
<blockquote>
<p>最少知识原则:只和你的密友谈话</p>
</blockquote>
<h3 id="如何不要影响太多对象"><a href="#如何不要影响太多对象" class="headerlink" title="如何不要影响太多对象"></a>如何不要影响太多对象</h3><p>就任何对象而言,在该对象的方法内,我们只应该调用属于以下范围的方法:</p>
<ol>
<li>该对象本身</li>
<li>被当做方法的参数而传递进来的对象</li>
<li>此方法所创建或实例化的任何对象</li>
<li>对象的任何组件</li>
</ol>
<h2 id="模式区分"><a href="#模式区分" class="headerlink" title="模式区分"></a>模式区分</h2><p>装饰者：不改变接口，但加入责任 适配器：将一个接口转成另一个接口 外观：让接口更简单</p>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第三章-装饰者模式-读书笔记</title>
    <url>/2019/10/14/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第三章-装饰者模式-读书笔记"><a href="#《HeadFirst设计模式》第三章-装饰者模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第三章-装饰者模式-读书笔记"></a>《HeadFirst设计模式》第三章-装饰者模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>这一次是星巴兹咖啡，他们需要新的订单系统，原来的设计太过冗余，直接使用一个饮料抽象类作为父类，其他要增加调料的过程用子类继承父类，之后再实现，这样就变得特别繁琐，根本没有办法去维护。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013160000859.png"
                     
                ></p>
<blockquote>
<p>违反了之前规定的设计原则：</p>
<ol>
<li>多用组合，少用继承。</li>
<li>针对接口编程，不针对实现编程。</li>
</ol>
</blockquote>
<h2 id="第一种解决方案"><a href="#第一种解决方案" class="headerlink" title="第一种解决方案"></a>第一种解决方案</h2><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><blockquote>
<p>直接重写Beverage类，把所有的调料都写进去，变成一个boolean值，在父类的cost里判断，并相加这些调料。 子类继续父类后，重写cost方法，用自己的价格再加上父类cost计算的价格。 这样就整体完成了新的设计。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013162800277.png"
                      alt="image-20191013162800277"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013163230134.png"
                      alt="image-20191013163230134"
                ></p>
<h3 id="依旧存在问题"><a href="#依旧存在问题" class="headerlink" title="依旧存在问题"></a>依旧存在问题</h3><blockquote>
<p>当哪些需求或因素改变时，会影响这个设计？</p>
<ol>
<li>调料价钱的改变会使我们更改现有代码。</li>
<li>一旦出现新的调料,我们就需要加上新的方法,并改变超类中的cost()方法。</li>
<li>以后可能会开发出新饮料。对这些饮料而言(例如:冰茶),某些调料可能并不适合,但是在这个设计方式中,Tea(茶)子类仍将继承那些不适合的方法,例如:hasWhip()(加奶泡)。</li>
<li>万一顾客想要双倍摩卡咖啡,怎么办</li>
</ol>
</blockquote>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><blockquote>
<p>类应该对扩展开放，对修改关闭。</p>
</blockquote>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><blockquote>
<p><strong>装饰者模式</strong>：动态地将责任附加到对象上。若要拓展功能，装饰者提供了比继承更有弹性的替代方案。</p>
</blockquote>
<h2 id="第二种解决方案"><a href="#第二种解决方案" class="headerlink" title="第二种解决方案"></a>第二种解决方案</h2><h3 id="1-我们要做的流程"><a href="#1-我们要做的流程" class="headerlink" title="1.我们要做的流程"></a>1.我们要做的流程</h3><ol>
<li>拿一个深焙咖啡(DarkRoast)对象</li>
<li>以摩卡(Mocha)对象装饰它</li>
<li>以奶泡(Whip)对象装饰它</li>
<li>调用cost()方法,并依赖委托(delegate)将调料的价钱加上去</li>
</ol>
<h3 id="2-模拟装饰过程"><a href="#2-模拟装饰过程" class="headerlink" title="2.模拟装饰过程"></a>2.模拟装饰过程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013164052988.png"
                      alt="image-20191013164052988"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013164104660.png"
                      alt="image-20191013164104660"
                ></p>
<blockquote>
<p>注意：</p>
<ol>
<li>装饰者和被装饰对象有相同的超类型。</li>
<li>你可以用一个或多个装饰者包装一个对象。</li>
<li>既然装饰者和被装饰对象有相同的超类型,所以在任何需要原始对象(被包装的)的场合, 可以用装饰过的对象代替它。</li>
<li><strong><em>装饰者可以在所委托被装饰者的行为之前与&#x2F;或之后,加上自己的行为,以达到特定的目的。</em></strong></li>
<li>对象可以在任何时候被装饰,所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰对象。</li>
</ol>
</blockquote>
<h3 id="3-模拟实现类图"><a href="#3-模拟实现类图" class="headerlink" title="3.模拟实现类图"></a>3.模拟实现类图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013164455814.png"
                      alt="image-20191013164455814"
                ></p>
<blockquote>
<p>注意： 这里还是用到了继承，继承Beverage抽象类,是为了有正确的类型,而不是继承它的行为。行为来自装饰者和基础组件,或与其他装饰者之间的组合关系。</p>
</blockquote>
<h4 id="4-具体代码实现"><a href="#4-具体代码实现" class="headerlink" title="4.具体代码实现"></a>4.具体代码实现</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191013165939619.png"
                      alt="image-20191013165939619"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class Beverage &#123;</span><br><span class="line">String description = &quot;Unknown Beverage&quot;;</span><br><span class="line">public String getDescription()&#123;</span><br><span class="line">return description;</span><br><span class="line">&#125;</span><br><span class="line">public abstract double cost();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public abstract class CondimentDecorator extends Beverage &#123;</span><br><span class="line"></span><br><span class="line">public abstract String getDescription();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Espresso extends Beverage &#123;</span><br><span class="line">public Espresso()&#123;</span><br><span class="line">description = &quot;Espresso&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double cost() &#123;</span><br><span class="line">return 1.99;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class HouseBlend extends Beverage &#123;</span><br><span class="line"></span><br><span class="line">public HouseBlend()&#123;</span><br><span class="line">description = &quot;HouseBlend&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double cost() &#123;</span><br><span class="line">return 0.89;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Mocha extends CondimentDecorator &#123;</span><br><span class="line">Beverage beverage;</span><br><span class="line"></span><br><span class="line">public Mocha(Beverage beverage)&#123;</span><br><span class="line">this.beverage = beverage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getDescription() &#123;</span><br><span class="line">return beverage.getDescription() + &quot;,Mocha&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double cost() &#123;</span><br><span class="line">return .20+beverage.cost();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class StarbuzzCoffee &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Beverage beverage = new Espresso();</span><br><span class="line">System.out.println(beverage.getDescription()+&quot; $ &quot;+beverage.cost());</span><br><span class="line"></span><br><span class="line">Beverage beverage1 = new HouseBlend();</span><br><span class="line">beverage1 = new Mocha(beverage1);</span><br><span class="line">System.out.println(beverage1.getDescription()+&quot; $ &quot;+beverage1.cost());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第一章策略模式-读书笔记</title>
    <url>/2019/09/22/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第一章策略模式-读书笔记"><a href="#《HeadFirst设计模式》第一章策略模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第一章策略模式-读书笔记"></a>《HeadFirst设计模式》第一章策略模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><blockquote>
<p>工作以后，代码不单是写完就可以的，复用，维护也是很重要的，以前自己写代码都是以功能为目的，不考虑其他的只在一个类里全部写完就行，但这样以后会暴露出更多的问题，与其乱写，不如不写，多留一些时间去构思整个流程，而不是说干就干。 设计模式是很早之前就接触到的概念，但出于用不到就不学的观念，一直都没有去认真的学习，这次下定决心去学一遍设计模式和开发原则，，打好基础，提高思维的高度。</p>
</blockquote>
<h2 id="2-从鸭子说起"><a href="#2-从鸭子说起" class="headerlink" title="2. 从鸭子说起"></a>2. 从鸭子说起</h2><p>如果说《机器学习》是西瓜书，那设计模式第一章就是鸭子书，以物为例让人留下更加深刻的印象。 假设我们有一群鸭子类，它们都是继承Duck这个超类。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Duck</span><br><span class="line">quack()</span><br><span class="line">swim()</span><br><span class="line">display()</span><br><span class="line">//鸭子的其他方法</span><br></pre></td></tr></table></figure></div>

<p><strong>所有的鸭子都会呱呱叫(Quack)也会游泳(Swim),所以由超类负责处理这部分的实现代码。</strong> 因 为 每 一 种 鸭 子 的外 观 都 不 同 , 所 以display()方法是抽象的，每个鸭子子类负责实现自己的display。 这样仿佛是一套完美的系统，大家各司其职，各做各的，但相同的部分由超类负责管理。</p>
<h2 id="3-鸭子要飞了"><a href="#3-鸭子要飞了" class="headerlink" title="3.鸭子要飞了"></a>3.鸭子要飞了</h2><p>新的需求来了，这时候我们要加入鸭子会飞的功能。鸭子本来有翅膀，没问题，在超类里加入一个fly方法，让所有的子类继承就好了，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Duck</span><br><span class="line">quack()</span><br><span class="line">swim()</span><br><span class="line">display()</span><br><span class="line">fly() //新加入的飞行方法</span><br><span class="line">//鸭子的其他方法</span><br></pre></td></tr></table></figure></div>

<p>确实，所有的鸭子都会飞了，然而系统里还有一些橡皮鸭子，它们也会飞了，这是不符合常理的！！！ 我们忽略了一件事情，并不是所有子类都会飞，某些不会飞的也继承了此方法。</p>
<blockquote>
<p>注意：对代码所做的局部修改，影响层面可不只是局部。 当涉及”维护”时，为了”复用”目的而使用继承，结局并不完美。</p>
</blockquote>
<h3 id="3-1-第一个解决办法—子类覆盖"><a href="#3-1-第一个解决办法—子类覆盖" class="headerlink" title="3.1 第一个解决办法—子类覆盖"></a>3.1 第一个解决办法—子类覆盖</h3><p>我们可以把橡皮鸭中的fly方法覆盖掉</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">RubberDuck</span><br><span class="line">quack()&#123;//吱吱叫&#125;</span><br><span class="line">display()&#123;//橡皮鸭&#125;</span><br><span class="line">fly()&#123;</span><br><span class="line">  //覆盖，什么也不做</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样好像确实解决了橡皮鸭的问题，但如果我们以后每次加入不会飞的鸭子，都要这样检查一遍，就失去了复用的意义了。</p>
<h3 id="3-2-第二个解决办法—利用接口"><a href="#3-2-第二个解决办法—利用接口" class="headerlink" title="3.2 第二个解决办法—利用接口"></a>3.2 第二个解决办法—利用接口</h3><p><strong>我们可以把fly方法从超类中取出来，放进一个Flyable接口中，这样一来，只有会飞的鸭子才实现此接口。</strong> 是不是感觉这个办法好像可以，完全不是！这么一来重复的代码会变多，如果覆盖几个方法就算是差劲,那么对于48个Duck的子类都要稍微修改一下飞行的行为,简直就是噩梦。 如果能有一种建立软件的方法,好让我们可以用一种对既有的代码影响最小的方式来修改软件该有多好。我们就可以花较少时间重做代码, 而多让程序去做更酷的事。</p>
<h2 id="4-重新看待问题"><a href="#4-重新看待问题" class="headerlink" title="4. 重新看待问题"></a>4. 重新看待问题</h2><p>现在我们知道使用继承并不能很好地解决问题,因为鸭子的行为在子类里不断地改变,并且让所有的子类都有这些行为是不恰当的。Flyable与Quackable接口一开始似乎还挺不错,解决了问题(只有会飞的鸭子才继承Flyable),但是Java接口不具有实现代码,所以继承接口无法达到代码的复用。这意味着: 无论何时你需要修改某个行为,你必须得往下追踪并在每一个定义此行为的类中修改它,一不小心,可能会造成新的错误! 幸运的是,有一个设计原则,恰好适用于此状况。</p>
<blockquote>
<p>设计原则: 找出应用中可能需要变化之处,把它们独立出来,不要和那些不需要变化的代码混在一起。</p>
</blockquote>
<p>换句话说,如果每次新的需求一来,都会使某方面的代码发生变化,那么你就可以确定,这部分的代码需要被抽出来,和其他稳定的代码有所区分。 下面是这个原则的另一种思考方式:“把会变化的部分取出并封装起来,以便以后可以轻易地改动或扩充此部分,而不影响不需要变化的其他部分”。 这样的概念很简单,几乎是每个设计模式背后的精神所在。所有的模式都提供了一套方法让“系统中的某部分改变不会影响其他部分”。 好,该是把鸭子的行为从Duck类中取出的时候了!</p>
<h2 id="5-重新设计鸭子"><a href="#5-重新设计鸭子" class="headerlink" title="5 重新设计鸭子"></a>5 重新设计鸭子</h2><p>我们提取出两组类，一个是fly，一个是quack，每一组类实现各自的动作，可以指定特定类型的飞行行为给鸭子，让它们动态的去改变就好了。</p>
<blockquote>
<p>设计原则：针对接口编程，而不是针对实现编程。</p>
</blockquote>
<p>我们利用接口代表每个行为，行为的每个实现都将实现其中的一个接口。 这样的做法迥异于以往,以前的做法是:行为来自Duck超类的具体实现,或是继承某个接口并由子类自行实现而来。这两种做法都是依赖于“实现”,我们被实现绑得死死的,没办法更改行为(除非写更多代码)。在我们的新设计中,鸭子的子类将使用接口(FlyBehavior与QuackBehavior)所表示的行为,所以实际的“实现”不会被绑死在鸭子的子类中。(换句话说,特定的具体行为编写在实现了FlyBehavior与QuakcBehavior的类中)。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20190922172247753.png"
                      alt="image-20190922172247753"
                > 这样的设计，可以让飞行和呱呱叫的动作被其他的对象复用,因为这些行为已经与鸭子类无关了，不只是为Duck类而提取，现在与Duck无关了。</p>
<blockquote>
<p>这么一来,有了继承的“复用”好处,却没有继承所带来的包袱。</p>
</blockquote>
<h2 id="6-实现鸭子行为"><a href="#6-实现鸭子行为" class="headerlink" title="6. 实现鸭子行为"></a>6. 实现鸭子行为</h2><p>首先,在Duck类中“加入两个实例变量”,分别为“flyBehavior”与“quack Behavior”,声明为接口类型(而不是具体类实现类型),每个鸭子对象都会动态地设置这些变量以在运行时引用正确的行为类型(例如:FlyWithWings、Squeak等)。 我们也必须将Duck类与其所有子类中的fly()与quack()删除,因为这些行为已经被搬到FlyBehavior与QuackBehavior类中了。 我们用两个相似的方法performFly()和performQuack()取代Duck类中的fly()与quack()。 超类</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Duck</span><br><span class="line">FlyBehavior flyBehavior</span><br><span class="line">QuackBehavior quackBehavior</span><br><span class="line">performQuack()&#123;      quackBehavior.quack();    &#125;</span><br><span class="line">swim()</span><br><span class="line">display()</span><br><span class="line">performFly()</span><br></pre></td></tr></table></figure></div>

<p>某个子类</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MallardDuck extends Duck &#123;    </span><br><span class="line">public MallardDuck() &#123;       </span><br><span class="line">quackBehavior = new Quack();       </span><br><span class="line">flyBehavior = new FlyWithWings();</span><br><span class="line">&#125;    </span><br><span class="line">public void display() &#123;  </span><br><span class="line">System.out.println(“I’m a real Mallard duck”);    </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>当你将两个类结合起来使用，如同本例一-般，这就是组合(composition)。这种做法和“继承”不同的地方在于,鸭子的行为不是继承来的，而是和适当的行为对象“组合”来的。 如你所见，使用组合建立系统具有很大的弹性，不仅可将算法族封装成类，更可以“在运行时动态地改变行为”，只要组合的行为对象符合正确的接口标准即可。</p>
<blockquote>
<p>设计原则：多用组合，少用继承。</p>
</blockquote>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote>
<p>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第二章观察者模式-读书笔记</title>
    <url>/2019/09/27/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第二章观察者模式-读书笔记"><a href="#《HeadFirst设计模式》第二章观察者模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第二章观察者模式-读书笔记"></a>《HeadFirst设计模式》第二章观察者模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><blockquote>
<p>这次的引子是关于气象站的应用，案例中要建立一个应用，有三种天气预报的展现形式，使用一个WeatherObject对象获得最新测量到的天气数据，然后对三个布告板进行实时更新。并且以后可能会新加入其他的布告板，需要系统有很高的扩展性。WeatherData对象知道如何跟物理气象站联系,以取得更新的数据。WeatherData对象会随即更新三个布告板的显示:目前状况(温度、湿度、气压)、气象统计和天气预报。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20190924201516474.png"
                     
                > <strong>这是WeatherData类</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WeatherData</span><br><span class="line">getTemperature( )</span><br><span class="line">getHumidity( ) </span><br><span class="line">getPressure( ) </span><br><span class="line">measure- mentsChanged( )</span><br><span class="line"></span><br><span class="line">/*  </span><br><span class="line">* 一旦气象测量更新,此方法会被调用 </span><br><span class="line">*/</span><br><span class="line">public void measurementsChanged() &#123;</span><br><span class="line">// 你的代码加在这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2. 需求分析"></a>2. 需求分析</h2><h4 id="2-1-WeatherData类具有getter方法-可以取得三个测量值-温度、湿度与气压。"><a href="#2-1-WeatherData类具有getter方法-可以取得三个测量值-温度、湿度与气压。" class="headerlink" title="2.1 WeatherData类具有getter方法,可以取得三个测量值:温度、湿度与气压。"></a>2.1 WeatherData类具有getter方法,可以取得三个测量值:温度、湿度与气压。</h4><h4 id="2-2-当新的测量数据备妥时-measurementsChanged-方法就会被调用-我们不在乎此方法是如何被调用的-我们只在乎它被调用了-。"><a href="#2-2-当新的测量数据备妥时-measurementsChanged-方法就会被调用-我们不在乎此方法是如何被调用的-我们只在乎它被调用了-。" class="headerlink" title="2.2 当新的测量数据备妥时,measurementsChanged()方法就会被调用(我们不在乎此方法是如何被调用的,我们只在乎它被调用了)。"></a>2.2 当新的测量数据备妥时,measurementsChanged()方法就会被调用(我们不在乎此方法是如何被调用的,我们只在乎它被调用了)。</h4><h4 id="2-3-我们需要实现三个使用天气数据的布告板-“目前状况”布告、“气象统计”布告、“天气预报”布告。一旦WeatherData有新的测量-这些布告必须马上更新。"><a href="#2-3-我们需要实现三个使用天气数据的布告板-“目前状况”布告、“气象统计”布告、“天气预报”布告。一旦WeatherData有新的测量-这些布告必须马上更新。" class="headerlink" title="2.3 我们需要实现三个使用天气数据的布告板:“目前状况”布告、“气象统计”布告、“天气预报”布告。一旦WeatherData有新的测量,这些布告必须马上更新。"></a>2.3 我们需要实现三个使用天气数据的布告板:“目前状况”布告、“气象统计”布告、“天气预报”布告。一旦WeatherData有新的测量,这些布告必须马上更新。</h4><h4 id="2-4-此系统必须可扩展-让其他开发人员建立定制的布告板-用户可以随心所欲地添加或删除任何布告板。目前初始的布告板有三类-“目前状况”布告、“气象统计”布告、“天气预报”布告。"><a href="#2-4-此系统必须可扩展-让其他开发人员建立定制的布告板-用户可以随心所欲地添加或删除任何布告板。目前初始的布告板有三类-“目前状况”布告、“气象统计”布告、“天气预报”布告。" class="headerlink" title="2.4 此系统必须可扩展,让其他开发人员建立定制的布告板, 用户可以随心所欲地添加或删除任何布告板。目前初始的布告板有三类:“目前状况”布告、“气象统计”布告、“天气预报”布告。"></a>2.4 此系统必须可扩展,让其他开发人员建立定制的布告板, 用户可以随心所欲地添加或删除任何布告板。目前初始的布告板有三类:“目前状况”布告、“气象统计”布告、“天气预报”布告。</h4><h2 id="3-开始干活"><a href="#3-开始干活" class="headerlink" title="3.开始干活"></a>3.开始干活</h2><h3 id="3-1-先来试一下"><a href="#3-1-先来试一下" class="headerlink" title="3.1 先来试一下"></a>3.1 先来试一下</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WeatherData &#123;</span><br><span class="line">// 实例变量声明    </span><br><span class="line">public void measurementsChanged() &#123;         </span><br><span class="line">  float temp = getTemperature();         </span><br><span class="line">  float humidity = getHumidity();         </span><br><span class="line">  float pressure = getPressure();         </span><br><span class="line">  currentConditionsDisplay.update(temp, humidity, pressure);         </span><br><span class="line">  statisticsDisplay.update(temp, humidity, pressure);         </span><br><span class="line">  forecastDisplay.update(temp, humidity, pressure);     </span><br><span class="line">&#125;     </span><br><span class="line">// 这里是其他WeatherData方法&#125;</span><br></pre></td></tr></table></figure></div>

<p>这是最简单的实现办法，很快就可以将数据完成更新，但是如果从开发原则上考虑，这样的代码太过于粗糙，三个update方法虽然不多，但如果后期再增加布告板，update方法的调用将会一直增加，不论增加还是删除布告板都会修改程序。 这段程序就是针对具体实现编程，而不是针对接口编程，我们需要将相似的地方封装起来。</p>
<h2 id="4-开始我们的观察者模式"><a href="#4-开始我们的观察者模式" class="headerlink" title="4.开始我们的观察者模式"></a>4.开始我们的观察者模式</h2><h3 id="4-1-认识观察者模式"><a href="#4-1-认识观察者模式" class="headerlink" title="4.1 认识观察者模式"></a>4.1 认识观察者模式</h3><p>我们看看报纸和杂志的订阅是怎么回事:</p>
<ol>
<li><p>报社的业务就是出版报纸。</p>
</li>
<li><p>向某家报社订阅报纸,只要他们有新报纸出版,就会给你送来。 只要你是他们的订户,你就会一直收到新报纸。</p>
</li>
<li><p>当你不想再看报纸的时候,取消订阅,他们就不会再送新报纸来。</p>
</li>
<li><p>只要报社还在运营,就会一直有人(或单位)向他们订阅报纸或取消订阅报纸。</p>
</li>
</ol>
<p><strong>定义观察者模式</strong></p>
<blockquote>
<p><strong>观察者模式</strong>：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。 观察者模式定义了一系列对象之间的一对多关系。 当一个对象改变状态，其他依赖者都会收到通知。</p>
</blockquote>
<h3 id="4-2-松耦合的威力"><a href="#4-2-松耦合的威力" class="headerlink" title="4.2 松耦合的威力"></a>4.2 松耦合的威力</h3><p>当两个对象之间松耦合,它们依然可以交互,但是不太清楚彼此的细节。 观察者模式提供了一种对象设计,让主题和观察者之间松耦合。 关于观察者的一切,主题只知道观察者实现了某个接口(也就是Observer接口)。主题不需要知道观察者的具体类是谁、做了些什么或其他任何细节。 任 何 时 候 我 们 都 可 以 增 加 新 的 观 察 者 。 因 为 主 题 唯 一 依 赖 的 东 西 是 一 个 实 现Observer接口的对象列表,所以我们可以随时增加观察者。事实上,在运行时我们可以用新的观察者取代现有的观察者,主题不会受到任何影响。同样的,也可以在任何时候删除某些观察者。 改变主题或观察者其中一方,并不会影响另一方。因为两者是松耦合的,所以只要他们之间的接口仍被遵守,我们就可以自由地改变他们。</p>
<blockquote>
<p>设计原则：为了交互对象之间的松耦合设计而努力</p>
</blockquote>
<h2 id="5-重新开始开发"><a href="#5-重新开始开发" class="headerlink" title="5.重新开始开发"></a>5.重新开始开发</h2><h3 id="5-1-设计气象站"><a href="#5-1-设计气象站" class="headerlink" title="5.1 设计气象站"></a>5.1 设计气象站</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20190926201042442.png"
                     
                ></p>
<h3 id="5-2-实现气象站"><a href="#5-2-实现气象站" class="headerlink" title="5.2 实现气象站"></a>5.2 实现气象站</h3><p>依照前面的类图，开始编写气象站的代码 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20190927155911379.png"
                     
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Subject &#123;</span><br><span class="line">//    用来注册或删除观察者</span><br><span class="line">    public void registerObserver(Observer o);</span><br><span class="line">    public void removeObserver(Observer o);</span><br><span class="line">//    当主题状态改变时，调用此方法通知所有观察者</span><br><span class="line">    public void notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Observer &#123;</span><br><span class="line">//    但气象观测值改变时，主题会把这些状态值当作方法的参数，传递给观察者</span><br><span class="line">    public void update(float temp,float humidity,float pressure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface DisplayElement &#123;</span><br><span class="line">//    DisplayElement接口只包含了一个方法, 也就是display()。当布告板需要显示时, 调用此方法。</span><br><span class="line">    public void display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//WeatherData现在实现了Subject接口。</span><br><span class="line">public class WeatherData implements Subject &#123;</span><br><span class="line"></span><br><span class="line">//    我们加上一个ArrayList来纪录观察者,此ArrayList是在构造器中建立的。</span><br><span class="line">    private ArrayList observers;</span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private float pressure;</span><br><span class="line"></span><br><span class="line">    public WeatherData()&#123;</span><br><span class="line">        observers = new ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    当注册观察者时,我们只要把它加到ArrayList的后面即可。</span><br><span class="line">    public void registerObserver(Observer o) &#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    当观察者想取消注册,我们把它从ArrayList中删除即可。</span><br><span class="line">    public void removeObserver(Observer o) &#123;</span><br><span class="line">        int i = observers.indexOf(o);</span><br><span class="line">        if (i&gt;=0)&#123;</span><br><span class="line">            observers.remove(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    我们把状态告诉每一个观察者。</span><br><span class="line">    public void notifyObservers() &#123;</span><br><span class="line">        for (int i = 0 ;i &lt; observers.size(); i++)&#123;</span><br><span class="line">            Observer observer = (Observer) observers.get(i);</span><br><span class="line">            observer.update(temperature,humidity,pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//    当从气象站得到更新观测值时,我们通知观察者。</span><br><span class="line">    public void measurementsChanged()&#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    设置数据</span><br><span class="line">    public void setMeasurements(float temperature,float humidity,float pressure)&#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//布告板实现了Observer接口,所以可以从WeatherData对象中获得改变</span><br><span class="line">public class CurrentConditionsDisplay implements Observer,DisplayElement&#123;</span><br><span class="line"></span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private Subject weatherData;</span><br><span class="line"></span><br><span class="line">//    构造器需要 weatherData对象(也就是主题)作为注册之用。</span><br><span class="line">    public CurrentConditionsDisplay(Subject weatherData)&#123;</span><br><span class="line">        this.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void display() &#123;</span><br><span class="line">        System.out.println(temperature+&quot;&quot;+humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    当update()被调用时,我们把温度和湿度保存起来, 然后调用display()。</span><br><span class="line">    public void update(float temp, float humidity, float pressure) &#123;</span><br><span class="line"></span><br><span class="line">        this.temperature = temp;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class WeatherStation &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        WeatherData weatherData = new WeatherData();</span><br><span class="line">        CurrentConditionsDisplay currentConditions = new CurrentConditionsDisplay(weatherData);</span><br><span class="line">        weatherData.setMeasurements(80,65,20);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>运行WeatherStation可以得到结果，由此整个代码编写完成。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第九章迭代器与组合模式-读书笔记</title>
    <url>/2020/02/07/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E4%B9%9D%E7%AB%A0%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第九章迭代器与组合模式-读书笔记"><a href="#《HeadFirst设计模式》第九章迭代器与组合模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第九章迭代器与组合模式-读书笔记"></a>《HeadFirst设计模式》第九章迭代器与组合模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="1-菜单的迭代"><a href="#1-菜单的迭代" class="headerlink" title="1. 菜单的迭代"></a>1. 菜单的迭代</h2><h4 id="本例中餐厅和煎饼屋合并了，他们需要在客人点餐的时候，能够把二者的菜单内容都打印出来，但是他们之前分别使用ArrayList和数组来存储菜单内容，这样打印的时候就会有重复，多次调用的问题。"><a href="#本例中餐厅和煎饼屋合并了，他们需要在客人点餐的时候，能够把二者的菜单内容都打印出来，但是他们之前分别使用ArrayList和数组来存储菜单内容，这样打印的时候就会有重复，多次调用的问题。" class="headerlink" title="本例中餐厅和煎饼屋合并了，他们需要在客人点餐的时候，能够把二者的菜单内容都打印出来，但是他们之前分别使用ArrayList和数组来存储菜单内容，这样打印的时候就会有重复，多次调用的问题。"></a>本例中餐厅和煎饼屋合并了，他们需要在客人点餐的时候，能够把二者的菜单内容都打印出来，但是他们之前分别使用ArrayList和数组来存储菜单内容，这样打印的时候就会有重复，多次调用的问题。</h4><p>这是基础菜单</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MenuItem &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    boolean vegetarian;</span><br><span class="line">    double price;</span><br><span class="line">    public MenuItem(String name, String description, boolean vegetarian, double price) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.description = description;</span><br><span class="line">        this.vegetarian = vegetarian;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDescription(String description) &#123;</span><br><span class="line">        this.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean getVegetarian() &#123;</span><br><span class="line">        return vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setVegetarian(boolean vegetarian) &#123;</span><br><span class="line">        this.vegetarian = vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(double price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="这是煎饼屋的菜单"><a href="#这是煎饼屋的菜单" class="headerlink" title="这是煎饼屋的菜单"></a>这是煎饼屋的菜单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PancakeHouseMenu &#123;</span><br><span class="line">    ArrayList menuItems;</span><br><span class="line">    public PancakeHouseMenu() &#123;</span><br><span class="line">        menuItems = new ArrayList();</span><br><span class="line">        addItem(&quot;K&amp;B Pancake Breakfast&quot;,&quot;Pancakes with scrambled eggs , and toast&quot;,</span><br><span class="line">                true,2.99);</span><br><span class="line">    &#125;</span><br><span class="line">    public void addItem(String name, String description, boolean vegetarian, double price)&#123;</span><br><span class="line">        MenuItem menuItem = new MenuItem(name,description,vegetarian,price);</span><br><span class="line">        menuItems.add(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line">    public ArrayList getMenuItems()&#123;</span><br><span class="line">        return menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="这是餐厅的菜单"><a href="#这是餐厅的菜单" class="headerlink" title="这是餐厅的菜单"></a>这是餐厅的菜单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DinerMenu &#123;</span><br><span class="line">    static final int MAX_ITEMS = 6;</span><br><span class="line">    int numberOfItems = 0 ;</span><br><span class="line">    MenuItem[] menuItems;</span><br><span class="line"></span><br><span class="line">    public DinerMenu() &#123;</span><br><span class="line">        menuItems = new MenuItem[MAX_ITEMS];</span><br><span class="line">        addItem(&quot;Vegetarian BLT&quot;,</span><br><span class="line">                &quot;(Fakin&#x27;) BAcon with lettuce &amp; tomato on whole wheat&quot;,true,2.99);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void addItem(String name, String description, boolean vegetarian, double price) &#123;</span><br><span class="line">        MenuItem menuItem = new MenuItem(name,description,vegetarian,price);</span><br><span class="line">        if (numberOfItems &gt;= MAX_ITEMS)&#123;</span><br><span class="line">            System.out.println(&quot;Sorry,meny is full&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            menuItems[numberOfItems]  = menuItem;</span><br><span class="line">            numberOfItems += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MenuItem[] getMenuItems() &#123;</span><br><span class="line">        return menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果想要打印两份菜单，就需要实例化这两个类，然后通过getMenuItems方法获取菜单组，再分别循环打印出来。 若以后再增加菜单，就需要继续这样更改代码，实现新的循环。</p>
</blockquote>
<h2 id="2-封装遍历"><a href="#2-封装遍历" class="headerlink" title="2.封装遍历"></a>2.封装遍历</h2><p>我们新建一个对象，将它称为迭代器，利用它来封装“遍历集合内的每个对象的过程”。 创建统一的迭代器接口</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Iterator &#123;</span><br><span class="line">    boolean hasNext();</span><br><span class="line">    Object next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接下来实现具体的迭代器，首先是餐厅的</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DinnerMenuIterator implements Iterator &#123;</span><br><span class="line">    MenuItem[] menuItems;</span><br><span class="line">    int position = 0;</span><br><span class="line"></span><br><span class="line">    public DinnerMenuIterator(MenuItem[] menuItems) &#123;</span><br><span class="line">        this.menuItems = menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        if (position&gt;=menuItems.length  menuItems[position]==null)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public Object next() &#123;</span><br><span class="line">        MenuItem menuItem = menuItems[position];</span><br><span class="line">        position+=1;</span><br><span class="line">        return menuItem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在DinerMenu中加入迭代器方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Iterator createIterator()&#123;</span><br><span class="line">       return new DinnerMenuIterator(menuItems);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>实现煎饼屋的迭代器对象</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PancakeHouseIterator implements Iterator&#123;</span><br><span class="line">    ArrayList&lt;MenuItem&gt; menuItems;</span><br><span class="line">    int position = 0;</span><br><span class="line"></span><br><span class="line">    public PancakeHouseIterator(ArrayList&lt;MenuItem&gt; menuItems) &#123;</span><br><span class="line">        this.menuItems = menuItems;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        if (position&gt;=menuItems.size()  menuItems.get(position)==null)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public MenuItem next() &#123;</span><br><span class="line">        MenuItem menuItem = menuItems.get(position);</span><br><span class="line">        position+=1;</span><br><span class="line">        return menuItem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在PancakeHouseMenu中加入迭代器方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Iterator createIterator()&#123;</span><br><span class="line">        return new PancakeHouseIterator(menuItems);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>修正女招待的代码 我们需要将迭代器代码整合进女招待中。我们应该摆脱原本冗余的部分。整合的做法相当直接:首先创建一个 printmenuo方法,传入一个迭代器当做此方法的参数,然后对每一个菜单都使用 createlterator()方法来检索迭代器,并将迭代器传入新方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Waitress &#123;</span><br><span class="line">    PancakeHouseMenu pancakeHouseMenu;</span><br><span class="line">    DinerMenu dinerMenu;</span><br><span class="line">    public Waitress(PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu) &#123;</span><br><span class="line">        this.pancakeHouseMenu = pancakeHouseMenu;</span><br><span class="line">        this.dinerMenu = dinerMenu;</span><br><span class="line">    &#125;</span><br><span class="line">    public void printMenu()&#123;</span><br><span class="line">        Iterator pancakeHouseMenuIterator = pancakeHouseMenu.createIterator();</span><br><span class="line">        Iterator dinerMenuIterator = dinerMenu.createIterator();</span><br><span class="line">        printMenu(pancakeHouseMenuIterator);</span><br><span class="line">        printMenu(dinerMenuIterator);</span><br><span class="line">    &#125;</span><br><span class="line">    private void printMenu(Iterator iterator) &#123;</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            MenuItem menuItem = (MenuItem) iterator.next();</span><br><span class="line">            System.out.println(menuItem.getName());</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">            System.out.println(menuItem.getVegetarian());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>到目前为止,我们做了些什么? 首先,我们让厨师们非常快乐。他们可以保持他们自己的实现又可以摆平差别。只要我们给他们这两个迭代器( Pancake Housemenulteratori和Dinermenuiterator),他们只需要加入一个 create Iterator()方法,一切就大功告成了。 这个过程中,我们也帮了我们自己。女招待将会更容易维护和扩展。</p>
</blockquote>
<h4 id="类的变化"><a href="#类的变化" class="headerlink" title="类的变化"></a>类的变化</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191030195935389.png"
                     
                ></p>
<h4 id="进一步完善"><a href="#进一步完善" class="headerlink" title="进一步完善"></a>进一步完善</h4><p>因为ArrayList本身是支持Iterator的，所以直接调用自身的iterator方法即可</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Iterator createIterator()&#123;</span><br><span class="line">        return (Iterator) menuItems.iterator();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>我们只需要给菜单一个共同的接口,然后再稍微改一下女招待。这个Menu接口相当简单:可能退早需要在里面多加入一些方法,例如 ladditem(),但是目前,我们还是让厨师控制他们的菜单,不要把那些方法放在公开接口中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Menu &#123;</span><br><span class="line">    public Iterator createIterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>现在,我们需要让煎饼屋菜单类和餐厂菜单类都实现Menu接口,然后更新女招待的代码如下:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Waitress &#123;</span><br><span class="line">    Menu pancakeHouseMenu;</span><br><span class="line">    Menu dinerMenu;</span><br><span class="line">    public Waitress(Menu pancakeHouseMenu, Menu dinerMenu) &#123;</span><br><span class="line">        this.pancakeHouseMenu = pancakeHouseMenu;</span><br><span class="line">        this.dinerMenu = dinerMenu;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这样我们就实现了针对接口编程，而不是针对实现编程。</p>
<h4 id="完整的类图就出现了，整个项目的结构如下"><a href="#完整的类图就出现了，整个项目的结构如下" class="headerlink" title="完整的类图就出现了，整个项目的结构如下"></a>完整的类图就出现了，整个项目的结构如下</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191030200809061.png"
                     
                ></p>
<h2 id="3-迭代器模式和单一职责"><a href="#3-迭代器模式和单一职责" class="headerlink" title="3.迭代器模式和单一职责"></a>3.迭代器模式和单一职责</h2><blockquote>
<p>迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p>
</blockquote>
<p>这很有意义:这个模式给你提供了一种方法,可以顺序访问一个聚集对象中的元素,而又不用知道内部是如何表示的。你已经在前面的两个菜单实现中看到了这一点。在设计中使用迭代器的影响是明显的:如果你有一个统一的方法访问聚合中的每一个对象,你就可以编写多态的代码和这些聚合搭配,使用如同前面的 printmenu方法一样,只要有了送代器这个方法根本不管菜单项究竟是由数组还是由 Arraylist(或者其他能创建迭代器的东西)来保存的。 另一个对你的设计造成重要影响的,<strong>是迭代器模式把在元素之间游走的责任交给迭代器,而不是聚合对象。</strong> 这不仅让聚合的接口和实现变得更简洁,也可以让聚合更专注在它所应该专注的事情上面(也就是管理对象集合),而不必去理会遍历的事情</p>
<blockquote>
<p>迭代器模式让我们能游走于聚合内的每一个元素,而又不暴露其内部的表示。 把游走的任务放在迭代器上,而不是聚合上。 这样简化了聚合的接和突现,也让责任各得其所。</p>
</blockquote>
<h4 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h4><blockquote>
<p>设计原则：一个类应该只有一个引起变化的原因。</p>
</blockquote>
<p>类的每个责任都有改变的潜在区城。超过个责任,意味着超过个改变的区域。 这个原则告诉我们量让每个类保持单一责任。</p>
<h2 id="4-新加入的咖啡店"><a href="#4-新加入的咖啡店" class="headerlink" title="4.新加入的咖啡店"></a>4.新加入的咖啡店</h2><p>新的需求出现了，咖啡店也加入了这份菜单中，要将它们继续整合在一个框架中。 先看咖啡厅的代码，已经将之前的接口加了进去</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class CafeMenu implements Menu &#123;</span><br><span class="line">    Hashtable menuItems = new Hashtable();</span><br><span class="line"></span><br><span class="line">    public CafeMenu() &#123;</span><br><span class="line">        addItem(&quot;Veggie Burger and Air Fries&quot;,</span><br><span class="line">                &quot;Veggie burger on a whole wheat bun , lettuce,tomato , and fries&quot;,</span><br><span class="line">                true,3.99);</span><br><span class="line">    &#125;</span><br><span class="line">    private void addItem(String name, String description, boolean vegetarian, double price) &#123;</span><br><span class="line">        MenuItem menuItem = new MenuItem(name, description, vegetarian, price);</span><br><span class="line">        menuItems.put(menuItem.getName(),menuItem);</span><br><span class="line">    &#125;</span><br><span class="line">    public Iterator createIterator() &#123;</span><br><span class="line">        return (Iterator) menuItems.values().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>修改女招待的代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Waitress &#123;</span><br><span class="line">    Menu pancakeHouseMenu;</span><br><span class="line">    Menu dinerMenu;</span><br><span class="line">    Menu cafeMenu;</span><br><span class="line">    public Waitress(Menu pancakeHouseMenu, Menu dinerMenu,Menu cafeMenu) &#123;</span><br><span class="line">        this.pancakeHouseMenu = pancakeHouseMenu;</span><br><span class="line">        this.dinerMenu = dinerMenu;</span><br><span class="line">        this.cafeMenu = cafeMenu;</span><br><span class="line">    &#125;</span><br><span class="line">    public void printMenu()&#123;</span><br><span class="line">        Iterator pancakeHouseMenuIterator = pancakeHouseMenu.createIterator();</span><br><span class="line">        Iterator dinerMenuIterator = dinerMenu.createIterator();</span><br><span class="line">        Iterator cafeMenuIterator = cafeMenu.createIterator();</span><br><span class="line">        printMenu(pancakeHouseMenuIterator);</span><br><span class="line">        printMenu(dinerMenuIterator);</span><br><span class="line">        printMenu(cafeMenuIterator);</span><br><span class="line">    &#125;</span><br><span class="line">    private void printMenu(Iterator iterator) &#123;</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            MenuItem menuItem = (MenuItem) iterator.next();</span><br><span class="line">            System.out.println(menuItem.getName());</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">            System.out.println(menuItem.getVegetarian());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样就加入了新的咖啡厅菜单</p>
<h4 id="但是，这样程序中还是调用了三次printMenu方法，而且每次有新的菜单加入，都必须打开女招待加入更多的代码，好像违反了开放-关闭原则。"><a href="#但是，这样程序中还是调用了三次printMenu方法，而且每次有新的菜单加入，都必须打开女招待加入更多的代码，好像违反了开放-关闭原则。" class="headerlink" title="但是，这样程序中还是调用了三次printMenu方法，而且每次有新的菜单加入，都必须打开女招待加入更多的代码，好像违反了开放-关闭原则。"></a>但是，这样程序中还是调用了三次printMenu方法，而且每次有新的菜单加入，都必须打开女招待加入更多的代码，好像违反了开放-关闭原则。</h4><p>这次将这些菜单全都打包进一个 Arraylist,然后取得它的迭代器,遍历每一个菜单。这样再增加菜单也不怕了。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Waitress &#123;</span><br><span class="line">    ArrayList menus;</span><br><span class="line">    public Waitress(ArrayList menus) &#123;</span><br><span class="line">        this.menus = menus;</span><br><span class="line">    &#125;</span><br><span class="line">    public void printMenu()&#123;</span><br><span class="line">        Iterator iterator = (Iterator) menus.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            Menu menu = (Menu) iterator.next();</span><br><span class="line">            printMenu(menu.createIterator());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    private void printMenu(Iterator iterator) &#123;</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            MenuItem menuItem = (MenuItem) iterator.next();</span><br><span class="line">            System.out.println(menuItem.getName());</span><br><span class="line">            System.out.println(menuItem.getDescription());</span><br><span class="line">            System.out.println(menuItem.getVegetarian());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="最后就全部完成了，彻底解耦了。"><a href="#最后就全部完成了，彻底解耦了。" class="headerlink" title="最后就全部完成了，彻底解耦了。"></a>最后就全部完成了，彻底解耦了。</h4><h2 id="5-添加一份子菜单"><a href="#5-添加一份子菜单" class="headerlink" title="5.添加一份子菜单"></a>5.添加一份子菜单</h2><p>我们需要在餐厅菜单中添加一份甜点子菜单，这就需要支持菜单中的菜单了。 如下图，正是我们想要的样子。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191031075616469.png"
                     
                > 但我们不能把甜点菜单赋值给菜单项数组。 这时候就需要重构了 事实是，我们已经到达了一个复杂级别，如果现在不重新设计，就无法容纳未来增加的菜单或子菜单等需求。 所以，在我们的新设计中，真正需要些什么呢?</p>
<ul>
<li>我们需要某种树形结构，可以容纳菜单、子菜 单和菜单项。</li>
<li>我们需要确定能够在每个菜单的各个项之间游: 走，而且至少要像现在用迭代器一-样方便。</li>
<li>我们也需要能够更有弹性地在菜单项之间游走。 比方说，可能只需要遍历甜点菜单，或者可以 遍历餐厅的整个菜单( 包括甜点菜单在内)。</li>
</ul>
<h2 id="6-组合模式"><a href="#6-组合模式" class="headerlink" title="6. 组合模式"></a>6. 组合模式</h2><p>我们要介绍另一个模式解决这个难题。我们并没有放弃迭代器一一它仍然是我们解決方案中的一部分，然而,管理菜单的问题已经到了一个迭代器无法解决的新维度。所以,我们将倒退几步,改用组合模式( Composite Pattern)来实现这一部分。</p>
<blockquote>
<p>组合模式：允许你将对象组合成树形结构来表现“整体&#x2F;部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。</p>
</blockquote>
<p>组合模式让我们能用树形方式创建对象的结,树里面包含了组合以及个别的对象。 使组合结构,我们能把相同的操作应用在组合和个别对象上。换句话说,在大多数情況下, 我们可以忽略对象组合和个别对象之间的差别。 让我们以菜单为例思考这一切:这个模式能够创建个树形结构,在同一个结构中处理嵌套菜单和菜单项组。通过将菜单和项放在相同的结构中,我们创建了个“整体部分”层次结构,即由菜单和菜单项组成的对象树。但是可以将它视为一个整体,像是一个丰富的大菜单。 且有了丰富的大菜单,我们就可以使用这个模式来“统一处理个别对象和组合对象”。这意味着什么? 它意味着,如果我们有了一个树形结构的菜单、子菜单和可能还带有菜单项的子菜单,那么任何一个菜单都是种“组合”。因为它既可以包含其他菜单,也可以包含菜单项。个别对象只是菜单项一一并未持有其他对象。 就像你将看到的,使用一个遵照组合模式的设计,让我们能够写出简单的代码,就能够对整个菜单结构应用相同的操作(例如打印!)。</p>
<h2 id="7-使用组合模式设计菜单"><a href="#7-使用组合模式设计菜单" class="headerlink" title="7.使用组合模式设计菜单"></a>7.使用组合模式设计菜单</h2><p>我们要如何在菜单上应用组合模式呢?一开始,我们需要创建一个组件接口来作为菜单和菜单项的共同接口,让我们能够用统一的做法来处理菜单和菜单项。换句话说,我们可以针对单或菜单项调用相同的方法。</p>
<h4 id="实现菜单组件"><a href="#实现菜单组件" class="headerlink" title="实现菜单组件"></a>实现菜单组件</h4><p>好了,我们要开始编写菜单组件的抽象类;请记住,菜单组件的角色是为叶节点和组合节点提供一个共同的接口。现在你可能想问:“那么菜单组件不就扮演了两个角色吗?”可能是这样的,我们稍后再讨论这一点。然而,目前我们要为这些方法提供默认的实现,这样,如果菜单项(叶节点)或者菜单(组合)不想实现某些方法的时候(例如叶节点不想实现getchild方法),就可以不实现这些方法。</p>
<blockquote>
<p>所有的组件都必须实现Menu Component接口; 然而,叶节点和组合节点的角色不同,所以有些方法可能并不适合某种节点。面对这种情况,有时候,你最好是抛出运行时异常。</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class MenuComponent &#123;</span><br><span class="line">    public void add(MenuComponent menuComponent)&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public void remove(MenuComponent menuComponent)&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public MenuComponent getChild(int i)&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDescription()&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public double getPrice()&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isVegetarian()&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    public void print()&#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="实现菜单项"><a href="#实现菜单项" class="headerlink" title="实现菜单项"></a>实现菜单项</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MenuItem extends MenuComponent &#123;</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line">    boolean vegetarian;</span><br><span class="line">    double price;</span><br><span class="line"></span><br><span class="line">    public MenuItem(String name, String description, boolean vegetarian, double price) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.description = description;</span><br><span class="line">        this.vegetarian = vegetarian;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isVegetarian() &#123;</span><br><span class="line">        return vegetarian;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public double getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line">    public void print()&#123;</span><br><span class="line">        System.out.println(&quot;&quot;+getName());</span><br><span class="line">        System.out.println(getPrice());</span><br><span class="line">        System.out.println(getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="实现组合菜单"><a href="#实现组合菜单" class="headerlink" title="实现组合菜单"></a>实现组合菜单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Menu extends MenuComponent &#123;</span><br><span class="line">    ArrayList menuComponents = new ArrayList();</span><br><span class="line">    String name;</span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    public Menu(String name, String description) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void add(MenuComponent menuComponent) &#123;</span><br><span class="line">        menuComponents.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void remove(MenuComponent menuComponent) &#123;</span><br><span class="line">        menuComponents.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public MenuComponent getChild(int i) &#123;</span><br><span class="line">        return (MenuComponent) menuComponents.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void print() &#123;</span><br><span class="line">//        这里使用递归的方式，将所有的子菜单也打印出来</span><br><span class="line">        System.out.println(getName());</span><br><span class="line">        System.out.println(getDescription());</span><br><span class="line">        Iterator iterator = menuComponents.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            MenuComponent menuComponent = (MenuComponent) iterator.next();</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="最后我们更新女招待的代码，让她来打印菜单"><a href="#最后我们更新女招待的代码，让她来打印菜单" class="headerlink" title="最后我们更新女招待的代码，让她来打印菜单"></a>最后我们更新女招待的代码，让她来打印菜单</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Waitress &#123;</span><br><span class="line">    MenuComponent allMenus;</span><br><span class="line"></span><br><span class="line">    public Waitress(MenuComponent allMenus) &#123;</span><br><span class="line">        this.allMenus = allMenus;</span><br><span class="line">    &#125;</span><br><span class="line">    public void printMent()&#123;</span><br><span class="line">        allMenus.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>女招待的代码变得很简单，她只要调用最顶层的组件，就可以打印整个菜单层次，太棒了。</p>
<h4 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MenuTestDrive &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MenuComponent pancakeHouseMenu = new Menu(&quot;PANCAKE HOUSE MENU&quot;,&quot;Breakfast&quot;);</span><br><span class="line">        MenuComponent dinerMenu = new Menu(&quot;DINER MENU&quot;,&quot;Lunch&quot;);</span><br><span class="line">        MenuComponent cafeMenu = new Menu(&quot;CAFE MENU&quot;,&quot;Dinner&quot;);</span><br><span class="line">        MenuComponent dessertMenu = new Menu(&quot;DESSERT MENU&quot;,&quot;Dessert of course!&quot;);</span><br><span class="line">        MenuComponent allMenus = new Menu(&quot;ALL MENUS&quot;,&quot;ALL menus combined&quot;);</span><br><span class="line">        allMenus.add(pancakeHouseMenu);</span><br><span class="line">        allMenus.add(dessertMenu);</span><br><span class="line">        allMenus.add(dinerMenu);</span><br><span class="line">        dinerMenu.add(new MenuItem(</span><br><span class="line">                &quot;Pasta&quot;,</span><br><span class="line">                &quot;Spaghetti with Marinara Sauce ,and a slice of sourdough bread&quot;,</span><br><span class="line">                true,</span><br><span class="line">                3.89</span><br><span class="line">        ));</span><br><span class="line">        dinerMenu.add(dessertMenu);</span><br><span class="line">        dessertMenu.add(new MenuItem(</span><br><span class="line">                &quot;Apple Pie&quot;,</span><br><span class="line">                &quot;Apple pie with a flakey crust, topped with vanilla ice cream&quot;,</span><br><span class="line">                true,</span><br><span class="line">                1.59</span><br><span class="line">        ));</span><br><span class="line">        Waitress waitress = new Waitress(allMenus);</span><br><span class="line">        waitress.printMent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第八章模版方法模式-读书笔记</title>
    <url>/2019/11/11/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E5%85%AB%E7%AB%A0%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第八章模版方法模式-读书笔记"><a href="#《HeadFirst设计模式》第八章模版方法模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第八章模版方法模式-读书笔记"></a>《HeadFirst设计模式》第八章模版方法模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="1-找相同"><a href="#1-找相同" class="headerlink" title="1. 找相同"></a>1. 找相同</h2><h3 id="1-1在冲泡咖啡和茶的时候有以下两种操作步骤"><a href="#1-1在冲泡咖啡和茶的时候有以下两种操作步骤" class="headerlink" title="1.1在冲泡咖啡和茶的时候有以下两种操作步骤"></a>1.1在冲泡咖啡和茶的时候有以下两种操作步骤</h3><p>咖啡冲泡法</p>
<ol>
<li>把水煮沸</li>
<li>用沸水冲泡咖啡</li>
<li>把咖啡倒进杯子</li>
<li>加糖和牛奶</li>
</ol>
<p>茶冲泡法</p>
<ol>
<li>把水煮沸</li>
<li>用沸水浸泡茶叶</li>
<li>把茶倒进杯子</li>
<li>加柠檬</li>
</ol>
<h3 id="1-2-实现咖啡和茶的冲泡"><a href="#1-2-实现咖啡和茶的冲泡" class="headerlink" title="1.2 实现咖啡和茶的冲泡"></a>1.2 实现咖啡和茶的冲泡</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Coffee &#123;</span><br><span class="line">    void prepareRecipe()&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brewCoffeeGrinds();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addSugarAndMilk();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void boilWater()&#123;</span><br><span class="line">        System.out.println(&quot;把水煮沸&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void brewCoffeeGrinds()&#123;</span><br><span class="line">        System.out.println(&quot;用沸水冲泡咖啡&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void pourInCup()&#123;</span><br><span class="line">        System.out.println(&quot;把咖啡倒进杯子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void addSugarAndMilk()&#123;</span><br><span class="line">        System.out.println(&quot;添加糖和牛奶&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Tea &#123;</span><br><span class="line">    void prepareRecipe()&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        steepTeaBag();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addLemon();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void boilWater()&#123;</span><br><span class="line">        System.out.println(&quot;把水煮沸&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void steepTeaBag()&#123;</span><br><span class="line">        System.out.println(&quot;用沸水冲泡茶&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void pourInCup()&#123;</span><br><span class="line">        System.out.println(&quot;把茶倒进杯子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void addLemon()&#123;</span><br><span class="line">        System.out.println(&quot;添加柠檬&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="2-抽取共同点"><a href="#2-抽取共同点" class="headerlink" title="2. 抽取共同点"></a>2. 抽取共同点</h3><blockquote>
<p>我们将“把水煮沸”，“倒进杯子”抽取出来，浸泡和冲泡都属于泡，而加柠檬和加糖，牛奶，都是添加配料的操作。所以根据这些条件，进行抽取，抽象。</p>
</blockquote>
<h3 id="2-1-类图"><a href="#2-1-类图" class="headerlink" title="2.1 类图"></a>2.1 类图</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191029083253035.png"
                      alt="image-20191029083253035"
                ></p>
<h3 id="2-2-抽取代码"><a href="#2-2-抽取代码" class="headerlink" title="2.2 抽取代码"></a>2.2 抽取代码</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class CaffeineBeverage &#123;</span><br><span class="line">    final void prepareRecipe()&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        addCondimennts();</span><br><span class="line">        pourInCup();</span><br><span class="line">    &#125;</span><br><span class="line">    abstract void brew();</span><br><span class="line">    abstract void addCondimennts();</span><br><span class="line">    public void boilWater()&#123;</span><br><span class="line">        System.out.println(&quot;把水煮沸&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void pourInCup()&#123;</span><br><span class="line">        System.out.println(&quot;倒进杯子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Coffee extends CaffeineBeverage&#123;</span><br><span class="line">    public void brew()&#123;</span><br><span class="line">        System.out.println(&quot;用沸水冲泡咖啡&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void addCondimennts()&#123;</span><br><span class="line">        System.out.println(&quot;添加糖和牛奶&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Tea extends CaffeineBeverage&#123;</span><br><span class="line">    public void brew()&#123;</span><br><span class="line">        System.out.println(&quot;用沸水冲泡茶&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void addCondimennts()&#123;</span><br><span class="line">        System.out.println(&quot;添加柠檬&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-认识模版方法"><a href="#3-认识模版方法" class="headerlink" title="3.认识模版方法"></a>3.认识模版方法</h2><h3 id="3-1模板方法定义了一个算法的步骤-并容许子类为一个或多个步骤提供突现。"><a href="#3-1模板方法定义了一个算法的步骤-并容许子类为一个或多个步骤提供突现。" class="headerlink" title="3.1模板方法定义了一个算法的步骤,并容许子类为一个或多个步骤提供突现。"></a>3.1模板方法定义了一个算法的步骤,并容许子类为一个或多个步骤提供突现。</h3><ol>
<li><p>首先我们需要一个茶对象 Tea mytea&#x3D;new Tea()</p>
</li>
<li><p>然后我们调用这个模板方法 mytea. preparerecipe() 它会依照算法来制作咖啡因饮料</p>
</li>
<li><p>首先,把水煮沸: boilwater()</p>
</li>
<li><p>接下来，我们需要泡茶，这件事情只有子类才知道要怎 么做: brew() ;</p>
</li>
<li><p>现在把茶倒进杯子中;所有的饮料做法都一-样，所以这件事情发生 在超类中: pour InCup() ;</p>
</li>
<li><p>最后，我们加进调料，由于调料是各个饮料独有的，所以由子类来 实现它: addCondiments () ;</p>
</li>
</ol>
<h3 id="3-2-定义模版方法模式"><a href="#3-2-定义模版方法模式" class="headerlink" title="3.2 定义模版方法模式"></a>3.2 定义模版方法模式</h3><blockquote>
<p>模版方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
</blockquote>
<h4 id="模版方法的定义"><a href="#模版方法的定义" class="headerlink" title="模版方法的定义"></a>模版方法的定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191029195131095.png"
                      alt="image-20191029195131095"
                ></p>
<h2 id="4-有趣的钩子"><a href="#4-有趣的钩子" class="headerlink" title="4.有趣的钩子"></a>4.有趣的钩子</h2><blockquote>
<p>钩子是一种被声明在抽象类中的方法,但只有空的或者默认的实现。钩子的存在, 可以让子类有能力对算法的不同点进行挂钩。要不要挂钩,由子类自行决定。</p>
</blockquote>
<p>有了钩子,我能够决定要不要覆盖方法。如果我不提供自己的方法,抽象类会提供一个默认的突现。</p>
<h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class CaffeineBeverage &#123;</span><br><span class="line">    final void prepareRecipe()&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        /**</span><br><span class="line">         * 残们加上了一个小的条件语句,而该条件是否成立,是由一个</span><br><span class="line">         * 具体方法customerWantsCondiments()決定的。</span><br><span class="line">         * 如果顾客“想要”调料,有这时我们才调用addCondimennts()</span><br><span class="line">         */</span><br><span class="line">        if (customerWantsCondiments())&#123;</span><br><span class="line">            addCondimennts();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 残们在这里定义了-个方法, (通常)是空的缺省实现。</span><br><span class="line">     * 这个方法会返回true,不做别的事。</span><br><span class="line">     * 这就是一个钩子,子类可以覆盖这个方法,但不见得一定要这么做。</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    boolean customerWantsCondiments()&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    abstract void brew();</span><br><span class="line">    abstract void addCondimennts();</span><br><span class="line">    public void boilWater()&#123;</span><br><span class="line">        System.out.println(&quot;把水煮沸&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void pourInCup()&#123;</span><br><span class="line">        System.out.println(&quot;倒进杯子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="子类中"><a href="#子类中" class="headerlink" title="子类中"></a>子类中</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Coffee extends CaffeineBeverage&#123;</span><br><span class="line">//    用户输入的值</span><br><span class="line">    private String answer;</span><br><span class="line">    public void brew()&#123;</span><br><span class="line">        System.out.println(&quot;用沸水冲泡咖啡&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void addCondimennts()&#123;</span><br><span class="line">        System.out.println(&quot;添加糖和牛奶&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //覆盖钩子，提供自己的功能</span><br><span class="line">    @Override</span><br><span class="line">    boolean customerWantsCondiments() &#123;</span><br><span class="line">//        让用户根据他们的输入来判断是否需要添加配料</span><br><span class="line">        if (answer.toLowerCase().startsWith(&quot;y&quot;))&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这个例子实在很酷,钩子竟然能够作为条件控制,影响抽象类中的算法流程。</p>
</blockquote>
<h2 id="5-好莱坞原则"><a href="#5-好莱坞原则" class="headerlink" title="5.好莱坞原则"></a>5.好莱坞原则</h2><blockquote>
<p>好莱坞原则：别调用(打电话给)我们,我们会调用(打电话给)你。</p>
</blockquote>
<p>好莱坞原则可以给我们一种防止“依赖腐败”的方法。 当高层组件依赖低层组件,而低层组件又依赖高层组件,而高层组件又依赖边侧组件,而边侧组件又依赖低层组件时, 依赖腐败就发生了。在这种情况下,没有人可以轻易地搞懂系统是如何设计的。 在好莱坞原则之下,我们允许低层组件将自己挂钩到系统上,但是高层组件会决定什么时候和怎样使用这些低层组件。换句话说,高层组件对待低层组件的方式是“别调用我们,我们会调用你”</p>
<h4 id="好莱坞原则和依赖倒置原则之间的关系如何"><a href="#好莱坞原则和依赖倒置原则之间的关系如何" class="headerlink" title="好莱坞原则和依赖倒置原则之间的关系如何?"></a>好莱坞原则和依赖倒置原则之间的关系如何?</h4><p>答依赖倒置原则教我们尽量避免使用具体类,而多使用抽象而好菜坞原则是用在创建框架或组件上的一种技巧,好让低层组件能够被挂钩进计算中,而且又不会让高层组件依赖低层组件。两者的目标都是在于解耦,但是依赖倒置原则更加注重如何在设计中避免依赖。 好菜坞原则教我们一个技巧,创建个有弹性的设计,允许低层结构能够互相操作,而又防止其他类太过依赖它们。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>《HeadFirst设计模式》第五章单件模式-读书笔记</title>
    <url>/2019/10/21/%E3%80%8Aheadfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%8D%95%E4%BB%B6%E6%A8%A1%E5%BC%8F-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《HeadFirst设计模式》第五章单件模式-读书笔记"><a href="#《HeadFirst设计模式》第五章单件模式-读书笔记" class="headerlink" title="《HeadFirst设计模式》第五章单件模式-读书笔记"></a>《HeadFirst设计模式》第五章单件模式-读书笔记</h1><h3 id="案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns"><a href="#案例代码链接：https-github-com-rainweb521-My-tutorial-tree-master-Design-patterns" class="headerlink" title="案例代码链接：https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns"></a>案例代码链接：<a class="link"   href="https://github.com/rainweb521/My-tutorial/tree/master/Design/_patterns" >https://github.com/rainweb521/My-tutorial/tree/master/Design\_patterns <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h2 id="1-什么是单件"><a href="#1-什么是单件" class="headerlink" title="1. 什么是单件"></a>1. 什么是单件</h2><p>在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。 <strong>使用单例模式的好处:</strong></p>
<ul>
<li>对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；</li>
<li>由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。</li>
</ul>
<h2 id="2-spring中的单件模式"><a href="#2-spring中的单件模式" class="headerlink" title="2.spring中的单件模式"></a>2.spring中的单件模式</h2><p><strong>Spring 中 bean 的默认作用域就是 singleton(单例)的。</strong> 除了 singleton 作用域，Spring 中 bean 还有下面几种作用域：</p>
<ul>
<li>prototype : 每次请求都会创建一个新的 bean 实例。</li>
<li>request : 每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。</li>
<li>session : 每一次HTTP请求都会产生一个新的 bean，该bean仅在当前 HTTP session 内有效。</li>
<li>global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话</li>
</ul>
<h2 id="3-经典的单件模式"><a href="#3-经典的单件模式" class="headerlink" title="3.经典的单件模式"></a>3.经典的单件模式</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20191019084155597.png"
                     
                ></p>
<h2 id="4-设计模式"><a href="#4-设计模式" class="headerlink" title="4.设计模式"></a>4.设计模式</h2><blockquote>
<p><strong>单件模式</strong>：确保一个类只有一个实例，并提供一个全局访问点</p>
</blockquote>
<h2 id="5-改善多线程"><a href="#5-改善多线程" class="headerlink" title="5.改善多线程"></a>5.改善多线程</h2><h3 id="5-1使用synchronized"><a href="#5-1使用synchronized" class="headerlink" title="5.1使用synchronized"></a>5.1使用synchronized</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    用getInstance方法实例化对象，并返回这个实例</span><br><span class="line">//    通过增加synchronized关键字到getInstance方法中，我们迫使每个</span><br><span class="line">//    线程在进入这个方法之前，要先等候别的线程离开该方法。也就是说，</span><br><span class="line">//    不会有两个线程可以同时进入这个方法。</span><br><span class="line">    public static synchronized Singleton2 getInstance() &#123;</span><br><span class="line">        if (uniqueInstance==null)&#123;</span><br><span class="line">            uniqueInstance = new Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        return uniqueInstance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>同步会降低性能，只有第一次执行此方法时，才真正需要同步。换句话说,一旦设置好 uniquelnstance变量,就不再需要同步这个方法了。之后每次调用这个方法,同步都是一种累赘。 如果你的应用程序可以接受 getlnstance造成的额外负担,就忘了这件事吧。同步 getinstance的方法既简单又有效。但是你必须知道,同步一个方法可能造成程序执行效率下降100倍。因此,如果将 getinstance的程序使用在频繁运行的地方,你可能就得重新考虑了。</p>
</blockquote>
<h3 id="5-2使用”急切”创建实例，而不用延迟实例化的做法"><a href="#5-2使用”急切”创建实例，而不用延迟实例化的做法" class="headerlink" title="5.2使用”急切”创建实例，而不用延迟实例化的做法"></a>5.2使用”急切”创建实例，而不用延迟实例化的做法</h3><blockquote>
<p>如果应用程序总是创建并使用单件实例,或者在创建和运行时方面的负担不太繁重,你可能想要急切( eagerly)创建此单件,如下所示。</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton3 &#123;</span><br><span class="line"></span><br><span class="line">//    利用一个静态变量来记录Singleton类对唯一实例</span><br><span class="line">//    在静态初始化器中创建单件，这段代码保证了线程安全</span><br><span class="line">    private static Singleton3 uniqueInstance = new Singleton3();</span><br><span class="line"></span><br><span class="line">//    把构造器声明为私有的，只有自Singleton类内才可以调用构造器</span><br><span class="line">    private Singleton3() &#123;&#125;</span><br><span class="line"></span><br><span class="line">//    用getInstance方法实例化对象，并返回这个实例</span><br><span class="line">    public static Singleton3 getInstance() &#123;</span><br><span class="line"></span><br><span class="line">        return uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>利用这个做法,我们依赖JVM在加载这个类时马上创建此唯一的单件实例。JWM保证在任何线程访问 uniquelnstancei静态变量之前,一定先创建此实例。</p>
</blockquote>
<h3 id="5-3“双重检查加锁”-在-getinstance-中少使用同步"><a href="#5-3“双重检查加锁”-在-getinstance-中少使用同步" class="headerlink" title="5.3“双重检查加锁”,在 getinstance()中少使用同步"></a>5.3“双重检查加锁”,在 getinstance()中少使用同步</h3><blockquote>
<p>利用双重检查加锁( double- checked locking),首先检査是否实例已经创建了,如果尚未创建,“オ”进行同步。这样一来,只有第一次会同步,这正是我们想要的。</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton4 &#123;</span><br><span class="line"></span><br><span class="line">//    利用一个静态变量来记录Singleton类对唯一实例</span><br><span class="line">//    volatile并健词确保:当uniqueInstance变量被初始化成Singleton实例时,</span><br><span class="line">//    多个线程正确的处理uniqueInstance变量</span><br><span class="line">    private volatile static Singleton4 uniqueInstance;</span><br><span class="line"></span><br><span class="line">//    把构造器声明为私有的，只有自Singleton类内才可以调用构造器</span><br><span class="line">    private Singleton4() &#123;&#125;</span><br><span class="line"></span><br><span class="line">//    用getInstance方法实例化对象，并返回这个实例</span><br><span class="line">//    检查实例，如果不存在，就进入同步区</span><br><span class="line">    public static Singleton4 getInstance() &#123;</span><br><span class="line">//        只有第一次才彻底执行这里的代码。</span><br><span class="line">        if (uniqueInstance==null)&#123;</span><br><span class="line">            synchronized (Singleton4.class)&#123;</span><br><span class="line">//                进入区块后，再检查一次，如果仍是null，才创建实例</span><br><span class="line">                if (uniqueInstance == null)&#123;</span><br><span class="line">                    uniqueInstance = new Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果性能是你关心的重点,那么这个做法可以帮你大大地减少 getlnstanceo的时间耗费。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>《ZooKeeper’s atomic broadcast protocol: Theory and practice》译文</title>
    <url>/2020/08/30/%E3%80%8Azookeepers-atomic-broadcast-protocol-theory-and-practice%E3%80%8B%E8%AF%91%E6%96%87/</url>
    <content><![CDATA[<h1 id="ZooKeeper’s-atomic-broadcast-protocol-Theory-and-practice"><a href="#ZooKeeper’s-atomic-broadcast-protocol-Theory-and-practice" class="headerlink" title="ZooKeeper’s atomic broadcast protocol: Theory and practice"></a>ZooKeeper’s atomic broadcast protocol: Theory and practice</h1><p>André Medeiros March 20, 2012</p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Apache ZooKeeper是用于云计算的分布式协调服务，可为其他分布式应用程序提供基本的同步和组服务。 核心是原子广播协议，该协议选举一个领导者，同步其他节点，并执行来自领导者更新的广播。 我们研究了该协议的设计，主要介绍了该协议所承诺的性能，并分析了它在Apache中的正式实现。 特别是，详细研究了默认的领导者选举协议。</p>
<h2 id="1-Introduction（简介）"><a href="#1-Introduction（简介）" class="headerlink" title="1 Introduction（简介）"></a>1 Introduction（简介）</h2><p>ZooKeeper [8、10、11、12、19]是目前由雅虎和Apache软件基金会维护的云计算应用程序的分布式容错协调服务。 ，它通过封装分布式协调算法并维护简单的数据库，为其他云计算应用程序提供基础服务。 该服务旨在具有高可用性和高可靠性，因此多个客户端进程依靠它进行引导，存储配置数据，运行进程的状态，组成员关系，实现同步原语和管理故障恢复。 它通过复制来实现可用性和可靠性，并被设计为在以读为主的工作负载中具有良好的性能[12]。 ZooKeeper数据库的完全复制是在一组主机上执行的，即由许多主机服务器组成，常规配置为三到五台，其中一台是集群的领导者（即多数）。 只要集群中的主机数目足够，就可以提供服务。 ZooKeeper的关键组件是Zab，它是ZooKeeper原子广播算法，该协议管理副本的原子更新。 它负责在集群中达成共识选举出领导者，同步副本，管理要广播的更新事务，以及从崩溃状态恢复到有效状态。 我们在本报告中对Zab进行了详细的研究。 本报告的概要如下。 下一部分将介绍原子广播协议的背景知识。 在第3节中，我们介绍Zab的设计，在第4节中，我们对其实现进行分析，最后以第5节中结论结束。本报告的主要参考文献为[12，19]</p>
<h2 id="2-Background（背景）"><a href="#2-Background（背景）" class="headerlink" title="2 Background（背景）"></a>2 Background（背景）</h2><p>广播算法将消息从一个进程（主进程）传输到网络或广播域中的所有其他进程（包括主进程） 原子广播协议是分布式算法，可以保证正确的广播消息或没有其他影响的情况下中止。 它是广泛应用于分布式计算中的一种组通信方式。 原子广播也可以定义为满足完全有序[3]的可靠广播，即满足以下属性[4]</p>
<ul>
<li><p>有效性：如果一个正确的进程广播了一条消息，则所有正确的进程最终都会传递该消息。</p>
</li>
<li><p>统一协议：如果一个进程传递了一条消息，则所有正确的进程最终都会传递该消息。</p>
</li>
<li><p>统一完整性：对于任何消息m，每个进程最多只能发送一次m，并且仅当m的发送者先前已广播了m。</p>
</li>
<li><p>统一完全顺序：如果进程p和q都传递消息m和m’，如果p在m’之前传递了m，则q在m之后传递m’</p>
</li>
</ul>
<p>Paxos [14，15]是用于解决分布式共识的传统协议。 它最初不是为原子广播而设计的，但在Défago等人的论文中展示了[4]如何将共识协议用于原子广播。 还有许多其他原子广播协议，ZooKeeper中考虑使用Paxos，但是它不能满足服务所需的某些关键属性。 这些属性在第2.3节中进行了描述。 Zab旨在满足ZooKeeper的要求，同时保持与Paxos的相似之处。 有关Paxos的更多详细信息，请参见[15]。</p>
<h3 id="2-1-Paxos-and-design-decisions-for-Zab"><a href="#2-1-Paxos-and-design-decisions-for-Zab" class="headerlink" title="2.1 Paxos and design decisions for Zab"></a>2.1 Paxos and design decisions for Zab</h3><p>Zab两个重要需求[12]是处理多个未完成的客户端操作以及有效地从崩溃中恢复。 未完成的事务是已经提出但尚未完成的操作。 对于高性能，ZooKeeper可以处理客户端请求的多个未完成状态更改，并根据FIFO的提交顺序去提交操作，这一点很重要。 此外，系统在领导者崩溃后可以有效恢复也是非常有用的。 原始Paxos协议不支持多个未完成的事务。 Paxos不需要FIFO通道进行通信，因此可以容忍消息丢失和重新排序。 如果两个未完成的事务具有先后顺序依赖性，则Paxos不能具有多个未完成的事务，因为不能保证FIFO顺序。 可以通过将多个事务分批处理到一个提议中，并一次最多允许一个提议来解决此问题，但这会带来性能缺陷。 在Paxos中，从Leader崩溃中恢复时使用事务序列的操作效率不够高[12]。 Zab通过采用事务标识方案对事务进行整体排序来改进此问题。 在该方案下，为了更新新的主进程的应用程序状态，只需要检查每个进程中最高的事务标识符，并仅从接受了具有最高标识符的事务的进程中复制事务。 在Paxos中，序列号不能应用这种方式，因此新的Leader必须对所有先前的序号（在Zab术语中，“已提交事务”）执行Paxos的第一阶段。 ZooKeeper的其他性能要求[19]：</p>
<ul>
<li>低延迟</li>
<li>在突发条件下具有良好的吞吐量，处理写工作负载迅速增加的情况，例如大规模系统重新配置期间。</li>
<li>平稳的故障处理，以便某些非领导节点崩溃时，该服务可以保持正常运行。</li>
</ul>
<h3 id="2-2-Crash-recovery-system-model"><a href="#2-2-Crash-recovery-system-model" class="headerlink" title="2.2 Crash-recovery system model"></a>2.2 Crash-recovery system model</h3><p>ZooKeeper假设崩溃恢复模型为系统模型[12]。 该系统是一组进程<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/image-20200819180140425.png"
                      alt="image-20200819180140425"
                >， 在本报告中也称为对等体，它们通过消息传递进行通信，每个进程都配备有稳定的存储设备，并且可能多次崩溃和恢复。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/image-20200819180645871.png"
                      alt="image-20200819180645871"
                > &gt; 的quorum是子集Q，Q⊆<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/image-20200819180645871.png"
                      alt="image-20200819180645871"
                > &#x2F;&gt; &gt;并且<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/assets/image-20200819181129394.png"
                      alt="image-20200819181129394"
                > &gt;的半数。任何两个quorum都有一个非空的交集。每一个进程都有两个状态, up和down。进程的down状态是从崩溃的时间点到他恢复的时间点; up状态是从恢复的时间点到*。</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>《Remus: High Availability via Asychronous Virtual Machine Replication》译文</title>
    <url>/2020/08/30/%E3%80%8Aremus-high-availability-via-asychronous-virtual-machine-replication%E3%80%8B%E8%AF%91%E6%96%87/</url>
    <content><![CDATA[<p>通过异步虚拟机复制实现高可用性 涉及资料 推测性执行的概念：<a class="link"   href="https://zhuanlan.zhihu.com/p/33145828" >https://zhuanlan.zhihu.com/p/33145828 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Xen的概念：<a class="link"   href="https://baike.baidu.com/item/Xen" >https://baike.baidu.com/item/Xen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 系统脏页及页缓存的概念<a class="link"   href="https://juejin.im/post/5d59638c518825291e3dd77f" >https://juejin.im/post/5d59638c518825291e3dd77f <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Hypervisor<a class="link"   href="https://zhuanlan.zhihu.com/p/34320333" >https://zhuanlan.zhihu.com/p/34320333 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 摘要 让应用程序在硬件故障中幸存下来是一项代价很高的工作，通常涉重新设计软件以包含复杂的恢复逻辑以及部署专用硬件。这对提高大型或传统应用程序的可靠性构成了严重的障碍。我们将描述一种通用且透明的高可用性服务的架构，该架构可以保护现有软件，并且不需要修改，防止其运行所在的物理计算机发生故障。 Remus提供了极高的容错能力，当出现故障时，运行中的系统可以无缝切换到备用物理主机上执行，而停机时间只有几秒钟，同时完全保留了网络连接等其他状态连接。我们的方法将受保护的软件封装在虚拟机中，以每秒四十次的频率异步将更改的状态传播到备份主机，并使用推测性执行，使活动的虚拟机状态稍微领先于复制的虚拟机状态。 1 Introduction 介绍 高度可用的系统是非常宽泛的概念。 但是却很难实现可靠性，尤其在资源有限的系统中。 不幸的是，高可用性很难实现–它要求系统由冗余组件构成，这些组件必须能够在发生故障时进行维护并切换到备份。 旨在保护现代服务器的商业高可用性系统通常使用专用硬件，定制软件或同时使用两者（例如[12]）。 在每种情况下，透明地解决故障的能力既复杂又昂贵，足以阻止在普通服务器上进行部署 本文介绍了Remus，它是一种在普通硬件上提供与操作系统和应用序无关的高可用性的软件系统。我们的方法利用虚拟化功能，实现在物理主机之间热迁移正在运行的虚拟机，并扩展了该技术以非常高的频率（每25ms间隔两次）复制整个正在运行的虚拟机实例的快照。使用此技术，我们的系统将虚拟机的执行离散化为一系列的快照。在复制完成虚拟机系统状态之前，不会释放外部输出，特别是传输的网络数据包。 虚拟化可以创建正在运行的计算机的副本，但不能保证该过程的率。同步地传输每一次状态的改变是不现实的，因为复制操作会占用网络设备大量的带宽。不如让一个主机以推测方式执行，然后设置检查点并异步复制其状态。在提交检查点之前，系统状态不会在外部可见，我们通过在过去数十毫秒内有效地运行系统来实现高速复制性能。 本文的贡献是实用的。整个系统复制是一种众所周知的提供高可用的方法。但是，通常认为它比仅复制相关数据的特定于应用程序的检查点技术要昂贵得多[15]。我们的方法可用于将HA作为虚拟机的平台服务“推向大众”。尽管它在操作上受到硬件和软件的限制，但该系统可以提供和商用解决方案同样甚至更好的保护。许多现有系统仅对持久性存储做镜像，要求应用程序从崩溃一致的持久状态中执行恢复。相比之下，Remus确保无论主节点何时发生故障，都不会丢失任何外部可见状态。 1.1 Goals 目标 Remus旨在使中低端系统获得高可用性。通过简化设置并允许将多服务器整合到较少的物理主机上，虚拟化使这些系统更受欢迎。但是，合并带来好处的同时增加了出现硬件故障的可能性。 Remus通过将高可用性作为虚拟化平台本身提供的服务进行商品化来解决，为虚拟机的管理员提供了检测风险的工具。 Remus的设计基于以下总体目标： Generality 通用性 定制一个应用程序以支持高可用性可能会非常贵，更不用说组织可能依赖的各种软件。为了解决此问题，应将高可用性作为底层服务提供，并以通用的机制出现，而不关注受保护的应用程序或运行该应用程序的硬件如何。 Transparency 透明度 在许多环境中，可能无法修改操作系统和应程序。为了尽可能支持广泛的应用程序，高可用性不应要求修改OS或应用程序代码以支持诸如故障检测或状态恢复之类的功能。 Seamless failure recovery 无缝故障恢复 在单主机故障的情况下任何外部可见状态都不应丢失。此外，故障恢复应该足够快地进行，从外部用户的角度来看只是暂时的数据包丢失。已建立的TCP连接不应丢失或重置。 这些是崇高难以实现的目标，需要提供远远超出普通HA系统所提供保护水平，普通HA系统基于异步存储镜像，随后是特定于某些应用程序的恢复代码。此外，想要在不修改虚拟机内代码的情况下实现这种可用性级别，需要采用非常粗粒度的方法来解决此问题。该系统的最终最终目标是实现这些目标，同时提供可部署的性能水平，即使面对当今服务器硬件上常见的SMP硬件也是如此。 1.2 途径 Remus运行以active-passive模式运行的成对的服务器中。为了克服该方法有关的困难，我们采用了三种主要技术。 首先，我们基于虚拟化的基础架构来构建我们的系统，以实现整个系统的复制。 第二我们通过推测执行来提高系统性能，该执行将外部输出与同步点解耦。这允许主服务器保持生产效率，而与复制服务器的同步是异步执行的。图1给出了Remus中基本的操作阶段。 图1:remus中的推测执行和异步操作1:检查点，2:传输，3:同步，4:发布 基于VM的整个系统复制 系统管理程序已用于构建HA系统。在这项作中，虚拟化用于锁定步骤地运行一对系统，并且添加了额外的支持以确保一对物理主机上的虚拟机遵循确定的执行路径，为主虚拟机和备份虚拟机注入相同的外部事件，以使其状态相同。强制执行这种操作会出现两个问题。首先，要求它是高度稳定的结构，从而系统对正在执行的指令集和外部事件有相同的结果。其次，在多处理器系统中应用时，这会导致不可接受的开销，在多处理器系统中，必须共享处理器之间的内存来实现精确处理[8]。 推测执行 复制可以通过复制系统状态或确定性重新执行输入来实现我们认为后者对于实时操作是不切实际的，尤其是在多处理器环境中。因此，Remus不会尝试使计算确定化，如果将系统回滚到该检查点并重放其输入，则存在很大的可能性，即系统在给定检查点之后产生的输出会有所不同。但是，仅当主输出在外部可见时，才需要将副本的状态与主数据库同步。可以让输出缓冲到更合适的时间，而不是让正常的输出流必须何时发生同步，在同步点之前进行推测性的计算。这样可以在输出延迟和运行时间之间做出有利的权衡，其程度可以由管理员控制。 异步复制 在主服务器上缓冲外部输出，使复制可以异步执行。 主务器可以在捕获其计算机状态的那一刻后恢复执行，而无需等待远程备份端的确认。 将正常执行与复制过程重叠会产生实质性的性能优势。 即使间隔数十毫秒的检查点时，也可以进行高效的操作。 2 设计和实现 图2显示了我们系统的高级视图。首先，将要保护的机器封装在虚拟机中。我们的实现基于Xen虚拟机监视器[2]，并扩展了Xen对实时热迁移的支持，以提供细粒度的检查点。我们一部分检查点支持的代码已并入Xen源代码。 Remus通过对主服务器频繁做检查点，并传播到备份物理主机来实现高可用性。在备份主机上虚拟机映像驻留在内存中，如果检测到主服务器系统的故障，则可以立即开始执行。由于备份仅与主数据库定期保持一致，因此必须缓冲所有网络输出，直到备份上的状态同步为止。当收到完整，一致的主机映像后，此缓冲区才释放给外部客户端。检查点，缓冲区和释放周期非常频繁，我们以高达每秒40次的频率提供基准测试结果，代表每25毫秒包含网络和磁盘状态的整个机器检查点。 与传输的网络传输不同，磁盘状态在外部不可见。但是，必须将其为完整且一致的快照传播到远程主机。为了对磁盘进行复制，所有对主磁盘的写操作均会异步传输到备份主机上，然后将其缓存在RAM中，直到相应的内存检查点到达。此时，将向主数据库确认完整的检查点，然后释放出站网络数据，并将缓冲的磁盘写操作写入备份磁盘。 值得强调的是，虚拟机直到发生故障才真正在备份主机上执行。它是充当活动虚拟机检查点的容器。这会消耗相对较少的备份主机资源，从而可以以N对1的配置同时保护在多个物理主机上运行的主服务器。这样的配置为管理员提供了高度的自由度，可以在冗余度和资源成本之间取得平衡。 图2:remus:高层体系结构 2.1 故障模型 Remus提供以下特性：</p>
<ol>
<li><p>任何单个主机的故障都是可以容忍的。</p>
</li>
<li><p>如果主要主机和备用主机同时发生故障，则受保护系统的数据将处于崩溃一致状态。</p>
</li>
<li><p>在系统状态已提交给副本之前，不会有外部可见的输出</p>
</li>
</ol>
<p>我们的目标是为单个物理主机的故障停止，提供完全透明的恢复。该系统的引人注目的方面是可以轻松地将高可用性改装到在商用硬件上运行的现有软件上。它使用一对商用主机通过冗余千兆位以太网连接，并且可以从任何组件的故障中恢复。通过结合块设备的状态复制协议，它避免了需要昂贵，共享的网络附加存储来存储磁盘映像。 我们的目标不是从软件错误或不间断故障中恢复。正如在[5]中观察到的那样，remus可以提供完整的系统状态捕获和复制，因此会将应用程序错误传播到备份中。这是提供透明度和通用性的必要结果。 我们的故障模型与商用HA产品相同，它们为当今的虚拟机器提供了保护[31，30]。但是，这些产品提供的保护程度远小于Remus提供的保护程度：现有的商业产品通过简单地从崩溃一致的磁盘状态重新启动另一台主机上的虚拟机，从而对物理主机的故障做出了响应。我们的方法可以在与实时迁移类似的时间范围内避免故障，并使虚拟机运行并保持网络连接完整。不会丢失外部暴露状态，也不会损坏磁盘。 2.2 管道检查点 每秒多次对运行中的虚拟机进行检查点，对主机系统提出了极高的要求。 Remus通过流水化检查点操作来解决此问题。我们使用epoch-based的系统，在该系统中，活动的虚拟机受到短暂的暂停，在执行过程中自动捕获更改的状态，并且在状态已传播到备份时释放外部输出。再次参考图1，该过程可以分为四个阶段： 每个时期暂停一次正在运行的虚拟机，并将任何已更改的状态复制到缓冲区中。这个过程实际上是实时迁移的“stop-and-copy”阶段，但是正如本节稍后所述，它已经针对高频检查点进行了优化。将状态更改保留在缓冲区中后，虚拟机便会继续执行。 缓冲状态被传输并存储在备份主机的内存中。 备份主机收到完整的状态，检查点就会被告知主数据库。 释放缓冲的网络输出。 这种方法的结果是在检查点边界的执行有效地离散化了。备份触发对完成的检查点的确认，将释放已缓冲的网络输出，是什么呢？并表示进入新的过渡过程。 2.3 Memory and CPU 在Xen现有的机器上实现了检查点，以进行实时迁移[6]。实时迁移是一种技术，通过该技术可以将虚拟机重新定位到另一台物理主机，而只需要短暂的中断服务即可。为此，将内存复制到备份主机，同时虚拟机继续在旧主机运行。在实时迁移过程中，将拦截对内存的写入，并且将脏页整顿复制到备份主机。在指定的时间间隔后，或者由于虚拟机写入内存的速度至少达到迁移过程中复制的速度而未进行任何向前处理时，虚拟机将被挂起，剩余的脏内存将被复制出去以及当前的CPU状态。此时，备份主机上的镜像被激活。总停机时间取决于虚拟机挂起时要复制的剩余内存量，但通常不超过100毫秒。总迁移时间是客户机使用的内存量及其可写工作集有关。 Xen提供了使用称为影子页表（shadow page table）的技术来跟踪虚拟机对内存的写入的情况。启用此操作模式后，VMM会维护虚拟机页表的私有（“影子”）版本，并将其公开给硬件MMU。页面保护用于捕获虚拟机对其页面表内部版本的访问，从而允许虚拟机管理程序跟踪更新，并在适当时传播到影子版本 对于实时迁移，此技术已扩展为透明地（对虚拟机而言）将所有虚拟机内存标记为只读。然后，管理程序可以捕获虚拟机对内存的所有写操作，并维护自上一轮以来已被弄脏的页面映射。每一轮迁移过程都会自动读取并重置此映射，而迭代迁移过程将逐个追踪脏页面，直到不再产生为止。如上所述，实时迁移过程最终会暂停虚拟机的执行，并进入最后的”stop-and-copy”阶段，在此回传所有剩余的页面，并在目标主机上恢复执行。 Remus将实现检查点作为实时迁移的最后阶段来重复执行：每个时期，虚拟机都将暂停，而更改的内存和CPU状态将被复制到缓冲区。然后，虚拟机在当前主机上恢复执行而不是在目标主机。确保始终在远程位置提供一致的映像，需要对迁移过程进行一些修改，并提供足够的性能。这些在下面描述。 迁移增强</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">在实时迁移中，虚拟机内存会迭代复制好几回，并且可能会消耗几分钟的执行时间。 而由stop-and-copy造成的服务中断造成的损耗则不是很大。 但在捕获频繁的虚拟机检查点时不是这种情况：每个检查点只是迁移的最后进入stop-and-copy阶段，因此这代表了减少检查点开销的优化的关键点。 对Xen检查点代码的检查显示，虚拟机处于挂起状态时所花费的大部分时间都浪费在了调度上，这主要是该守护程序，在虚拟机和domain 0 之间提供管理通信的xenstore守护程序的实现效率低下。</span><br></pre></td></tr></table></figure></div>

<p>Remus通过两种方式优化检查点： 首先，它减少了挂起和恢复虚拟机所需的进程间请求的数量。 其次，它将xenstore完全从挂起&#x2F;恢复过程中删除。 在原始代码中，当迁移过程希望挂起虚拟机时，它向虚拟机管理守护程序xend发送了一条消息。 Xend依次向xenstore写了一条消息，该消息通过事件通道（虚拟中断）警告虚拟机应暂停执行。虚拟机在挂起之前的最后一个动作是进行hyper call，hypercall对域进行了调度，并导致Xen向xenstore发送通知，然后xenstore发送了一个中断到xend，最终将控制权返回给迁移过程。这个复杂的过程要花费的时间无法确定-典型的测量延迟为30到40毫秒，但是在某些情况下，我们看到的延迟长达500毫秒。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remus优化的方案通过在虚拟机中创建一个专门用于接收暂停请求的事件通道来简化此过程，迁移过程可以直接调用该通道。此外，提供了新的hypercall，以允许进程注册事件通道以进行回调，以通知其虚拟机挂起完成。总之，这两个通知机制使将虚拟机挂起所需的时间减少到大约100微秒-与以前的实现相比提高了两个或多个数量级。</span><br><span class="line"></span><br><span class="line">除了这些交互方式更改之外，我们还提高了内存复制过程的效率。首先，我们快速从内存扫描中筛选出干净的页面，因为在高频率设置检查点下，大多数内存是不变的。其次，我们在虚拟机开始时将虚拟机的整个物理内存映射到复制过程中，而不是在每个时期都映射和取消映射脏页面-我们发现映射foreign pages与复制它们大约需要相同的时间</span><br></pre></td></tr></table></figure></div>

<p>检查点支持</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Xen中提供检查点支持需要对现有的“suspend-to-disk”和实时迁移代码两项进行更改。</span><br></pre></td></tr></table></figure></div>

<p>首先，支持对虚拟机暂停后继续执行。 Xen以前不允许“活动检查点”，而是在将其状态写出后销毁了VM。 其次，将挂起过程由单次变为重复执行，挂起程序转换为守护进程。 这允许在第一个之后的检查点回合仅复制新产生的脏内存。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">支持恢复需要两个基本更改。 第一个是新的hypercall，用于将域再次标记为可调度的（Xen从调度考虑中删除了挂起的域，因为以前它们总是在复制其状态后被销毁）。 为了在xenstore中重新监视，必须执行类似的操作</span><br></pre></td></tr></table></figure></div>

<p>异步传输</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了允许虚拟机尽快恢复操作，需要对迁移过程进行修改，将脏的页面复制到暂存缓冲区，而不是在域暂停时将它们直接传递到网络。 这导致吞吐量显着增加：第3.3节中讨论的内核构建基准测试所需的时间在每秒20个检查点时减少了大约10％。</span><br></pre></td></tr></table></figure></div>

<p>外部修改</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">如上所述，Xen中的准虚拟客户机包含一个挂起处理程序，该处理程序会在收到挂起请求后清理设备状态。 除了本节前面所述的通知优化之外，还对挂起请求处理程序进行了修改，以减少在挂起之前完成的工作量。 在原始代码中，挂起要求断开所有设备的连接，并拔出除CPU之外所有的电源。 在修改之后这项工作被推迟到在另一台主机上重新运行之后执行， 这些修改在3.1.0版的Xen中可用。</span><br><span class="line"></span><br><span class="line">这些更改并不能提高正确性，但是它们确实可以显着提高检查点的性能，并且涉及对虚拟机内核的非常底层的修改。 在半虚拟暂挂处理程序中，总更改少于100行代码。 如前所述，对于非半虚拟化的虚拟机，无需进行这些修改。</span><br></pre></td></tr></table></figure></div>

<p>2.4 网络缓冲 不能指望大多数网络提供可靠的数据。因此，网络应用程序必须接受数据包丢失、复制和重新排序，或者使用高级协议，如提供服务保证的TCP。这一事实大大简化了网络缓冲问题：传输的数据包不需要复制，因为它们的丢失将显示为暂时的网络故障，并且不会影响受保护状态的正确性。 但是，排队等待传输的数据包要等到生成它们的检查点状态提交给备份为止。 如果主节点失败，则这些生成的数据包也会丢失。 图3描述了我们防止推测性网络状态释放的机制。 入站流量会立即传递到受保护的主机，但是将自上一个检查点以来生成的出站数据包将排队，直到当前状态已被检查点备份且站点已确认该检查点为止。 我们已将此缓冲区作为一种Linux排队规则来实现，该规则适用于域中的虚拟机的网络设备，该域响应两个RT-netlink消息。 在允许访客在检查点之后恢复执行之前，网络缓冲区会收到CHECKPOINT消息，这会导致它在出站队列中插入一个障碍，防止释放任何后续数据包，直到收到相应的重新发布消息为止。 备份确认了访客检查点后，缓冲区将收到RELEASE消息，此后它开始将流量从队列中释放 在此实现中有两个小问题。首先是在linux中，排队规则只对传出流量起作用。在Xen下，访客网络接口由访客中的前端设备和域0中的相应后端设备组成。来自访客的出站流量在域0中的后端设备上显示为入站流量。因此，为了将流量排队，我们通过称为中间排队设备[16]的特殊设备路由入站流量，将入站流量转换为出站流量。该模块旨在通过iptables [27]在IP层工作，但将其扩展到在我们用于实现VM网络访问的桥接层工作并不困难。 第二点起因是Xen虚拟网络设备的实现。为了提高性能，出站网络流量使用的内存不会在来宾域和域0之间复制，而是共享。但是，一次只能共享少量页面。如果消息仅在短时间内在来宾和域0之间传输，则此限制是不可能的。不幸的是，网络输出缓冲区可能导致消息在运行中持续大量时间，这导致用户网络设备在发送了非常少量的流量之后被阻塞。因此，在对消息进行排队时，我们首先将它们复制到本地内存中，然后将本地映射释放到共享数据 2.5磁盘缓冲 磁盘所面临的挑战与网络接口所面临的挑战截然不同，主要是因为磁盘可以提供更强大的可靠性保证。尤其是，当磁盘已确认写入后，即使在确认后立即发生电源故障，应用程序（或文件系统）也有望恢复该数据。尽管Remus旨在从单个主机故障中恢复，但即使两个主机都发生故障，它也必须保持崩溃的一致性。 此外，提供通用系统的目的是，排除使用为HA应用程序设计的昂贵的镜像存储硬件。因此，Remus会在备份主机上维护活动VM磁盘的完整镜像。在使用保护系统之前，主磁盘上磁盘的当前状态会镜像到备份主机。一旦采取了保护措施，对持久性存储的写操作将被跟踪和检查，类似于对内存的更新。图4概述了磁盘复制机制 与第2.3节中描述的内存复制子系统一样，从活动虚拟机写入磁盘的操作被视为直写（write-through）：它们将立即写入于主磁盘映像，并异步镜像到备份虚拟机上的内存缓冲区。这种方法提供了两个直接的好处：首先，它确保活动磁盘映像始终保持崩溃一致。如果两个主机均发生故障，则主磁盘将保存发生故障时外部可见虚拟机的崩溃状态（如果主虚拟机未发生故障，或者备份主机在激活之前也失败，则外部可见状态驻留在主虚拟机上，否则（主虚拟机发生故障，而备注主机未发生故障）它就位于备份主机中）。其次，直接写入磁盘可准确说明物理设备的延时和吞吐量特性。这种显而易见的特性具有相当大的价值：准确地磁盘响应能力是一个微妙的问题，因为我们自己经历了较早版本的磁盘缓冲区，该缓冲区将写请求保存在主虚拟机的内存中，直到提交检查点为止。这种方法要么缓冲写操作，要么不足以表示将数据提交到磁盘所需的时间，并且使虚拟机在执行过程中过于频繁，要么保守地高估了写延迟，从而导致性能损失。模型化磁盘访问时间非常困难[28]，我们的实现是通过保留从磁盘到其客户端虚拟机的直接反馈来避免该问题。 （在备份主机在接收到主虚拟机传输的最新检查点之前，不可以修改当前备份主机磁盘上已存储的旧检查点，若此时备份主机发生故障，最新检查点的传输将失败，而磁盘中的检查点也因为发生修改而不具有完整性） 在备份确认已收到检查点时，磁盘更新将完全存放在内存中。在接收到整个检查点之前，不得更改磁盘状态，因为这将阻碍备份回滚到最新的完整检查点。一旦确认了检查点，就可以将磁盘请求缓冲区应用于磁盘。 如果主虚拟机发生故障（刚好在传输完检查点之后发生故障），备份主机将等到所有缓冲区内容均已写入磁盘后再恢复执行（可以让外部去访问）。尽管备份可以使用请求缓冲区作为物理磁盘上的覆盖立即开始执行，但这会违反呈现给受保护虚拟机的磁盘语义：如果备份在激活后失败，但数据还没有完全刷新到磁盘，则其启动-磁盘状态可能不是崩溃一致的。 在任何给定时间，Remus管理的两个磁盘镜像中只有一个实际上是有效的（因为只有一台虚拟机接收外部访问）。从多主机崩溃中恢复时，这一点至关重要。通过在备份磁盘上使用激活记录（activation record）可以实现此属性，该记录是在将最新的磁盘缓冲区完全刷新到磁盘之后且在备份虚拟机开始执行之前写入的。从多个主机故障中恢复时，此记录可用于标识磁盘的有效，和崩溃一致的版本。 磁盘缓冲区被实现为Xen的block tap模块[32]。区块分接头是一种设备，它允许特权域（privileged domain）中的进程将其自身有效地置于提供给客户虚拟机的前端访问磁盘设备和实际为请求提供服务的后端处理设备之间。缓冲模块记录来自受保护虚拟机的磁盘写请求，并将它们镜像到备份上的相应模块，该模块执行上述检查点协议，然后在主虚拟机出现故障时，在执行备份之前从磁盘请求路径中删除自身。 2.6检测失败 Remus的目标是可以使用普通硬件，以常规和透明的方式提供高可用性，而无需修改受保护的应用程序。当前，我们使用直接集成在检查点流中的简单故障检测器：备份对提交请求的响应超时，主虚拟机将认为备份已崩溃并禁用保护。同样，从主数据库传输新检查点的超时，将导致备份虚拟机假设主虚拟机已崩溃，并从最近的检查点恢复执行。 系统配置为使用一对绑定的网络接口，并且两个物理主机使用保护NIC上的一对以太网交叉电缆（或独立的交换机）进行连接。如果这两个网络路径均失败，则Remus当前不会提供隔离执行的机制。解决分区的传统技术（即仲裁协议）很难在两个主机配置中应用。我们认为，在这种情况下，我们已经将Remus设计为商品硬件所能达到的极限。 3 评估 设计Remus的主要目的是使高可用性具有足够的通用性和透明性，以便可以将其部署在现在的商品硬件上。在本节中，我们将描述我们的方法针对各种不同的工作负载所产生的消耗，以便回答两个问题：（1）该系统是否可实际部署？ （2）哪种工作负载最适合我们的方法？ 在评估性能影响之前，我们必须确定系统正常运行。我们可以实现通过在复制协议的每个阶段注入网络故障，同时在受保护的系统上增加大量磁盘，网络和CPU负载。我们发现，在每种情况下，备份将在大约一秒钟内接替丢失的主数据库，并保留所有外部可见的状态，包括活动的网络连接。然后，我们评估非常不同的工作负载上的系统性能开销。我们发现，诸如内核编译之类的通用任务在每秒检查点20次时会导致大约50％的性能损失，而以SPECweb表示的依赖网络的工作负载则以大约四分之一以上的本机速度运行。这种情况下的额外开销主要是由于网络接口上的输出提交延迟。根据此分析，我们得出结论，尽管设计Remus的主要目的是使高可用性具有足够的通用性和透明性，以便可以将其部署在当今的商品硬件上。在本节中，我们将刻画我们的方法针对各种不同的工作负载所产生的间接费用，以便两个回答两个问题：（1）该系统是否可实际部署？ （2）哪种工作量最适合我们的方法？在评估性能影响之前，我们必须确定系统正常运行。我们可以实现通过在复制协议的每个阶段注入网络故障，同时在受保护的系统上增加大量磁盘，网络和CPU的负载。我们发现，在每种情况下，备份将在大约一秒钟内接替丢失的主虚拟机，并保留所有外部可见的状态，包括活动的网络连接。然后，我们评估不同的工作负载上的系统性能开销。我们发现，诸如内核编译之类的通用任务在每秒检查点20次时会导致大约50％的性能损失，而以SPECweb表示的依赖网络的工作负载则以大约四分之一以上的本机速度运行。这种情况下的额外开销主要是由于网络接口上的输出提交延迟。 基于此分析，我们得出的结论是，尽管Remus在状态复制方面很有效，但它的确引入了严重的网络延迟，特别是对于在内存写入比较差的局部性应用程序。因此，对网络延迟非常敏感的应用程序可能不太适合这种类型的高可用性服务（尽管有一些优化有可能显著减少网络延迟，我们将在基准测试结果之后更详细地讨论其中一些优化），根据基准测试结果获取更多详细信息。我们进行评估时比较保守，使用基准驱动的工作负载，这比典型的虚拟化系统预期的要密集得多。由于系统负载是可变的，因此这种环境带来的合并机会特别有吸引力。 3.1测试环境 除非另有说明，否则所有测试均在IBM eS-erver x306服务器上运行，该服务器由一个启用超线程的3.2 GHz Pentium 4核处理器，1 GB RAM，3个Intel e1000 GbE网络接口和80 GB SATA硬盘驱动器组成。 系统管理程序是Xen 3.1.2，按第2.3节中的描述，修改所有虚拟机的操作系统为Xen 3.1.2，linux 2.6.18发行版本。 受保护的VM分配了512 MB的总RAM。 为了最大程度地减少来自VMM的调度影响，将 domain 0的VCPU固定到第一个超线程。 一个物理网络接口桥接到guest虚拟接口并用于应用程序流量，一个物理网络接口用于管理访问，最后一个用于复制（我们没有绑定用于复制的接口，这与我们测试无关）。 虚拟磁盘由SATA驱动器上的磁盘映像提供，并使用tapdisk AIO驱动程序导出到客户机。 3.2 正确性验证 如第2.2节中所述，Remus的复制协议在四个不同的阶段运行：（1）检查点更改状态并增加网络和磁盘请求流的时期，（2）复制系统状态，（3）完整的内存检查点和 接收到相应的磁盘请求集，从备份发送检查点确认（4）收到确认后，释放在上一个时期排队的出站网络数据包。 为了验证我们的系统是否按预期工作，我们在每个阶段测试了故意导致的网络故障。 对于每个测试，受保护系统都会执行内核编译过程，以生成磁盘，内存和CPU负载。 为了验证网络缓冲区，我们同时执行了一个图形密集型X11客户端（glxgears），该客户端连接到外部X11服务器。 Remus已配置为接受检查点每25毫秒一次。 每个单独的测试重复两次。 在每个故障点，备份都成功接管了受保护系统的执行，而在备份检测到故障并激活复制的系统时，只有微小的网络延迟（大约一秒钟）才被注意到。 glxgears客户端在短暂暂停后继续运行，并且内核编译任务继续成功完成。 然后，我们正常关闭虚拟机并在备份磁盘映像上执行强制文件系统检查，该报告未报告任何不一致情况。 3.3 基准 在以下部分中，我们使用各种宏基准来评估系统的性能，这些宏基准可以代表一系列实际混合的工作负载。我们运行的主要工作负载是内核编译测试，SPECweb2005基准测试和Postmark磁盘基准测试。内核编译是一个平衡的工作负载，它会强调虚拟内存系统，磁盘和CPU，SPECweb主要强调网络性能和内存吞吐量，而Postmark则专注于磁盘性能。 为了更好地理解以下度量，我们执行了一个微基准测试，用于测量复制来宾状态所花费的时间（来宾被暂停时）以及将数据发送到备份所花费的时间（相对于自上一个检查点以来已更改的页数）。我们编写了一个应用程序，以重复更改设置的页面数的第一个字节，并在1000次迭代中测量了时间。图5展示了在检查点和复制阶段花费的平均，最小和最大记录时间，置信区间为95％。它表明检查点频率的瓶颈是传输时间。 内核编译 内核编译测试使用默认配置和bz-Image目标来测量构建linux内核2.6.18所需的时钟时间。编译使用GCC版本4.1.2，并创建版本3.81。这是测试CPU，内存和磁盘性能的平衡工作负载。图6显示了与未保护虚拟机中的基准编译相比，以每秒10、20、30和40次的速度将数据配置到检查点时的保护开销。每个频率的总测量开销分别为31%、52%、80%和103%。在我们测试的速率范围内，开销与检查点频率呈线性比例关系。我们认为，在这组测试中测量的开销对于通用系统也是合理的，即使在每秒40次检查点频率的情况也是这样。 SPECweb2005 SPECweb基准测试至少由三个独立的系统组成：Web服务器，应用程序服务器和一个或多个Web客户端模拟器。我们将它们配置为不同物理机上的三个VM。在1024 MB的总可用RAM中，为应用程序服务器和客户端配置了640 MB。 Web服务器和备份配备了2048 MB的RAM，其中1024分配给了Web服务器虚拟机（即正在测试的系统）。我们在本节中提到的SPECweb分数是使用SPECweb“电子商务”测试所取得的最高成绩，保持了95％的“良好”和99％的“可接受”时间 图7显示了相对于不受保护的服务器，SPECweb在各种检查点频率下的性能。这些分数主要是服务器和客户端之间的网络缓冲区所造成的延迟的函数。尽管将它们配置为在一定频率范围内运行，但SPECweb足够快的接触内存，以至于传输在检查点之间的内存所需的时间有时会超过100毫秒，而不必考虑检查点频率如何。由于在确认检查点状态之前无法释放网络缓冲区，因此有效网络延迟可能高于配置的检查点间隔。 Remus确保在每个epoch开始时都将VM挂起，但是无法确保当前每个epoch要复制的状态总量不超过在配置的epoch长度内可用的带宽。由于有效检查点频率低于配置的频率，并且网络延迟在SPECweb得分中占主导地位，因此在配置的频率范围内性能相对较平坦。在配置的每秒10、20、30和40个检查点速率下，获得的平均检查点速率分别为9.98、16.38、20.25和23.34，或者平均延迟分别为100ms，61ms，49ms和43ms。 SPECweb是一个需要大量RAM的工作负载，对网络延迟也非常敏感。这使得它不适合我们当前的实现，该实现将网络延迟换为内存吞吐量。图8展示了客户端VM和Web服务器在SPECweb上的巨大效果延迟。我们使用Linux netem [19]排队规则为Web服务器（虚拟化但未在Remus下运行）的出站链接添加不同程度的延迟。为了进行比较，图7还显示了禁用网络缓冲时的保护开销，以便更好地将网络延迟与其他形式的检查点开销隔离开（同样，平面的配置文件是由于有效的检查点速率低于配置的速率） 。第3.4节中讨论的截止时间调度和页面压缩是减少检查点延迟和传输时间的两种可能的技术。两者之一或两者都会减少检查点延迟，因此可能会大大提高SPECweb性能 Postmark 前面的部分描述了受保护的网络和内存性能，但是所使用的基准仅在磁盘子系统上施加了中等负载。 为了更好地了解磁盘缓冲机制的效果，我们运行了Postmark磁盘基准测试（版本1.51）。 该基准测试对吞吐量和磁盘响应时间均很敏感。 为了隔离磁盘复制的成本，我们在这些测试期间没有使用内存或网络保护。 配置与不受保护的系统相同，除了虚拟磁盘由Tapdisk复制模块提供。 图9显示了执行10000个邮戳事务所需的总时间，这些事务不需要磁盘复制，并且复制的磁盘以每秒10、20、30和40次的频率提交。结果表明复制对磁盘性能没有显著影响。 3.4 Potential optimizations 潜在的优化 尽管我们相信本节前面显示的性能开销对于它们所提供的功能是合理的，但我们仍希望进一步降低它们，尤其是对于延迟敏感的工作负载。除了对现有代码进行更仔细的调整之外，我们认为以下技术有可能极大地提高性能。时限式调度法 当前执行检查点所需的时间是可变的，具体取决于要复制的内存量。尽管Remus确保在每个时期的开始都将受保护的VM挂起，但当前它并未尝试控制可能在各个时期之间改变的状态量。为了提供更严格的调度保证，可以根据检查脏页的数量，在检查点之间显着降低访客操作的速度[10]。优先考虑延迟而不是吞吐量的应用程序（例如，第3.3节中讨论的SPECweb基准测试所建模的应用程序）可以启用此限制以提高性能。对于这种操作，可以扩展影子页表句柄，以便在脏页数超过某个高水位线时调用回调，或者配置为直接暂停虚拟机 页面压缩 已经观察到，磁盘写操作通常仅改变数据块的5–20％[35]。如果RAM具有类似的属性，则可以通过仅发送同一页先前传输的增量来利用RAM，以减少需要复制的状态量 为了评估压缩复制流的潜在好处，我们设计了一个基本压缩引擎原型。在传输一个页面之前，该系统检查它是否存在于先前传输页面的地址索引LRU缓存中。在缓存命中时，页面将与以前的版本进行XOR处理，差异将以运行长度编码。当页面写入不更改大部分页面时，这提供了显着的压缩。尽管对于大多数数据流来说都是如此，但仍有相当一部分页面已被修改到XOR压缩无效的地步。在这些情况下，通用算法（例如gzip使用的算法）可以实现更高程度的压缩。 我们发现，通过使用一种混合方法，其中每个页面优先进行XOR压缩，但是如果XOR压缩比低于5：1或缓存中不存在上一页，则退回到gzip压缩，我们可以观察复制流上的典型压缩比为10：1。图10显示了第3.3节中描述的内核编译基准测试60秒内以MBps消耗的带宽。缓存大小为8192页，平均缓存命中率为99％。 压缩复制流可能会消耗复制主机上的额外内存和CPU资源，但是诸如XOR压缩技术之类的轻量级方案应该通过减少复制所需的带宽以及随之而来的网络减少来收回成本缓冲延迟。 写时复制检查点 当前的实现将域在每个检查点暂停一段时间，时间长度与自上一个检查点以来已被弄脏的页面数成线性关系。通过将脏页标记为写时复制并立即恢复域，可以减轻这种开销。这样可以将域必须暂停的时间减少到与访客可用的固定比例的RAM总量。我们打算通过为Xen影子分页系统提供一个用户空间映射的缓冲区来实现写时复制，在恢复读写访问权限之前，它可以将触摸的页面复制到该缓冲区中。复制过程然后可以从COW缓冲区中提取所有标记为已复制的页面，而不是直接从guest虚拟机读取它们。复制页完成后，Xen COW模块可以将其在缓冲区中的空间标记为可重复使用。如果缓冲区将满，则可以简单地暂停guest虚拟机，从而导致服务从COW正常降级到停止并复制操作 4 Related Work 相关工作 状态复制可以在几个级别上执行，每个级别在效率和通用性上有不同的平衡。在最低级别上，基于硬件的复制可能是最可靠的解决方案。但是，与软件相比，硬件的开发成本要高得多，因此，硬件复制存在明显的经济劣势。虚拟化层的复制具有硬件方法的许多优点，由于它是通过软件实现的，因此成本较低。但是，像硬件一样，虚拟化层对其复制的操作系统和应用程序状态没有语义上的了解。结果，它的灵活性不如操作系统，应用程序库或应用程序本身中的进程检查点，因为它必须复制整个系统而不是单个进程。它也可能效率较低，因为它可能会复制不必要的状态。然而，这些高级方法面临的挑战是，组成检查点的状态元素之间的相互依赖性在不知不觉中很难识别并从系统的其他部分中分离出来，因此这些检查点机制比虚拟化中的检查点要复杂得多。 虚拟机迁移。如前所述，Remus建立在Xen对实时迁移的支持之上[6]，并进行了显着扩展以支持频繁的远程检查点。Bradford等人，扩展了Xen的实时迁移支持的方向：将持久性状态与guest一起迁移，以便可以在不与原始系统共享网络存储的远程节点上重新启动它[3]。 与Remus一样，其他项目也使用虚拟机来提供高可用性。与我们的工作最接近的是Bressoud和Schneider的著作[4]。他们使用虚拟机监视器将主要系统看到的输入事件转发到备份系统，在备份系统中按确定的方式重放它们，以复制主要状态。确定性重放比简单的虚拟化对目标体系结构的约束要严格得多，并且需要VMM中特定于体系结构的实现。 Bressoud和Schneider的工作表明，确定性重播的另一个重大缺点是，它很难扩展到多核CPU。问题是确定核心访问共享内存的顺序是必要的，但也很困难。有人尝试解决该问题。例如，飞行数据记录器[34]是一个硬件模块，它嗅探高速缓存的一致性流量，以便记录多个处理器访问共享内存的顺序。同样，Dunlap引入了一种软件方法，其中CREW协议（并发读取，互斥写入）通过页面保护[8]应用于共享内存。尽管这些方法确实使SMP具有确定性的重放成为可能，但由于开销高（至少随并发程度线性增加），因此尚不清楚它们是否可行。我们的工作完全避开了这个问题，因为它不需要确定性重放。 虚拟机日志记录和重播 虚拟机日志记录已用于高可用性以外的其他用途。例如，在ReVirt [9]中，虚拟化被用来为记录目标系统中的状态变化提供一个安全层，以便为入侵检测系统提供更好的取证证据。重播的系统是原始系统的只读副本，除非为了重新创建系统损坏中所涉及的事件，否则不打算运行该副本。日志记录也已用于构建时间旅行的调试器[13]，与ReVirt一样，该回放器仅出于取证目的而重放系统。 操作系统复制 有许多操作系统，例如Accent [25]，Amoeba [18]，MOSIX [1]和Sprite [23]，它们支持进程迁移，主要用于负载平衡。使用流程迁移进行故障恢复的主要挑战是，迁移的进程通常会将剩余依赖项保留在从中迁移它们的系统上。为了容忍主主机的故障，消除这些依赖关系是必要的，但是由于系统的复杂性和这些依赖关系的结构，解决方案是难以捉摸的。 已经进行了一些尝试在操作系统级别上复制应用程序。 Zap [22]尝试在Linux内核中引入虚拟化层。必须为每个操作系统重新构建此方法，并在各个版本之间仔细维护。 图书馆方法 一些应用程序库支持进程迁移和检查点。这个支持通常用于并行应用程序框架，如CoCheck[29]。通常，进程迁移用于负载平衡，检查点用于在出现故障时恢复整个分布式应用程序 复制存储。在用于灾难恢复和取证的可检查点存储方面也进行了大量工作。 Linux逻辑卷管理器[14]提供了一种有限形式的块存储的写时复制快照视差[33]，通过在块级别提供有限的轻量级写时复制快照，显著改进了此设计水平视图文件系统[11]允许给定卷一次存在一个快照。其他方法包括RSnapshot，它运行在文件系统之上，以通过一系列硬链接和各种备份软件来创建快照。 DRBD [26]是块设备上的软件，可透明地将其复制到另一台服务器。 投机执行。使用推测性执行将I &#x2F; O处理与计算隔离开来的方法已经被其他系统采用。特别是，SpecNFS [20]和Rethink the Sync [21]以与我们类似的方式使用推测，以使I &#x2F; O处理异步。 Remus与这些系统的不同之处在于，来自客户机的块I &#x2F; O的指令集始终保持不变：它们立即应用于本地物理磁盘。取而代之的是，我们的系统缓冲生成的网络流量，以隔离推测执行的外部可见效果，直到相关状态被完全复制为止。 5 Future work 本节简要讨论了我们打算探索的一些方向，以改善和扩展Remus。正如我们在上一节中所演示的那样，高可用性服务所带来的开销并不是不合理的。但是，本文描述的实现还很年轻。一些潜在的优化领域仍有待探索。完成第3.4节中讨论的目标优化后，我们打算研究更通用的扩展，例如以下所述。 内省优化 目前，Remus传播的状态超出了严格的要求。例如，缓冲区高速缓存页面不需要复制，因为它们可以简单地从备份上的持久性存储中读取。为了利用这一点，虚拟磁盘设备可以记录为磁盘读取提供给它的缓冲区的地址，以及相关的磁盘地址。如果在磁盘读取完成后未修改这些页面，则内存复制过程可能会跳过这些页面。远端将负责从其磁盘副本中重新发出读取内容，以填充丢失的页面。对于繁重的磁盘工作负载，这应该可以大大减少状态传播时间。 硬件虚拟化支持 由于我们实验室在开发时缺乏支持硬件虚拟化的设备，我们只对半虚拟化的客户虚拟机提供了完善的支持。但是，我们已经研究了支持完全虚拟化环境所需的代码，并且前景十分广阔。实际上，由于支持虚拟化的硬件提供了更好的封装，因此它可能比半虚拟实现更简单。 集群复制 扩展系统以保护多个相互连接的主机是很有用。当每个主机都可以独立地受到保护时，协调保护将使内部网络通信能够在不进行缓冲的情况下继续进行。这有可能显著提高分布式应用程序的吞吐量，包括托管主机环境中流行的三层web应用程序配置。集群复制的支持可以通过分布式检查点协议来提供，例如我们的同事Gang Peng的硕士论文[24]中所描述的，该协议使用了Remus提供的检查点基础结构的早期版本。 灾难恢复。 Remus是Second-Site [7]项目的产品，该项目的目的是提供运行系统的地理多样性镜像，以便在物理灾难中生存。为了试验这种配置，我们正在计划Remus的多站点部署。在长距离部署中，网络延迟将更大关注。另外，需要重新配置网络以相应地重定向Internet流量 日志结构化数据中心 我们正在扩展Remus已经捕获和保留受保护VM的完整执行历史，而不仅仅是最新的检查点。 通过将客户内存映射到Parallax [17]，这是专为高频快照设计的虚拟块存储，我们希望能够以非常精细的粒度有效地存储大量持久性和瞬态状态。 这些数据在构建高级调试和取证工具时非常有用。它还可以提供从状态损坏中恢复的方便机制，无论是由operatorerror还是由恶意代理（病毒等）引入的 6 Conclusion 结论 Remus是一种新颖的系统，用于在现有商品上运行的软件上改造高可用性硬件系统使用虚拟化来封装受保护的虚拟机，并执行频繁的整个系统检查点以异步复制相对执行的单个特定虚拟机的状态。 提供高可用性是一项艰巨的任务，并且传统上需要大量的成本和工程上的努力。 Remus通过在虚拟化平台层将高可用性呈现为一项服务来实现商品化：对于特定的虚拟机，可以简单地“打开” HA。与任何高可用性系统一样，保护也不是没有代价的：为确保一致的复制而需要的网络缓冲给要求非常低延迟的应用程序带来了性能开销。管理员还必须部署额外硬件，这些硬件可以在N对1配置中使用，使用一个备份来保护多个活动的主机，作为这种开销的交换。Remus完全省去了修改单个应用程序以提供HA功能的任务，而且它不需要特殊用途的硬件。 Remus代表了现代服务器HA设计空间中一个未经探索的地方。该系统允许按一下按钮即可简单地将保护动态地提供给正在运行的VM。我们认为这种模式对希望为客户提供差异化服务的托管提供商特别有吸引力。</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>《伽利略的苦恼》读书笔记</title>
    <url>/2019/11/02/%E3%80%8A%E4%BC%BD%E5%88%A9%E7%95%A5%E7%9A%84%E8%8B%A6%E6%81%BC%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>这可能是我读过东野圭吾最“正常”的一本书了，之所以说是正常，整本书的故事性不是很丰富，读起来并不累，没有让人扑朔迷离的情节，没有为之动容的人物，通篇看完之后，如行云流水一般通透，单单记得两个刑警不断去找汤川帮助。 可能是因为我是分开一周看完的，所以对剧情的理解有些分散。书中共五章也代表着五个独立的案件，只有第二章的故事和书名对应了起来，其他的虽生动，却也只是比较精彩的案例罢了。故事的起因，发生，调查，得出结论，都如同其他小说一样真实而细致，让人很有身临其境的感觉，我觉得这也是东野圭吾小说的一个特征，代入感很强，让人分不清故事的真假，不禁为人物关系，案件真相而陷入思考。 汤川即是一名认真钻研的科学家，也是细致入微的一名侦探，嫌疑人的每个动作每一句话都能被他发现蛛丝马迹，他冷酷中也带着温情，第二章中，刚开始侦破了老师犯罪的过程，冷酷的劝老师自首，在被拒绝后毅然告诉警察，并找到犯罪证据，然而最后知道老师的苦衷后，和其他学生一起向老师表示，等出狱后会照顾他。还有在第四章小女孩说自己凭借探测术找到狗的尸体，汤川表示怀疑，他简单的问小女孩“在你打算寻找那条狗的尸体时，也问过这么做对不对吗”，小女孩肯定的回答了他，然而狗只是失踪了，说明她在出发前就已经知道狗死了并且被扔在了哪里，她所说的探测术不过是为了确定自己要不要去寻找。但这些他并没有和小女孩说，他认为科学的目的并非否定那些带有神秘色彩的事物，不应该去打破小女孩对自己心灵的指引。 总的来说，这本书中规中矩，如果你刚开始接触东野圭吾的小说，我个人并不建议先读这本，它没有封面上描述的那么精彩，那么深刻，不如先去读另外比较经典的，会让你收获颇丰。 也许是东野圭吾其他的书太过完美，让我对他的每一本书都怀着很高的期待，就侦探小说而言，这本已经很不错了。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>《新参者》读书笔记</title>
    <url>/2019/10/20/%E3%80%8A%E6%96%B0%E5%8F%82%E8%80%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《新参者》读书笔记"><a href="#《新参者》读书笔记" class="headerlink" title="《新参者》读书笔记"></a>《新参者》读书笔记</h1><blockquote>
<p>趁着内心的震撼还没有过去，写下这篇读书笔记。</p>
</blockquote>
<p>《新参者》最开始用微信读书看了一段电子版的，人物关系的巧妙联系，剧情看似毫无联系却又有着千丝万缕的关联，这让我赶紧去买了纸质版的去正式的阅读。 用了两天的时间看完，我以为还会是悬疑精彩的推理小说，最后洞悉出犯罪者的真实动机。然而随着剧情的不断展开，那股温情，执拗，懊悔，感动不断在我内心交织。 从仙贝店儿子善意的谎言，到料亭店夫妻的无奈之举，陶器店微妙的婆媳关系，钟表店父亲对女儿默默的爱。直到西饼店案情的展开，让整个剧情达到高点，原本被人忽略的死者竟然如此温柔，伟大，她那母爱的光环如此闪耀。不由得让人肃然起敬，翻译家朋友的苦衷也得到她的谅解和祝福，孤身一人却不断追求自己的生活，为了亲人，也为了自由。 即使是她离开的家庭，数十年陪伴的丈夫依旧对她充满温情。每一章节都是对一段案情的记录，但却不是独立的，相互之间环绕着，让你不断回忆起那条街上的物是人非。每一个小的细节，安排的看似很不经意，却又是如此的巧妙。 每一章都会有感动有欣喜，却也有些着急，案件的真相是什么，谁才是真正的凶手。然而谁能想到，漫不经心引入的陀螺才是最重要的，抽丝剥茧之后让你豁然开朗，不禁感叹原来如此。 最后的破案并没有更加精彩，刚开始有些失落，引出凶手对孩子的溺爱让剧情更加丰富，算是一个点睛之处。不过在细想之后发现，这本来就是一个普通的故事，她生前平易近人，和蔼可亲没有得罪任何人。我所期待的跌宕起伏的剧情并不存在，我们都是普通人而已，最重要的也不是推理，而是找出人们各种行为的原因，找到凶手不是最终目的，而是要彻查案件的原因，完成真正的救赎。 书中让我发现，原来一个人对周遭事物的影响如此之大，我以为自己平淡的生活不会引起任何注意，其实我们都在默默改变着生活的环境，你的一举一动都会有人注意，生活没有那么孤单。 我们也会是新参者，但更是自己生活的主角。</p>
]]></content>
      <categories>
        <category>Self</category>
      </categories>
  </entry>
  <entry>
    <title>《活着》读书笔记</title>
    <url>/2019/10/26/%E3%80%8A%E6%B4%BB%E7%9D%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>如果让我用一个词去形容《活着》这本书，可能就是痛苦了，我想到每一个形容他不同阶段的词，但最根本，最深刻的，还是痛苦。 作者说对于福贵自己，他更多的是感受到了幸福。而在读者的眼中，他却是一个苦难的幸存者。确实，活着才是对他最大的痛苦，从气死自己的爹，因为被抓壮丁，他娘在他离家后而死，在从军期间见识了战争对生命的毁灭，人命如草芥般被收割，在围困时，看到大批的伤员被成片的扔在空地上，哀嚎，哭喊，那些不像是人的声音在寒夜过后，变成死一般的静寂。亲眼看到战友老徐中弹而死，春生不知所踪，自己被俘虏后终于回家。本以为一家人可以在苦日子里挣扎生存，却经历了大跃进，人民公社，一家人忍饥挨饿，后来儿子在医院被抽血抽死，他还是个孩子啊，这一段剧情真的刺痛了我的内心，这样突兀的死亡，他早上去上课，晚上便成了冰凉的尸体，而福贵还不敢和家珍去说，他独自埋葬儿子，接连几天去儿子坟头哭泣，家珍最后还是发现了，那一刻的痛让人无法呼吸，仿佛掏走了你的心。 重创之后的家庭变得摇摇欲坠，不久就文化大革命，他见到了间接害死儿子的春生，他因为当县长而受到批斗，不久他因为无法忍受鞭打而去福贵家中告别，家珍原谅了他并让他为有庆活着，但，一个月后他还是上吊而死，我感受一种嘲讽，对我们内心的期待，对生命的重视。心中的希望被一下拍碎。辗转之后故事迎来了新的希望，凤霞找到了好的归宿，一家人有了盼头，凤霞幸福的生活让人感到欣喜，然而因为生孩子大出血而死亡，只留下一个儿子，丈夫，父亲两个人悲痛欲绝，在家中满心期待的家珍变得呆滞，她知道这么久一定出了事情，在看到自己女儿的尸体时，她没有哭，儿女双亡已经将她彻底击败。几个月后她也走了。这个家彻底支离破碎，只有福贵，二喜，苦根艰难生活，苦根也是家中唯一的希望，几年后，二喜被压死，他在死前喊破喉咙叫了一声苦根。 写到这里，我的内心一片茫然，这种遥远的悲痛不断回忆刺激着我，连续的死亡让人麻木，可想而知，福贵唯一的亲人-外孙苦根，后来因为吃多了福贵煮的豆子而撑死。故事至此，他身边所有的人都死了，他也亲手埋葬了所有人，这一刻，无牵无挂，无亲无故。只有他和一头叫福贵的老牛，最后老人对着老牛又叫了一遍所有已故亲人的名字，让人回忆起故事开始这些名字的含义。 老人和牛渐渐远去，我却无法远离这些悲痛。书中每个痛苦都来的很快，像连珠炮一样击穿你的心。我还沉浸在上一个痛苦中时，下一秒又被笼罩上更深的悲伤。惨，除了惨还是惨，生活没有一点希望，活着变成了最大的痛苦。 我惊叹于作者的写作手法如此高明，我们内心的情感被他如此摆弄，每次被重重的摔到地上时，不留给你任何喘息的机会，马上被举起后更重的摔下。 这次的读书笔记写的我很煎熬，我甚至不想再去回忆一遍书中的情节，接踵而至的悲痛让人喘不过气，我不知道这本书的意义或价值，他并没有让我对现在的生活燃起希望，只是在对比之下觉得自己比较幸福，曾经的坎坷波折都微不足道。然而这种比较没有任何意义，死亡是无法相比的，每一个生命的逝去都会让人肃然起敬。用别人生命的逝去，去来寻求自己生活的希望，这种比较太沉重了。 悲剧是将人生的有价值的东西毁灭给人看，我信了。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《科学？》书评</title>
    <url>/2019/11/06/%E3%80%8A%E7%A7%91%E5%AD%A6%EF%BC%9F%E3%80%8B%E4%B9%A6%E8%AF%84/</url>
    <content><![CDATA[<p>《科学？》书评 这次及以后我都想用书评这个词，读书笔记更多的是摘抄，而我写的多是自己的内心感受，虽才疏学浅，尚无资历，但还是想去写一些自己的想法。 周末有幸在书店看到东野圭吾《科学？》这本书，不过我去了很多家书店，这本书都作为畅销书摆在显眼处，与其并列的还有《白夜行》《解忧杂货铺》等经典，如此说来我便是有些看不上这书了，封面简单明了，勾勒出的线条仿佛真有科学的含义。这次我放下其他书籍，决心好好把它看一遍，到底有何与众不同之处。 此书并不是小说，只是将东野圭吾早期的随笔收集起来，重新印制发行。这些随笔大多写与2003年到2004年，距今已有15年之久。说是东野圭吾的预言也罢，但让我感叹的是日本这个发达国家确实很发达，在03年实现的技术或是产品，而我们现在也不过普及了几年，如扫描翻译笔等电子产品。还有作者对互联网乱象的抨击，对学校教学安排的不满，对体育事业的关注，读着早起东野圭吾的文章，我有一种读韩寒随笔的感觉。他们都有着自己鲜明的特点，用文笔去表达自己对时事的看法，而由于国情原因，日本的言论要比国内自由些，例如作者还抨击政府未征得民众同意就建设核电站，隐瞒核电背后的危险。还有地震捐款所存在的骗捐等问题。他和韩寒都是一针见血的直指问题所在，但东野圭吾更具体的去揭发事情真相，而韩寒的文笔中使用了隐喻，讥讽。我们所存在的问题也很多，却很少有人敢光明正大的发声。 以往的小说并不能看到东野圭吾本人是什么样的，这本书确实很具有他的个人特征，看到他对社会问题的看法和见解，那些略带感情色彩的话体现出对社会和民众的关注。时过境迁，技术发展日新月异，时隔十几年再去看这些话，有的论点会比较可笑，如对手机和数码相机的描述，以及电脑的应用。 综上，这本书算好书吗，也算吧，毕竟豆瓣评分7.4，但将十几年前的随笔整合起来冠以“科学”的名义，未免让人有些怀疑，甚至有些新瓶装旧酒的感觉。若是换个更贴切的书名，或许不会让读者觉得这么突兀，也容易接受起来。 当然，这也许只是我在多管闲事罢了。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>《许三观卖血记》书评</title>
    <url>/2019/11/11/%E3%80%8A%E8%AE%B8%E4%B8%89%E8%A7%82%E5%8D%96%E8%A1%80%E8%AE%B0%E3%80%8B%E4%B9%A6%E8%AF%84/</url>
    <content><![CDATA[<p>用一下午的时间读完了这本书，在经历了《活着》这本书的冲击后，在看余华的作品我都变得小心翼翼，每当人物经历波折时，我的心也会跟着提起来，生怕发生什么意外。若是再如那般不停的冲击心灵，我就真的经受不住了。 好在剧情虽有起伏，但并不是一出彻底的悲剧，有感伤，有残忍，为了生存，为了爱，为了尊严，人物刻画的很朴实，如你在看着他们生活，我以为许三观会不停的卖血而改善自己的生活，但他只在出事的时候才去，相比他的老乡，便是真的为了卖血而生，作者在幽默中透露着悲悯和残酷，读书时你可能会笑他们缺乏常识的行为，笑剧情中低俗的情节，笑许玉兰不堪的谩骂，如此一来你也真实的融入了他们的故事。 他们所经历的可以说是可怜，可悲，可笑，却从来没有放弃，医院在抽他的血，生活也在抽他的血，小人物也有属于自己的人生，朴实中有狡诈，幸福中也充斥着可悲，许三观会为了一乐不是自己的而斤斤计较，像孩子般记仇使小心眼，而在大是大非的时候却不会磨灭自己的良知，他在乎别人的看法，却也分得清善恶正义，他是许三观，也是我们每个普通人，嘴硬心软，心疼儿子，心疼媳妇，一方面说自己自私，另一面却愿意为亲人付出所有，感动与他在面对生活的绝境时，力求继续生存而表现出来的顽强意志。 余华的小说总是能跨越很长的时代，写下每段历史中对人物的影响，这本书后的整体节奏还是比较紧凑的，有很多历史都由他自述而带过，却在关键的时候有很深的停顿。 像是一场闹剧般的开场，最后又如此的收场，使人悲喜交加，却在下一刻哑然失笑，他用诙谐幽默来诠释这个社会的荒谬。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>为知</title>
    <url>/2017/07/27/%E4%B8%BA%E7%9F%A5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>作品</title>
    <url>/2017/07/27/%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>中型系统如何一步步从1开始到支撑10万用户</title>
    <url>/2020/02/12/%E4%B8%AD%E5%9E%8B%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E4%B8%80%E6%AD%A5%E6%AD%A5%E4%BB%8E1%E5%BC%80%E5%A7%8B%E5%88%B0%E6%94%AF%E6%92%9110%E4%B8%87%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<p><strong>1个用户：</strong> <strong>1台机器</strong> 几乎每个应用程序（无论是网站还是移动应用）都具有三个关键组件：API、数据库和客户端（通常是 app 或网站）。数据库存储持久数据，API 服务于数据及其相关请求，客户端将该数据呈现给用户。 在现代应用程序开发中发现，将客户端视为与 API 完全独立的实体，可以让扩展应用程序变得容易得多。 当第一次构建应用程序时，所有这三样东西都可以在一台服务器上运行。在某种程度上，类似于我们的开发环境：工程师在同一台计算机上运行数据库，API 和客户端。 从理论上讲，可以将应用部署在单个 DigitalOcean Droplet 或 AWS EC2 实例上的云中，如下所示： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200212154928127.png"
                     
                > 话虽如此，如果希望 Graminsta 可以被 1 个以上的用户使用，那么将数据库层拆分出来总有意义。 <strong>10个用户：</strong> **拆分数据库层 ** 将数据库迁移到托管服务（例如 Amazon RDS 或 Digital Ocean 的托管数据库）可以支撑更长久，它比在单台服务器或 EC2 实例上直接运行要贵一些，但是通过这些服务，可以获得许多便捷的附加功能：多区域冗余，多个读数据库副本，自动化备份等。 这是 Graminsta 系统现在的样子： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200212155034280.png"
                     
                > <strong>100个用户： ** **拆分客户端</strong> 幸运的是，早期几个用户喜欢 Graminsta，流量开始变得越来越稳定，是时候拆分客户端了。要注意的是，拆分实体是构建可伸缩应用程序的关键措施，当系统的一部分出现更多流量时，可以将其拆分，并根据服务本身的流量模式来扩展服务。 这就是为什么需要将客户端与API 分开，这样可以轻松地为多个平台进行构建：Web 端、移动网站、iOS、Android、桌面应用以及第三方服务等。它们都是使用相同 API 的客户端。 同样，我们从用户那里得到的最大反馈是，他们希望 Graminsta 可以运行在手机上。因此，我们将开发一个移动应用程序。 这是系统现在的样子： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200212155048689.png"
                     
                > <strong>1,000 个用户：****添加负载均衡器</strong> Graminsta 的访问正在上升，用户正在上传周围的照片，我们开始获得更多注册用户。这时候单个 API 实例无法服务所有流量，我们需要更多的计算资源！ 负载均衡器非常强大，关键点是如果 API 之前有负载均衡器，它会将流量路由到该服务的某一个实例，实现了水平扩展（通过添加更多运行相同代码的服务器来提升处理的请求数量）。 我们在 Web 端和 API 之前也放置一个单独的负载平衡器，这样就可以有多个实例运行 API 和 Web 端代码，负载均衡器会将请求路由到流量最小的实例。 这样部署还可以进一步获得冗余能力。当某个实例出现故障（可能过载或崩溃），还有其他实例可以响应传入的请求 — 而不是整个系统出现故障。 负载均衡器还可以提供自动伸缩的能力。我们可以设置负载平衡器，以在超级碗这种每个用户都在线的场景增加实例数，并在所有用户都处于睡眠状态时减少实例数。 有了负载平衡器，我们的 API 层几乎可以无限扩展，只需要在有更多请求时继续添加实例。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200212155105724.png"
                     
                ></p>
<blockquote>
<p>旁注：到目前为止，我们所实现的与市面上的 PaaS 平台（如 Heroku 或 AWS 的 Elastic Beanstalk）提供的功能非常相似（这就是为何它们如此受欢迎）。Heroku 将数据库放置在单独的主机上，通过自动缩放管理负载均衡器，并允许您将 Web 端 与 API 分开托管。这就是在项目早期启动中为何推荐使用 Heroku 之类的服务的重要原因 — 所有必要的基础功能都是现成的。</p>
</blockquote>
<p><strong>10,000 用户：</strong> <strong>CDN</strong> 其实应该从一开始就应该重视这个问题，但是由于 Graminsta 快速迭代而耽搁了：图片的访问及上传已经开始对我们的服务器造成太大的负担。 我们可以使用云存储服务来托管静态内容：比如图片，视频等等（AWS S3 或Digital Ocean 的 Spaces）。通常，我们的 API 应该避免处理诸如下载图片和上传图片之类的工作。 我们从云存储服务中获得的另一个功能是 CDN（在 AWS 中，这是一个称为Cloudfront 的附加组件，但是许多云存储服务都是开箱即用的）。CDN 会自动将我们的图片缓存在世界各地的不同数据中心。 尽管我们的主数据中心位于俄亥俄州，但如果有人要从日本访问图片，我们的云提供商会将进行复制，并将其存储在日本的数据中心。接下来在日本访问该图片的人将更快地打开它。当我们需要提供较大尺寸的多媒体内容时（例如图片或视频），在全球访问可能需要较长的时间来加载及上传。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200212155143141.png"
                     
                > <strong>10万用户：</strong> <strong>扩展数据层</strong> CDN帮了我们很多忙 — Graminsta的流量越来越大。YouTube 上的网红 Mavid Mobrick 刚刚注册了账号，并在他的故事中宣传了我们。API CPU 和内存的使用率都很低 — 这要归功于我们的负载均衡器添加了 10 个 API 实例 —但是我们的访问请求上出现了很多访问超时…为什么有些请求要花那么长时间？ 经过一番排查后我们看到：数据库 CPU 徘徊在 80-90％，资源快要耗尽了。 扩展数据层可能是搭建可扩展体系中最棘手的部分。对于无状态请求的 API 服务器，我们可以随时添加更多实例，但对于大多数数据库系统却并非如此，包括流行的关系数据库系统（PostgreSQL，MySQL等）。 <strong>缓存</strong> 优化数据库最简单方法之一是向系统引入一个新组件：缓存层。实现缓存的最常见方法是使用 Redis 或 Memcached 实现内存中的键值存储。大多数云具有以下服务的托管版本：AWS上的Elasticache和Google Cloud上的Memorystore。 当针对相同信息多次重复进行数据库查询时，缓存将派上用场。本质上，我们只需要访问一次数据库，然后将信息保存在缓存中，之后则无需再次接触数据库。 例如，在 Graminsta 中，每次有用户访问 Mavid Mobrick 的个人资料页面时，API 层都需要从数据库中请求 Mavid Mobrick 的个人资料信息，这是一遍又一遍地发生。由于 Mavid Mobrick 的个人资料信息不会在每次请求时都发生改变，因此该信息非常适合缓存。 我们把数据库中的查询结果缓存在 Redis 的 user:id key 下面，过期时间为 30秒。当有人访问 Mavid Mobrick 的个人资料时，系统首先检查 Redis，如果里面存在则直接返回。尽管 Mavid Mobrick 在网站上最受欢迎，但请求他的资料几乎不会对数据库造成访问负担。 与数据库相比，缓存服务的另一个优点是可以轻松地进行扩展。Redis 具有内置的 Redis Cluster 模式，与负载平衡器 ① 相似，它可以将数据分散到多个节点上（如果需要，可以切分成千上万个）。 几乎所有可扩展的大型系统都充分利用了缓存的优势，这是提供高性能 API 必不可少的一部分。更快的查询是和更高效的代码等价，但是如果缺少缓存，系统不足以能扩展到数百万的用户访问。 <strong>读取副本</strong> 随着数据库访问量也在增加，另外可以做的一件事情是在数据库管理系统添加只读副本。使用上面的云托管服务，可以一键式完成。只读副本将与您的主数据库保持最新，并且可以服务于 SELECT 查询。 我们现在的系统如下： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200212155157987.png"
                     
                ></p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
  </entry>
  <entry>
    <title>主页</title>
    <url>/2017/07/27/%E4%B8%BB%E9%A1%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>从TheadLocalMap看哈希碰撞后开放寻址法的实现过程</title>
    <url>/2021/03/11/%E4%BB%8Etheadlocalmap%E7%9C%8B%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E%E5%90%8E%E5%BC%80%E6%94%BE%E5%AF%BB%E5%9D%80%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="从TheadLocalMap看哈希碰撞后开放寻址法的实现过程"><a href="#从TheadLocalMap看哈希碰撞后开放寻址法的实现过程" class="headerlink" title="从TheadLocalMap看哈希碰撞后开放寻址法的实现过程"></a>从TheadLocalMap看哈希碰撞后开放寻址法的实现过程</h1><h4 id="本来想说ThreadLocal，但看到了ThreadLocalMap中对哈希碰撞是采用开放寻址法来实现的，觉得很有意思，hash使用的场景很多，散列表就是一种高效而常用的数据结构，能将查找的时间复杂度降到O-1-，它通过哈希函数来生成一个-hashcode-值，从而对数据进行一一定位，虽然现在的哈希函数已经能做到很好的随机，但还是会有冲突发生，也就是不同的对象经过哈希函数的计算，生成了相同的-hashcode-值。当哈希冲突发生时，一般有以下几种方式来处理："><a href="#本来想说ThreadLocal，但看到了ThreadLocalMap中对哈希碰撞是采用开放寻址法来实现的，觉得很有意思，hash使用的场景很多，散列表就是一种高效而常用的数据结构，能将查找的时间复杂度降到O-1-，它通过哈希函数来生成一个-hashcode-值，从而对数据进行一一定位，虽然现在的哈希函数已经能做到很好的随机，但还是会有冲突发生，也就是不同的对象经过哈希函数的计算，生成了相同的-hashcode-值。当哈希冲突发生时，一般有以下几种方式来处理：" class="headerlink" title="本来想说ThreadLocal，但看到了ThreadLocalMap中对哈希碰撞是采用开放寻址法来实现的，觉得很有意思，hash使用的场景很多，散列表就是一种高效而常用的数据结构，能将查找的时间复杂度降到O(1)，它通过哈希函数来生成一个 hashcode 值，从而对数据进行一一定位，虽然现在的哈希函数已经能做到很好的随机，但还是会有冲突发生，也就是不同的对象经过哈希函数的计算，生成了相同的 hashcode 值。当哈希冲突发生时，一般有以下几种方式来处理："></a>本来想说ThreadLocal，但看到了ThreadLocalMap中对哈希碰撞是采用开放寻址法来实现的，觉得很有意思，hash使用的场景很多，散列表就是一种高效而常用的数据结构，能将查找的时间复杂度降到O(1)，它通过哈希函数来生成一个 hashcode 值，从而对数据进行一一定位，虽然现在的哈希函数已经能做到很好的随机，但还是会有冲突发生，也就是不同的对象经过哈希函数的计算，生成了相同的 hashcode 值。当哈希冲突发生时，一般有以下几种方式来处理：</h4><ul>
<li>拉链法：每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储，之前接触的数据结构如HashMap或者其他字典结构，都是采用拉链法。<ul>
<li>开放定址法：一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li>
<li>再哈希：又叫双哈希法，有多个不同的Hash函数，当发生冲突时使用第二个，第三个….等哈希函数计算地址，直到无冲突。</li>
</ul>
</li>
</ul>
<h4 id="拉链法的实现可以去看HashMap的源码，以及当单链过长时会自动转换为红黑树结构，插入链表时还要注意是头插法还是尾插法。"><a href="#拉链法的实现可以去看HashMap的源码，以及当单链过长时会自动转换为红黑树结构，插入链表时还要注意是头插法还是尾插法。" class="headerlink" title="拉链法的实现可以去看HashMap的源码，以及当单链过长时会自动转换为红黑树结构，插入链表时还要注意是头插法还是尾插法。"></a>拉链法的实现可以去看HashMap的源码，以及当单链过长时会自动转换为红黑树结构，插入链表时还要注意是头插法还是尾插法。</h4><p>先说一下ThreadLocal，是一个很重要的东西，出现于Thead类源码中。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThreadLocal.ThreadLocalMap threadLocals = null;</span><br></pre></td></tr></table></figure></div>

<p>ThreadLocal中包含以下方法和类型 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210311195856512.png"
                      alt="image-20210311195856512"
                > 提供三个公共方法来进行操作，分别是set，get，remove，看起来很简单的样子，Threadlocal而是一个线程内部的存储类，可以在指定线程内存储数据，数据存储以后，只有指定线程可以得到存储数据。<strong>实际上是ThreadLocal的静态内部类ThreadLocalMap为每个Thread都维护了一个数组table，ThreadLocal通过Thread确定数组下标，而这个下标就是value存储的对应位置。</strong> 先看初始化过程，ThreadLocal是延迟构建的，只有当有数据要放进来的时候才进行创建。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = new Entry[INITIAL_CAPACITY];</span><br><span class="line">            int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);</span><br><span class="line">            table[i] = new Entry(firstKey, firstValue);</span><br><span class="line">            size = 1;</span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>set方法的实现，通过 hashCode 计算的索引位置 i 处如果已经有值了,会从 i 开始,通过 +1 不断的往后寻找, 直到找到索引位置为空的地方,把当前 ThreadLocal 作为 key 放进去。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;</span><br><span class="line">                        //获取当前数组和长度</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            int len = tab.length;</span><br><span class="line">            //通过hash计算要存储的下标位置</span><br><span class="line">            int i = key.threadLocalHashCode &amp; (len-1);</span><br><span class="line">                        //考虑存在hash冲突的情况，如果当前坐标已经有数据了，就调用nextIndex获取下一个位置</span><br><span class="line">            for (Entry e = tab[i];</span><br><span class="line">                 e != null;</span><br><span class="line">                 e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">                if (k == key) &#123;</span><br><span class="line">                    e.value = value;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (k == null) &#123;</span><br><span class="line">                    replaceStaleEntry(key, value, i);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                        //终于找到新的空位置</span><br><span class="line">            tab[i] = new Entry(key, value);</span><br><span class="line">            int sz = ++size;</span><br><span class="line">            if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">                rehash();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        private static int nextIndex(int i, int len) &#123;</span><br><span class="line">            //判断下一个位置是否超过数组长度，如果超过了，就从0开始</span><br><span class="line">            return ((i + 1 &lt; len) ? i + 1 : 0);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>因为set方法的特殊，get方法也需要有点改变</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">private Entry getEntry(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class="line">                        //计算存储的下标</span><br><span class="line">            int i = key.threadLocalHashCode &amp; (table.length - 1);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            //如果当前下标位置的数据的key于查询的key相同，则直接返回</span><br><span class="line">            if (e != null &amp;&amp; e.get() == key)</span><br><span class="line">                return e;</span><br><span class="line">            else</span><br><span class="line">                    //key不同，说明有冲突，需要往下查找</span><br><span class="line">                return getEntryAfterMiss(key, i, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) &#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            int len = tab.length;</span><br><span class="line">                        //一直找到e不为空</span><br><span class="line">            while (e != null) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                if (k == key)</span><br><span class="line">                    return e;</span><br><span class="line">                if (k == null)</span><br><span class="line">                        //处理key为null的节点</span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                else</span><br><span class="line">                        //增加i</span><br><span class="line">                    i = nextIndex(i, len);</span><br><span class="line">                e = tab[i];</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>ThreadLocal和Synchronized都是为了解决多线程中相同变量的访问冲突问题，不同的点是</p>
<ul>
<li>Synchronized是通过线程等待，牺牲时间来解决访问冲突</li>
<li>ThreadLocal是通过每个线程单独一份存储空间，牺牲空间来解决冲突，并且相比于Synchronized，ThreadLocal具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问到想要的值。</li>
</ul>
<p>正因为ThreadLocal的线程隔离特性，使它的应用场景相对来说更为特殊一些。当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，就可以考虑采用ThreadLocal。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>亚信实习日记（结束）</title>
    <url>/2018/09/17/%E4%BA%9A%E4%BF%A1%E5%AE%9E%E4%B9%A0%E7%9A%84%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="亚信实习的第一天（2018-09-19周一）"><a href="#亚信实习的第一天（2018-09-19周一）" class="headerlink" title="亚信实习的第一天（2018-09-19周一）"></a>亚信实习的第一天（2018-09-19周一）</h1><h2 id="其实是第二天，上上周五待了半天就请假了，所以就不算了，从今天开始算作第一天。怎么说呢，自己的心态还是发生了很多的变化，从犹豫，抗拒，排斥，到接受，面对，学习，生活哪有那么顺利，什么都是自己喜欢的，自己想要的，既然喜欢编程，何不静下心来感受一下，如果连刚开始都坚持不了，以后还怎么继续，况且不去实习，怎么知道自己适不适合，只凭想是想不出来的。"><a href="#其实是第二天，上上周五待了半天就请假了，所以就不算了，从今天开始算作第一天。怎么说呢，自己的心态还是发生了很多的变化，从犹豫，抗拒，排斥，到接受，面对，学习，生活哪有那么顺利，什么都是自己喜欢的，自己想要的，既然喜欢编程，何不静下心来感受一下，如果连刚开始都坚持不了，以后还怎么继续，况且不去实习，怎么知道自己适不适合，只凭想是想不出来的。" class="headerlink" title="其实是第二天，上上周五待了半天就请假了，所以就不算了，从今天开始算作第一天。怎么说呢，自己的心态还是发生了很多的变化，从犹豫，抗拒，排斥，到接受，面对，学习，生活哪有那么顺利，什么都是自己喜欢的，自己想要的，既然喜欢编程，何不静下心来感受一下，如果连刚开始都坚持不了，以后还怎么继续，况且不去实习，怎么知道自己适不适合，只凭想是想不出来的。"></a>其实是第二天，上上周五待了半天就请假了，所以就不算了，从今天开始算作第一天。怎么说呢，自己的心态还是发生了很多的变化，从犹豫，抗拒，排斥，到接受，面对，学习，生活哪有那么顺利，什么都是自己喜欢的，自己想要的，既然喜欢编程，何不静下心来感受一下，如果连刚开始都坚持不了，以后还怎么继续，况且不去实习，怎么知道自己适不适合，只凭想是想不出来的。</h2><h2 id="租到了房子，有了住处心里就有底了，天通苑离公司也不是很远，坐地铁半个多小时，地铁是第二站上车，也不是很挤，挺好的，确实挺好的，上班不打卡什么的，比较轻松，没有人去刻意的管，上午在刷LeetCode的题，导师没管我，上午过的很快，第一次中午在公司吃饭，不想订外卖，东城区附近的饭都很贵，买了三明治，决定以后中午稍微吃点，晚上回天通苑再好好吃，天通苑附近的饭还是比较便宜的。下午还是没有什么事，去找了导师，让我看文档，配环境，哪有什么环境，自己随便看看吧，划划水，做做题，要适应这种感觉，等到了6点下班，决定明天带本书去看书，不能浪费自己的时间。"><a href="#租到了房子，有了住处心里就有底了，天通苑离公司也不是很远，坐地铁半个多小时，地铁是第二站上车，也不是很挤，挺好的，确实挺好的，上班不打卡什么的，比较轻松，没有人去刻意的管，上午在刷LeetCode的题，导师没管我，上午过的很快，第一次中午在公司吃饭，不想订外卖，东城区附近的饭都很贵，买了三明治，决定以后中午稍微吃点，晚上回天通苑再好好吃，天通苑附近的饭还是比较便宜的。下午还是没有什么事，去找了导师，让我看文档，配环境，哪有什么环境，自己随便看看吧，划划水，做做题，要适应这种感觉，等到了6点下班，决定明天带本书去看书，不能浪费自己的时间。" class="headerlink" title="租到了房子，有了住处心里就有底了，天通苑离公司也不是很远，坐地铁半个多小时，地铁是第二站上车，也不是很挤，挺好的，确实挺好的，上班不打卡什么的，比较轻松，没有人去刻意的管，上午在刷LeetCode的题，导师没管我，上午过的很快，第一次中午在公司吃饭，不想订外卖，东城区附近的饭都很贵，买了三明治，决定以后中午稍微吃点，晚上回天通苑再好好吃，天通苑附近的饭还是比较便宜的。下午还是没有什么事，去找了导师，让我看文档，配环境，哪有什么环境，自己随便看看吧，划划水，做做题，要适应这种感觉，等到了6点下班，决定明天带本书去看书，不能浪费自己的时间。"></a>租到了房子，有了住处心里就有底了，天通苑离公司也不是很远，坐地铁半个多小时，地铁是第二站上车，也不是很挤，挺好的，确实挺好的，上班不打卡什么的，比较轻松，没有人去刻意的管，上午在刷LeetCode的题，导师没管我，上午过的很快，第一次中午在公司吃饭，不想订外卖，东城区附近的饭都很贵，买了三明治，决定以后中午稍微吃点，晚上回天通苑再好好吃，天通苑附近的饭还是比较便宜的。下午还是没有什么事，去找了导师，让我看文档，配环境，哪有什么环境，自己随便看看吧，划划水，做做题，要适应这种感觉，等到了6点下班，决定明天带本书去看书，不能浪费自己的时间。</h2><h2 id="晚上去世贸天阶逛了一圈，回来都九点了，真是累，一天过的特别快。"><a href="#晚上去世贸天阶逛了一圈，回来都九点了，真是累，一天过的特别快。" class="headerlink" title="晚上去世贸天阶逛了一圈，回来都九点了，真是累，一天过的特别快。"></a>晚上去世贸天阶逛了一圈，回来都九点了，真是累，一天过的特别快。</h2><h1 id="亚信实习的第二天（2018-09-20周二）"><a href="#亚信实习的第二天（2018-09-20周二）" class="headerlink" title="亚信实习的第二天（2018-09-20周二）"></a>亚信实习的第二天（2018-09-20周二）</h1><h2 id="第二天了，一切还是那么的顺利，早上出地铁口走错了，绕了一圈，到公司都9点零几分，还是只来了一些些人，老大依旧没来，今天拿了《Hadoop权威指南》，办公室里真的好吵，看了一会书，困的不行了，赶紧找点事干，想到自己Mac里MySQL一直编码有问题，研究了一下，发现是Navicat的原因，总算解决。又看了会书和GitHub，准备午饭，去商店买了饭团和三明治，饭团比三明治好吃多了，然后趴在桌子上休息，睡醒继续看GitHub，想写一下Python，搞个爬虫玩玩，但不知道玩什么，还是写大数据的吧，下午做了一个日志分析的MapReduce，调试了一番，晚上写成教程吧，再用spark写一下，熟悉熟悉。老大每天四点多就走了，今天6点还没有走，搞的我也不好意思走，待了二十分钟实在没什么事，就撤了。"><a href="#第二天了，一切还是那么的顺利，早上出地铁口走错了，绕了一圈，到公司都9点零几分，还是只来了一些些人，老大依旧没来，今天拿了《Hadoop权威指南》，办公室里真的好吵，看了一会书，困的不行了，赶紧找点事干，想到自己Mac里MySQL一直编码有问题，研究了一下，发现是Navicat的原因，总算解决。又看了会书和GitHub，准备午饭，去商店买了饭团和三明治，饭团比三明治好吃多了，然后趴在桌子上休息，睡醒继续看GitHub，想写一下Python，搞个爬虫玩玩，但不知道玩什么，还是写大数据的吧，下午做了一个日志分析的MapReduce，调试了一番，晚上写成教程吧，再用spark写一下，熟悉熟悉。老大每天四点多就走了，今天6点还没有走，搞的我也不好意思走，待了二十分钟实在没什么事，就撤了。" class="headerlink" title="第二天了，一切还是那么的顺利，早上出地铁口走错了，绕了一圈，到公司都9点零几分，还是只来了一些些人，老大依旧没来，今天拿了《Hadoop权威指南》，办公室里真的好吵，看了一会书，困的不行了，赶紧找点事干，想到自己Mac里MySQL一直编码有问题，研究了一下，发现是Navicat的原因，总算解决。又看了会书和GitHub，准备午饭，去商店买了饭团和三明治，饭团比三明治好吃多了，然后趴在桌子上休息，睡醒继续看GitHub，想写一下Python，搞个爬虫玩玩，但不知道玩什么，还是写大数据的吧，下午做了一个日志分析的MapReduce，调试了一番，晚上写成教程吧，再用spark写一下，熟悉熟悉。老大每天四点多就走了，今天6点还没有走，搞的我也不好意思走，待了二十分钟实在没什么事，就撤了。"></a>第二天了，一切还是那么的顺利，早上出地铁口走错了，绕了一圈，到公司都9点零几分，还是只来了一些些人，老大依旧没来，今天拿了《Hadoop权威指南》，办公室里真的好吵，看了一会书，困的不行了，赶紧找点事干，想到自己Mac里MySQL一直编码有问题，研究了一下，发现是Navicat的原因，总算解决。又看了会书和GitHub，准备午饭，去商店买了饭团和三明治，饭团比三明治好吃多了，然后趴在桌子上休息，睡醒继续看GitHub，想写一下Python，搞个爬虫玩玩，但不知道玩什么，还是写大数据的吧，下午做了一个日志分析的MapReduce，调试了一番，晚上写成教程吧，再用spark写一下，熟悉熟悉。老大每天四点多就走了，今天6点还没有走，搞的我也不好意思走，待了二十分钟实在没什么事，就撤了。</h2><h2 id="今天老大依旧没有找我，也没有说要干什么，先自己学自己的吧，也不亏，总会接触到公司里的东西的，一天过的特别快，晚上回家已经七点半了，继续写东西，不断积累。"><a href="#今天老大依旧没有找我，也没有说要干什么，先自己学自己的吧，也不亏，总会接触到公司里的东西的，一天过的特别快，晚上回家已经七点半了，继续写东西，不断积累。" class="headerlink" title="今天老大依旧没有找我，也没有说要干什么，先自己学自己的吧，也不亏，总会接触到公司里的东西的，一天过的特别快，晚上回家已经七点半了，继续写东西，不断积累。"></a>今天老大依旧没有找我，也没有说要干什么，先自己学自己的吧，也不亏，总会接触到公司里的东西的，一天过的特别快，晚上回家已经七点半了，继续写东西，不断积累。</h2><h1 id="亚信实习的第三天和第四天（2018-09-21周四）"><a href="#亚信实习的第三天和第四天（2018-09-21周四）" class="headerlink" title="亚信实习的第三天和第四天（2018-09-21周四）"></a>亚信实习的第三天和第四天（2018-09-21周四）</h1><h2 id="昨天回家测试代码，一不小心就忘记写日记了，今天早上坐地铁才想起来，只好和今天补在一起写了，昨天上午和我一起的实习生说会安排任务，见了婷姐，安排了一个数据库整理的工作，将Excel表中数据库各字段的名称命名整理好，不规范的整理规范，没有的自己补充，结果把表发过来有两万多条纪录，一条一条的整理，我实习完了都弄不完，简直在逗我，不开心，下午想着用Python写个脚本，批量操作吧，而且写代码比这个要有意思多了，就是操作了多个Excel里的多个工作表，一顿折腾，昨天调试的差不多，今天一天还是在优化，整理，两万条数据被我弄的差不多了，再手工进行整理就好，昨天发现街上有卖煎饼的，今天中午吃的煎饼，特别大很实惠。下午买了转网线的接口，接了公司的网线，这几天一直用的自己的流量有点伤不起，但公司的网线更难受，必须开代理，而且代理的只是http和https的请求，基于http请求的一些应用还可以正常使用，但其他协议的应用就凉了，怪不得见大家都用的网页版微信，QQ也挂了，还好网易云音乐没挂，但邮箱挂掉，不想去强行破解，限制就限制吧，好歹网速快。"><a href="#昨天回家测试代码，一不小心就忘记写日记了，今天早上坐地铁才想起来，只好和今天补在一起写了，昨天上午和我一起的实习生说会安排任务，见了婷姐，安排了一个数据库整理的工作，将Excel表中数据库各字段的名称命名整理好，不规范的整理规范，没有的自己补充，结果把表发过来有两万多条纪录，一条一条的整理，我实习完了都弄不完，简直在逗我，不开心，下午想着用Python写个脚本，批量操作吧，而且写代码比这个要有意思多了，就是操作了多个Excel里的多个工作表，一顿折腾，昨天调试的差不多，今天一天还是在优化，整理，两万条数据被我弄的差不多了，再手工进行整理就好，昨天发现街上有卖煎饼的，今天中午吃的煎饼，特别大很实惠。下午买了转网线的接口，接了公司的网线，这几天一直用的自己的流量有点伤不起，但公司的网线更难受，必须开代理，而且代理的只是http和https的请求，基于http请求的一些应用还可以正常使用，但其他协议的应用就凉了，怪不得见大家都用的网页版微信，QQ也挂了，还好网易云音乐没挂，但邮箱挂掉，不想去强行破解，限制就限制吧，好歹网速快。" class="headerlink" title="昨天回家测试代码，一不小心就忘记写日记了，今天早上坐地铁才想起来，只好和今天补在一起写了，昨天上午和我一起的实习生说会安排任务，见了婷姐，安排了一个数据库整理的工作，将Excel表中数据库各字段的名称命名整理好，不规范的整理规范，没有的自己补充，结果把表发过来有两万多条纪录，一条一条的整理，我实习完了都弄不完，简直在逗我，不开心，下午想着用Python写个脚本，批量操作吧，而且写代码比这个要有意思多了，就是操作了多个Excel里的多个工作表，一顿折腾，昨天调试的差不多，今天一天还是在优化，整理，两万条数据被我弄的差不多了，再手工进行整理就好，昨天发现街上有卖煎饼的，今天中午吃的煎饼，特别大很实惠。下午买了转网线的接口，接了公司的网线，这几天一直用的自己的流量有点伤不起，但公司的网线更难受，必须开代理，而且代理的只是http和https的请求，基于http请求的一些应用还可以正常使用，但其他协议的应用就凉了，怪不得见大家都用的网页版微信，QQ也挂了，还好网易云音乐没挂，但邮箱挂掉，不想去强行破解，限制就限制吧，好歹网速快。"></a>昨天回家测试代码，一不小心就忘记写日记了，今天早上坐地铁才想起来，只好和今天补在一起写了，昨天上午和我一起的实习生说会安排任务，见了婷姐，安排了一个数据库整理的工作，将Excel表中数据库各字段的名称命名整理好，不规范的整理规范，没有的自己补充，结果把表发过来有两万多条纪录，一条一条的整理，我实习完了都弄不完，简直在逗我，不开心，下午想着用Python写个脚本，批量操作吧，而且写代码比这个要有意思多了，就是操作了多个Excel里的多个工作表，一顿折腾，昨天调试的差不多，今天一天还是在优化，整理，两万条数据被我弄的差不多了，再手工进行整理就好，昨天发现街上有卖煎饼的，今天中午吃的煎饼，特别大很实惠。下午买了转网线的接口，接了公司的网线，这几天一直用的自己的流量有点伤不起，但公司的网线更难受，必须开代理，而且代理的只是http和https的请求，基于http请求的一些应用还可以正常使用，但其他协议的应用就凉了，怪不得见大家都用的网页版微信，QQ也挂了，还好网易云音乐没挂，但邮箱挂掉，不想去强行破解，限制就限制吧，好歹网速快。</h2><h2 id="这两天老大走的都很晚，我也是六点多再走，要是加班有加班费，我也就留下来了，每天回家得七点半。慢慢发现在公司的不同了，自己以前想做什么就做什么，而在公司里交给这个任务就得一直做下去，哪怕烦了，不想做了，也得做完，更加规矩。总之尽快学习吧。"><a href="#这两天老大走的都很晚，我也是六点多再走，要是加班有加班费，我也就留下来了，每天回家得七点半。慢慢发现在公司的不同了，自己以前想做什么就做什么，而在公司里交给这个任务就得一直做下去，哪怕烦了，不想做了，也得做完，更加规矩。总之尽快学习吧。" class="headerlink" title="这两天老大走的都很晚，我也是六点多再走，要是加班有加班费，我也就留下来了，每天回家得七点半。慢慢发现在公司的不同了，自己以前想做什么就做什么，而在公司里交给这个任务就得一直做下去，哪怕烦了，不想做了，也得做完，更加规矩。总之尽快学习吧。"></a>这两天老大走的都很晚，我也是六点多再走，要是加班有加班费，我也就留下来了，每天回家得七点半。慢慢发现在公司的不同了，自己以前想做什么就做什么，而在公司里交给这个任务就得一直做下去，哪怕烦了，不想做了，也得做完，更加规矩。总之尽快学习吧。</h2><h1 id="亚信实习的第五天（2018-09-22周五）"><a href="#亚信实习的第五天（2018-09-22周五）" class="headerlink" title="亚信实习的第五天（2018-09-22周五）"></a>亚信实习的第五天（2018-09-22周五）</h1><h2 id="第五天，一周马上就过去了，恰好是中秋节放三天，上午老大开了一个安全以及公司基本的工作的会议，我对公司的业务开始有了些了解，在这些数据的驱动下，衍生出各种项目，对工作更感兴趣，希望以后能接触到这方面的开发任务，肯定会学到很多的东西。然后整天还是在处理那些数据字段的问题，脚本的分析基本完成，剩下的就是人工去修改和处理了。"><a href="#第五天，一周马上就过去了，恰好是中秋节放三天，上午老大开了一个安全以及公司基本的工作的会议，我对公司的业务开始有了些了解，在这些数据的驱动下，衍生出各种项目，对工作更感兴趣，希望以后能接触到这方面的开发任务，肯定会学到很多的东西。然后整天还是在处理那些数据字段的问题，脚本的分析基本完成，剩下的就是人工去修改和处理了。" class="headerlink" title="第五天，一周马上就过去了，恰好是中秋节放三天，上午老大开了一个安全以及公司基本的工作的会议，我对公司的业务开始有了些了解，在这些数据的驱动下，衍生出各种项目，对工作更感兴趣，希望以后能接触到这方面的开发任务，肯定会学到很多的东西。然后整天还是在处理那些数据字段的问题，脚本的分析基本完成，剩下的就是人工去修改和处理了。"></a>第五天，一周马上就过去了，恰好是中秋节放三天，上午老大开了一个安全以及公司基本的工作的会议，我对公司的业务开始有了些了解，在这些数据的驱动下，衍生出各种项目，对工作更感兴趣，希望以后能接触到这方面的开发任务，肯定会学到很多的东西。然后整天还是在处理那些数据字段的问题，脚本的分析基本完成，剩下的就是人工去修改和处理了。</h2><h2 id="晚上是团建活动，几个组的一起出去吃饭，又是一波自我介绍，感觉程序员们真的很闷，吃完饭去玩密室逃脱，十点多出来又提议去唱歌，没办法只能跟着了，好久没玩到这么晚，凌晨一点半出来，大家顺路的一起打车回去，我自己在街上打了有半小时的出租车，回到家两点多，很开心，对公司有了一种熟悉感，希望节后能把打车钱报销。。。"><a href="#晚上是团建活动，几个组的一起出去吃饭，又是一波自我介绍，感觉程序员们真的很闷，吃完饭去玩密室逃脱，十点多出来又提议去唱歌，没办法只能跟着了，好久没玩到这么晚，凌晨一点半出来，大家顺路的一起打车回去，我自己在街上打了有半小时的出租车，回到家两点多，很开心，对公司有了一种熟悉感，希望节后能把打车钱报销。。。" class="headerlink" title="晚上是团建活动，几个组的一起出去吃饭，又是一波自我介绍，感觉程序员们真的很闷，吃完饭去玩密室逃脱，十点多出来又提议去唱歌，没办法只能跟着了，好久没玩到这么晚，凌晨一点半出来，大家顺路的一起打车回去，我自己在街上打了有半小时的出租车，回到家两点多，很开心，对公司有了一种熟悉感，希望节后能把打车钱报销。。。"></a>晚上是团建活动，几个组的一起出去吃饭，又是一波自我介绍，感觉程序员们真的很闷，吃完饭去玩密室逃脱，十点多出来又提议去唱歌，没办法只能跟着了，好久没玩到这么晚，凌晨一点半出来，大家顺路的一起打车回去，我自己在街上打了有半小时的出租车，回到家两点多，很开心，对公司有了一种熟悉感，希望节后能把打车钱报销。。。</h2><h1 id="亚信实习的第六天（2018-09-25周二）"><a href="#亚信实习的第六天（2018-09-25周二）" class="headerlink" title="亚信实习的第六天（2018-09-25周二）"></a>亚信实习的第六天（2018-09-25周二）</h1><h2 id="中秋节很快就过完了，其实待在家里也没有什么事干，在家写代码就感觉在加班，今天去了公司还是老样子，继续做数据字段的处理，表里有好多好多的数据，整理的我很懵，一天过的特别快，没什么特别好说的。"><a href="#中秋节很快就过完了，其实待在家里也没有什么事干，在家写代码就感觉在加班，今天去了公司还是老样子，继续做数据字段的处理，表里有好多好多的数据，整理的我很懵，一天过的特别快，没什么特别好说的。" class="headerlink" title="中秋节很快就过完了，其实待在家里也没有什么事干，在家写代码就感觉在加班，今天去了公司还是老样子，继续做数据字段的处理，表里有好多好多的数据，整理的我很懵，一天过的特别快，没什么特别好说的。"></a>中秋节很快就过完了，其实待在家里也没有什么事干，在家写代码就感觉在加班，今天去了公司还是老样子，继续做数据字段的处理，表里有好多好多的数据，整理的我很懵，一天过的特别快，没什么特别好说的。</h2><h1 id="亚信实习的第七天-2018-09-26周三"><a href="#亚信实习的第七天-2018-09-26周三" class="headerlink" title="亚信实习的第七天(2018-09-26周三)"></a>亚信实习的第七天(2018-09-26周三)</h1><h2 id="今天依旧还是整理数据字段，和霞姐提了做一些开发的工作，自己才来了一周多，一步步熟悉业务。今天通知毕业设计的事，我的毕业设计也构思的差不多了，做一个有技术的Demo，不望三年来学的知识。"><a href="#今天依旧还是整理数据字段，和霞姐提了做一些开发的工作，自己才来了一周多，一步步熟悉业务。今天通知毕业设计的事，我的毕业设计也构思的差不多了，做一个有技术的Demo，不望三年来学的知识。" class="headerlink" title="今天依旧还是整理数据字段，和霞姐提了做一些开发的工作，自己才来了一周多，一步步熟悉业务。今天通知毕业设计的事，我的毕业设计也构思的差不多了，做一个有技术的Demo，不望三年来学的知识。"></a>今天依旧还是整理数据字段，和霞姐提了做一些开发的工作，自己才来了一周多，一步步熟悉业务。今天通知毕业设计的事，我的毕业设计也构思的差不多了，做一个有技术的Demo，不望三年来学的知识。</h2><h1 id="亚信实习的第八天-2018-09-27周四"><a href="#亚信实习的第八天-2018-09-27周四" class="headerlink" title="亚信实习的第八天(2018-09-27周四)"></a>亚信实习的第八天(2018-09-27周四)</h1><h2 id="昨天看到一句话，让自己随时保持跳槽的能力，公司的工作确实有些安逸，安逸到让我放松自己，不去继续学习，只想每天完成既定的工作，最近开始要不断刷题，看专业知识，刷题的习惯要一直保持下去，保证编程的思维不会乱。"><a href="#昨天看到一句话，让自己随时保持跳槽的能力，公司的工作确实有些安逸，安逸到让我放松自己，不去继续学习，只想每天完成既定的工作，最近开始要不断刷题，看专业知识，刷题的习惯要一直保持下去，保证编程的思维不会乱。" class="headerlink" title="昨天看到一句话，让自己随时保持跳槽的能力，公司的工作确实有些安逸，安逸到让我放松自己，不去继续学习，只想每天完成既定的工作，最近开始要不断刷题，看专业知识，刷题的习惯要一直保持下去，保证编程的思维不会乱。"></a>昨天看到一句话，让自己随时保持跳槽的能力，公司的工作确实有些安逸，安逸到让我放松自己，不去继续学习，只想每天完成既定的工作，最近开始要不断刷题，看专业知识，刷题的习惯要一直保持下去，保证编程的思维不会乱。</h2><h1 id="亚信实习的第九天-2018-09-28周五"><a href="#亚信实习的第九天-2018-09-28周五" class="headerlink" title="亚信实习的第九天(2018-09-28周五)"></a>亚信实习的第九天(2018-09-28周五)</h1><h2 id="今天还是在做LeetCode的题，发现自己很菜，根本达不到以前的水平，要不断的提升自己。马上放假了，公司里已经陆陆续续开始溜了，还有明天和后天，要是人少我也该溜了，国庆回家休息休息。"><a href="#今天还是在做LeetCode的题，发现自己很菜，根本达不到以前的水平，要不断的提升自己。马上放假了，公司里已经陆陆续续开始溜了，还有明天和后天，要是人少我也该溜了，国庆回家休息休息。" class="headerlink" title="今天还是在做LeetCode的题，发现自己很菜，根本达不到以前的水平，要不断的提升自己。马上放假了，公司里已经陆陆续续开始溜了，还有明天和后天，要是人少我也该溜了，国庆回家休息休息。"></a>今天还是在做LeetCode的题，发现自己很菜，根本达不到以前的水平，要不断的提升自己。马上放假了，公司里已经陆陆续续开始溜了，还有明天和后天，要是人少我也该溜了，国庆回家休息休息。</h2><h1 id="亚信实习的第十天-2018-09-29周六"><a href="#亚信实习的第十天-2018-09-29周六" class="headerlink" title="亚信实习的第十天(2018-09-29周六)"></a>亚信实习的第十天(2018-09-29周六)</h1><h2 id="早上去坐地铁发现人少了很多，去公司有很多人没有来，安安静静的坐了一天，写写题，本来打算重构一些网站，完善了RainAI，明天就能回家了，回家以后暂时不更日记了。"><a href="#早上去坐地铁发现人少了很多，去公司有很多人没有来，安安静静的坐了一天，写写题，本来打算重构一些网站，完善了RainAI，明天就能回家了，回家以后暂时不更日记了。" class="headerlink" title="早上去坐地铁发现人少了很多，去公司有很多人没有来，安安静静的坐了一天，写写题，本来打算重构一些网站，完善了RainAI，明天就能回家了，回家以后暂时不更日记了。"></a>早上去坐地铁发现人少了很多，去公司有很多人没有来，安安静静的坐了一天，写写题，本来打算重构一些网站，完善了RainAI，明天就能回家了，回家以后暂时不更日记了。</h2><h1 id="2018-10-8（周一）"><a href="#2018-10-8（周一）" class="headerlink" title="2018-10-8（周一）"></a>2018-10-8（周一）</h1><h2 id="国庆假期回来第一天上班，早上早起，晚上推迟了一个半小时回家，挺平淡的一天，不能为了工作为工作，爱好还是爱好，它还要我去一直追寻。"><a href="#国庆假期回来第一天上班，早上早起，晚上推迟了一个半小时回家，挺平淡的一天，不能为了工作为工作，爱好还是爱好，它还要我去一直追寻。" class="headerlink" title="国庆假期回来第一天上班，早上早起，晚上推迟了一个半小时回家，挺平淡的一天，不能为了工作为工作，爱好还是爱好，它还要我去一直追寻。"></a>国庆假期回来第一天上班，早上早起，晚上推迟了一个半小时回家，挺平淡的一天，不能为了工作为工作，爱好还是爱好，它还要我去一直追寻。</h2><h1 id="2018-10-9（周二）"><a href="#2018-10-9（周二）" class="headerlink" title="2018-10-9（周二）"></a>2018-10-9（周二）</h1><h2 id="今天老大让做了一个web的问卷调查，一会就做完了，有些无聊，还是自己做题，看代码，晚上回来修空调，碰到了糟心的房东，社会主义真好。"><a href="#今天老大让做了一个web的问卷调查，一会就做完了，有些无聊，还是自己做题，看代码，晚上回来修空调，碰到了糟心的房东，社会主义真好。" class="headerlink" title="今天老大让做了一个web的问卷调查，一会就做完了，有些无聊，还是自己做题，看代码，晚上回来修空调，碰到了糟心的房东，社会主义真好。"></a>今天老大让做了一个web的问卷调查，一会就做完了，有些无聊，还是自己做题，看代码，晚上回来修空调，碰到了糟心的房东，社会主义真好。</h2><h1 id="2018-10-10（周三）"><a href="#2018-10-10（周三）" class="headerlink" title="2018-10-10（周三）"></a>2018-10-10（周三）</h1><h2 id="今天还是做题，做任务，做整理，下午被分到了开发组里，终于能写代码了，好开心，希望以后能更多的接触到开发，学到更多的东西。"><a href="#今天还是做题，做任务，做整理，下午被分到了开发组里，终于能写代码了，好开心，希望以后能更多的接触到开发，学到更多的东西。" class="headerlink" title="今天还是做题，做任务，做整理，下午被分到了开发组里，终于能写代码了，好开心，希望以后能更多的接触到开发，学到更多的东西。"></a>今天还是做题，做任务，做整理，下午被分到了开发组里，终于能写代码了，好开心，希望以后能更多的接触到开发，学到更多的东西。</h2><h1 id="2018-10-13（周六）"><a href="#2018-10-13（周六）" class="headerlink" title="2018-10-13（周六）"></a>2018-10-13（周六）</h1><h2 id="发现每天写日记也没有意思，生活就是这么无趣，每天都过的差不多，如果发生有意思的事情再去纪录。"><a href="#发现每天写日记也没有意思，生活就是这么无趣，每天都过的差不多，如果发生有意思的事情再去纪录。" class="headerlink" title="发现每天写日记也没有意思，生活就是这么无趣，每天都过的差不多，如果发生有意思的事情再去纪录。"></a>发现每天写日记也没有意思，生活就是这么无趣，每天都过的差不多，如果发生有意思的事情再去纪录。</h2><h1 id="2018-10-21-周日"><a href="#2018-10-21-周日" class="headerlink" title="2018-10-21(周日)"></a>2018-10-21(周日)</h1><h2 id="这周过的很忙碌，每天晚上加班到九点多甚至十点，很累，也很充实，要学的东西太多了，Maven，Git，Springboot，Kafka等等，这周还要交青软的实习项目，毕业设计开题报告，PPT，忙的乱七八糟的。本来打算周末去兼职整理资料，然后也推掉了，事情太多，不想把自己累死，周末在家待着挺开心的，每天睡到自然醒，以前都没睡过这么迟，起来再继续写写东西。"><a href="#这周过的很忙碌，每天晚上加班到九点多甚至十点，很累，也很充实，要学的东西太多了，Maven，Git，Springboot，Kafka等等，这周还要交青软的实习项目，毕业设计开题报告，PPT，忙的乱七八糟的。本来打算周末去兼职整理资料，然后也推掉了，事情太多，不想把自己累死，周末在家待着挺开心的，每天睡到自然醒，以前都没睡过这么迟，起来再继续写写东西。" class="headerlink" title="这周过的很忙碌，每天晚上加班到九点多甚至十点，很累，也很充实，要学的东西太多了，Maven，Git，Springboot，Kafka等等，这周还要交青软的实习项目，毕业设计开题报告，PPT，忙的乱七八糟的。本来打算周末去兼职整理资料，然后也推掉了，事情太多，不想把自己累死，周末在家待着挺开心的，每天睡到自然醒，以前都没睡过这么迟，起来再继续写写东西。"></a>这周过的很忙碌，每天晚上加班到九点多甚至十点，很累，也很充实，要学的东西太多了，Maven，Git，Springboot，Kafka等等，这周还要交青软的实习项目，毕业设计开题报告，PPT，忙的乱七八糟的。本来打算周末去兼职整理资料，然后也推掉了，事情太多，不想把自己累死，周末在家待着挺开心的，每天睡到自然醒，以前都没睡过这么迟，起来再继续写写东西。</h2><h2 id="出于安全考虑就不说在公司做什么，万一被别人发现，就不好玩了，这周做了一个在线答题系统，准备上传到Git上，再写篇文章，还有用springboot写的小交易网也上传了，虽然忙，但也有收获，相信自己，学习更多的知识。"><a href="#出于安全考虑就不说在公司做什么，万一被别人发现，就不好玩了，这周做了一个在线答题系统，准备上传到Git上，再写篇文章，还有用springboot写的小交易网也上传了，虽然忙，但也有收获，相信自己，学习更多的知识。" class="headerlink" title="出于安全考虑就不说在公司做什么，万一被别人发现，就不好玩了，这周做了一个在线答题系统，准备上传到Git上，再写篇文章，还有用springboot写的小交易网也上传了，虽然忙，但也有收获，相信自己，学习更多的知识。"></a>出于安全考虑就不说在公司做什么，万一被别人发现，就不好玩了，这周做了一个在线答题系统，准备上传到Git上，再写篇文章，还有用springboot写的小交易网也上传了，虽然忙，但也有收获，相信自己，学习更多的知识。</h2><h1 id="2018-10-28-周日"><a href="#2018-10-28-周日" class="headerlink" title="2018-10-28(周日)"></a>2018-10-28(周日)</h1><h2 id="周末过的很快，刷了一季西部世界被震惊的不行，这周总的来说收获不大，也不怎么忙，对自己的能力逐渐开始怀疑，一直在看源码，却始终不得其解，连入门都找不到，也好，只有感受到挫折才能进步，我对于技术的瓶颈始终卡在后端web中，只是底层的，也是最好入手的，我需要跳出这个安逸圈，不断去提高技术，大数据的海洋里，我只走到海边，但我会在这一年的实习里越游越远，去见识真正的技术。放下一些东西，准备更远的目标。"><a href="#周末过的很快，刷了一季西部世界被震惊的不行，这周总的来说收获不大，也不怎么忙，对自己的能力逐渐开始怀疑，一直在看源码，却始终不得其解，连入门都找不到，也好，只有感受到挫折才能进步，我对于技术的瓶颈始终卡在后端web中，只是底层的，也是最好入手的，我需要跳出这个安逸圈，不断去提高技术，大数据的海洋里，我只走到海边，但我会在这一年的实习里越游越远，去见识真正的技术。放下一些东西，准备更远的目标。" class="headerlink" title="周末过的很快，刷了一季西部世界被震惊的不行，这周总的来说收获不大，也不怎么忙，对自己的能力逐渐开始怀疑，一直在看源码，却始终不得其解，连入门都找不到，也好，只有感受到挫折才能进步，我对于技术的瓶颈始终卡在后端web中，只是底层的，也是最好入手的，我需要跳出这个安逸圈，不断去提高技术，大数据的海洋里，我只走到海边，但我会在这一年的实习里越游越远，去见识真正的技术。放下一些东西，准备更远的目标。"></a>周末过的很快，刷了一季西部世界被震惊的不行，这周总的来说收获不大，也不怎么忙，对自己的能力逐渐开始怀疑，一直在看源码，却始终不得其解，连入门都找不到，也好，只有感受到挫折才能进步，我对于技术的瓶颈始终卡在后端web中，只是底层的，也是最好入手的，我需要跳出这个安逸圈，不断去提高技术，大数据的海洋里，我只走到海边，但我会在这一年的实习里越游越远，去见识真正的技术。放下一些东西，准备更远的目标。</h2><h1 id="2018-11-04-周日-最后一次更新"><a href="#2018-11-04-周日-最后一次更新" class="headerlink" title="2018-11-04(周日)最后一次更新"></a>2018-11-04(周日)最后一次更新</h1><h2 id="这周只工作了三天，因为要回学校体测顺便取点衣服，北京不供暖真的很冷，这几天在路上一直思考要不要继续干下去，两个月了，凭心而论在亚信学到的东西并不多，但其他方面还是有很多进步，组里的人都很好，也有欺负实习生的，感觉在亚信实习生太过于廉价，不去要求能力只要干杂活就行，这不是我想要的，而且之前在网上看到的转正转外包是真的，薪资也很低，福利待遇差，难以想象这是自己以后的出路，不甘心。我决定从头再来，要么不做要么做到最好-，与其这样纠缠挣扎，不如让自己开心些。还有很多想写的，等离职以后再去总结这段实习生活"><a href="#这周只工作了三天，因为要回学校体测顺便取点衣服，北京不供暖真的很冷，这几天在路上一直思考要不要继续干下去，两个月了，凭心而论在亚信学到的东西并不多，但其他方面还是有很多进步，组里的人都很好，也有欺负实习生的，感觉在亚信实习生太过于廉价，不去要求能力只要干杂活就行，这不是我想要的，而且之前在网上看到的转正转外包是真的，薪资也很低，福利待遇差，难以想象这是自己以后的出路，不甘心。我决定从头再来，要么不做要么做到最好-，与其这样纠缠挣扎，不如让自己开心些。还有很多想写的，等离职以后再去总结这段实习生活" class="headerlink" title="这周只工作了三天，因为要回学校体测顺便取点衣服，北京不供暖真的很冷，这几天在路上一直思考要不要继续干下去，两个月了，凭心而论在亚信学到的东西并不多，但其他方面还是有很多进步，组里的人都很好，也有欺负实习生的，感觉在亚信实习生太过于廉价，不去要求能力只要干杂活就行，这不是我想要的，而且之前在网上看到的转正转外包是真的，薪资也很低，福利待遇差，难以想象这是自己以后的出路，不甘心。我决定从头再来，要么不做要么做到最好 ，与其这样纠缠挣扎，不如让自己开心些。还有很多想写的，等离职以后再去总结这段实习生活"></a>这周只工作了三天，因为要回学校体测顺便取点衣服，北京不供暖真的很冷，这几天在路上一直思考要不要继续干下去，两个月了，凭心而论在亚信学到的东西并不多，但其他方面还是有很多进步，组里的人都很好，也有欺负实习生的，感觉在亚信实习生太过于廉价，不去要求能力只要干杂活就行，这不是我想要的，而且之前在网上看到的转正转外包是真的，薪资也很低，福利待遇差，难以想象这是自己以后的出路，不甘心。我决定从头再来，要么不做要么做到最好 ，与其这样纠缠挣扎，不如让自己开心些。还有很多想写的，等离职以后再去总结这段实习生活</h2>]]></content>
      <categories>
        <category>亚信实习</category>
      </categories>
  </entry>
  <entry>
    <title>使用CyclicBarrier控制Kafka多线程消费消息的位移提交问题</title>
    <url>/2021/03/12/%E4%BD%BF%E7%94%A8cyclicbarrier%E6%8E%A7%E5%88%B6kafka%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%E7%9A%84%E4%BD%8D%E7%A7%BB%E6%8F%90%E4%BA%A4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="使用CyclicBarrier控制Kafka多线程消费消息的位移提交问题"><a href="#使用CyclicBarrier控制Kafka多线程消费消息的位移提交问题" class="headerlink" title="使用CyclicBarrier控制Kafka多线程消费消息的位移提交问题"></a>使用CyclicBarrier控制Kafka多线程消费消息的位移提交问题</h1><p>Kafka中消费者是线程不安全的，一个topic只能被一个消费组中的消费者消费，想要提高数据消费能力，可以增加分区数，因为消费者数可以和分区数进行对应，当消费者数大于分区数时，多余的消费者将处于空闲状态，或者也可以在每个线程中创建一个消费者实例，这样也可以对数据来处理，但创建多个消费者实例必然会造成资源的浪费。通过线程池来对数据进行消费，就会存在位移提交的问题，从而引发数据丢失或重复，所以对位移的提交要格外处理，消费者默认是定时提交位移信息的，如果需要手动提交，要先修改配置参数关闭自动提交，再通过代码里调用commitSync()方法。 由于多线程的不可控性，如果让每个线程单独来获取数据再提交位移，很有可能就会造成位移错位等问题，如何合理的控制线程之间任务处理和位移提交问题，这里采用CyclicBarrier工具类，它的本质是一种比较特别的锁，通过配置线程数，当到达指定线程数后再统一执行某些操作，这些特性很适合用来控制位移的提交，我们可以将拉取到的数据分配到线程池中，当所有线程都处理完成后，触发CyclicBarrier中的提交任务，进行一次提交，接着再分配下一轮的数据。 以下便是根据这一策略编写的代码，仅供参考，因为尚未在生产环境中使用，只是对这种思路提高一种实现方式，可能还存在些问题，如当这一批拉取的数据小于线程池中线程数该如何等待，会不会存在短板效应，导致其他线程完成后一直等待某个线程执行，造成短时间位移提交阻塞。</p>
<h4 id="总体思路有点类似于滑动窗口，每次一批一批的处理，等待最后一个处理完成，再向前滑动。"><a href="#总体思路有点类似于滑动窗口，每次一批一批的处理，等待最后一个处理完成，再向前滑动。" class="headerlink" title="总体思路有点类似于滑动窗口，每次一批一批的处理，等待最后一个处理完成，再向前滑动。"></a>总体思路有点类似于滑动窗口，每次一批一批的处理，等待最后一个处理完成，再向前滑动。</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class KafkaMultiThread &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger LOG = LoggerFactory</span><br><span class="line">            .getLogger(KafkaMultiThread.class);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //这里创建一个消费者，使用外部的配置文件信息</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; kafkaConsumer = new KafkaConsumer&lt;&gt;(new Properties());</span><br><span class="line">        //订阅主题</span><br><span class="line">        kafkaConsumer.subscribe(Arrays.asList(&quot;topic-test&quot;));</span><br><span class="line">        //需要创建的线程数，这里线程池数和CyclicBarrier的数量要一致</span><br><span class="line">        int threadNumber = 10;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(threadNumber);</span><br><span class="line">        CyclicBarrier cyclicBarrier = new CyclicBarrier(threadNumber,()-&gt;&#123;</span><br><span class="line">            LOG.info(&quot;一批数据处理完毕，统一提交位移&quot;);</span><br><span class="line">            kafkaConsumer.commitSync();</span><br><span class="line">        &#125;);</span><br><span class="line">        //轮询获取消息</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = kafkaConsumer.poll(1000);</span><br><span class="line">            //对拉取到一批数据分别放入线程池中</span><br><span class="line">            for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                pool.execute(new KafkaHandle(record,cyclicBarrier));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 单独处理的线程</span><br><span class="line"> */</span><br><span class="line">class KafkaHandle implements Runnable&#123;</span><br><span class="line">    private static final Logger LOG = LoggerFactory</span><br><span class="line">            .getLogger(KafkaHandle.class);</span><br><span class="line"></span><br><span class="line">    ConsumerRecord&lt;String, String&gt; record;</span><br><span class="line">    CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构造函数初始化</span><br><span class="line">     * @param record 消息内容</span><br><span class="line">     * @param cyclicBarrier 主线程中的CyclicBarrier</span><br><span class="line">     */</span><br><span class="line">    public KafkaHandle(ConsumerRecord&lt;String, String&gt; record, CyclicBarrier cyclicBarrier) &#123;</span><br><span class="line">        this.record = record;</span><br><span class="line">        this.cyclicBarrier = cyclicBarrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        //模拟处理已分配的消息</span><br><span class="line">        LOG.info(&quot;offset = %d, value = %s&quot;, record.offset(), record.value());</span><br><span class="line">        //这里假设需要将数据转换为json</span><br><span class="line">        Map&lt;String, Object&gt; json = JSONUtil.parseObj(record.value());</span><br><span class="line">        LOG.info(String.valueOf(json.size()));</span><br><span class="line">        try &#123;</span><br><span class="line">            //处理完毕后进入等待</span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>使用两种多线程模式消费数据</title>
    <url>/2020/05/31/%E4%BD%BF%E7%94%A8%E4%B8%A4%E7%A7%8D%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%BC%8F%E6%B6%88%E8%B4%B9%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="使用两种多线程模式消费数据"><a href="#使用两种多线程模式消费数据" class="headerlink" title="使用两种多线程模式消费数据"></a>使用两种多线程模式消费数据</h1><p>KafkaProducer是线程安全的,然而 KafkaConsumer却是非线程安全的。 Kafka Consumer中定义了一个 acquire(方法,用来检测当前是否只有一个线程在操作,若有其他线程正在操作则会抛出 Concurrentmodifcationexception异常: java.util.ConcurrentModificationException: KafkaConsumer is not safe for multi-threaded access. KafkaConsumer非线程安全并不意味着我们在消费消息的时候只能以单线程的方式执行。如果生产者发送消息的速度大于消费者处理消息的速度,那么就会有越来越多的消息得不到及时的消费,造成了一定的延迟。除此之外,由于Kafka中消息保留机制的作用,有些消息有可能在被消费之前就被清理了,从而造成消息的丢失。我们可以通过多线程的方式来实现消息消费,多线程的目的就是为了提高整体的消费能力。多线程的实现方式有多种,第一种也是最常见的方式:线程封闭,即为每个线程实例化一个KafkaConsumer对象,如图3-10所示。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200531143640944.png"
                      alt="image-20200531143640944"
                ></p>
<h3 id="第一种多线程消费实现方式"><a href="#第一种多线程消费实现方式" class="headerlink" title="第一种多线程消费实现方式"></a>第一种多线程消费实现方式</h3><p>一个线程对应一个KafkaConsumer实例,我们可以称之为消费线程。一个消费线程可以消费一个或多个分区中的消息,所有的消费线程都隶属于同一个消费组。这种实现方式的并发度受限于分区的实际个数,当消费线程的个数大于分区数时,就有部分消费线程一直处于空闲的状态。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line">import org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Array;</span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wcy</span><br><span class="line"> * @Date: 2020/5/31</span><br><span class="line"> */</span><br><span class="line">public class FirstMultiConsumerThreadDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static final String brokerList = &quot;nas-cluster1:9092&quot;;</span><br><span class="line">    public static final String topic = &quot;test.topic&quot;;</span><br><span class="line">    public static final String groupId = &quot;group.demo&quot;;</span><br><span class="line"></span><br><span class="line">    public static Properties initConfig()&#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerList);</span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG,groupId);</span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, StringDeserializer.class.getName());</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;,StringDeserializer.class.getName());</span><br><span class="line">        return properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Properties props = initConfig();</span><br><span class="line">        int consumerThreadNum = 4;</span><br><span class="line">        for (int i = 0; i &lt; consumerThreadNum; i++) &#123;</span><br><span class="line">            new KafkaConsumerThread(props,topic).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class KafkaConsumerThread extends Thread&#123;</span><br><span class="line">        private KafkaConsumer&lt;String,String&gt; kafkaConsumer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public KafkaConsumerThread(Properties props, String topic) &#123;</span><br><span class="line">            this.kafkaConsumer = new KafkaConsumer&lt;&gt;(props);</span><br><span class="line">            this.kafkaConsumer.subscribe(Arrays.asList(topic));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                while (true)&#123;</span><br><span class="line">                    ConsumerRecords&lt;String,String&gt; records = kafkaConsumer.poll(Duration.ofMillis(100));</span><br><span class="line">                    for (ConsumerRecord&lt;String,String&gt; record : records)&#123;</span><br><span class="line">                        //实现处理逻辑</span><br><span class="line">                        System.out.println(record.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                kafkaConsumer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>内部类 Kafka Consumer Thread代表消费线程,其内部包裹着一个独立的 Kafka Consumer实例。通过外部类的 maino方法来启动多个消费线程,消费线程的数量由 consumer Threadnum变量指定。一般一个主题的分区数事先可以知晓,可以将 consumer Threadnum设置成不大于分区数的值,如果不知道主题的分区数,那么也可以通过 Kafka Consumer类的 partitionsforo方法来间接获取,进而再设置合理的 consumer Threadnum值。 上面这种多线程的实现方式和开启多个消费进程的方式没有本质上的区别,它的优点是每个线程可以按顺序消费各个分区中的消息。缺点也很明显,每个消费线程都要维护一个独立的TCP连接,如果分区数和 consumer Threadnum的值都很大,那么会造成不小的系统开销。</p>
<h3 id="第二种基于数据处理的多线程消费实现"><a href="#第二种基于数据处理的多线程消费实现" class="headerlink" title="第二种基于数据处理的多线程消费实现"></a>第二种基于数据处理的多线程消费实现</h3><p>如果处理数据的地方对消息的处理非常迅速,那么pollo拉取的频次也会更高,进而整体消费的性能也会提升;相反,如果在这里对消息的处理缓慢,比如进行一个事务性操作,或者等待一个RPC的同步响应,那么poll(拉取的频次也会随之下降,进而造成整体消费性能的下降。一般而言, pol()拉取消息的速度是相当快的,而整体消费的瓶颈也正是在处理消息这一块,如果我们通过一定的方式来改进这一部分,那么我们就能带动整体消费性能的提升，因此将处理消息模块改成多线程的实现方式。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200531145522193.png"
                      alt="image-20200531145522193"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.rain.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line">import org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"></span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wcy</span><br><span class="line"> * @Date: 2020/5/31</span><br><span class="line"> */</span><br><span class="line">public class SecondMultiConsumerThreadDemo &#123;</span><br><span class="line">    public static final String brokerList = &quot;nas-cluster1:9092&quot;;</span><br><span class="line">    public static final String topic = &quot;test.topic&quot;;</span><br><span class="line">    public static final String groupId = &quot;group.demo&quot;;</span><br><span class="line"></span><br><span class="line">    public static Properties initConfig()&#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerList);</span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG,groupId);</span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);</span><br><span class="line">        properties.put(&quot;key.deserializer&quot;, StringDeserializer.class.getName());</span><br><span class="line">        properties.put(&quot;value.deserializer&quot;,StringDeserializer.class.getName());</span><br><span class="line">        return properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Properties properties = initConfig();</span><br><span class="line">        KafkaConsumerThread consumerThread = new KafkaConsumerThread(properties,topic,</span><br><span class="line">                Runtime.getRuntime().availableProcessors());</span><br><span class="line">        consumerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class KafkaConsumerThread extends Thread&#123;</span><br><span class="line">        private KafkaConsumer&lt;String,String&gt; kafkaConsumer;</span><br><span class="line">        private ExecutorService executorService;</span><br><span class="line">        private int threadNumber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public KafkaConsumerThread(Properties properties, String topic, int availableProcessors) &#123;</span><br><span class="line">            kafkaConsumer = new KafkaConsumer&lt;String, String&gt;(properties);</span><br><span class="line">            kafkaConsumer.subscribe(Collections.singletonList(topic));</span><br><span class="line">            this.threadNumber = availableProcessors;</span><br><span class="line">            executorService = new ThreadPoolExecutor(threadNumber,threadNumber,0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                    new ArrayBlockingQueue&lt;&gt;(1000),new ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                while (true)&#123;</span><br><span class="line">                    ConsumerRecords&lt;String,String&gt; records = kafkaConsumer.poll(Duration.ofMillis(100));</span><br><span class="line">                    if (!records.isEmpty())&#123;</span><br><span class="line">                        executorService.submit(new RecordsHandler(records));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                kafkaConsumer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static class RecordsHandler extends Thread&#123;</span><br><span class="line">        public final ConsumerRecords&lt;String,String&gt; records;</span><br><span class="line"></span><br><span class="line">        public RecordsHandler(ConsumerRecords&lt;String, String&gt; records) &#123;</span><br><span class="line">            this.records = records;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            for (ConsumerRecord&lt;String,String&gt; record : records)&#123;</span><br><span class="line">                //实现处理逻辑</span><br><span class="line">                System.out.println(record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>代码中 Recordhandler类是用来处理消息的,而 Kafka Thread类对应的是一个消费线程,里面通过线程池的方式来调用 Recordhandler处理一批批的消息。注意Kafka Consumer Thread类中 Threadpoolexecutor里的最后一个参数设置的是 Callerrunspolicyo, 这样可以防止线程池的总体消费能力跟不上polO拉取的能力,从而导致异常现象的发生。第三种实现方式还可以横向扩展,通过开启多个 Kafka Consumerthread实例来进一步提升整体的消费能力。</p>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>使用hutool-poi在未安装Office或wps软件的电脑中生成Excel的xls后缀消失问题</title>
    <url>/2020/04/21/%E4%BD%BF%E7%94%A8hutool-poi%E5%9C%A8%E6%9C%AA%E5%AE%89%E8%A3%85office%E6%88%96wps%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%AD%E7%94%9F%E6%88%90excel%E7%9A%84xls%E5%90%8E%E7%BC%80%E6%B6%88/</url>
    <content><![CDATA[<h1 id="使用hutool-poi在未安装Office或wps软件的电脑中生成Excel的xls后缀消失问题"><a href="#使用hutool-poi在未安装Office或wps软件的电脑中生成Excel的xls后缀消失问题" class="headerlink" title="使用hutool-poi在未安装Office或wps软件的电脑中生成Excel的xls后缀消失问题"></a>使用hutool-poi在未安装Office或wps软件的电脑中生成Excel的xls后缀消失问题</h1><h3 id="由于项目中存在日志导出功能，会将查找的日志数据生成Excel文件并下载，在开发和测试过程中，该功能并未出现问题。"><a href="#由于项目中存在日志导出功能，会将查找的日志数据生成Excel文件并下载，在开发和测试过程中，该功能并未出现问题。" class="headerlink" title="由于项目中存在日志导出功能，会将查找的日志数据生成Excel文件并下载，在开发和测试过程中，该功能并未出现问题。"></a>由于项目中存在日志导出功能，会将查找的日志数据生成Excel文件并下载，在开发和测试过程中，该功能并未出现问题。</h3><h3 id="而当现场环境使用一台未安装Office或wps软件的电脑去下载日志文件时，生成的xls文件后缀消失。当安装wps软件后再下载便会出现xls后缀。"><a href="#而当现场环境使用一台未安装Office或wps软件的电脑去下载日志文件时，生成的xls文件后缀消失。当安装wps软件后再下载便会出现xls后缀。" class="headerlink" title="而当现场环境使用一台未安装Office或wps软件的电脑去下载日志文件时，生成的xls文件后缀消失。当安装wps软件后再下载便会出现xls后缀。"></a>而当现场环境使用一台未安装Office或wps软件的电脑去下载日志文件时，生成的xls文件后缀消失。当安装wps软件后再下载便会出现xls后缀。</h3><h3 id="首先可以排除代码中后缀生成问题，因为是直接拼接的，而当使用Mac系统测试时，会将xls转换为xlw，这种转换是强制的。一开始分析的是，系统对于尚未安装应用程序的后缀文件，没有在默认文件列表里生成映射关系，所以会进行过滤拦截，去除后缀。这种假设是符合的，但使用百度文库或其他网盘下载上传好的xlsx文件时，后缀并没有被过滤，所以应该是类型配置中出现问题。"><a href="#首先可以排除代码中后缀生成问题，因为是直接拼接的，而当使用Mac系统测试时，会将xls转换为xlw，这种转换是强制的。一开始分析的是，系统对于尚未安装应用程序的后缀文件，没有在默认文件列表里生成映射关系，所以会进行过滤拦截，去除后缀。这种假设是符合的，但使用百度文库或其他网盘下载上传好的xlsx文件时，后缀并没有被过滤，所以应该是类型配置中出现问题。" class="headerlink" title="首先可以排除代码中后缀生成问题，因为是直接拼接的，而当使用Mac系统测试时，会将xls转换为xlw，这种转换是强制的。一开始分析的是，系统对于尚未安装应用程序的后缀文件，没有在默认文件列表里生成映射关系，所以会进行过滤拦截，去除后缀。这种假设是符合的，但使用百度文库或其他网盘下载上传好的xlsx文件时，后缀并没有被过滤，所以应该是类型配置中出现问题。"></a>首先可以排除代码中后缀生成问题，因为是直接拼接的，而当使用Mac系统测试时，会将xls转换为xlw，这种转换是强制的。一开始分析的是，系统对于尚未安装应用程序的后缀文件，没有在默认文件列表里生成映射关系，所以会进行过滤拦截，去除后缀。这种假设是符合的，但使用百度文库或其他网盘下载上传好的xlsx文件时，后缀并没有被过滤，所以应该是类型配置中出现问题。</h3><h3 id="1-转换生成文件的编码格式都为UTF-8（并没有用）"><a href="#1-转换生成文件的编码格式都为UTF-8（并没有用）" class="headerlink" title="1.转换生成文件的编码格式都为UTF-8（并没有用）"></a>1.转换生成文件的编码格式都为UTF-8（并没有用）</h3><h3 id="2-修改ContentType，以下为对应关系"><a href="#2-修改ContentType，以下为对应关系" class="headerlink" title="2.修改ContentType，以下为对应关系"></a>2.修改ContentType，以下为对应关系</h3><h3 id="如果是excel97-2003-那么content-type应该设置为：application-x2F-vnd-ms-excel，"><a href="#如果是excel97-2003-那么content-type应该设置为：application-x2F-vnd-ms-excel，" class="headerlink" title="如果是excel97~2003,那么content-type应该设置为：application&#x2F;vnd.ms-excel，"></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200421193315703.png"
                      alt="image-20200421193315703"
                >如果是excel97~2003,那么content-type应该设置为：application&#x2F;vnd.ms-excel，</h3><h3 id="如果是excel2007以后的，那么content-type应该设置为：application-x2F-vnd-openxmlformats-officedocument-spreadsheetml-sheet"><a href="#如果是excel2007以后的，那么content-type应该设置为：application-x2F-vnd-openxmlformats-officedocument-spreadsheetml-sheet" class="headerlink" title="如果是excel2007以后的，那么content-type应该设置为：application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet"></a>如果是excel2007以后的，那么content-type应该设置为：application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet</h3><h3 id="最开始代码中使用的是application-x2F-vnd-ms-excel，在修改为第二个并将后缀拼接为xlsx，下载功能终于正常，后缀不受系统过滤。"><a href="#最开始代码中使用的是application-x2F-vnd-ms-excel，在修改为第二个并将后缀拼接为xlsx，下载功能终于正常，后缀不受系统过滤。" class="headerlink" title="最开始代码中使用的是application&#x2F;vnd.ms-excel，在修改为第二个并将后缀拼接为xlsx，下载功能终于正常，后缀不受系统过滤。"></a>最开始代码中使用的是application&#x2F;vnd.ms-excel，在修改为第二个并将后缀拼接为xlsx，下载功能终于正常，后缀不受系统过滤。</h3><h3 id="若要复现该问题是比较繁琐的，因为大部分电脑都会安装office软件，很少会用一台WindowsServer服务器来访问项目的情况，所以之前并未察觉，网上也没有该问题的解决办法，以上步骤仅供参考。"><a href="#若要复现该问题是比较繁琐的，因为大部分电脑都会安装office软件，很少会用一台WindowsServer服务器来访问项目的情况，所以之前并未察觉，网上也没有该问题的解决办法，以上步骤仅供参考。" class="headerlink" title="若要复现该问题是比较繁琐的，因为大部分电脑都会安装office软件，很少会用一台WindowsServer服务器来访问项目的情况，所以之前并未察觉，网上也没有该问题的解决办法，以上步骤仅供参考。"></a>若要复现该问题是比较繁琐的，因为大部分电脑都会安装office软件，很少会用一台WindowsServer服务器来访问项目的情况，所以之前并未察觉，网上也没有该问题的解决办法，以上步骤仅供参考。</h3>]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2017/07/27/%E5%85%B3%E4%BA%8E%E6%88%91-2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>关于mybatis-plus中Service和Mapper的分析</title>
    <url>/2020/03/19/%E5%85%B3%E4%BA%8Emybatis-plus%E4%B8%ADservice%E5%92%8Cmapper%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="关于mybatis-plus中Service和Mapper的分析"><a href="#关于mybatis-plus中Service和Mapper的分析" class="headerlink" title="关于mybatis-plus中Service和Mapper的分析"></a>关于mybatis-plus中Service和Mapper的分析</h1><h4 id="在后端开发过程中，如果有用到mybatis-plus，肯定会发现在其内部存在着两种数据库操作接口，Iservice和BaseMapper，如果只是用增删改查会发现两者的功能是一致的，除了方法名称有所不同，其他的基本相似。对此，我颇为好奇，便打开两个接口的源码进行对比。"><a href="#在后端开发过程中，如果有用到mybatis-plus，肯定会发现在其内部存在着两种数据库操作接口，Iservice和BaseMapper，如果只是用增删改查会发现两者的功能是一致的，除了方法名称有所不同，其他的基本相似。对此，我颇为好奇，便打开两个接口的源码进行对比。" class="headerlink" title="在后端开发过程中，如果有用到mybatis-plus，肯定会发现在其内部存在着两种数据库操作接口，Iservice和BaseMapper，如果只是用增删改查会发现两者的功能是一致的，除了方法名称有所不同，其他的基本相似。对此，我颇为好奇，便打开两个接口的源码进行对比。"></a>在后端开发过程中，如果有用到mybatis-plus，肯定会发现在其内部存在着两种数据库操作接口，Iservice和BaseMapper，如果只是用增删改查会发现两者的功能是一致的，除了方法名称有所不同，其他的基本相似。对此，我颇为好奇，便打开两个接口的源码进行对比。</h4><h4 id="先演示一下基本开发中的继承关系，手动创建的Service继承于ServiceImpl，并加载自己创建的Mapper"><a href="#先演示一下基本开发中的继承关系，手动创建的Service继承于ServiceImpl，并加载自己创建的Mapper" class="headerlink" title="先演示一下基本开发中的继承关系，手动创建的Service继承于ServiceImpl，并加载自己创建的Mapper"></a>先演示一下基本开发中的继承关系，手动创建的Service继承于ServiceImpl，并加载自己创建的Mapper</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RestDeptService extends ServiceImpl&lt;RestDeptMapper, RestDept&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RestDeptMapper restDeptMapper;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public interface RestDeptMapper extends BaseMapper&lt;RestDept&gt; &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="如上，就是一般开发的基本模版代码，足以满足各种需求功能，但点开源码时，便进入新世界的大门。"><a href="#如上，就是一般开发的基本模版代码，足以满足各种需求功能，但点开源码时，便进入新世界的大门。" class="headerlink" title="如上，就是一般开发的基本模版代码，足以满足各种需求功能，但点开源码时，便进入新世界的大门。"></a>如上，就是一般开发的基本模版代码，足以满足各种需求功能，但点开源码时，便进入新世界的大门。</h4><h4 id="先看一下继承结构"><a href="#先看一下继承结构" class="headerlink" title="先看一下继承结构"></a>先看一下继承结构</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200319140641414.png"
                      alt="image-20200319140641414"
                ></p>
<h4 id="这样看，是不是很神奇，我们继承的ServiceImpl依旧实现了BaseMapper接口和Iservice接口，这就感觉有点啰嗦了，明明我们单独写了RestDeptMapper，并且继承了BaseMapper，现在ServiceImpl还是实现了BaseMapper，那我直接一个Service用下来不就行了，创建两套类，功能相似，还容易混乱，代码结构冗余。"><a href="#这样看，是不是很神奇，我们继承的ServiceImpl依旧实现了BaseMapper接口和Iservice接口，这就感觉有点啰嗦了，明明我们单独写了RestDeptMapper，并且继承了BaseMapper，现在ServiceImpl还是实现了BaseMapper，那我直接一个Service用下来不就行了，创建两套类，功能相似，还容易混乱，代码结构冗余。" class="headerlink" title="这样看，是不是很神奇，我们继承的ServiceImpl依旧实现了BaseMapper接口和Iservice接口，这就感觉有点啰嗦了，明明我们单独写了RestDeptMapper，并且继承了BaseMapper，现在ServiceImpl还是实现了BaseMapper，那我直接一个Service用下来不就行了，创建两套类，功能相似，还容易混乱，代码结构冗余。"></a>这样看，是不是很神奇，我们继承的ServiceImpl依旧实现了BaseMapper接口和Iservice接口，这就感觉有点啰嗦了，明明我们单独写了RestDeptMapper，并且继承了BaseMapper，现在ServiceImpl还是实现了BaseMapper，那我直接一个Service用下来不就行了，创建两套类，功能相似，还容易混乱，代码结构冗余。</h4><h4 id="本着“存在即合理”的理念，我们对比一下两个接口的方法。"><a href="#本着“存在即合理”的理念，我们对比一下两个接口的方法。" class="headerlink" title="本着“存在即合理”的理念，我们对比一下两个接口的方法。"></a>本着“存在即合理”的理念，我们对比一下两个接口的方法。</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/image-20200319141921170.png"
                      alt="image-20200319141921170"
                ></p>
<h4 id="果然，Service简直是BaseMapper的大扩充，不但包含了所有基本方法，还加入了很多批处理功能，我们可以看一下官网对这两种接口的说明。"><a href="#果然，Service简直是BaseMapper的大扩充，不但包含了所有基本方法，还加入了很多批处理功能，我们可以看一下官网对这两种接口的说明。" class="headerlink" title="果然，Service简直是BaseMapper的大扩充，不但包含了所有基本方法，还加入了很多批处理功能，我们可以看一下官网对这两种接口的说明。"></a>果然，Service简直是BaseMapper的大扩充，不但包含了所有基本方法，还加入了很多批处理功能，我们可以看一下官网对这两种接口的说明。</h4><p>官网链接：<a class="link"   href="https://mp.baomidou.com/guide/crud-interface.html#remove" >https://mp.baomidou.com/guide/crud-interface.html#remove <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Service-CRUD-接口"><a href="#Service-CRUD-接口" class="headerlink" title="Service CRUD 接口"></a>Service CRUD 接口</h2><p>说明:</p>
<ul>
<li>通用 Service CRUD 封装<a class="link"   href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java" >IService <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li>
<li>泛型 <code>T</code> 为任意实体对象</li>
<li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li>
<li>对象 <code>Wrapper</code> 为 <a class="link"   href="https://mp.baomidou.com/guide/wrapper.html" >条件构造器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="Mapper-CRUD-接口"><a href="#Mapper-CRUD-接口" class="headerlink" title="Mapper CRUD 接口"></a>Mapper CRUD 接口</h2><p>说明:</p>
<ul>
<li>通用 CRUD 封装<a class="link"   href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java" >BaseMapper <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li>
<li>泛型 <code>T</code> 为任意实体对象</li>
<li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li>
<li>对象 <code>Wrapper</code> 为 <a class="link"   href="https://mp.baomidou.com/guide/wrapper.html" >条件构造器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h4 id="最后本文还是比较水的，只是简单的看了一下结构而已，没有太多的深入，总结一下，以我平时粘贴复制的经验来看，Service虽然加入了数据库的操作，但还是以业务功能为主，而更加复杂的SQL查询，还是要靠Mapper对应的XML文件里去编写SQL语句。"><a href="#最后本文还是比较水的，只是简单的看了一下结构而已，没有太多的深入，总结一下，以我平时粘贴复制的经验来看，Service虽然加入了数据库的操作，但还是以业务功能为主，而更加复杂的SQL查询，还是要靠Mapper对应的XML文件里去编写SQL语句。" class="headerlink" title="最后本文还是比较水的，只是简单的看了一下结构而已，没有太多的深入，总结一下，以我平时粘贴复制的经验来看，Service虽然加入了数据库的操作，但还是以业务功能为主，而更加复杂的SQL查询，还是要靠Mapper对应的XML文件里去编写SQL语句。"></a>最后本文还是比较水的，只是简单的看了一下结构而已，没有太多的深入，总结一下，以我平时粘贴复制的经验来看，Service虽然加入了数据库的操作，但还是以业务功能为主，而更加复杂的SQL查询，还是要靠Mapper对应的XML文件里去编写SQL语句。</h4>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>很久的简介</title>
    <url>/2017/07/27/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>分布式锁实践中的一些坑及优化手段</title>
    <url>/2021/03/10/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E8%B7%B5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E5%8F%8A%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="分布式锁实践中的一些坑及优化手段"><a href="#分布式锁实践中的一些坑及优化手段" class="headerlink" title="分布式锁实践中的一些坑及优化手段"></a>分布式锁实践中的一些坑及优化手段</h1><h3 id="记录使用分布式锁时网上其他文章没有谈及的性能和优化问题，切勿生搬硬套网上代码。"><a href="#记录使用分布式锁时网上其他文章没有谈及的性能和优化问题，切勿生搬硬套网上代码。" class="headerlink" title="记录使用分布式锁时网上其他文章没有谈及的性能和优化问题，切勿生搬硬套网上代码。"></a>记录使用分布式锁时网上其他文章没有谈及的性能和优化问题，切勿生搬硬套网上代码。</h3><blockquote>
<p>本文仅讨论使用Redis作为分布式锁，不考虑Redis其他一些问题，如是否为单机节点，怎么做主从集群或者哨兵，与Zookeeper和其他分布式共识算法实现的分布式中间件有什么区别，我选择redis主要还是考虑它自身的性能和编码的复杂度，至于CP还是AP的选型暂时不作为考量标准。</p>
</blockquote>
<h4 id="当微服务由单机部署变为分布式集群部署，在业务中涉及的一些数据库操作或者其他可能存在并发问题的地方，都有可能因为代码层面考虑不周或存在漏洞，导致数据丢失更新，数据不一致的问题发生，我也是在工作中遇到这个问题。例如A请求查询数据库中可用次数为100，此时B请求也查询数据库中可用次数为100，A请求进行-1之后在数据库中修改为99，而B请求也-1之后修改数据库中可用次数为99，这时就发生了数据丢失更新的问题，给公司造成了损失，当并发量更大，B请求出现一定延时，可能会发生其他请求已经修改了十多次，而B请求又将可用次数改为99，如此日积月累会造成巨大的损失。"><a href="#当微服务由单机部署变为分布式集群部署，在业务中涉及的一些数据库操作或者其他可能存在并发问题的地方，都有可能因为代码层面考虑不周或存在漏洞，导致数据丢失更新，数据不一致的问题发生，我也是在工作中遇到这个问题。例如A请求查询数据库中可用次数为100，此时B请求也查询数据库中可用次数为100，A请求进行-1之后在数据库中修改为99，而B请求也-1之后修改数据库中可用次数为99，这时就发生了数据丢失更新的问题，给公司造成了损失，当并发量更大，B请求出现一定延时，可能会发生其他请求已经修改了十多次，而B请求又将可用次数改为99，如此日积月累会造成巨大的损失。" class="headerlink" title="当微服务由单机部署变为分布式集群部署，在业务中涉及的一些数据库操作或者其他可能存在并发问题的地方，都有可能因为代码层面考虑不周或存在漏洞，导致数据丢失更新，数据不一致的问题发生，我也是在工作中遇到这个问题。例如A请求查询数据库中可用次数为100，此时B请求也查询数据库中可用次数为100，A请求进行-1之后在数据库中修改为99，而B请求也-1之后修改数据库中可用次数为99，这时就发生了数据丢失更新的问题，给公司造成了损失，当并发量更大，B请求出现一定延时，可能会发生其他请求已经修改了十多次，而B请求又将可用次数改为99，如此日积月累会造成巨大的损失。"></a>当微服务由单机部署变为分布式集群部署，在业务中涉及的一些数据库操作或者其他可能存在并发问题的地方，都有可能因为代码层面考虑不周或存在漏洞，导致数据丢失更新，数据不一致的问题发生，我也是在工作中遇到这个问题。例如A请求查询数据库中可用次数为100，此时B请求也查询数据库中可用次数为100，A请求进行-1之后在数据库中修改为99，而B请求也-1之后修改数据库中可用次数为99，这时就发生了数据丢失更新的问题，给公司造成了损失，当并发量更大，B请求出现一定延时，可能会发生其他请求已经修改了十多次，而B请求又将可用次数改为99，如此日积月累会造成巨大的损失。</h4><h4 id="在根据一些技术文档提供的解决方案中，我选择了Redis来实现分布式锁，大致架构如下"><a href="#在根据一些技术文档提供的解决方案中，我选择了Redis来实现分布式锁，大致架构如下" class="headerlink" title="在根据一些技术文档提供的解决方案中，我选择了Redis来实现分布式锁，大致架构如下"></a>在根据一些技术文档提供的解决方案中，我选择了Redis来实现分布式锁，大致架构如下</h4><h4 id="实现大致原理："><a href="#实现大致原理：" class="headerlink" title="实现大致原理："></a>实现大致原理：</h4><ol>
<li><h5 id="当请求过来时，通过lua脚本，使用空间名称key和请求ID作为value，在redis中存入一个过期时间为10s的Str"><a href="#当请求过来时，通过lua脚本，使用空间名称key和请求ID作为value，在redis中存入一个过期时间为10s的Str" class="headerlink" title="当请求过来时，通过lua脚本，使用空间名称key和请求ID作为value，在redis中存入一个过期时间为10s的Str"></a>当请求过来时，通过lua脚本，使用空间名称key和请求ID作为value，在redis中存入一个过期时间为10s的Str</h5></li>
<li><h5 id="请求处理完毕后主动释放自己加的锁，如果节点失败也可以通过过期时间自动删除，不会出现“死锁”"><a href="#请求处理完毕后主动释放自己加的锁，如果节点失败也可以通过过期时间自动删除，不会出现“死锁”" class="headerlink" title="请求处理完毕后主动释放自己加的锁，如果节点失败也可以通过过期时间自动删除，不会出现“死锁”"></a>请求处理完毕后主动释放自己加的锁，如果节点失败也可以通过过期时间自动删除，不会出现“死锁”</h5></li>
<li><h5 id="当多个请求同时发生，先竞争到锁的先执行，没有抢到锁的则生成一个随机等待时间，等待结束后再发起竞争，这样可以防止大量请求同时竞争造成羊群效应"><a href="#当多个请求同时发生，先竞争到锁的先执行，没有抢到锁的则生成一个随机等待时间，等待结束后再发起竞争，这样可以防止大量请求同时竞争造成羊群效应" class="headerlink" title="当多个请求同时发生，先竞争到锁的先执行，没有抢到锁的则生成一个随机等待时间，等待结束后再发起竞争，这样可以防止大量请求同时竞争造成羊群效应"></a>当多个请求同时发生，先竞争到锁的先执行，没有抢到锁的则生成一个随机等待时间，等待结束后再发起竞争，这样可以防止大量请求同时竞争造成羊群效应</h5></li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/BA058F4A-4CF9-4669-8814-B1A1BE2E190F.png"
                      alt="BA058F4A-4CF9-4669-8814-B1A1BE2E190F"
                ></p>
<h3 id="问题初现"><a href="#问题初现" class="headerlink" title="问题初现"></a>问题初现</h3><p>如上架构，确实可以直接解决数据丢失更新的问题，这样意味着所有节点上的所有请求在操作的时候都会去加锁，读与读，读与写直接加锁，如此一把大锁悬在空中，勒住了所有请求，系统性能直线性下降，并发越大竞争越大。 并发三组线程请求三个不同的接口，线程数100，Ramp为1秒，循环2次，发送等待锁次数57720 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210105165133512.png"
                      alt="image-20210105165133512"
                > 并发四组线程请求四个不同的接口，线程数100，Ramp为1秒，循环2次，发送等待锁次数74180 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210105165555885.png"
                      alt="image-20210105165555885"
                > cpu占用率 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210105165649385.png"
                      alt="image-20210105165649385"
                ></p>
<blockquote>
<p>根据测试可以得出以下分析</p>
<ol>
<li>加锁可以解决数据丢失的问题</li>
<li>加锁会导致并发量急剧下降，最大为7&#x2F;s</li>
<li>加锁导致大量锁竞争，至高并发时，单个请求需要竞争近百次</li>
</ol>
</blockquote>
<h3 id="优化一"><a href="#优化一" class="headerlink" title="优化一"></a>优化一</h3><p>目前的锁很明显是悲观锁，请求上来就会先加锁，可以在优化为乐观锁，先去判断当前是否有请求冲突发生，如果没有竞争，则直接操作，如果有则进行加锁，类似于CAS这样的机制，可以少去首次加锁的开销。</p>
<h3 id="优化二"><a href="#优化二" class="headerlink" title="优化二"></a>优化二</h3><p>细化锁粒度，参考Innodb的行锁设计，这个需要根据具体的业务场景来考量，在我们的业务中，同一用户的同一请求可以根据索引或键值ID来确定，然后用这类主键ID作为锁空间命名，可以极大程度的细化锁，不会让不同用户的不同请求发生冲突。</p>
<h3 id="优化三"><a href="#优化三" class="headerlink" title="优化三"></a>优化三</h3><p>缩小随机等待时间区间，当竞争锁失败后，随机等待多久再去发起竞争呢，等待时间太长没有必要，等待时间过短的话会加剧竞争失败的发生。最初我的值是50-200ms，后来进过jmeter一系列压测，确定在10-50ms这个区间竞争数少，等待时间也短。</p>
<h3 id="优化四"><a href="#优化四" class="headerlink" title="优化四"></a>优化四</h3><p>从SQL的角度来看，能否将这样类似的计费等操作进行合并，不要在代码中取出数据再进行增减，这样可以直接利用Mysql中Innodb的行锁，减少业务层对请求的阻塞。</p>
<h4 id="升级优化的方案有很多，还可以使用第三方分布式锁的框架，提供一些可重入锁的支持等，具体场景具体优化，但网上提供的解决办法不能生搬硬套，否则在带来代码侵入的同时还无法提高性能。"><a href="#升级优化的方案有很多，还可以使用第三方分布式锁的框架，提供一些可重入锁的支持等，具体场景具体优化，但网上提供的解决办法不能生搬硬套，否则在带来代码侵入的同时还无法提高性能。" class="headerlink" title="升级优化的方案有很多，还可以使用第三方分布式锁的框架，提供一些可重入锁的支持等，具体场景具体优化，但网上提供的解决办法不能生搬硬套，否则在带来代码侵入的同时还无法提高性能。"></a>升级优化的方案有很多，还可以使用第三方分布式锁的框架，提供一些可重入锁的支持等，具体场景具体优化，但网上提供的解决办法不能生搬硬套，否则在带来代码侵入的同时还无法提高性能。</h4>]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>分布式锁的锁优化</title>
    <url>/2021/01/04/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E9%94%81%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="分布式锁的锁优化"><a href="#分布式锁的锁优化" class="headerlink" title="分布式锁的锁优化"></a>分布式锁的锁优化</h1><p>在去除原有synchronized单机锁后，在关键步骤添加分布式锁来对具体业务进行锁定，然而由于锁定范围大，导致锁竞争增加，不断发生锁等待，如果不进行优化，可能会让线程队列增大甚至阻塞，而且在等待时长超过设定的阈值时，线程将超时返回。 在此，初步对锁进行优化，如何理解分布式锁与单机锁的应用范围和实现机制，分布式锁与单机锁并不冲突，单机锁类似于海选初赛，而分布式锁则相当于决赛，单机锁用于在当前服务器中，控制所有线程的访问，当最终有线程得到访问数据库或其他唯一性的可操作数据的中间件，再由分布式锁来控制所有进入最终决赛线程的操作顺序。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/BA058F4A-4CF9-4669-8814-B1A1BE2E190F.png"
                     
                > 锁分两级，本地数据操作使用单机锁，而对于数据库的操作使用分布式锁。 乐观自旋锁：在查询数据库时不进行加锁，在修改数据库时则对之前获取的值和现有的值进行对比，如果数据不一致，则加锁并对数据进行修改，当并发量不高时，这种方式可以减少加锁次数，服务器之间交替互相操作，恰好不产生冲突。 通过锁空间实现细粒度加锁：在分布式锁定对数据库的操作时，可以根据要修改的数据关键字段进行加锁，如不同应用加不同的锁，保证只是修改当前应用数据的这类线程加锁，这样可以提高并发量，减少不必要的锁开销。 总之，加锁不是一劳永逸的操作，在保证数据一致性的同时，也要保证服务性能的开销，通过不断的测试和调整达到锁应用的最优。 #工作</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>前端</title>
    <url>/2017/07/27/%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>请假管理系统</title>
    <url>/2017/07/27/%E5%8A%9E%E5%85%AC%E8%BD%AF%E4%BB%B6%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>华为数字能源生态大会</title>
    <url>/2023/05/11/%E5%8D%8E%E4%B8%BA%E6%95%B0%E5%AD%97%E8%83%BD%E6%BA%90%E7%94%9F%E6%80%81%E5%A4%A7%E4%BC%9A/</url>
    <content><![CDATA[<h2 id="融合电力电子和数字技术，共建绿色美好未来"><a href="#融合电力电子和数字技术，共建绿色美好未来" class="headerlink" title="融合电力电子和数字技术，共建绿色美好未来"></a>融合电力电子和数字技术，共建绿色美好未来</h2><p><strong>能源演进变革之路：低碳化，电气化，数字化，智能化</strong></p>
<ol>
<li>低碳化：可再生能源成为主力能源</li>
<li>电气化：用能电气化程度不断提升</li>
</ol>
<p>能源供给低碳化，能源消费电气化</p>
<ol>
<li>数字化：数字技术成为前横百叶创新发展主要驱动力</li>
<li>智能化：AI成为新使能器，推荐新一轮科技与产业变革</li>
</ol>
<p>数字世界与能源世界融合发展，能源产业进入数字能源新时代 万“物”互联，万“能”互联 华为数字能源的愿景：融合数字技术和电力电子技术，发展清洁能源和能源数字化，推动能源革命，共建绿色美好未来 战略全景：从高碳走向低碳，从低碳走向零碳（低碳城市，低碳建筑，低碳工程，低碳园区，低碳乡村，低碳家居）清洁发电，能源数字化，交通电动化，绿色ICT能源基础设施，综合智慧能源 打造数字能源时代三新基础设施： 新型电力系统能源基础设施（能源变革），新型数字产业能源基础设施（智能变革），新型电动出行能源基础设施（出行变革）</p>
<blockquote>
<p><strong>新型电力系统：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打造智能光储发电机，助力构建高质量，全数字化清洁能源基地</span><br><span class="line">2. 源网荷储智能协同，打造绿色，低碳，有韧性的城市能源智能体</span><br><span class="line">3. 家庭：围绕家庭用能，打造绿色低碳，极致体验，智能互联的家庭能源管理系统</span><br></pre></td></tr></table></figure></div>

<p><strong>新型数字产业：</strong>算力就是电力，算力激增带来电力激增，绿色电力带来绿色算力 打造绿色，极简，智能，安全的数字产业能源基础设施，助力构建算力网络，加速奔向智能社会 <strong>新型电动出行</strong>：全栈电动出行系统，打造新型电动出行能源基础设施，助力交通电动化快速发展</p>
</blockquote>
<p>华为数字能源坚持在技术和产品方面持续创新，坚定不移地与产业和生态伙伴一起，携手共建数字能源产业生态 携手共创：行业客户，引领行业发展，客户需求和技术创新相结合 携手共享：商业伙伴，商业价值，助力伙伴成长与伙伴共享机会 携手共建：产业伙伴，本地产业 光储发电机，数字化清洁能源基地，智能充电网络，下一代数据中心 携手全球商业合作伙伴，共同成长，建设无处不在的绿色，低碳，智能的分布式能源系统 积极推进面向双碳目标实现的产业政策，行业标准，路线图和时间表</p>
<ol>
<li>政策标准</li>
<li>行业标准（国家，行业，地方，团体，企业）</li>
</ol>
<h2 id="大时代-·-大合作-·-大共赢-–共建中国数字能源生态发展之路"><a href="#大时代-·-大合作-·-大共赢-–共建中国数字能源生态发展之路" class="headerlink" title="大时代 · 大合作 · 大共赢 –共建中国数字能源生态发展之路"></a>大时代 · 大合作 · 大共赢 –共建中国数字能源生态发展之路</h2><p> 数字能源大时代 绿色低碳和行业深度融合，中国市场全面进入快车道</p>
<ol>
<li>光伏新增装机每年100GW</li>
<li>储能容量规模告诉增长</li>
<li>充电桩基础设施爆发式增长</li>
<li>数据产生量增加25ZP</li>
</ol>
<p><strong>智能光伏</strong> 政策，商业，技术三轮驱动，新机会新场景不断涌现 <strong>数据中心</strong> 人工智能应用推动新一轮数据中心建设 <strong>充电网络</strong> 发挥产业链协同效应，推进超充（光储充）一体化快速建设 趋势：液冷超充成为必然趋势 数据能源大时代，产业高速发展正面临五大新挑战：井网，安全，质量，运维，能耗 为客户创造价值，是华为数字能源赖以生存和发展</p>
<ol>
<li>创新引领：客户需求与技术创新双轮驱动</li>
</ol>
<p>创新实践：智能光伏（集中式-组件式），数据中心，充电网络 创新方向：数据中心，低碳城市，智能光储，充电网络 <strong>以质取胜</strong> 四重体系：让数字能源成为行业高质量代名词</p>
<ol>
<li>架构设计</li>
<li>器件选择</li>
<li>产品验证</li>
<li>制造工艺</li>
</ol>
<p>三大保障：服务创造价值，打造极致服务体验</p>
<ol>
<li>无处不达的服务网络</li>
<li>无处不在的服务支持</li>
<li>无微不至的服务队伍</li>
</ol>
<p>安全可信 基调，文化，产品，场景 构建生命周期安全能力体系 践行生态战略：保护，回报，简单，成长，三个坚持：坚持落地伙伴政策 携手商业伙伴：落地4P助力伙伴实现商业价值（作战有武器，政策有保护，团队有支撑，提效有平台） 使能能力伙伴，共同为客户创造价值 共建技术领导力，推进产业高质量发展，开放有序，竞争有力，有韧性的产业链，<strong>凝聚共识，成果共创，价值共赢</strong> 携手生态大共赢聚力创未来：商业，产业，标准 <strong>聚众力·凝众智·行致远</strong></p>
]]></content>
      <categories>
        <category>Self</category>
      </categories>
  </entry>
  <entry>
    <title>发送邮件</title>
    <url>/2017/07/27/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>大规模校园网日志的用户行为分析—（理论分析）</title>
    <url>/2019/07/29/%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%97%A5%E5%BF%97%E7%9A%84%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90-%EF%BC%88%E7%90%86%E8%AE%BA%E5%88%86%E6%9E%90%EF%BC%89/</url>
    <content><![CDATA[<p>思路想法：校园网中存在大量的上网日志，用户的上网日志信息是非常有用的在它里面记录了用户访问网站的行为轨迹、 用户终端信息、位置信息、浏览网页时长等重要信息，可以说是一座巨大的数据金矿。但是校园网日志可能并没有利用起来，如果能对数据进行清洗，开发，分析，挖掘，从中提取出有价值的数据，有助于校园网的优化，管理。 技术点：日志信息的实时流提取，会用到kafka等分布式消息队列。流处理会用到storm或spark的streaming流处理框架，日志信息的存储会用到数据仓库HIVE，以及HBASE。这些事底层数据的处理，清洗并存储后的数据需要用到很多算法去分析用户行为，建立用户画像，结合其他信息，还需要对用户行为进行判断，预测等。</p>
<h2 id="这是我的毕设题目，也经过了一段时间的折腾有大致的雏形可以使用，从数据的产生，处理，展示都已经实现，其实也是整合了三个平台。"><a href="#这是我的毕设题目，也经过了一段时间的折腾有大致的雏形可以使用，从数据的产生，处理，展示都已经实现，其实也是整合了三个平台。" class="headerlink" title="这是我的毕设题目，也经过了一段时间的折腾有大致的雏形可以使用，从数据的产生，处理，展示都已经实现，其实也是整合了三个平台。"></a>这是我的毕设题目，也经过了一段时间的折腾有大致的雏形可以使用，从数据的产生，处理，展示都已经实现，其实也是整合了三个平台。</h2><p>sparkstreaming处理数据 data flow离线和实时数据的处理 sanji-boot前台的展现</p>
<h1 id="毕设构思"><a href="#毕设构思" class="headerlink" title="毕设构思"></a>毕设构思</h1><h2 id="总的应该分为两部分，"><a href="#总的应该分为两部分，" class="headerlink" title="总的应该分为两部分，"></a>总的应该分为两部分，</h2><h3 id="先从思路的服务器写起来"><a href="#先从思路的服务器写起来" class="headerlink" title="先从思路的服务器写起来"></a>先从思路的服务器写起来</h3><ol>
<li>搭建min centos7系统</li>
<li>配置大数据环境，Hadoop，flume，kafka，hive</li>
<li>由于我没有数据日志，使用python模拟不断产生数据集，或者使用服务器中的已有数据日志</li>
<li>如果是动态生成，则使用flume来不断监听文件，并将数据放到Kafka中</li>
<li>如果是固定文件，则直接使用程序去处理</li>
<li>flume和kafka的作用就是监听和收集动态文件的信息</li>
<li>程序的处理方式有两种，一种是打开固定文件，另一种是接收kafka的数据</li>
<li>对接收到的信息进行固定格式的清洗，这些数据不使用mysql存储，而应该用hive或者是redis，</li>
<li>用户信息，以及配置信息使用mysql来存储</li>
<li>最少使用两种数据库，达到数据库层面的复杂度</li>
<li>前期的展示根据清洗出来的结果，或者网上成熟源码来呈现</li>
<li>如果没有采用spark和Scala编写，则在介绍中写明遗憾的是</li>
<li>项目的展望，在GitHub中继续维护</li>
<li>可以做一个离线处理的mapreduce，实时离线都有，比较完美，最好打成jar包可以直接运行的。</li>
<li>如果不采用scala</li>
<li>IP校验加入，但不使用，因为都是虚拟数据没有实际验证意义</li>
</ol>
<blockquote>
<p>重点是：校园网日志是不同于其他日志分析的，它相当于流量的出口，会存在各式各样的访问请求</p>
</blockquote>
<p>需要看的资料 Hbase结构，最好能自己描述出来 Flume配置文件的含义 为什么使用HBase来存储数据？ 在数据量大的情况下存储数据，因为是实时存储数据，在向数据库中写入数据的时候，需要按天来累加访问量，如果使用其他的RDBMS，需要进行多步API操作，先按插入数据，然后按条件查询数据，最后更新数据，这样在一定会使应用程序变慢很多，也消耗系统资源。而如果使用HBase利用它的前缀查询，只需一步API就可以存储相应的数据。 技术选型的确定 在经过一系例的思考，还是决定采用Java，如果使用Scala需要学习和调试的时间太长，spark+stremming作为实时的分析，存到hbase里面 1. 计算任务最好在存入数据库之前，有一个实时的感觉，不用再去数据库里查找。 2. 代码最终是打成jar包放到服务器里运行的。</p>
<h1 id="我的毕设开发流程"><a href="#我的毕设开发流程" class="headerlink" title="我的毕设开发流程"></a>我的毕设开发流程</h1><p>目前服务器已经搭好了，kafka可以传递消息，</p>
<h2 id="服务器需要做的"><a href="#服务器需要做的" class="headerlink" title="服务器需要做的"></a>服务器需要做的</h2><ul>
<li>flume监控某个日志文件然后传输消息</li>
</ul>
<h2 id="开发要做的"><a href="#开发要做的" class="headerlink" title="开发要做的"></a>开发要做的</h2><ol>
<li>完成生成日志文件的脚本（可以复制老师的或者网上的）</li>
<li>将获取到的消息分流，默认的线程存储到hbase中，而有实时数据请求的时候可以将即将存储的数据拉过来</li>
<li>然后是各种数据的统计，除了实时数据，其他的去hbase里查找即可</li>
</ol>
<h1 id="开发要点"><a href="#开发要点" class="headerlink" title="开发要点"></a>开发要点</h1><p>分而治之 1. Hbase中，每日一个rowk作为区分，而内部的列簇命名使用字段名，列名采用计数的方式区别，如下 <code>put &#39;data&#39;,&#39;2019-04-28&#39;,&#39;address:1&#39;,&#39;北京&#39;</code> 2. 我想将项目分为两部分，一部分是sparkstreaming在处理，而另一部分则是springboot来实现的前端展示，这样先实现离线的数据处理，即以查询的方式去直接查hbase数据库。 而实时展示先放下来，等完成这一版再考虑如何去呈现。 3. 2019年5月1日 今天在测试x_springboot的时候发现不能引入hbase的依赖，否则就会与ServletInputStream有冲突 由此我也放弃了在前台来集成数据提取的功能，之前就已经把kafka消费提取来出来，现在决定分为三个模块 sparkstreaming处理数据 data flow离线和实时数据的处理 sanji-boot前台的展现 4. 数据格式</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">陕西 2019-05-01 18:58:51 GET HTTP/1.1 http://www.youku.net/ 200 IE iPad</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Hbase现在只支持String类型数据的存取 中文存到数据库中是以二进制的形式，取出来的时候需要注意编码转换 5. hbase提取数据时，是全部取出来的</p>
<h1 id="已经完成的"><a href="#已经完成的" class="headerlink" title="已经完成的"></a>已经完成的</h1><p>模拟的python脚本，产生各种模拟好的数据 Crontab中添加好十秒执行一次的任务</p>
<h2 id="图表类型"><a href="#图表类型" class="headerlink" title="图表类型"></a>图表类型</h2><blockquote>
<p>一定要足够丰富<br>1. 终端设备（windows，安卓，ios） 2. 浏览器信息（谷歌，safar，火狐） 3. 地理位置信息，各省份的，最好有热点信息 4. 访问请求类型（post，get） 5. 网站类型，视频，游戏，购物等等 6. 当前访问量，动态的 7. 不同时段的访问情况柱状图</p>
</blockquote>
<h1 id="典型日志信息"><a href="#典型日志信息" class="headerlink" title="典型日志信息"></a>典型日志信息</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">113.68.211.188 - - [10/Nov/2016:00:01:02 +0800] &quot;POST /api3/gettoken HTTP/1.1&quot; 200 103 &quot;www.imooc.com&quot; &quot;-&quot; mobile_token=5ab097218b3283b0210126b16d0ba3e5705af787356605bc71ea1a3ec6a24c7e&amp;status=0&amp;token=cd57c098461090bee597d86f6218ade4&amp;type=3&amp;uid=3179966&amp;versionId=2.0.3 &quot;imoocForiPad/2.0.3 (iPad; iOS 9.3.5; Scale/1.00)&quot; &quot;-&quot; 10.100.136.64:80 200 0.022 0.025</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">124.202.168.106 - - [10/Nov/2016:00:01:02 +0800] &quot;POST /api3/courselist_ver2 HTTP/1.1&quot; 200 115 &quot;www.imooc.com&quot; &quot;-&quot; all_type=1&amp;cat_type=1260&amp;easy_type=3&amp;page=2&amp;sort_type=0&amp;token=3a87f9ced6ebcefb56b1a1045d001ad1&amp;uid=3038658 &quot;mukewang/4.3.2 (iPhone; iOS 7.1.2; Scale/2.00)&quot; &quot;-&quot; 10.100.136.65:80 200 0.074 0.074</span><br><span class="line"></span><br><span class="line">171.34.214.154 - - [10/Nov/2016:00:01:02 +0800] &quot;POST /api3/updateversion HTTP/1.1&quot; 200 142 &quot;www.imooc.com&quot; &quot;-&quot; timestamp=1478707262486&amp;uid=4141222&amp;plat_id=2&amp;v=5.0.1&amp;secrect=c606912b475b731e05a310c5215a20ab&amp;v_code=5010&amp;app_id=1&amp;type=0&amp;cid=0&amp;token=08e3ac604550a1dbbe1ffbaa2456f512 &quot;mukewang/5.0.1 (Android 4.4.4; OPPO OPPO R7 Build/KTU84P),Network WIFI&quot; &quot;-&quot; 10.100.136.64:80 200 0.017 0.017</span><br><span class="line"></span><br><span class="line">101.227.163.101 - - [07/Dec/2017:01:32:15 +0800] &quot;GET /wp-content/plugins/crayon-syntax-highlighter/js/min/crayon.min.js?ver=1501325573 HTTP/1.1&quot; 200 6790 &quot;http://www.rain1024.com/2017/08/07/article95/&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 </span><br><span class="line">111.206.36.140 - - [07/Dec/2017:16:02:08 +0800] &quot;GET / HTTP/1.1&quot; 200 55224 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36&quot;</span><br><span class="line"></span><br><span class="line">101.227.163.101 - - [07/Dec/2017:09:08:33 +0800] &quot;GET /wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=1501325573 HTTP/1.1&quot; 200 38128 &quot;http://www.rain1024.com/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36&quot;</span><br><span class="line"></span><br><span class="line">123.151.76.52 - - [08/Dec/2017:12:18:53 +0800] &quot;GET / HTTP/1.1&quot; 200 11004 &quot;-&quot; &quot;Mozilla/5.0 (Linux; Android 7.1.1; TA-1000 Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/56.0.2924.87 Mobile Safari/537.36 CSDNApp/1.9.9.5(Android)&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">123.151.76.52 - - [08/Dec/2017:12:18:55 +0800] &quot;GET /wp-includes/js/mediaelement/mediaelement-and-player.min.js?ver=1501325573 HTTP/1.1&quot; 200 38128 &quot;http://www.rain1024.com/&quot; &quot;Mozilla/5.0 (Linux; Android 7.1.1; TA-1000 Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/56.0.2924.87 Mobile Safari/537.36 CSDNApp/1.9.9.5(Android)&quot;</span><br><span class="line"></span><br><span class="line">111.161.109.103 - - [08/Dec/2017:14:40:31 +0800] &quot;GET / HTTP/1.1&quot; 200 11004 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&quot;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Hadoop</category>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>对于mysql，redis，Kafka，zookeeper磁盘缓存技术使用分析</title>
    <url>/2021/02/26/%E5%AF%B9%E4%BA%8Emysql%EF%BC%8Credis%EF%BC%8Ckafka%EF%BC%8Czookeeper%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="对于mysql，redis，Kafka，zookeeper磁盘缓存技术使用分析"><a href="#对于mysql，redis，Kafka，zookeeper磁盘缓存技术使用分析" class="headerlink" title="对于mysql，redis，Kafka，zookeeper磁盘缓存技术使用分析"></a>对于mysql，redis，Kafka，zookeeper磁盘缓存技术使用分析</h1><p>大部分组件是基于磁盘存储的，但由于CPU速度和磁盘速度之间的鸿沟，都会使用缓存技术来提高性能，缓存简单来说就是一块内存区域，首先将从磁盘读到的数据放在缓存中，之后查询或修改时直接操作缓存，对于缓存中的数据则以一定的频率刷新到磁盘上，怎样缓存，缓存多少，何时刷新，这些影响着整个组件的性能。在看过一些关于mysql等组件的架构原理后，会发现不论是基于磁盘的mysql数据库和Kafka消息中间件zookeeper分布式协调框架，还是基于内存的redis数据库，它们都设计了完善的内存和磁盘之间数据交互实现。在快速读取数据和持久化保存数据中做出平衡。缓存还有空间和时间读取规则，从空间角度热点数据相邻区域的数据不久之后也会被访问，从时间角度热点数据第一次访问后还会被继续访问到。</p>
<h2 id="mysql磁盘缓存（仅在使用Innodb引擎下）"><a href="#mysql磁盘缓存（仅在使用Innodb引擎下）" class="headerlink" title="mysql磁盘缓存（仅在使用Innodb引擎下）"></a>mysql磁盘缓存（仅在使用Innodb引擎下）</h2><p>分析mysql将哪些数据进行缓存时，可以找到它的根源来看，即mysql中innodb引擎的缓存池。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210225153500575.png"
                      alt="image-20210225153500575"
                > 当然innodb中可以设置多个这样的缓存池实例，从而增加数据库的并发能力，缓存池的大小是可以配置的，缓存池中每个页的大小为16KB，通过LRU算法来管理缓存池，当LRU列表中的页被修改后，因为与磁盘中的数据产生不一致将该页称为脏页，这是数据库会通过CHECKPOINT机制将脏页刷回磁盘，脏页也会存在与Flush列表中，Flush与LRU列表互不影响，LRU列表管理缓存池中页的可用性，而Flush列表管理页刷新回磁盘，脏页数量可以通过命令来查询。 下面需要关注的是与磁盘文件相关联的缓存</p>
<h3 id="重做日志缓存"><a href="#重做日志缓存" class="headerlink" title="重做日志缓存"></a>重做日志缓存</h3><p>重做日志缓存为innodb引擎独有，其对应着reco log文件，默认为8MB，因为一般情况下每秒钟会将重做日志刷新到日志文件，所以不需要设置的太大，通常在以下三种情况下会将重做日志缓存中的内容刷新到磁盘上重做日志文件中。</p>
<ol>
<li>Master Thread每秒钟将重做日志缓存刷新到重做日志文件</li>
<li>每个事务提交时会将重做日志缓存刷新到重做日志文件(由innodb_flush_log_at_trx_commit控制)</li>
<li>当重做日志缓存剩余空间小于1&#x2F;2时，将重做日志缓存刷新到重做日志文件</li>
</ol>
<p>因为缓存和磁盘数据不可能实时保持一致，为了防止数据丢失，当前事务数据库都普遍采用Write ahead log策略，即当事务提交时先写重做日志，再修改页，当发生宕机导致数据丢失后，可以通过日志来进行数据恢复，保证了事务中持久性的要求。为得到高可靠性可以设置多个镜像日志组。</p>
<h3 id="数据页索引页缓存"><a href="#数据页索引页缓存" class="headerlink" title="数据页索引页缓存"></a>数据页索引页缓存</h3><p>这里用到了innodb引擎的关键特性，插入缓存（Insert&#x2F;Change Buffer）来对数据进行操作，Innodb对每张表都设置了主键，主键是行的唯一标识符，通常行记录的插入顺序也是安装主键递增的顺序进行插入，因此插入聚集索引一般不需要随机读取，但表中还会存在多个非聚集的辅助索引，当进行插入时，数据页的存放还是按聚集索引来顺序存放，而对于索引页中非聚集的辅助索引页更新存在离散访问，这样随机的读取会导致性能的下降，所以使用Insert Buffer来对辅助索引进行缓存，再根据一定频率与辅助索引页进行merge合并。</p>
<h3 id="二进制日志缓存（binary-log）"><a href="#二进制日志缓存（binary-log）" class="headerlink" title="二进制日志缓存（binary log）"></a>二进制日志缓存（binary log）</h3><p>二进制日志记录了对mysql数据库执行更改的所有操作，但不包含对数据库本身没有修改的操作，如select和show，二进制日志用于数据库的恢复，主从数据同步的复制，对日志中的信息进行安全审计。 注意，当使用事务的表存储引擎时，所有未提交的二进制日志会被记录到缓存中，等事务提交时将缓存中的二进制日志写入到二进制日志文件中，binlog_cache_size是基于会话而不是全局的，默认大小32K。 默认情况下二进制日志并不是每次写的时候都会同步到磁盘，需要设置sync_binlog值来进行调整，默认值为0，表示MySQL不控制binlog的刷新，由文件系统自己控制它的缓存的刷新。这时候的性能是最好的。</p>
<h3 id="Undo日志缓存"><a href="#Undo日志缓存" class="headerlink" title="Undo日志缓存"></a>Undo日志缓存</h3><p>undo是逻辑日志，根据每行记录来进行记录，用来帮助事务回滚及MVCC的功能实现非锁定读取，undo日志存放于共享表空间里，通过全局动态参数innodb_purge_batch_size来设置每次purge需要清理的undo page数量，默认为300. 但凡用了缓存肯定需要刷回磁盘，而刷回磁盘的操作由哪些线程来进行，一步步来就能发现mysql后台主要有以下四种线程。 Master Thread：主要负责将缓存池中的数据异步刷新到磁盘中去(包括页刷新,合井缓存插入, 回收undo页 IO Thread：主要负责请求的回调处理。((InnoDB 中请求大量使用了A,提高处理性 ) write , read , insert buffer , log IO thread . Purge Thread：事务被提交后，所需undolog可能不使用，用来回收undo页 Page Cleaner Thread：用来刷新脏页 以上便是mysql涉及到缓存和磁盘相关联的数据更新情况，主要包含四种日志和数据的同步。</p>
<h2 id="Redis磁盘缓存"><a href="#Redis磁盘缓存" class="headerlink" title="Redis磁盘缓存"></a>Redis磁盘缓存</h2><p>严格意义来说，redis与其他组件还是不同的，redis原生就支持在内存中使用，而将数据存放到磁盘中反而是可以配置的，并非一定需要将数据持久化，redis的主要作用是缓存数据，所以数据的持久保存应该由后端数据库来做，业务的场景也应该是先查redis，如果不存在则再去数据库中查找，过于依赖redis的数据持久化，可能会造成数据返回不一致。 redis 的持久化机制有两种，第一种是快照，第二种是 AOF 日志。快照是一次全量备份，AOF 日志是连续的增量备份，这与之后要说zookeeper有点类似。快照是内存数据的二进制序列化形式，而AOP日志记录的是内存数据修改的指令记录文本，AOP日志在长期的运行过程中会逐渐变大，所以也会不断进行覆盖。快照可以配置频率，“save * _”：保存快照的频率，第一个_表示多长时间，单位是秒，第二个“*”表示至少执行写操作的次数，在一定时间内至少执行一定数量的写操作时，就自动保存快照，可设置多个条件。</p>
<h3 id="AOP日志"><a href="#AOP日志" class="headerlink" title="AOP日志"></a>AOP日志</h3><p>redis在收到客户端指令，经过校验后会将该指令存储到AOF日志中，再去执行指令，保证在宕机后也能通过AOP日志的指令重放恢复到宕机前的状态。对AOP日志进行写操作时，实际上是将内容写到了内核为文件描述符分配的一个内存缓存中，然后内核会异步将脏数据刷回磁盘。linux提供fsync指令可以指定文件强制从缓存中刷新到磁盘，但如果redis实时调用fsync进行日志同步，这种磁盘IO操作将会严重影响redis高性能。一般redis是每隔1s执行一次fsync操作，周期可以配置，或者也可以永不执行，让操作系统来进行调度，也可以每个指令执行一次。</p>
<h2 id="Kafka磁盘缓存"><a href="#Kafka磁盘缓存" class="headerlink" title="Kafka磁盘缓存"></a>Kafka磁盘缓存</h2><p>Kafka中大量使用了页缓存,这是Kafka实现高吞吐的重要因素之一 。用过Java的都知道两点事实：</p>
<ol>
<li><p>对象的内存开销非常大，通常会是真实数据大小的几倍甚至更多，空间使用率低下。</p>
</li>
<li><p>Java的垃圾回收会随着堆内数据的增多而变得越来越慢。</p>
</li>
</ol>
<p>基于这些因素，使用文件系统并依赖于页缓存的做法明显要优于维护一个进程内缓存或其他结构，至少我们可以省去了一份进程内部的缓存消耗，同时还可以通过结构紧凑的字节码来替代使用对象的方式以节省更多的空间。如此,我们可以在32GB的机器上使用28GB至30GB的内存而不用担心GC所带来的性能问题。此外，即使Kafka服务重启，页缓存还是会保持有效,然而进程内的缓存却需要重建。这样也极大地简化了代码逻辑,因为维护页缓存和文件之间的一致性交由操作系统来负责,这样会比进程内维护更加安全有效。 换个角度看，Kafka其实也是一种数据库，生产者就是在insert数据，而消费者就是在select数据，唯一与磁盘缓存进行交互就是borker，borker将生产的数据直接放到缓存中，当消费数据时通过零拷贝技术将缓存中的数据放到socket进行传输，当缓存中没有所需的数据时才会加载磁盘。Kafka的使用场景大部分操作都是顺序读写，采用文件追加的方式来写入消息，即使使用磁盘，性能依旧很高。 Kafka把topic中每个parition大文件分成多个segment小文件段，索引文件负责数据的查找，Kafka的索引文件以稀疏索引的方式构造，分为偏移量索引和时间戳索引，稀疏索引的方式能够降低索引在内存中占用率。 Kafka只负责将消息写到系统缓存中，并不保证脏数据何时会被刷新到磁盘上，可以使用l o g . f l u s h . i n t e r v a l . m e s s a g e s 、l o g . f l u s h . i n t e r v a l . m s 等参数来控制，Kafka消息的可靠性是依赖于多副本机制，而不是由同步刷盘这种严重影响性能的行为来保障。</p>
<h2 id="zookeeper磁盘缓存"><a href="#zookeeper磁盘缓存" class="headerlink" title="zookeeper磁盘缓存"></a>zookeeper磁盘缓存</h2><p>zookeeper在内存中维护着类似于树形文件系统的节点数据模型，其中包含了整棵树的内容，所有的节点路径，节点数据等。代码中使用DataTree的数据结构来保存这些信息，底层是使用一个ConcurrentHashMap键值对结构，既然在内存中有数据必然需要在磁盘上有对应的持久化，类似于redis，zookeeper中也分为事务日志和快照数据。</p>
<h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>存放于dataLogDir配置的路径下，默认存放在dataDir，使用日志中第一条事务记录的ZXID命名，事务日志每个文件都是64MB，因为ZooKeeper 对事务日志文件的磁盘空间进行预分配，客户端的每一次事务操作,ZooKeeper 都会将其写入事务日志文件中。因此,事务日志的写入性能直接决定了ZooKeeper 服务器对事务请求的响应，文件的不断追加写入操作会触发底层磁盘IO为文件开辟新的磁盘块，为了避免磁盘Seek的频率,提高磁盘IO的效率，预先进行磁盘空间分配。当事务操作写入文件流的缓存中，需要将缓存数据强制刷入磁盘，这里可以通过forceSync参数来配置，forceSync&#x3D;yes则每次事务提交的时候将写入操作同步缓存并刷盘，forceSync&#x3D;no表示让系统来调度刷盘频率。</p>
<blockquote>
<p>zookeeper更新操作过程：先写事务日志，再写内存，周期性落到磁盘（刷新内存到快照文件）。事务日志的对写请求的性能影响很大，快照文件和事务日志文件分别挂在不同磁盘，保证dataLogDir所在磁盘性能良好、没有竞争者。</p>
</blockquote>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>开始新的启程</title>
    <url>/2019/05/12/%E5%BC%80%E5%A7%8B%E6%96%B0%E7%9A%84%E5%90%AF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="终于弄完了学校的事情，这段时间发生了很多事情，至于得到的成长需要以后慢慢去感悟，至少我走出了这个阶段，快要去迎接下一个阶段的洗礼，由此我也做出新的决定，停止更新以前种类繁多的项目，我想在一个领域有更深的研究，而不是像以前一样浅尝辄止只是会用而已，这样的坏处可能是我会断掉一些财源，不再去接各种项目，但这些钱并不足以吸引我停止学习的步伐，做人还是要有长远的目光。"><a href="#终于弄完了学校的事情，这段时间发生了很多事情，至于得到的成长需要以后慢慢去感悟，至少我走出了这个阶段，快要去迎接下一个阶段的洗礼，由此我也做出新的决定，停止更新以前种类繁多的项目，我想在一个领域有更深的研究，而不是像以前一样浅尝辄止只是会用而已，这样的坏处可能是我会断掉一些财源，不再去接各种项目，但这些钱并不足以吸引我停止学习的步伐，做人还是要有长远的目光。" class="headerlink" title="终于弄完了学校的事情，这段时间发生了很多事情，至于得到的成长需要以后慢慢去感悟，至少我走出了这个阶段，快要去迎接下一个阶段的洗礼，由此我也做出新的决定，停止更新以前种类繁多的项目，我想在一个领域有更深的研究，而不是像以前一样浅尝辄止只是会用而已，这样的坏处可能是我会断掉一些财源，不再去接各种项目，但这些钱并不足以吸引我停止学习的步伐，做人还是要有长远的目光。"></a>终于弄完了学校的事情，这段时间发生了很多事情，至于得到的成长需要以后慢慢去感悟，至少我走出了这个阶段，快要去迎接下一个阶段的洗礼，由此我也做出新的决定，停止更新以前种类繁多的项目，我想在一个领域有更深的研究，而不是像以前一样浅尝辄止只是会用而已，这样的坏处可能是我会断掉一些财源，不再去接各种项目，但这些钱并不足以吸引我停止学习的步伐，做人还是要有长远的目光。</h2><h2 id="最重要的想法是决定开始录视频教程，可能也没有多少人会去看，但我还是决定去做这个事情，以前我是最不愿意看视频的，嫌弃进度慢容易被讲解者带节奏，现在却开始做自己不喜欢的事情了，生活和人生都是这样反复无常吗？做这些我也不图什么，不带着功利目的去做反而能收获一些东西，以前我也没想过自己的项目能有什么用，而如今还是无意中帮助了很多人，还是去做好自己，其他的留给观众去评说。"><a href="#最重要的想法是决定开始录视频教程，可能也没有多少人会去看，但我还是决定去做这个事情，以前我是最不愿意看视频的，嫌弃进度慢容易被讲解者带节奏，现在却开始做自己不喜欢的事情了，生活和人生都是这样反复无常吗？做这些我也不图什么，不带着功利目的去做反而能收获一些东西，以前我也没想过自己的项目能有什么用，而如今还是无意中帮助了很多人，还是去做好自己，其他的留给观众去评说。" class="headerlink" title="最重要的想法是决定开始录视频教程，可能也没有多少人会去看，但我还是决定去做这个事情，以前我是最不愿意看视频的，嫌弃进度慢容易被讲解者带节奏，现在却开始做自己不喜欢的事情了，生活和人生都是这样反复无常吗？做这些我也不图什么，不带着功利目的去做反而能收获一些东西，以前我也没想过自己的项目能有什么用，而如今还是无意中帮助了很多人，还是去做好自己，其他的留给观众去评说。"></a>最重要的想法是决定开始录视频教程，可能也没有多少人会去看，但我还是决定去做这个事情，以前我是最不愿意看视频的，嫌弃进度慢容易被讲解者带节奏，现在却开始做自己不喜欢的事情了，生活和人生都是这样反复无常吗？做这些我也不图什么，不带着功利目的去做反而能收获一些东西，以前我也没想过自己的项目能有什么用，而如今还是无意中帮助了很多人，还是去做好自己，其他的留给观众去评说。</h2><h2 id="用了很多次征程这个词，这样有种艰辛，拼搏的感觉，但我希望学习是轻松的这样才能提高自己的兴趣。视频能抵消文档的枯燥和陌生，以后不论是GitHub或是博客，我都会更专注于大数据，这是我的领域，也是我的战场。"><a href="#用了很多次征程这个词，这样有种艰辛，拼搏的感觉，但我希望学习是轻松的这样才能提高自己的兴趣。视频能抵消文档的枯燥和陌生，以后不论是GitHub或是博客，我都会更专注于大数据，这是我的领域，也是我的战场。" class="headerlink" title="用了很多次征程这个词，这样有种艰辛，拼搏的感觉，但我希望学习是轻松的这样才能提高自己的兴趣。视频能抵消文档的枯燥和陌生，以后不论是GitHub或是博客，我都会更专注于大数据，这是我的领域，也是我的战场。"></a>用了很多次征程这个词，这样有种艰辛，拼搏的感觉，但我希望学习是轻松的这样才能提高自己的兴趣。视频能抵消文档的枯燥和陌生，以后不论是GitHub或是博客，我都会更专注于大数据，这是我的领域，也是我的战场。</h2>]]></content>
      <categories>
        <category>Self</category>
      </categories>
  </entry>
  <entry>
    <title>基于HDFS大数据存储开发的视频教程</title>
    <url>/2019/05/19/%E5%9F%BA%E4%BA%8Ehdfs%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%BC%80%E5%8F%91%E7%9A%84%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="HDFS开发的视频教程"><a href="#HDFS开发的视频教程" class="headerlink" title="HDFS开发的视频教程"></a>HDFS开发的视频教程</h1><h1 id="链接如下"><a href="#链接如下" class="headerlink" title="链接如下"></a>链接如下</h1><p><a class="link"   href="https://www.bilibili.com/video/av52960647/" >基于HDFS大数据存储开发的视频链接地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://www.rain1024.com/wp-content/uploads/2019/05/m190519ws8lzsilj4xnve3cvrkesjaf2_0006-1-300x169.jpg"
                     
                ></p>
<h2 id="今天做为我的第一次录视频教程还是有很多犹豫的，担心自己的技术，也担心自己的普通话，但既然决定了还是去慢慢克服，遇到问题再解决问题吧，在这次视频里以及今后的视频里我不会把全套都准备好，我想一步一步的来实现，去还原真实开发过程中遇到的问题，同大家站在相同的起点去做这个事情，而不是站在一个高点（用一套已经完整成熟的代码）去讲解，我觉得这样可能会更加有认同感。"><a href="#今天做为我的第一次录视频教程还是有很多犹豫的，担心自己的技术，也担心自己的普通话，但既然决定了还是去慢慢克服，遇到问题再解决问题吧，在这次视频里以及今后的视频里我不会把全套都准备好，我想一步一步的来实现，去还原真实开发过程中遇到的问题，同大家站在相同的起点去做这个事情，而不是站在一个高点（用一套已经完整成熟的代码）去讲解，我觉得这样可能会更加有认同感。" class="headerlink" title="今天做为我的第一次录视频教程还是有很多犹豫的，担心自己的技术，也担心自己的普通话，但既然决定了还是去慢慢克服，遇到问题再解决问题吧，在这次视频里以及今后的视频里我不会把全套都准备好，我想一步一步的来实现，去还原真实开发过程中遇到的问题，同大家站在相同的起点去做这个事情，而不是站在一个高点（用一套已经完整成熟的代码）去讲解，我觉得这样可能会更加有认同感。"></a>今天做为我的第一次录视频教程还是有很多犹豫的，担心自己的技术，也担心自己的普通话，但既然决定了还是去慢慢克服，遇到问题再解决问题吧，在这次视频里以及今后的视频里我不会把全套都准备好，我想一步一步的来实现，去还原真实开发过程中遇到的问题，同大家站在相同的起点去做这个事情，而不是站在一个高点（用一套已经完整成熟的代码）去讲解，我觉得这样可能会更加有认同感。</h2><h2 id="错误是不可避免的，只要能不慌不忙的去一步步调试总能出来结果，我很喜欢去调试错误，因为它在指引着你去完善。"><a href="#错误是不可避免的，只要能不慌不忙的去一步步调试总能出来结果，我很喜欢去调试错误，因为它在指引着你去完善。" class="headerlink" title="错误是不可避免的，只要能不慌不忙的去一步步调试总能出来结果，我很喜欢去调试错误，因为它在指引着你去完善。"></a>错误是不可避免的，只要能不慌不忙的去一步步调试总能出来结果，我很喜欢去调试错误，因为它在指引着你去完善。</h2><h2 id="今天的视频基本结束，中间还是有点不太顺利，产品最怕演示，录制过程节奏可能有些快，需要讲解和说明的比较少，以前都是自己去写，很少会考虑到这些，以后会不断完善的，在右下角有一个键位的显示，有时候写的快了，大家可能会不知道我输入的什么。现在还没有找到一个合适的时间来把握节奏，慢慢来吧，使它做为我教程体系的一个填充。"><a href="#今天的视频基本结束，中间还是有点不太顺利，产品最怕演示，录制过程节奏可能有些快，需要讲解和说明的比较少，以前都是自己去写，很少会考虑到这些，以后会不断完善的，在右下角有一个键位的显示，有时候写的快了，大家可能会不知道我输入的什么。现在还没有找到一个合适的时间来把握节奏，慢慢来吧，使它做为我教程体系的一个填充。" class="headerlink" title="今天的视频基本结束，中间还是有点不太顺利，产品最怕演示，录制过程节奏可能有些快，需要讲解和说明的比较少，以前都是自己去写，很少会考虑到这些，以后会不断完善的，在右下角有一个键位的显示，有时候写的快了，大家可能会不知道我输入的什么。现在还没有找到一个合适的时间来把握节奏，慢慢来吧，使它做为我教程体系的一个填充。"></a>今天的视频基本结束，中间还是有点不太顺利，产品最怕演示，录制过程节奏可能有些快，需要讲解和说明的比较少，以前都是自己去写，很少会考虑到这些，以后会不断完善的，在右下角有一个键位的显示，有时候写的快了，大家可能会不知道我输入的什么。现在还没有找到一个合适的时间来把握节奏，慢慢来吧，使它做为我教程体系的一个填充。</h2><h1 id="先就这样，下次再录-Hadoop环境部署教程。"><a href="#先就这样，下次再录-Hadoop环境部署教程。" class="headerlink" title="先就这样，下次再录 Hadoop环境部署教程。"></a>先就这样，下次再录 Hadoop环境部署教程。</h1><h2 id="有兴趣的可以关注"><a href="#有兴趣的可以关注" class="headerlink" title="有兴趣的可以关注"></a>有兴趣的可以关注</h2><h1 id="我的博客：rain1024-com"><a href="#我的博客：rain1024-com" class="headerlink" title="我的博客：rain1024.com"></a>我的博客：rain1024.com</h1><h1 id="我的GitHub-：github-rain1024-com"><a href="#我的GitHub-：github-rain1024-com" class="headerlink" title="我的GitHub ：github.rain1024.com"></a>我的GitHub ：github.rain1024.com</h1>]]></content>
      <categories>
        <category>hadoop</category>
        <category>HDFS</category>
      </categories>
  </entry>
  <entry>
    <title>微博</title>
    <url>/2017/07/27/%E5%BE%AE%E5%8D%9A/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>微服务架构的多种部署模式</title>
    <url>/2020/03/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E5%A4%9A%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="微服务架构的多种部署模式"><a href="#微服务架构的多种部署模式" class="headerlink" title="微服务架构的多种部署模式"></a>微服务架构的多种部署模式</h1><blockquote>
<p>声明：本文主要内容来自《微服务架构设计模式》</p>
</blockquote>
<p>部署包含两个互相关联的概念：流程和架构。部署流程包括一些由开发人员和运维人员执行的过程，以便将软件发布到生产环境。部署架构定义了该软件运行的环境结构。 以微服务架构开发的程序，经常涉及到多个服务组成，后端的网关模块，用户模块，日志模块，业务模块等，还有前端Node.js模块。以笔者所在公司为例，每次部署服务时都要互相之间沟通协调好，方便服务之间的调用。一般在开发环境中多以jar形式部署，从本地直接打包发布到服务器，方便快捷，适合与其他业务调试时及时解决修复问题。但这样也存在一定的弊端，由于本地打包都是自己修改后的代码，如果没有及时将更改提交到git上，很容易遗漏其他协作开发的同事的代码，可能自己的代码调试完成，同事的却出现问题。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200321205118007.png"
                      alt="image-20200321205118007"
                > ​ 图中抽象描述微服务架构中多种服务的组成和调用关系 当涉及测试和生产环境的部署时，需要注意的地方更多，打包上传这种方式存在很大的漏洞，不够流程化，而且服务器上可能运行各种语言和框架编写的服务，每个服务都是一个小应用程序，这意味着你在生产环境中有数十或数百个应用程序。因此让系统管理员手动配置服务器和服务已不再可行。如果要大规模部署微服务，则需要高度自动化的部署流程和基础设施。 生产环境必须实现四个关键功能:</p>
<ul>
<li><p>服务管理接口： 使开发人员能够创建、更新和配置服务。理想情况下,这个接口是一个可供命令行和图形部署工具调用的REST API。</p>
</li>
<li><p>运行时服务管理：确保始终运行着所需数量的服务实例。如果服务实例崩溃或由于某种原因无法处理请求,则生产环境必须重新启动它。如果运行服务的主机发生崩溃,则必须在其他主机上重新启动这些服务实例。</p>
</li>
<li><p>监控：让开发人员深入了解服务正在做什么,包括日志文件和各种应用指标。如果出现问题，必须提醒开发人员，也称为可观测性。</p>
</li>
<li><p>请求路由：将用户的请求路由到服务。</p>
</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>故本文将阐述三个关键部署模式，并分析它们的好处和弊端。</p>
<ol>
<li>编程语言特定的发布包格式，例如Java JAR或WAR文件。我并不推荐这种做法，之所以介绍这个选项，是因为这个部署方法有各种显著的缺点，会促使你思考和选择其他更为合理和现代化的部署技术。</li>
<li>将服务部署为虚拟机，把服务打包为虚拟机镜像，这个镜像封装了服务的技术栈，这样可以简化部署。</li>
<li>将服务部署为容器，这些容器比虚拟机更轻量级。</li>
</ol>
<h2 id="1-编程语言特定的发布包格式"><a href="#1-编程语言特定的发布包格式" class="headerlink" title="1 编程语言特定的发布包格式"></a>1 编程语言特定的发布包格式</h2><p>假设你要部署一个基于Spring Boot的Java应用程序。部署此服务的一种方法是使用特定于编程语言的软件包部署服务。使用此模式时，生产环境中部署的内容以及服务运行时管理的内容都是特定于语言的发布包中的服务。在Restaurant service的场景下，它是可执行的JAR文件或WAR文件。对于其他语言，例如Nodejs，服务是源代码和模块的目录。对于某些语言，例如GoLang，服务是特定于操作系统某个路径下的可执行文件。</p>
<blockquote>
<p>模式:编程语言特定的发布包格式，使用特定于编程语言的软件发布包将服务部署到生产环境。</p>
</blockquote>
<p>要在计算机上部署Java应用程序，首先要安装必要的运行时，在本例中为JDK。如果它是WAR文件，则还需要安装Web容器，例如Apache Tomcat。配置完计算机后，将程序发布包复制到计算机并启动该服务。每个服务实例都作为JVM进程运行。理想情况下，你已经设置好部署流水线，它会自动将服务部署到生产环境。部署流水线构建可执行的JAR文件或WAR文件，然后它们调用生产环境的服务管理接口来部署新版本。 服务实例通常是单个进程，但有时可能是一组进程。例如，Java服务实例是运行JVM的进程。 Node js服务可能会生成多个工作进程，以便同时处理请求。某些语言支持在同一进程中部署多个服务实例。 有时，可以在计算机上部署单个服务实例，同时保留在同一台计算机上部署多个服务实例的选项。例如，如图12-4所示，可以在一台计算机上运行多个JVM每个JVM都运行个服务实例。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200321213222442.png"
                      alt="image-20200321213222442"
                >图中在同一台计算机上部署多个服务实例它们可能是相同服务的实例，也可能是不同服务的实例。操作系统的开销在服务实例之间共享。每个服务实例都是一个单独的进程，因此它们之间存在一些隔离。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200321213627616.png"
                      alt="image-20200321213627616"
                > 某些语言还允许在单个进程中运行多个服务实例。例如，如图所示，可以在单个 Apache Tomcat上运行多个Java服务。 进程，在同一Web容器或应用程序服务器上部署多个服务实例。它们可能是相同服务的实例，也可能是不同服务的实例。操作系统和运行时的开销在所有服务实例之间共享。但是因为服务实例处于同一个进程中，所以它们之间没有隔离。 将服务作为特定于语言的发布包进行部署的模式有好处也有弊端。我们先来看看好处。</p>
<h4 id="使用编程语言特定的发布包格式进行部署的好处"><a href="#使用编程语言特定的发布包格式进行部署的好处" class="headerlink" title="使用编程语言特定的发布包格式进行部署的好处"></a>使用编程语言特定的发布包格式进行部署的好处</h4><p>将服务作为特定于编程语言的发布包进行部署有以下好处:</p>
<ul>
<li>快速部署。</li>
<li>高效的资源利用，尤其是在同一台机器上或同一进程中运行多个实例时。</li>
</ul>
<p>我们来逐一分析。</p>
<h5 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h5><p>这种模式的一个主要好处是部署服务实例的速度相对较快:将服务复制到主机并启动它。如果服务是用Java编写的，则复制JAR或WAR文件。对于其他语言，例如js或Ruby，可以复制源代码。在任何一种情况下，需要通过网络复制的字节数相对较小。此外，启动服务耗时很短。如果服务运行于自己独占的进程，则启动它。否则，如果服务是在同一Web容器（例如Tomcat）进程中运行的多个实例之一，则可以将其动态部署到Web容器中，也可以重新启动Web容器。由于没有额外的开销，因此启动服务通常很快。</p>
<h5 id="高效的资源利用"><a href="#高效的资源利用" class="headerlink" title="高效的资源利用"></a>高效的资源利用</h5><p>这种模式的另一个主要好处是它可以相对高效地使用资源。多个服务实例共享机器及其操作系统。如果多个服务实例在同一进程中运行，则效率更高。例如，多个Web应用程序可以共享相同的 Apache Tomcat服务器和JVM。</p>
<h4 id="使用编程语言特定的发布包格式进行部署的弊端"><a href="#使用编程语言特定的发布包格式进行部署的弊端" class="headerlink" title="使用编程语言特定的发布包格式进行部署的弊端"></a>使用编程语言特定的发布包格式进行部署的弊端</h4><p>尽管极具吸引力，但把服务作为特定于编程语言的发布包进行部署的模式有几个显著的</p>
<ul>
<li>缺乏对技术栈的封装。</li>
<li>无法约束服务实例消耗的资源。</li>
<li>在同一台计算机上运行多个服务实例时缺少隔离。</li>
<li>很难自动判定放置服务实例的位置。</li>
</ul>
<p>我们来逐一分析。</p>
<h5 id="缺乏对技术栈的封装"><a href="#缺乏对技术栈的封装" class="headerlink" title="缺乏对技术栈的封装"></a>缺乏对技术栈的封装</h5><p>运维团队必须了解部署每个服务的具体细节每个服务都需要特定版本的运行时。例如， Java Web应用程序需要特定版本的 Apache Tomcat和JDK运维团队必须安装每个所需软件包的正确版本。 更糟糕的是，服务可以用各种语言和框架编写。它们也可能用这些语言和框架的多个版本编写。因此，开发团队必须（以人工的方式）与运维团队分享许多细节。这种沟通的复杂性增加了部署期间出错的风险。例如，机器可能安装错误的语言运行时版本。</p>
<h5 id="无法约束服务实例消耗的资源"><a href="#无法约束服务实例消耗的资源" class="headerlink" title="无法约束服务实例消耗的资源"></a>无法约束服务实例消耗的资源</h5><p>另一个缺点是你无法约束服务实例所消耗的资源。一个进程可能会消耗机器的所有CPU或内存，争用其他服务实例和操作系统的资源。例如，出现某个错误，这种情况极有可能会发生。</p>
<h5 id="在同一台计算机上运行多个服务实例时缺少隔离"><a href="#在同一台计算机上运行多个服务实例时缺少隔离" class="headerlink" title="在同一台计算机上运行多个服务实例时缺少隔离"></a>在同一台计算机上运行多个服务实例时缺少隔离</h5><p>在同一台计算机上运行多个实例时，问题更严重。缺乏隔离意味着行为不当的服务实例可能会影响其他服务实例。因此，应用程序存在不可靠的风险，尤其是在同一台计算机上运行多个服务实例时。</p>
<h5 id="很难自动判定放置服务实例的位置"><a href="#很难自动判定放置服务实例的位置" class="headerlink" title="很难自动判定放置服务实例的位置"></a>很难自动判定放置服务实例的位置</h5><p>在同一台计算机上运行多个服务实例的另一个挑战是确定服务实例的位置。每台机器都有一组固定的资源、CPU、内存等，每个服务实例都需要一定的资源。以一种有效使用机器而不会使它们过载的方式将服务实例分配给机器非常重要。正如我稍后解释的那样，基于虚拟机的云主机和容器编排框架会自动处理这个问题。在本地部署服务时，你可能需要手动确定放置位置。 正如你所看到的，服务作为特定于语言的发布包进行部署的模式具有一些显著的弊端。应该尽量避免使用这种方法，除非所获效率的价值远在其他所有考量之上。</p>
<h2 id="2-将服务部署为虚拟机"><a href="#2-将服务部署为虚拟机" class="headerlink" title="2 将服务部署为虚拟机"></a>2 将服务部署为虚拟机</h2><p>模式:将服务部署为虚拟机，将作为虚拟机镜像打包的服务部署到生产环境中。每个服务实例都是一个虚拟机。虚拟机镜像由服务的部署流水线构建。部署流水线运行虚拟机镜像构建器，这个构建器创建包含服务代码和服务运行所需的任何软件的虚拟机镜像。例如，服务的安装JDK和服务的可执行JAR的虚拟机构建器。虚拟机镜像构建器使用 Linux的init系统（如 upstart）将虚拟机镜像配置成在虚拟机引导时运行该应用程序。 部署流水线可以使用各种工具来构建虚拟机镜像。一个早期创建EC2AMI的工具是由 netflix aminator （ <a class="link"   href="https://github/" >https://github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. com&#x2F;netflix&#x2F;a ） Netflix AWS开发的Aminatorhtp:github.cm&#x2F;netflix&#x2F;aminator），netflix使用它在aws上部署其视频流服务 packer （ <a class="link"   href="https://www.packer/" >https://www.packer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. io ）是一个更现代的虚拟机镜像构建器，与 Aminator不同，它支持各种虚拟化技术，包括EC2 Digital Ocean、 Virtual Box和 VMware要使用 Packer创建AMI，你需要编写一个配置文件，用于指定基础镜像和一组安装软件并配置AMI的配置程序。 关于它的好处和弊端</p>
<h4 id="将服务部署为虚拟机的好处"><a href="#将服务部署为虚拟机的好处" class="headerlink" title="将服务部署为虚拟机的好处"></a>将服务部署为虚拟机的好处</h4><ul>
<li>虚拟机镜像封装了技术栈。</li>
<li>隔离的服务实例。</li>
<li>使用成熟的云计算基础设施。</li>
</ul>
<p>我们来逐一分析。</p>
<h5 id="虚拟机镜像封装了技术栈"><a href="#虚拟机镜像封装了技术栈" class="headerlink" title="虚拟机镜像封装了技术栈"></a>虚拟机镜像封装了技术栈</h5><p>此模式的一个重要好处是虚拟机镜像包含服务及其所有依赖项。它消除了错误来源，确保正确安装和设置服务运行所需的软件。一旦服务被打包为虚拟机，它就会变成一个黑盒子，封装服务的技术栈。虚拟机镜像可以无须修改地部署在任何地方。用于部署服务的API成为虚拟机管理API。部署变得更加简单和可靠。</p>
<h5 id="隔离的服务实例"><a href="#隔离的服务实例" class="headerlink" title="隔离的服务实例"></a>隔离的服务实例</h5><p>虚拟机的另一个好处是每个服务实例都以完全隔离的方式运行。毕竟，这是虚拟机技术的主要目标之一。每台虚拟机都有固定数量的CPU和内存，不能从其他服务中窃取资源。</p>
<h5 id="使用成熟的云计算基础设施"><a href="#使用成熟的云计算基础设施" class="headerlink" title="使用成熟的云计算基础设施"></a>使用成熟的云计算基础设施</h5><p>将微服务部署为虚拟机时，可以利用成熟且高度自动化的云计算基础设施。AWS等公共云试图以避免机器过载的方式在物理机上调度虚拟机。它们还提供有价值的功能，例如跨虚拟机的流量负载均衡和自动扩展。</p>
<h4 id="将服务部署为虚拟机的弊端"><a href="#将服务部署为虚拟机的弊端" class="headerlink" title="将服务部署为虚拟机的弊端"></a>将服务部署为虚拟机的弊端</h4><ul>
<li>资源利用效率较低。</li>
<li>部署速度相对较慢。</li>
<li>系统管理的额外开销。</li>
</ul>
<h5 id="资源利用效率较低。"><a href="#资源利用效率较低。" class="headerlink" title="资源利用效率较低。"></a>资源利用效率较低。</h5><p>每个服务实例拥有一整台虚拟机的开销，包括其操作系统。此外，典型的公共IaaS虚拟机提供有限的虚拟机配置组合，因此虚拟机可能未得到充分利用。这不太可能成为基于Java的服务的问题，因为它们一般都相对较重。但这种模式可能是部署轻量级 Nodejs和 GoLang服务的低效方式。</p>
<h5 id="部署速度相对较慢"><a href="#部署速度相对较慢" class="headerlink" title="部署速度相对较慢"></a>部署速度相对较慢</h5><p>由于虚拟机的大小，构建虚拟机镜像通常需要几分钟。有很多内容要通过网络传输。此外，由于必须通过网络传输完整的虚拟机镜像文件，从镜像实例化虚拟机是非常耗时的。在虚拟机内部运行的操作系统也需要一些时间来启动，尽管慢速是一个相对的术语。这个过程可能需要几分钟，比传统的部署过程要快得多。但它比你即将学习的更轻量级的部署模式要慢得多。</p>
<h5 id="系统管理的额外开销"><a href="#系统管理的额外开销" class="headerlink" title="系统管理的额外开销"></a>系统管理的额外开销</h5><p>你不得不担负起给操作系统和运行时打补丁的责任。这对于部署软件时的系统管理似乎是不可避免的，但在后面的12.5节中，我Serverless将描述部署，它消除了这种系统管理的方式。 现在让我们看一下部署微服务更加轻量但仍每一个容器都是隔离进程的沙箱具有虚拟机诸多优点的替代方法。</p>
<h2 id="3-将服务部署为容器"><a href="#3-将服务部署为容器" class="headerlink" title="3 将服务部署为容器"></a>3 将服务部署为容器</h2><p>容器是一种更现代、更轻量级的部署机制，是一种操作系统级的虚拟化机制。容器通常包含一个或多个在沙箱中运行的进程，这个沙箱将它们与其他容器隔离。例如，运行Java服务的容器通常由JVM进程组成。 从在容器中运行的进程的角度来看，它就好像在自己的机器上运行一样。它通常有自己的机器IP地址，可以消除端口冲突。例如，所有Java由所有容器共享进程都可以侦听端口8080。每个容器也有自己的根文件系统。容器运行时使用操作系统机制将容器彼此隔离。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20200321215531191.png"
                      alt="image-20200321215531191"
                ></p>
<blockquote>
<p>模式：将服务部署为容器将作为容器镜像打包的服务部署到生产环境中每个服务实例都是一个容器。</p>
</blockquote>
<p>创建容器时，可以指定它的CPU和内存资源，以及依赖于容器实现的I&#x2F;O资源等。容器运行时强制执行这些限制，并防止容器占用其机器的资源。使用 Docker编排框架（如 Kubernetes）时，指定容器的资源尤为重要。这是因为编排框架使用容器请求的资源来选择运行容器的底层机器，从而确保机器不会过载。 在构建服务时，部署流水线使用容器镜像构建工具，该工具读取服务代码和镜像描述，以创建容器镜像并将其存储在镜像仓库中。在运行时，从镜像仓库中拉取容器镜像，并用于创建容器。</p>
<h5 id="使Docker用部署服务"><a href="#使Docker用部署服务" class="headerlink" title="使Docker用部署服务"></a>使Docker用部署服务</h5><p>要将服务部署为容器，必须将其打包为容器镜像。容器镜像是由应用程序和运行服务所需的依赖软件组成的文件系统镜像。它通常是一个完整的 Linux根文件系统，但更轻量级的镜像也可以使用。例如，要部署基于 Spring Boot的服务，需要构建一个容器镜像，其中包含服务的可执行JAR和正确的JDK版本。同样，部署 Java Web应用程序，需要构建一个包含WAR文件 Apache、 Tomcat和JDK的容器镜像。主要分为以下步骤。</p>
<ol>
<li>构建 Docker镜像</li>
<li>将Docker镜像推送到镜像仓库</li>
<li>运行Docker容器</li>
</ol>
<h4 id="将服务部署为容器的好处"><a href="#将服务部署为容器的好处" class="headerlink" title="将服务部署为容器的好处"></a>将服务部署为容器的好处</h4><p>将服务部署为容器有几个好处。首先，容器具有虚拟机的许多好处:</p>
<ul>
<li>封装技术栈，可以用容器的API实现对服务的管理。 服务实例是隔离的。</li>
<li>服务实例的资源受到限制。</li>
</ul>
<p>但与虚拟机不同，容器是一种轻量级技术容器镜像通常可以很快构建。例如，只需几秒就可以将 Spring Boot应用程序打包为容器镜像。通过网络传输容器镜像也相对较快主要是因为仅传输所需要的镜像层的子集。（这是因为 Docker镜像具有所谓的分层文件系统，使得 Docker只需要通过网络传输部分镜像。镜像的操作系统、Java运行时和应用程序位于不同的层中。 Docker只需要传输镜像仓库中不存在的那些层。因此，当 Docker只需移动应用程序层时，通过网络传输镜像特别快）。容器也可以很快启动，因为没有冗长的操作系统启动过程。当容器启动时，所运行的就是服务。</p>
<h4 id="将服务部署为容器的弊端"><a href="#将服务部署为容器的弊端" class="headerlink" title="将服务部署为容器的弊端"></a>将服务部署为容器的弊端</h4><p>容器的一个显著弊端是，你需要承担大量的容器镜像管理工作。你必须负责给操作系统和运行时打补丁。此外，除非使用托管容器解决方案（如 Google Container Engine或awsECS），否则你必须管理容器基础设施以及容器运行可能需要的虚拟机基础设施。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>我由幻读而明白了数据库事务</title>
    <url>/2021/03/09/%E6%88%91%E7%94%B1%E5%B9%BB%E8%AF%BB%E8%80%8C%E6%98%8E%E7%99%BD%E4%BA%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="我由幻读而明白了数据库事务"><a href="#我由幻读而明白了数据库事务" class="headerlink" title="我由幻读而明白了数据库事务"></a>我由幻读而明白了数据库事务</h1><h4 id="刚开始接触数据库事务的时候，总会被脏读，不可重复读，幻读，读未提交，读已提交，可重复读等等这些“读”名词整的特别混乱。只能去硬记数据库事务的级别，以及每个级别可以解决的问题，和不同数据库实现的事务级别，直到后来彻底看完innodb引擎对事务的处理，才算彻底理清这些事务之间的关系，当别人再问起来时，可以马上根据底层原理说清楚与理论的关系。"><a href="#刚开始接触数据库事务的时候，总会被脏读，不可重复读，幻读，读未提交，读已提交，可重复读等等这些“读”名词整的特别混乱。只能去硬记数据库事务的级别，以及每个级别可以解决的问题，和不同数据库实现的事务级别，直到后来彻底看完innodb引擎对事务的处理，才算彻底理清这些事务之间的关系，当别人再问起来时，可以马上根据底层原理说清楚与理论的关系。" class="headerlink" title="刚开始接触数据库事务的时候，总会被脏读，不可重复读，幻读，读未提交，读已提交，可重复读等等这些“读”名词整的特别混乱。只能去硬记数据库事务的级别，以及每个级别可以解决的问题，和不同数据库实现的事务级别，直到后来彻底看完innodb引擎对事务的处理，才算彻底理清这些事务之间的关系，当别人再问起来时，可以马上根据底层原理说清楚与理论的关系。"></a>刚开始接触数据库事务的时候，总会被脏读，不可重复读，幻读，读未提交，读已提交，可重复读等等这些“读”名词整的特别混乱。只能去硬记数据库事务的级别，以及每个级别可以解决的问题，和不同数据库实现的事务级别，直到后来彻底看完innodb引擎对事务的处理，才算彻底理清这些事务之间的关系，当别人再问起来时，可以马上根据底层原理说清楚与理论的关系。</h4><h4 id="本文中还是以innodb引擎为例来进行说明，其他数据库或引擎所知甚少就不谈及了。"><a href="#本文中还是以innodb引擎为例来进行说明，其他数据库或引擎所知甚少就不谈及了。" class="headerlink" title="本文中还是以innodb引擎为例来进行说明，其他数据库或引擎所知甚少就不谈及了。"></a>本文中还是以innodb引擎为例来进行说明，其他数据库或引擎所知甚少就不谈及了。</h4><h4 id="简单的说事务就是保证一组操作要么全部成功要么全部失败，提到事务就会说起事务特性ACID（原子性，一致性，隔离性，持久性），这里我们主要说事务的隔离性。"><a href="#简单的说事务就是保证一组操作要么全部成功要么全部失败，提到事务就会说起事务特性ACID（原子性，一致性，隔离性，持久性），这里我们主要说事务的隔离性。" class="headerlink" title="简单的说事务就是保证一组操作要么全部成功要么全部失败，提到事务就会说起事务特性ACID（原子性，一致性，隔离性，持久性），这里我们主要说事务的隔离性。"></a>简单的说事务就是保证一组操作要么全部成功要么全部失败，提到事务就会说起事务特性ACID（原子性，一致性，隔离性，持久性），这里我们主要说事务的隔离性。</h4><p><strong>SQL 标准定义了四个隔离级别：</strong></p>
<ul>
<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>
<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>
<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>
<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>
</ul>
<h4 id="还有下面这个看似简单实则迷惑的表格"><a href="#还有下面这个看似简单实则迷惑的表格" class="headerlink" title="还有下面这个看似简单实则迷惑的表格"></a>还有下面这个看似简单实则迷惑的表格</h4><p>隔离级别</p>
<p>脏读</p>
<p>不可重复读</p>
<p>幻读</p>
<p>READ-UNCOMMITTED</p>
<p>√</p>
<p>√</p>
<p>√</p>
<p>READ-COMMITTED</p>
<p>×</p>
<p>√</p>
<p>√</p>
<p>REPEATABLE-READ</p>
<p>×</p>
<p>×</p>
<p>√</p>
<p>SERIALIZABLE</p>
<p>×</p>
<p>×</p>
<p>×</p>
<h5 id="MySQL-InnoDB-存储引擎的默认支持的隔离级别是-REPEATABLE-READ（可重复读），可以通过命令来查询或者修改事务级别。"><a href="#MySQL-InnoDB-存储引擎的默认支持的隔离级别是-REPEATABLE-READ（可重复读），可以通过命令来查询或者修改事务级别。" class="headerlink" title="MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重复读），可以通过命令来查询或者修改事务级别。"></a>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重复读）</strong>，可以通过命令来查询或者修改事务级别。</h5><h4 id="我们可以根据每个级别来分析，最低的RU级别其实都不需要做处理，脏数据或重复数据都会出现，而在RC与RR级别下，innodb通过undo-log来实现多版本并发控制（MVCC）中用到的一致性读视图。"><a href="#我们可以根据每个级别来分析，最低的RU级别其实都不需要做处理，脏数据或重复数据都会出现，而在RC与RR级别下，innodb通过undo-log来实现多版本并发控制（MVCC）中用到的一致性读视图。" class="headerlink" title="我们可以根据每个级别来分析，最低的RU级别其实都不需要做处理，脏数据或重复数据都会出现，而在RC与RR级别下，innodb通过undo log来实现多版本并发控制（MVCC）中用到的一致性读视图。"></a>我们可以根据每个级别来分析，最低的RU级别其实都不需要做处理，脏数据或重复数据都会出现，而在RC与RR级别下，innodb通过undo log来实现多版本并发控制（MVCC）中用到的一致性读视图。</h4><h4 id="1-RC事务级别中是允许读取到已经提交的数据，包括修改和增加数据，这也是大多数数据库支持的事务隔离级别，因为读到都是其他事务提交的，一般来说是可以接受的，并不会带来很大的问题，但其违反了事务一致性的规定。在RC事务隔离级别下，仅采用Record-lock，除了唯一性的约束检查与外键约束的检查需要gap-lock，其他地方不使用gap-lock的锁。"><a href="#1-RC事务级别中是允许读取到已经提交的数据，包括修改和增加数据，这也是大多数数据库支持的事务隔离级别，因为读到都是其他事务提交的，一般来说是可以接受的，并不会带来很大的问题，但其违反了事务一致性的规定。在RC事务隔离级别下，仅采用Record-lock，除了唯一性的约束检查与外键约束的检查需要gap-lock，其他地方不使用gap-lock的锁。" class="headerlink" title="1. RC事务级别中是允许读取到已经提交的数据，包括修改和增加数据，这也是大多数数据库支持的事务隔离级别，因为读到都是其他事务提交的，一般来说是可以接受的，并不会带来很大的问题，但其违反了事务一致性的规定。在RC事务隔离级别下，仅采用Record lock，除了唯一性的约束检查与外键约束的检查需要gap lock，其他地方不使用gap lock的锁。"></a>1. RC事务级别中是允许读取到已经提交的数据，包括修改和增加数据，这也是大多数数据库支持的事务隔离级别，因为读到都是其他事务提交的，一般来说是可以接受的，并不会带来很大的问题，但其违反了事务一致性的规定。在RC事务隔离级别下，仅采用Record lock，除了唯一性的约束检查与外键约束的检查需要gap lock，其他地方不使用gap lock的锁。</h4><h4 id="2-在RR可重复读的事务级别下，innodb使用Next-key-lock锁的算法来避免不可重复读的问题，即幻象问题，在Next-key-lock锁下，对于索引的扫描不仅是锁住扫描到的索引，而且还锁住这些索引覆盖的范围（一个前开后闭的区间，包括记录本身），在这个范围内插入都是不允许的，避免了其他事务在这个范围内插入数据而导致不可重复读的问题。"><a href="#2-在RR可重复读的事务级别下，innodb使用Next-key-lock锁的算法来避免不可重复读的问题，即幻象问题，在Next-key-lock锁下，对于索引的扫描不仅是锁住扫描到的索引，而且还锁住这些索引覆盖的范围（一个前开后闭的区间，包括记录本身），在这个范围内插入都是不允许的，避免了其他事务在这个范围内插入数据而导致不可重复读的问题。" class="headerlink" title="2. 在RR可重复读的事务级别下，innodb使用Next-key lock锁的算法来避免不可重复读的问题，即幻象问题，在Next-key lock锁下，对于索引的扫描不仅是锁住扫描到的索引，而且还锁住这些索引覆盖的范围（一个前开后闭的区间，包括记录本身），在这个范围内插入都是不允许的，避免了其他事务在这个范围内插入数据而导致不可重复读的问题。"></a>2. 在RR可重复读的事务级别下，innodb使用Next-key lock锁的算法来避免不可重复读的问题，即幻象问题，在Next-key lock锁下，对于索引的扫描不仅是锁住扫描到的索引，而且还锁住这些索引覆盖的范围（一个前开后闭的区间，包括记录本身），在这个范围内插入都是不允许的，避免了其他事务在这个范围内插入数据而导致不可重复读的问题。</h4><h4 id="3-在SERIALIABLE的事务隔离级别，innodb引擎会对每个select语句后自动加上LOCK-IN-SHARE-MODE，为每个读取操作加上一个共享锁，因为在读占用了锁，所以不再支持一致性读非锁定读。innodb在RR隔离级别下就可以到达SQL标准的SERIALIABLE级别，因此一般不在本地事务中使用SERIALIABLE的隔离级别。"><a href="#3-在SERIALIABLE的事务隔离级别，innodb引擎会对每个select语句后自动加上LOCK-IN-SHARE-MODE，为每个读取操作加上一个共享锁，因为在读占用了锁，所以不再支持一致性读非锁定读。innodb在RR隔离级别下就可以到达SQL标准的SERIALIABLE级别，因此一般不在本地事务中使用SERIALIABLE的隔离级别。" class="headerlink" title="3. 在SERIALIABLE的事务隔离级别，innodb引擎会对每个select语句后自动加上LOCK IN SHARE MODE，为每个读取操作加上一个共享锁，因为在读占用了锁，所以不再支持一致性读非锁定读。innodb在RR隔离级别下就可以到达SQL标准的SERIALIABLE级别，因此一般不在本地事务中使用SERIALIABLE的隔离级别。"></a>3. 在SERIALIABLE的事务隔离级别，innodb引擎会对每个select语句后自动加上LOCK IN SHARE MODE，为每个读取操作加上一个共享锁，因为在读占用了锁，所以不再支持一致性读非锁定读。innodb在RR隔离级别下就可以到达SQL标准的SERIALIABLE级别，因此一般不在本地事务中使用SERIALIABLE的隔离级别。</h4><h4 id="综上，innodb更加完美的解决了幻象问题，在默认情况下设置为REPEATABLE-READ的隔离级别即可，事务级别越低涉及到的锁越少，虽然REPEATABLE-READ级别会将Record-Lock升级为Next-key-lock锁，但并不会比READ-COMMITTED级别有性能损耗。"><a href="#综上，innodb更加完美的解决了幻象问题，在默认情况下设置为REPEATABLE-READ的隔离级别即可，事务级别越低涉及到的锁越少，虽然REPEATABLE-READ级别会将Record-Lock升级为Next-key-lock锁，但并不会比READ-COMMITTED级别有性能损耗。" class="headerlink" title="综上，innodb更加完美的解决了幻象问题，在默认情况下设置为REPEATABLE-READ的隔离级别即可，事务级别越低涉及到的锁越少，虽然REPEATABLE-READ级别会将Record Lock升级为Next-key lock锁，但并不会比READ-COMMITTED级别有性能损耗。"></a>综上，innodb更加完美的解决了幻象问题，在默认情况下设置为REPEATABLE-READ的隔离级别即可，事务级别越低涉及到的锁越少，虽然REPEATABLE-READ级别会将Record Lock升级为Next-key lock锁，但并不会比READ-COMMITTED级别有性能损耗。</h4>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>感悟</title>
    <url>/2017/07/27/%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>扩展</title>
    <url>/2017/07/27/%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>数据库读写分离时，主从延时导致数据不一致的解决方案</title>
    <url>/2021/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%97%B6%EF%BC%8C%E4%B8%BB%E4%BB%8E%E5%BB%B6%E6%97%B6%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="数据库读写分离时，主从延时导致数据不一致的解决方案"><a href="#数据库读写分离时，主从延时导致数据不一致的解决方案" class="headerlink" title="数据库读写分离时，主从延时导致数据不一致的解决方案"></a>数据库读写分离时，主从延时导致数据不一致的解决方案</h1><blockquote>
<p>引入主从架构，数据读写分离，目的是为了解决业务快速发展，请求量变大，并发量变大，从而引发的数据库的读瓶颈。不过当引入新一个架构解决问题时，势必会带来另外一个问题，数据库读写分离之后，主从延迟从而导致数据不一致的情况。</p>
</blockquote>
<h2 id="数据库系统架构"><a href="#数据库系统架构" class="headerlink" title="数据库系统架构"></a>数据库系统架构</h2><h3 id="主备架构"><a href="#主备架构" class="headerlink" title="主备架构"></a>主备架构</h3><p>公司业务发展的前期，由于数据访问量小，这时我们可以直接采用单库的架构，承载所有的访问请求。不过因为存在单点的问题。若数据库出现故障，这段期间业务将会不可用。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/20210104084553.png"
                      alt="image-20210104084506829"
                > 这时我们可以增加一个备库，实时同步主库的数据 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/20210104084901.png"
                      alt="image-20210104084845254"
                > 一旦主库出了故障，通过人工的方式，手动地将主机下线，将备机改为主机来继续提供服务。这种架构，部署维护简单，业务开发也无需任何改造。不过缺点也很明显，备库只有在主库有问题的时候才会被启用，存在一定的资源浪费的情况。</p>
<h3 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h3><p>随着业务发展，请求量不断变大，数据量也不断变大，业务变得更加复杂，很快数据将会到达瓶颈。 由于大多数业务都是读多写少，所以数据库读时最容易成为系统瓶颈。 这时候我们可以采用以下方案提高读的性能：增加从实例，主从同步，数据读写分离。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210104085117055.png"
                      alt="image-20210104085117055"
                > 这个架构与主备区别不大，主要区别在于主从架构下，从库与主库一样，时刻需要干活，主库提供写服务，从库只提供读服务。 如果后续读的压力还是太大，我们还可以增加从库的数量，水平扩充读的能力。 虽然主从架构帮我们解决读的瓶颈，但是由于主从之间需要数据同步，这自然就存在一定延时。在这延时窗口期内，从库的读只能读到旧数据。</p>
<h2 id="延时解决方案"><a href="#延时解决方案" class="headerlink" title="延时解决方案"></a>延时解决方案</h2><h3 id="1-数据同步写入从库"><a href="#1-数据同步写入从库" class="headerlink" title="1.数据同步写入从库"></a>1.数据同步写入从库</h3><p>主从数据同步方案，一般都是采用的异步方式同步给备库。我们可以将其修改为同步方案，主从同步完成，主库上的写才能返回。</p>
<ol>
<li>业务系统发起写操作，数据写主库；</li>
<li>写请求需要等待主从同步完成才能返回；</li>
<li>数据读从库，主从同步完成就能读到最新数据。</li>
</ol>
<p>这种方案，我们只需要修改数据库之间同步配置即可，业务层无需修改，相对简单。但随着从库的数据增加，由于主库写需要等待主从完成，写请求的时延将会增加，吞吐量将会降低。</p>
<h3 id="2-缓存路由方法"><a href="#2-缓存路由方法" class="headerlink" title="2.缓存路由方法"></a>2.缓存路由方法</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/20210104085828.png"
                      alt="image-20210104085809701"
                ></p>
<ol>
<li><p>写请求发往主库，同时缓存记录操作的 key，缓存的失效时间设置为主从的延时；</p>
</li>
<li><p>读请求首先判断缓存是否存在：</p>
</li>
<li><ul>
<li>若存在，代表刚发生过写操作，读请求操作主库；</li>
<li>若不存在，代表近期没发生写操作，读请求操作从库。</li>
</ul>
</li>
</ol>
<p>这种方案相对中间件的方案成本较低，但是又引入一个缓存组件，所有读写之间就又多了一步缓存操作，整体复杂度变高，业务开发也变得复杂。</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>数独破解</title>
    <url>/2017/07/27/%E6%95%B0%E7%8B%AC%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>文件床</title>
    <url>/2019/03/31/%E6%96%87%E4%BB%B6%E5%BA%8A/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>文章</title>
    <url>/2017/07/27/%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>无状态节点服务的缓存数据同步实现</title>
    <url>/2021/06/10/%E6%97%A0%E7%8A%B6%E6%80%81%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="无状态节点服务的缓存数据同步实现"><a href="#无状态节点服务的缓存数据同步实现" class="headerlink" title="无状态节点服务的缓存数据同步实现"></a>无状态节点服务的缓存数据同步实现</h1><p>在目前需求背景下要设计一套底层服务系统，提供一系列基本数据请求接口，这里把该系统服务称为P，为保证高可用高可靠性，P系统最少依赖外部中间件，例如数据库消息队列等组件，服务所涉及的数据全部缓存到本地缓存中，然后由其他服务来请求接口或数据库收集数据，将收集的数据存入Redis中，再去通知P系统更新本地缓存的数据，收集数据的服务称为D。 以下为P，D，Redis关系图。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/6185F99F-F8E2-4C68-B34A-30DB8D645C03.png"
                      alt="6185F99F-F8E2-4C68-B34A-30DB8D645C03"
                ></p>
<blockquote>
<p>需要注意的是，P并不会强依赖与Redis与D系统，因其本地缓存有一份全量的数据，只是对数据的实时性不能保证，要靠D系统来定时发送更新通知，本文是对P，D系统在Redis中数据的同步进行讨论，不关注其他细节实现。</p>
</blockquote>
<h3 id="数据同步一般分为全量和增量"><a href="#数据同步一般分为全量和增量" class="headerlink" title="数据同步一般分为全量和增量"></a>数据同步一般分为全量和增量</h3><p>在系统初始化阶段最好是全量加载，待本地有了完整数据后，之后的更新最好是增量进行，一是可以提高网络传输性能，加快更新进度，二是可以避免在数据量过大时全量覆盖速度太慢影响正常业务请求，还可能导致本次更新未完成便收到下次更新通知，使得系统陷入更新困境，造成恶循环拖垮性能。 下面描述对两种同步方式的实现思路</p>
<h4 id="全量覆盖的实现："><a href="#全量覆盖的实现：" class="headerlink" title="全量覆盖的实现："></a>全量覆盖的实现：</h4><p>D系统拉取到全部数据后，直接删除redis上旧的数据结构，例如一个Hash，再将新的数据全部传到新的Hash结构里，P系统收到更新后，全量拉取该Hash的数据覆盖本地缓存。</p>
<h4 id="增量覆盖的实现："><a href="#增量覆盖的实现：" class="headerlink" title="增量覆盖的实现："></a>增量覆盖的实现：</h4><p>增量存在三种数据不一致情况，新增数据，删除数据，修改数据，比较容易想到的方式是，每次D系统拉取到新的全部数据后，用该数据集和Redis中的数据集对比，假设新数据集为n，旧数据集为m，用n与m数据做差集，其实就是n中的数据查找m中是否存在，存在的话进行对比，不一致则更新，如果不存在就插入该数据，时间复杂度在n*m，这样只能统计出新增和修改的数据，如果要统计删除的数据还需要再进行双向遍历来查找。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/21A0A87E-1B73-4555-9EB7-61C7584127FD.png"
                      alt="21A0A87E-1B73-4555-9EB7-61C7584127FD"
                ></p>
<h4 id="优化增量同步："><a href="#优化增量同步：" class="headerlink" title="优化增量同步："></a>优化增量同步：</h4><p>基于此方案的缺陷，提出来另一种优化思路，增加版本号来控制数据的更新，使用Zset或者Hash来存储数据，Score作为版本号，即在D系统拿到全量数据后，不需要把Redis的旧数据挂下来，直接用新的数据集去查找对比，根据三种数据状态来描述，查找数据时如果能找到说明数据没有更新，将该记录的score值递增，找不到可能是已经更新的数据，则直接新插入该数据，并将score设置为相同的值，当整个过程执行完成后，Redis上的数据就被更新了一遍，以score来区分，没有更新score值的可能是已经更新了或者删除了，更新了score值的可能是新插入或者能查找到的。P系统在接收到更新通知后，根据本次的版本号score值，拉取对应score值的数据集来覆盖本地的缓存。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/C038E3FD-C8C6-4832-984A-5383AB8E4863.png"
                      alt="C038E3FD-C8C6-4832-984A-5383AB8E4863"
                ></p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>有问题的可以加入这个群：863184226</title>
    <url>/2019/04/04/%E6%9C%89%E9%97%AE%E9%A2%98%E7%9A%84%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%85%A5%E8%BF%99%E4%B8%AA%E7%BE%A4%EF%BC%9A226520254/</url>
    <content><![CDATA[<h3 id="有问题的可以加入群聊："><a href="#有问题的可以加入群聊：" class="headerlink" title="有问题的可以加入群聊："></a>有问题的可以加入群聊：</h3><h3 id="群一：226520254（满）"><a href="#群一：226520254（满）" class="headerlink" title="群一：226520254（满）"></a>群一：226520254（满）</h3><h3 id="群二：793838509"><a href="#群二：793838509" class="headerlink" title="群二：793838509"></a>群二：793838509</h3><h3 id="群三：863184226"><a href="#群三：863184226" class="headerlink" title="群三：863184226"></a>群三：863184226</h3>]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>服务频繁发生YoungGC的处理过程（合理压测）</title>
    <url>/2021/06/22/%E6%9C%8D%E5%8A%A1%E9%A2%91%E7%B9%81%E5%8F%91%E7%94%9Fyounggc%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B%EF%BC%88%E5%90%88%E7%90%86%E5%8E%8B%E6%B5%8B%EF%BC%89/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>最近一直在做项目的GC优化，因为服务在运行过程中频繁发生GC问题，虽然不是FullGC，但Young频繁GC也会影响线上服务的性能，优化的方向有两个，1.修改JVM参数 ，2.优化代码逻辑。查看当前线上JVM配置调整年轻代的大小可以缓解因内存分配太小而发生频繁GC的问题。本次优化的重点在于代码逻辑的实现，主要原因是：</p>
<ol>
<li><p>在目前架构内，系统并不能通过改变eden区大小得到有效解决，年轻代内存区域调大，GC频率改善，但时长会变长。反之，作用也是相反。</p>
</li>
<li><p>频繁的GC和pause清理耗时又引起jvm内tomact线程数的增加，可通过监控观测到服务实例的tp99和tp95的能力逐渐降低</p>
</li>
<li><p>通过增加服务实例提升性能的效果不够明显，反而因为服务中定时任务更加频繁请求接口，造成下游服务的压力负担。</p>
</li>
</ol>
<h3 id="优化阶段"><a href="#优化阶段" class="headerlink" title="优化阶段"></a>优化阶段</h3><p>第一次优化，主要是去除代码中定时任务线程拉取下游接口数据的功能，因为每次会向年轻代申请大量的内存，关闭定时数据对比功能，数据对比逻辑中会对全量数据进行遍历，也会占用一部分年轻代的内存。 第二张图为监控三小时内优化后服务运行的YoungGC情况，GC次数已经明显降低，曲线波动幅度变小，GC频率在8分钟-10分钟。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210617103828569.png"
                      alt="image-20210617103828569"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210617103841016.png"
                      alt="image-20210617103841016"
                > 第二次优化，重写数据对比功能，通过随机数据抽样生成小样本来进行对比，第二张图为运行一段时间后的GC情况，曲线中的锯齿状波动说明在定时数据对比时进行了内存申请。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210617164901431.png"
                      alt="image-20210617164901431"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210617164511338.png"
                      alt="image-20210617164511338"
                ></p>
<h3 id="压力阶段"><a href="#压力阶段" class="headerlink" title="压力阶段"></a>压力阶段</h3><p>优化阶段结束后对服务进行了压力测试，以分析在大量并发访问情况下GC的情况，这次测试也让我知道压力测试不是压力越大越好，要实际考虑服务器性能，合理的设置线程并发数和吞吐量来进行压测，不然效果可能会适得其反，无法得出有价值的结论，影响正常优化逻辑的判断。 图一图二分别时超量压测时旧版服务和新版服务的GC情况，无法看出哪个效果更好更明显，因为超过服务最大负载量。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210618141854322.png"
                      alt="image-20210618141854322"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210618141918411.png"
                      alt="image-20210618141918411"
                > 在调整吞吐量后进行压力测试，在合理的吞吐范围内，通过图二可以看出GC情况降低很多，远没有旧版服务的GC频繁，明显可以看出优化后的效果。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210618141519832.png"
                      alt="image-20210618141519832"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/image-20210618141536471.png"
                      alt="image-20210618141536471"
                ></p>
<h3 id="我的总结"><a href="#我的总结" class="headerlink" title="我的总结"></a>我的总结</h3><p>结论：性能优化的路很长，要了解的方向也很多，软件和硬件方面都要考虑，任何指标的变动都可能对整体服务性能造成影响，还是第一次对于年轻代GC进行优化，可能采用的方案并不正确，分析得到的结果也有错误，但也算是一种思路，仅供参考，最后还了解到压测的合理性，以前总觉得压测越大越好，只要压不崩就往崩了压，但其实这只是极端的压力测试，可以参考的意义并不大，尽量结合具体场景来进行测试，才能更准确的反映服务性能，得到预期的结果。</p>
]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>浅析微服务注册中心的注册与发现</title>
    <url>/2021/03/05/%E6%B5%85%E6%9E%90%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="浅析微服务注册中心的注册与发现"><a href="#浅析微服务注册中心的注册与发现" class="headerlink" title="浅析微服务注册中心的注册与发现"></a>浅析微服务注册中心的注册与发现</h1><h4 id="注册中心是用来集中管理微服务，实现服务的注册，发现，检查等功能，目前比较成熟的注册中心组件有很多，如Consul，eureka，zookeeper，etcd，nacos，不同组件之间性能，并发，高可用都会有差距。但对于用户来说基本的功能实现都是透明的。其实如果我们自己开发一套注册中心也可以，能够满足基本的功能即可。"><a href="#注册中心是用来集中管理微服务，实现服务的注册，发现，检查等功能，目前比较成熟的注册中心组件有很多，如Consul，eureka，zookeeper，etcd，nacos，不同组件之间性能，并发，高可用都会有差距。但对于用户来说基本的功能实现都是透明的。其实如果我们自己开发一套注册中心也可以，能够满足基本的功能即可。" class="headerlink" title="注册中心是用来集中管理微服务，实现服务的注册，发现，检查等功能，目前比较成熟的注册中心组件有很多，如Consul，eureka，zookeeper，etcd，nacos，不同组件之间性能，并发，高可用都会有差距。但对于用户来说基本的功能实现都是透明的。其实如果我们自己开发一套注册中心也可以，能够满足基本的功能即可。"></a>注册中心是用来集中管理微服务，实现服务的注册，发现，检查等功能，目前比较成熟的注册中心组件有很多，如Consul，eureka，zookeeper，etcd，nacos，不同组件之间性能，并发，高可用都会有差距。但对于用户来说基本的功能实现都是透明的。其实如果我们自己开发一套注册中心也可以，能够满足基本的功能即可。</h4><ol>
<li><h4 id="支持IP端口的注册：注册中心提供接口将服务发布者的信息添加进去。"><a href="#支持IP端口的注册：注册中心提供接口将服务发布者的信息添加进去。" class="headerlink" title="支持IP端口的注册：注册中心提供接口将服务发布者的信息添加进去。"></a>支持IP端口的注册：注册中心提供接口将服务发布者的信息添加进去。</h4></li>
<li><h4 id="提供一些其他信息，如服务名称，只注册IP仅能实现基本功能，如果需要加密或者负载均衡时，如对相同服务下不同节点设置不同权重进行流量分配，都需要更加详细的规则参数来实现。"><a href="#提供一些其他信息，如服务名称，只注册IP仅能实现基本功能，如果需要加密或者负载均衡时，如对相同服务下不同节点设置不同权重进行流量分配，都需要更加详细的规则参数来实现。" class="headerlink" title="提供一些其他信息，如服务名称，只注册IP仅能实现基本功能，如果需要加密或者负载均衡时，如对相同服务下不同节点设置不同权重进行流量分配，都需要更加详细的规则参数来实现。"></a>提供一些其他信息，如服务名称，只注册IP仅能实现基本功能，如果需要加密或者负载均衡时，如对相同服务下不同节点设置不同权重进行流量分配，都需要更加详细的规则参数来实现。</h4></li>
<li><h4 id="优雅关闭，服务下线功能是必须的，既然注册了必须在节点失效的时候及时剔除掉，如果没有及时下线，会造成大量请求依旧错误的访问。注册中心可以提供关闭接口，而应用程序里也应在shutdown的时候调用接口来合理进行下线操作。"><a href="#优雅关闭，服务下线功能是必须的，既然注册了必须在节点失效的时候及时剔除掉，如果没有及时下线，会造成大量请求依旧错误的访问。注册中心可以提供关闭接口，而应用程序里也应在shutdown的时候调用接口来合理进行下线操作。" class="headerlink" title="优雅关闭，服务下线功能是必须的，既然注册了必须在节点失效的时候及时剔除掉，如果没有及时下线，会造成大量请求依旧错误的访问。注册中心可以提供关闭接口，而应用程序里也应在shutdown的时候调用接口来合理进行下线操作。"></a>优雅关闭，服务下线功能是必须的，既然注册了必须在节点失效的时候及时剔除掉，如果没有及时下线，会造成大量请求依旧错误的访问。注册中心可以提供关闭接口，而应用程序里也应在shutdown的时候调用接口来合理进行下线操作。</h4></li>
<li><h4 id="健康检查功能，上面的优雅关闭只是正常情况，当用户采用kill-9这种粗暴的停止方式，或者网络不通等异常情况发生，注册中心需要及时检查到异常情况的发生。健康检查也分为很多种。"><a href="#健康检查功能，上面的优雅关闭只是正常情况，当用户采用kill-9这种粗暴的停止方式，或者网络不通等异常情况发生，注册中心需要及时检查到异常情况的发生。健康检查也分为很多种。" class="headerlink" title="健康检查功能，上面的优雅关闭只是正常情况，当用户采用kill -9这种粗暴的停止方式，或者网络不通等异常情况发生，注册中心需要及时检查到异常情况的发生。健康检查也分为很多种。"></a>健康检查功能，上面的优雅关闭只是正常情况，当用户采用kill -9这种粗暴的停止方式，或者网络不通等异常情况发生，注册中心需要及时检查到异常情况的发生。健康检查也分为很多种。</h4><ol>
<li><h5 id="客户端心跳连接：客户端每隔一定时间主动发送“心跳”的方式来向服务端表明自己的服务状态正常，心跳可以是-TCP-的形式，也可以是-HTTP-的形式。"><a href="#客户端心跳连接：客户端每隔一定时间主动发送“心跳”的方式来向服务端表明自己的服务状态正常，心跳可以是-TCP-的形式，也可以是-HTTP-的形式。" class="headerlink" title="客户端心跳连接：客户端每隔一定时间主动发送“心跳”的方式来向服务端表明自己的服务状态正常，心跳可以是 TCP 的形式，也可以是 HTTP 的形式。"></a>客户端心跳连接：客户端每隔一定时间主动发送“心跳”的方式来向服务端表明自己的服务状态正常，心跳可以是 TCP 的形式，也可以是 HTTP 的形式。</h5></li>
<li><h5 id="保持长连接：可以通过维持客户端和服务端的一个-socket-长连接自己实现一个客户端心跳的方式。"><a href="#保持长连接：可以通过维持客户端和服务端的一个-socket-长连接自己实现一个客户端心跳的方式。" class="headerlink" title="保持长连接：可以通过维持客户端和服务端的一个 socket 长连接自己实现一个客户端心跳的方式。"></a>保持长连接：可以通过维持客户端和服务端的一个 socket 长连接自己实现一个客户端心跳的方式。</h5></li>
<li><h5 id="创建会话：ZooKeeper-并没有主动的发送心跳，而是依赖了组件本身提供的临时节点的特性，通过-ZooKeeper-连接的-session-来维持临时节点。"><a href="#创建会话：ZooKeeper-并没有主动的发送心跳，而是依赖了组件本身提供的临时节点的特性，通过-ZooKeeper-连接的-session-来维持临时节点。" class="headerlink" title="创建会话：ZooKeeper 并没有主动的发送心跳，而是依赖了组件本身提供的临时节点的特性，通过 ZooKeeper 连接的 session 来维持临时节点。"></a>创建会话：ZooKeeper 并没有主动的发送心跳，而是依赖了组件本身提供的临时节点的特性，通过 ZooKeeper 连接的 session 来维持临时节点。</h5></li>
<li><h5 id="注册中心主动探测：调用服务发布者某个-HTTP-接口来完成健康检查，例如consul就有这样的探测机制。"><a href="#注册中心主动探测：调用服务发布者某个-HTTP-接口来完成健康检查，例如consul就有这样的探测机制。" class="headerlink" title="注册中心主动探测：调用服务发布者某个 HTTP 接口来完成健康检查，例如consul就有这样的探测机制。"></a>注册中心主动探测：调用服务发布者某个 HTTP 接口来完成健康检查，例如consul就有这样的探测机制。</h5></li>
</ol>
</li>
<li><h4 id="连接注册中心：简单的方法就是在配置文件中固定注册中心IP地址，然而这样的扩展性会很差，无法支持水平扩容的多机部署，或者写多台服务器的地址，类似Kafka从中获取元数据信息，然后再进行二次连接。"><a href="#连接注册中心：简单的方法就是在配置文件中固定注册中心IP地址，然而这样的扩展性会很差，无法支持水平扩容的多机部署，或者写多台服务器的地址，类似Kafka从中获取元数据信息，然后再进行二次连接。" class="headerlink" title="连接注册中心：简单的方法就是在配置文件中固定注册中心IP地址，然而这样的扩展性会很差，无法支持水平扩容的多机部署，或者写多台服务器的地址，类似Kafka从中获取元数据信息，然后再进行二次连接。"></a>连接注册中心：简单的方法就是在配置文件中固定注册中心IP地址，然而这样的扩展性会很差，无法支持水平扩容的多机部署，或者写多台服务器的地址，类似Kafka从中获取元数据信息，然后再进行二次连接。</h4></li>
<li><h4 id="服务发现：如果查看本机发布和订阅的服务，注册中心需要提供了丰富的接口，支持根据应用名、IP、订阅服务名、发布服务名，来进行多层次的组合查询。"><a href="#服务发现：如果查看本机发布和订阅的服务，注册中心需要提供了丰富的接口，支持根据应用名、IP、订阅服务名、发布服务名，来进行多层次的组合查询。" class="headerlink" title="服务发现：如果查看本机发布和订阅的服务，注册中心需要提供了丰富的接口，支持根据应用名、IP、订阅服务名、发布服务名，来进行多层次的组合查询。"></a>服务发现：如果查看本机发布和订阅的服务，注册中心需要提供了丰富的接口，支持根据应用名、IP、订阅服务名、发布服务名，来进行多层次的组合查询。</h4></li>
<li><h4 id="服务订阅（非必需）：服务有节点退出或新的节点加入时，订阅者如何及时收到通知，这里便是pull和push的问题，push典型的，例如zookeeper基于socket长连接实现notify，还有一种长轮询的实现，这两种都有一定的技术难度，通过pull的方式定时轮询会简单一些，但需要调整合适的请求时间间隔，频率越高注册中心所承受的压力也越大。"><a href="#服务订阅（非必需）：服务有节点退出或新的节点加入时，订阅者如何及时收到通知，这里便是pull和push的问题，push典型的，例如zookeeper基于socket长连接实现notify，还有一种长轮询的实现，这两种都有一定的技术难度，通过pull的方式定时轮询会简单一些，但需要调整合适的请求时间间隔，频率越高注册中心所承受的压力也越大。" class="headerlink" title="服务订阅（非必需）：服务有节点退出或新的节点加入时，订阅者如何及时收到通知，这里便是pull和push的问题，push典型的，例如zookeeper基于socket长连接实现notify，还有一种长轮询的实现，这两种都有一定的技术难度，通过pull的方式定时轮询会简单一些，但需要调整合适的请求时间间隔，频率越高注册中心所承受的压力也越大。"></a>服务订阅（非必需）：服务有节点退出或新的节点加入时，订阅者如何及时收到通知，这里便是pull和push的问题，push典型的，例如zookeeper基于socket长连接实现notify，还有一种长轮询的实现，这两种都有一定的技术难度，通过pull的方式定时轮询会简单一些，但需要调整合适的请求时间间隔，频率越高注册中心所承受的压力也越大。</h4></li>
</ol>
<h4 id="当服务节点数越来越多时，注册中心的性能会成为瓶颈，这时候就需要通过水平扩容来提升服务注册中心集群的性能，对于采用了类-Paxos-协议的强一致性的组件，由于每次写操作需要过半的节点确认，水平扩容只能提升集群的读性能，而不能提升集群的写性能，因为所有的写操作都需要leader节点来完成，对于采用最终一致性的组件来说，水平扩容可以同时提升集群的写性能和读性能，但对实时数据的一致性不能提供保证。在安全方面，必须在每一次的注册、发布、心跳，都带上鉴权的信息，防止恶意注册导致的信息泄漏和服务攻击。"><a href="#当服务节点数越来越多时，注册中心的性能会成为瓶颈，这时候就需要通过水平扩容来提升服务注册中心集群的性能，对于采用了类-Paxos-协议的强一致性的组件，由于每次写操作需要过半的节点确认，水平扩容只能提升集群的读性能，而不能提升集群的写性能，因为所有的写操作都需要leader节点来完成，对于采用最终一致性的组件来说，水平扩容可以同时提升集群的写性能和读性能，但对实时数据的一致性不能提供保证。在安全方面，必须在每一次的注册、发布、心跳，都带上鉴权的信息，防止恶意注册导致的信息泄漏和服务攻击。" class="headerlink" title="当服务节点数越来越多时，注册中心的性能会成为瓶颈，这时候就需要通过水平扩容来提升服务注册中心集群的性能，对于采用了类 Paxos 协议的强一致性的组件，由于每次写操作需要过半的节点确认，水平扩容只能提升集群的读性能，而不能提升集群的写性能，因为所有的写操作都需要leader节点来完成，对于采用最终一致性的组件来说，水平扩容可以同时提升集群的写性能和读性能，但对实时数据的一致性不能提供保证。在安全方面，必须在每一次的注册、发布、心跳，都带上鉴权的信息，防止恶意注册导致的信息泄漏和服务攻击。"></a>当服务节点数越来越多时，注册中心的性能会成为瓶颈，这时候就需要通过水平扩容来提升服务注册中心集群的性能，对于采用了类 Paxos 协议的强一致性的组件，由于每次写操作需要过半的节点确认，水平扩容只能提升集群的读性能，而不能提升集群的写性能，因为所有的写操作都需要leader节点来完成，对于采用最终一致性的组件来说，水平扩容可以同时提升集群的写性能和读性能，但对实时数据的一致性不能提供保证。在安全方面，必须在每一次的注册、发布、心跳，都带上鉴权的信息，防止恶意注册导致的信息泄漏和服务攻击。</h4><h3 id="最后，基于以上这些可以实现一个注册中心的大致轮廓，而更加高级的功能，如服务高可用和容灾，安全问题还需要进一步完善。"><a href="#最后，基于以上这些可以实现一个注册中心的大致轮廓，而更加高级的功能，如服务高可用和容灾，安全问题还需要进一步完善。" class="headerlink" title="最后，基于以上这些可以实现一个注册中心的大致轮廓，而更加高级的功能，如服务高可用和容灾，安全问题还需要进一步完善。"></a>最后，基于以上这些可以实现一个注册中心的大致轮廓，而更加高级的功能，如服务高可用和容灾，安全问题还需要进一步完善。</h3>]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>测试单节点Kafka在Zookeeper关闭后的运行状态和请求响应状态</title>
    <url>/2020/11/30/%E6%B5%8B%E8%AF%95%E5%8D%95%E8%8A%82%E7%82%B9kafka%E5%9C%A8zookeeper%E5%85%B3%E9%97%AD%E5%90%8E%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E5%92%8C%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E7%8A%B6/</url>
    <content><![CDATA[<p>测试单节点Kafka在Zookeeper关闭后的运行状态和请求响应状态 Kafka版本：2.11-2.1.0 zookeeper版本：3.5.5 系统版本：centos7.6</p>
<h4 id="这个问题是在一次面试的时候面试官问的，当时确实懵了，只能模糊的去描述zookeeper关闭后的kafka-状态，自己并不非常肯定，回来之后一直想亲自试验一下，今天刚好搭了一个单节点的Kafka和单节点的zookeeper，之后有时间再去分别测试集群版环境的响应情况。"><a href="#这个问题是在一次面试的时候面试官问的，当时确实懵了，只能模糊的去描述zookeeper关闭后的kafka-状态，自己并不非常肯定，回来之后一直想亲自试验一下，今天刚好搭了一个单节点的Kafka和单节点的zookeeper，之后有时间再去分别测试集群版环境的响应情况。" class="headerlink" title="这个问题是在一次面试的时候面试官问的，当时确实懵了，只能模糊的去描述zookeeper关闭后的kafka 状态，自己并不非常肯定，回来之后一直想亲自试验一下，今天刚好搭了一个单节点的Kafka和单节点的zookeeper，之后有时间再去分别测试集群版环境的响应情况。"></a>这个问题是在一次面试的时候面试官问的，当时确实懵了，只能模糊的去描述zookeeper关闭后的kafka 状态，自己并不非常肯定，回来之后一直想亲自试验一下，今天刚好搭了一个单节点的Kafka和单节点的zookeeper，之后有时间再去分别测试集群版环境的响应情况。</h4><h3 id="先说结论：当Zookeeper关闭后，不影响Kafka正常生产和消费数据。"><a href="#先说结论：当Zookeeper关闭后，不影响Kafka正常生产和消费数据。" class="headerlink" title="先说结论：当Zookeeper关闭后，不影响Kafka正常生产和消费数据。"></a><strong>先说结论：当Zookeeper关闭后，不影响Kafka正常生产和消费数据。</strong></h3><p>这个应该是可以想到的，仅从生产者和消费者的脚本命令也可以看出来 在创建生产者的时候，IP地址为Kafka的地址，并不需要连接zookeeper了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list 192.168.3.89:9092 --topic topic-1</span><br></pre></td></tr></table></figure></div>

<p>而消费者同样也是的</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 192.168.3.89:9092 --topic topic-1 --from-beginning</span><br></pre></td></tr></table></figure></div>

<p>新版Kafka已将consumer的位移信息保存在Kafka内部的topic中，即__consumer_offsets topic，所以consumer的消费是不受zookeeper影响的，如果要查看topic就不行了，因为topic信息保存在zookeeper中 即zookeeper保存着以下信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[admin, brokers, cluster, config, consumers, controller, controller_epoch, isr_c</span><br><span class="line">hange_notification, latest_producer_id_block, log_dir_event_notification]</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
  </entry>
  <entry>
    <title>生成密码</title>
    <url>/2017/07/27/%E7%94%9F%E6%88%90%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>生活</title>
    <url>/2017/07/27/%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>留言</title>
    <url>/2017/07/27/%E7%95%99%E8%A8%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>知乎</title>
    <url>/2017/07/27/%E7%9F%A5%E4%B9%8E/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Rain.AI人工智能</title>
    <url>/2017/07/27/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>缓存数据一致性如何保证</title>
    <url>/2021/03/17/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81/</url>
    <content><![CDATA[<p>缓存数据一致性如何保证 最近在思考的一个问题，如何保证缓存和数据库数据的一致性，防止出现类似于余额这种数据，在缓存里是1，而数据库修改为0后，用户再次发起扣费操作时，由于每次先会去判断缓存内余额的数据，缓存数据不一致，导致本应失效的一次请求被判断通过。这种情况在并发低的时候不太容易产生，当并发增大极有可能发生。 我在项目中主要靠两种方式来保证数据一致性：</p>
<ol>
<li>数据必须设置随机过期时间</li>
</ol>
<p>缓存数据最重要的目的是提高数据查询速度，在第一次查库之后将数据放入缓存，之后直接从缓存里拿数据即可，所以缓存数据的持久化并不重要，只要保证在数据库层面能够将数据持久保存就行，保证即使在缓存挂了之后，大不了每次请求都走数据库，虽然会慢，但不影响正常执行过程。所以数据必须设置过期时间，具体的设置规则要参加热点数据的属性来判断，诸如用户名，应用名，接口名之类的，改动概率很小的数据可以将过期时间设置在一天之内，而像校验次数一些更新很频繁的数据，过期时间可以设置的短一些，100s左右。 时间为什么一定要是随机的，这里是为了防止出现缓存雪崩的情况，例如热点数据同时在上午访问量比较高的某一刻失效，导致大面积请求去查库，会造成整体请求的耗时增加甚至拖垮数据库。</p>
<ol>
<li>变更发生时让缓存立即失效</li>
</ol>
<p>当业务上出现用户充值或修改信息时，在这些地方要及时让缓存失效，这样用户修改完成后，下次访问数据的时候可以先去数据库查询最新的数据，再放入缓存里，防止数据不一致的发生，但这里还有一个问题</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.更新数据库</span><br><span class="line">2.缓存失效</span><br></pre></td></tr></table></figure></div>

<p>这两个操作并不是原子的，很可能在1.更新数据库之后，还有其他请求在查询缓存，所以我采用的策略是先让缓存失效，在更新数据库。 以上场景都比较简单，如果是更加复杂的场景，可能还要考虑需要保证缓存和数据库的实时一致性，还是最终一致性。</p>
]]></content>
      <categories>
        <category>Programme</category>
      </categories>
  </entry>
  <entry>
    <title>开发</title>
    <url>/2017/07/27/%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>网易</title>
    <url>/2017/07/27/%E7%BD%91%E6%98%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>聊天室</title>
    <url>/2019/03/31/%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>自己</title>
    <url>/2017/07/27/%E8%87%AA%E5%B7%B1-2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>自己</title>
    <url>/2017/07/27/%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>身份证查询</title>
    <url>/2017/07/29/%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>重写的六大风险</title>
    <url>/2020/11/30/%E9%87%8D%E5%86%99%E7%9A%84%E5%85%AD%E5%A4%A7%E9%A3%8E%E9%99%A9/</url>
    <content><![CDATA[<h2 id="重写的六大风险"><a href="#重写的六大风险" class="headerlink" title="重写的六大风险"></a>重写的六大风险</h2><p>因最近一直在重写公司一套系统，看到这篇文章时觉得说得很好，里面的观点和建议说得非常有价值，值得在重写过程中被注意。 在转载过程中对文章进行了部分修改，使得文章更加切实我最近的重写历程。 原文转载至：<a class="link"   href="https://mp.weixin.qq.com/s/2uzq0Q/_WcgH-hacTYsqgJQ" >https://mp.weixin.qq.com/s/2uzq0Q\_WcgH-hacTYsqgJQ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 尽管重写必然会给团队带来风险，但我们经常还是不顾一切地踏上重写的旅程。 重写带有一种欺骗性的诱惑，其逻辑看上去是这样：</p>
<blockquote>
<p>这个系统已经应用于生产环境，我们显然知道它是如何工作的，因此只要将其移植到一个更好的平台，一旦我们完成这项工作，事情就会变得更简单。</p>
</blockquote>
<p>我们在本文将批判这种基于直觉的认识。你会看到，<strong>重写绝非易事</strong>。尽管我们不受新应用程序部分挑战的影响，但也会碰到前所未有的全新挑战。为成功地完成重写，我们必须应对这些挑战，因此提前了解有什么风险很有必要。 在冒险重写前，让我们讲述一个快速的起源故事，看看我们是怎么走到这一步的？</p>
<h3 id="1开始"><a href="#1开始" class="headerlink" title="1开始"></a>1开始</h3><p>这一切都始于绿地开发（ Greenfield Development ）阶段。在这个阶段，我们萌生一个想法，开始构建一款功能强大的应用程序。经过数周或几个月的不懈努力，我们最终向市场发布了一款产品。当然，这个“市场”既可能是真正的付费用户，也可能是一组内部业务用户等等。 如果应用程序很受欢迎，在一段时间内，它会处于增强（ Enhancement ）阶段，添加新功能，解决缺陷。这是个平衡阶段，每个人都是快乐的。最终， 技术债务会不断累积，我们开始发现，努力工作的回报在递减——在过去，一周的开发足以添加一个完整的新功能，但现在，可能都不够商讨出一个需求。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://uos.rain1024.com/image/640.png"
                      alt="img"
                > 这时，我们可能就会产生疑问：投入时间和金钱去做一件注定失败的事，这样做是否值得。此外，自应用程序首次发布以来，可能出现了一些令人兴奋的新技术，我们可能对如何利用这些技术让应用程序更具弹性、更易使用和更高效等有一些宏伟愿景。所以，我们开始制定一个重写计划。其思想是将现有系统的开发短时间冻结，然后将资源转移到替代系统上。我们会先打基础（使用更现代的模式、工具、语言等等），然后将现有的功能迁移过去。用户只需要安然度过“暂停”（即不获得任何新的更新），但是当重写的系统就位时，工作效率应该是以前的两倍（或者更多！） 。 虽然这个“直接迁移（lift and shift）”计划看起来直截了当，但它掩盖了一些关键风险——技术、组织和心理方面的因素都会使这个重写阶段极不稳定。此外，这个阶段拖得越久，我们成功（即交付替换品）的机会就越低。因此，让我们看看其中隐含的一些危险。</p>
<h3 id="2第一个风险：双倍的工作量"><a href="#2第一个风险：双倍的工作量" class="headerlink" title="2第一个风险：双倍的工作量"></a>2第一个风险：双倍的工作量</h3><p>在这段旅程中，我们常常面对的第一个风险是重写基本上是双倍的工作量。当然，在技术上，我们希望自己可以暂停以往的开发，只专注于在新平台上编写代码，但现实（准确地说是业务）很难遵守这一原则。 或许是为了赢得（或留住）一个重要客户，业务人员要求我们现在就在已有系统中添加一些新特性。或者第三方系统改变了其 API，而我们需要重构，或者出现了 sev-1 缺陷，或者新的政府法规发布。 关键是， 生产系统几乎不可能长时间处于静止状态 ，甚至在重写期间也是如此。对旧系统进行维护是不可避免的，而这意味着并行开发。 这样，第一个问题是并行开发违反了我们作为开发人员最神圣的原则：不要重复自己。对遗留系统的任何更改都需要移植到新系统中。例如，如果我们在旧栈中添加特性 X，我们必须在新栈中再次添加 X（但这次是用新的语言或框架编写的）。这种重复工作也适用于 X 的测试、项目管理、构建和部署。本质上，无论对遗留系统进行更改需要花费多少时间或资源，在重写阶段，成本很容易翻倍。 而且，根据重写工作的进度，更改（如功能、缺陷修复等等）可能发生在源代码中尚未重写的部分，所以团队必须记住，到那里的时候要把重写的时间线后推。或者在相反情况下，更改发生在应用程序中已经重写的部分，因此，团队必须返回并更新刚刚迁移过的代码（然后重新测试等等）。 无论哪一种方式，重写过程中的并行开发都可能让人觉得，团队在地面上构建替代品的同时还要保证飞机的正常飞行。为了乘客的安全，那架飞机必须留在空中，但如果我们花太多的精力去维护它，我们就永远无法让新飞机起飞。当然，负责这两驾“飞机”的团队通常是同一个，这就引出了下一个问题。</p>
<h3 id="3第二个风险：团队分裂"><a href="#3第二个风险：团队分裂" class="headerlink" title="3第二个风险：团队分裂"></a>3第二个风险：团队分裂</h3><p>假设需要做一些必要的工作来支持现有系统，那么问题是：谁对此负责？通常，团队会采用两种方法来管理并行工作。一种选择是，让更多的初级开发人员留在维护模式中，从而解放高级开发人员来开发新系统。这是有道理的，因为完成重写通常需要更高层次的技术“无畏派”——掌握各种新技术并整合应用、配置环境、建立模式和约定等等，这些都是棘手的任务，可能会让新晋开发人员深陷泥潭。因此，团队可能会决定进行这种类型的分裂，初级开发人员维护，高级开发人员继续前进。但这可能只是短时间有效， 不用多久，高级开发人员还是会被拉回来帮助解决需要全员参与的关键问题或讨论一些变化的影响。 多年来，他们对旧系统的了解，以及他们与业务利益相关者、运维人员和其他人的关系，让他们不可替代。他们不得不参与其中。即使这种“抽离”每周只占用几个小时，但上下文切换仍然会阻碍工作效率。当开发人员在旧系统和新系统之间来回切换时，重写的时间线就会被推后。 为避免这种情况，团队可以采取另一种方法：<strong>组建一个新团队，这样更容易专注于重写</strong>。这个“重写团队”的开发人员与现有系统的联系可以忽略不计（也许他们是顾问、新雇员等等），因此他们能更好地将自己隔离开来，并在新工作中保持高效。 问题解决了？没有。第一个问题是根据定义，这些开发人员不太熟悉代码库，不具备领域知识，不知道事物是如何运转的，也不知道为什么要这样运转。当然，他们有原始代码作为文档，但这就像通过查看源代码来学习编程语言一样。这都是事实，不是讲故事。因此，这个新团队要么会在理解现有系统的错综复杂之处时步履维艰，要么会为了继续前进而做出错误的假设，要么最终不得不拉拢原来的团队。这些都不是富有成效的结果。 此外，这种“组建新团队”的方法也会疏远那些留下来负责支持遗留系统的资深开发人员，使他们感到好像自己因为忠诚度和经验受到了惩罚。新团队使用现代化的技术开始全新工作，而他们还在毫无生气的做着维护。这一点也不酷。因此，不出所料，这样很快就会导致开发人员不满，稍后是人才流失。我们需要设计一个团队结构，既能支持旧系统，又能正确高效地构建新系统，让每个人都满意。但即使你让合适的人上了合适的车，还是会有意外发生。</p>
<h3 id="4第三个风险：意外之事"><a href="#4第三个风险：意外之事" class="headerlink" title="4第三个风险：意外之事"></a>4第三个风险：意外之事</h3><p>现在，即使重写的团队配备了经验丰富的开发人员（即那些帮助编写遗留系统或至少有一些经验的开发人员），在将现有的源代码迁移到新平台时，总还是会有意外。对于此类意外事件，Donald Rumsfeld 提出了比较中肯的见解： 有报道说 ，我们总是对没有发生的事情感兴趣，因为据我们所知 ，有已知的已知 ；有些事情我们知道我们已经知道。我们也知道有已知的未知；也就是说，我们知道有些事情是我们不知道的。但也有未知的未知——那些我们不知道自己不知道的。纵观我们国家和其他自由国家的历史，后一类往往是最困难的一类。 通常，当开始重写过程时，我们会设法估计需要付出多少努力。从这里开始，我们会编目前两类工作。当然，有一些代码库我们有直接的经验，因此，我们可以更快（更准确）地做出估计。这些是已知的已知。但是，系统中也有一些地方，我们知道自己没有直接的经验，所以我们增加了一些缓冲。 比如，Joe 编写了注册流程，但是他去年辞职，所以迁移可能需要更长的时间。 这些就是已知的未知。我们按计划继续进行，评估这两种类型的工作，并为已知的未知留出额外时间，直到就整个时间线达成一致。 然而，直到我们深入研究并开始迁移代码时，我们才偶然发现第三种也是最有害的工作类别，即未知的未知。它可能是我们从来不知道其存在的 1000 行令人费解的业务逻辑，或者是我们不知道何人使用的一组报告，又或者是一些我们不知道的将整个系统集成在一起的“胶带”。不管是什么，我们最初的重写计划都从来没有考虑到它，但我们此时已经走出太远，无法回头。 结果是，我们要分析这个（以前）未知的未知，看看“它到底做了什么？”，然后进行处理（“我们需要把它迁移过来，还是可以抛在一边？”）。这些额外的分析、讨论和努力只会推迟最初计划好的时间，降低业务发起人和客户的耐心。 虽然其中一些未知的未知可以被消化吸收，但太多的话可能会使整个重写工作陷入危的境地。通过更好的计划和分解（稍后详细讨论），可以尽量减少这种未知的未知，但是要完全避免还是很困难的。不管怎样，我们还会给自己造成另一种危险。</p>
<h3 id="5第四个风险：第二系统效应"><a href="#5第四个风险：第二系统效应" class="headerlink" title="5第四个风险：第二系统效应"></a>5第四个风险：第二系统效应</h3><p>通常，我们长期忍受现有系统的缺陷，以至于当有机会重新来过时，我们忍不住想让一切变得更好，或者更完美。 几十年前， Fred Brooks 将这种趋势称为第二系统效应（ Second System Effect）。在《 人月神话》中，Brooks 谈到了系统架构师，根据他的观察： 在设计第一个项目时，他会不断地修饰和润色功能。这些功能会被存起来，用于“下一个”项目。早晚有一天，第一个项目结束了，架构师对这类系统充满信心，他相信自己已精通这一级别的系统，并时刻准备着开发第二个系统。 第二个系统是架构师们所设计的最危险的系统。当他着手第三个或第四个系统时，先前的经验会相互验证，他们就可以判断出此类系统的通用特性，而系统之间的差异会帮助他识别出经验中不具普遍性的部分。 这种影响可以通过几种方式表现出来。首先，我们倾向于把重写看作是一个消除我们在过去的系统中所积累的全部技术债务的机会。我们希望分解 God 类，修复不一致的变量命名，改写和重组数据结构等等。基本上，我们认为这是解决遗留代码中所有小问题的机会，因为将债务移植到新代码库中感觉不太合适。 此外，我们还很容易产生这样的想法，不仅将重写看作是对架构中有缺陷或缺少支持的的某些部分进行现代化的机会，而且还将其看作是一跃跨到技术最前沿的工具 。也许 UI 仍然是陈旧的 AngularJS，并不能为移动 Web 用户提供很好的渲染，所以移植到一个更现代的 Web 框架似乎是合理的。但是，当完成这项工作后，我们又将后端分解为微服务，并使用 Go 编写它们！从本质上说，重写就像一项法案——它可能只是一项减少枪支暴力的简单法案，但当它通过并成为法律时，西弗吉尼亚州已经有了五座新桥梁，俄勒冈州的农民也得到了种植大豆的补贴。 第二系统效应不仅存在于开发者中间。通常，业务涉众也会采取同样的策略，但是有他们自己的优先级。“我们还不如把这个用户渴望已久的功能在重写时添加，因为无论如何我们都会修改代码。”就像技术上的改进和润色一样，范围变得越来越大，重写的发布日期也被推得越来越晚。 最后，初始系统的开发口号是“快速上线运行！”，而重写时变成了“我们以后再也没有机会做 X、Y 和 Z 了！”</p>
<h3 id="6第五个风险：重蹈覆辙"><a href="#6第五个风险：重蹈覆辙" class="headerlink" title="6第五个风险：重蹈覆辙"></a>6第五个风险：重蹈覆辙</h3><p>人们常说，将军在和平时期会为最后一场战争做准备。他们会回顾和反思过去作战计划中的缺陷和错误，并发誓绝不让这些错误再次发生。然后下一场战争就来了，和上次完全不同。他们的准备是徒劳的。重写也会发生同样的情况。我们非常清楚自己在第一个系统上的失误，所以当设计第二个系统时，我们首先要确保自己不会重蹈覆辙。但人们很容易忽略，事情已经发生了变化。在我们重写的时候，那些过去的错误可能不是问题，所以没有必要去预防它们。与此同时，在重写中使用的现代化技术引入了一整套我们还无法预见到的新问题。 在从事咨询工作的早期，我帮助一个客户建立了一个大型网络应用程序，服务于几千名内部用户。这个应用程序是成功的，换言之，我们在预算范围内按时交付了功能，但是，我们不知不觉把“马”套在了错误的马车上。那是单页应用出现的早期，所以我们使用了一个名为 Google Web Toolkit 的刚起步的框架，在当时，它非常酷。遗憾的是，在这个应用发布一年左右之后，谷歌从 GWT 转向了更好的技术（Angular），让所有人（包括这个客户）都困在了这种基本上不受支持的技术上。这种糟糕的情况，我们是很难预测和预防的。 几年后，我有机会与一些仍然在那里的开发者重新取得联系，他们告诉我，他们别无选择，只能重写这个应用程序。但当我问他们选了哪些技术时，我感到很惊讶。他们不想再被单页面应用技术或一个昙花一现的框架所伤害，于是他们选择了一项非常非常成熟且有十年之久的服务器端页面渲染技术，尽管此时，单页框架已经非常可靠，每个人都在使用，而他们那有着丰富用户交互的应用程序本可以从那个模型受益。换句话说，他们重写的核心驱动力是避免第一个系统的错误，但在这个过程中，他们错过了现代 Web 框架的许多优势。他们在打最后一场战争。</p>
<h3 id="7第六个风险：全有或全无"><a href="#7第六个风险：全有或全无" class="headerlink" title="7第六个风险：全有或全无"></a>7第六个风险：全有或全无</h3><p>重写的最后一个大风险是可以避免的，但通常还是无法避免。虽然我们现在认可了迭代开发的智慧和最小可行产品的概念，但通过重写，很难找到一种方法来一次性交付所有的东西。例如，如果客户一直在使用一个拥有 100 个功能的遗留系统，如果我们希望他们（愉快地）转换，我们交付的新系统怎么能够少于 100 个功能呢？基本上，重写的系统需要能够完成旧系统所做的一切，因此，在回到迭代开发之前，我们似乎必须首先部署整个替代系统。这不仅取决于现有系统的大小，可能需要付出相当的努力。 此外，这种“全有或全无”的需求与业务人员持续不断的需求相结合，会给团队带来难以置信的压力。如果团队在重写全部完成之前不能交付任何东西，那么他们就不能显示任何有形的价值，直到替代产品推出。在某种意义上，业务被重写工作俘虏了，他们要保持耐心，相信他们的开发团队可以完成这项工作。这并非易事。如果客户特别要求，或者团队经常遇到意想不到的延迟和问题（例如，未知的未知等），将重写的发布日期推后，业务可能就会觉得必须施加压力（这会迫使团队走捷径），或者干脆放弃。</p>
<h3 id="8总结"><a href="#8总结" class="headerlink" title="8总结"></a>8总结</h3><p>最后，希望你已经了解了重写阶段可能存在的风险。虽然绿地开发阶段肯定也有它的风险，但重写也不是在公园里散步。即使最有能力的团队，也很容易被并行开发、团队组织、特性和技术镀金以及“大爆炸式”部署的挑战拖垮。因此，我们必须对大规模重写有充分的理解。</p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
  </entry>
  <entry>
    <title>通过NAS对分布式系统CAP理论的理解</title>
    <url>/2020/02/23/%E9%80%9A%E8%BF%87nas%E5%AF%B9%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9Fcap%E7%90%86%E8%AE%BA%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>CAP原则又称CAP定理,指的是在一个分布式系统中: Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p>
</blockquote>
<p>CAP理论在微服务架构中是经常被研究的问题，我在之前看书的时候却总是忘记这套理论，因为它在具体设计系统时CAP原则并不能全部实现，三者之间不同组合让人倍感迷惑，每个原则的舍弃都需要考虑后续可能存在的一系列问题，而我在具体开发中也没有遇到分布式数据同步的问题，只是大概记得这些理论。 最近买了NAS，想着搭起来一套私有云来同步自己的数据，在没有NAS之前我都是用硬盘+坚果云这样的组合来存储数据，坚果云是实时同步，但容量小，硬盘容量大，但要隔几天同步一次。在有了NAS后，我可以将数据实时同步到NAS中，再由它同步到硬盘或两个以上的云存储，我很难信任一种数据存储形式，可能存在的丢失风险太大，这其实就是单体架构，而有了NAS后，我可以选择的存储形式就达到四个以上，这时我突然回忆起了分布式系统的CAP理论。 所谓一致性既是一份文件不论在哪个云存储里，都是一样的，例如word文档，我在NAS里的文件加了标题，而WebDEV里的文件却没有更改，这样很明显是有问题的，数据的不一致会导致版本冲突，影响用户体验。 而可用性则更加直接，就是我能不能访问到存放在云存储里的文件，不可访问即不可用，这样的故障显然是不可以承受的，例如硬盘损坏也会导致数据不可用性，这时候百度云或坚果云的可用性就会比较高，基本不会出现宕机的可能性。 分区容错性，借用百科的解释：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。我所搭建的私有云既存在这个问题，又解决了这个问题，存在是因为私有云受电源和网络的影响比较直接，很可能会宕机或连接缓慢，解决问题是NAS提供的套件可以将一份数据同步到多个云平台，这样，只要我的NAS是可用的，即所有数据便能在一定时限能达到一致。 这里我把NAS当作是节点，如果它一旦失效，分区容错便发生了，这时候我就要在CA中选择，本地和云端必然是不一致的，就需要决定哪个版本是可用的有效的。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://cos.rain1024.com/markdown/v2-2f26a48f5549c2bc4932fdf88ba4f72f_1200x500.jpg"
                     
                ></p>
<blockquote>
<p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足。</p>
</blockquote>
<p>当我因为数据存储而思考到这里时，便开始理解这些原则的抉择，在我这样的场景下，我会选择CA（数据一致性和可用性），而最重要的还是A可用性，保证数据此时可以使用，而一致性只是增加一些不必要的麻烦而已，即使多个云平台的数据出现不同，大不了花些时间去核对整理，最起码数据没有丢失，保证各端可用就行，以数据为核心，而分区可以等恢复之后再进行处理。 而目前都有对应的场景使用三种原则的不同组合，CA：如银行和金融业，对于涉及到钱财这样不能有一丝让步的场景，C必须保证，网络发生故障宁可停止服务，这是保证CA舍弃P。CP ：如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。AP ：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。 没有那种原则是最好的，只有最适合的。</p>
]]></content>
      <categories>
        <category>Technique</category>
      </categories>
  </entry>
  <entry>
    <title>阿里</title>
    <url>/2017/07/27/%E9%98%BF%E9%87%8C/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/2017/07/27/%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>重写线程池ThreadFactory接口实现对线程异常的捕获</title>
    <url>/2021/07/16/%E9%87%8D%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0threadfactory%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%AF%B9%E7%BA%BF%E7%A8%8B%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7/</url>
    <content><![CDATA[<p>重写线程池ThreadFactory接口实现对线程异常的捕获 在开发过程中经常会用到线程池，但创建线程池的方法都比较简单，使用Executors来创建相应功能的线程池，常用的方法有这些。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、 Executors.newFixedThreadPool(int nThreads);创建固定大小(nThreads,大小不能超过int的最大值)的线程池</span><br><span class="line">2、Executors.newSingleThreadExecutor()：创建大小为1的固定线程池。</span><br><span class="line">3、Executors.newCachedThreadPool()；创建corePoolSize为0，最大线程数为整型的最大数，线程keepAliveTime为1分钟，缓存任务的队列为SynchronousQueue的线程池。</span><br><span class="line">4、Executors.newScheduledThreadPool(int corePoolSize):创建corePoolSize大小的线程池。</span><br></pre></td></tr></table></figure></div>

<p>创建过程中最关注的参数是corePoolSize，maximumPoolSize已用来配置核心线程数和最大线程数，而KeepAliveTime，BlockingQueue，threadFactory则常被忽略，或者说不设置也无妨正常使用，但在一些特别情况下还是需要特别设置这些参数来启动线程池，这次主要来说明ThreadFactory的用处和自定义的配置。 ThreadFactory是一个接口，用户可以自己实现接口，也可以使用默认实现的，其内部只有一个方法。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface ThreadFactory &#123;</span><br><span class="line">    Thread newThread(Runnable r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Executors中有默认实现</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">static class DefaultThreadFactory implements ThreadFactory &#123;</span><br><span class="line">    private static final AtomicInteger poolNumber = new AtomicInteger(1);</span><br><span class="line">    private final ThreadGroup group;</span><br><span class="line">    private final AtomicInteger threadNumber = new AtomicInteger(1);</span><br><span class="line">    private final String namePrefix;</span><br><span class="line"></span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != null) ? s.getThreadGroup() :</span><br><span class="line">                              Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = &quot;pool-&quot; +</span><br><span class="line">                      poolNumber.getAndIncrement() +</span><br><span class="line">                     &quot;-thread-&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Thread newThread(Runnable r) &#123;</span><br><span class="line">        Thread t = new Thread(group, r,</span><br><span class="line">                              namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                              0);</span><br><span class="line">        if (t.isDaemon())</span><br><span class="line">            t.setDaemon(false);</span><br><span class="line">        if (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>newThread方法中对线程的命名和守护线程和线程优先级进行配置，这里我们可以加入更多自定义的功能，比如处理线程异常的方法还有在线程启动时打印日志等等，让线程池的创建和启动变得灵活可控。当异常发生时，及时打印异常情况然后通知其他服务或者重启线程进行重试等，但UncaughtExceptionHandler方法仅适用于execute()方法往线程池提交任务的情况，如果是适用submit方法则由回调get方法时来处理异常。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyThreadFactory implements ThreadFactory &#123;</span><br><span class="line">    static final Logger LOGGER= Logger.getAnonymousLogger();</span><br><span class="line">    private final UncaughtExceptionHandler ueh;</span><br><span class="line">    private final AtomicInteger threadNum  = new AtomicInteger(1);</span><br><span class="line">    private final String namePrefix;</span><br><span class="line"></span><br><span class="line">    public MyThreadFactory() &#123;</span><br><span class="line">        this(new LoggingUncaughtExceptionHandler(),”threadFactory”);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyThreadFactory(UncaughtExceptionHandler ueh, String namePrefix) &#123;</span><br><span class="line">        this.ueh = ueh;</span><br><span class="line">        this.namePrefix = namePrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected Thread doMakeThread(final Runnable r)&#123;</span><br><span class="line">        return new Thread(r)&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String toString() &#123;</span><br><span class="line">                ThreadGroup group = getThreadGroup();</span><br><span class="line">                String groupName = null == group?””:group.getName();</span><br><span class="line">                return getClass().getSimpleName() + “[“+getName()+”,”+getId()+”,”+groupName+”]@“+hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Thread newThread(Runnable r) &#123;</span><br><span class="line">        Thread t = doMakeThread(r);</span><br><span class="line">        t.setUncaughtExceptionHandler(ueh);</span><br><span class="line">        t.setName(namePrefix + “-“ +threadNum.getAndIncrement());</span><br><span class="line">        if (t.isDaemon())&#123;</span><br><span class="line">            t.setDaemon(false);</span><br><span class="line">        &#125;</span><br><span class="line">        if (t.getPriority() != Thread.NORM_PRIORITY)&#123;</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        &#125;</span><br><span class="line">        if (LOGGER.isLoggable(Level.FINE))&#123;</span><br><span class="line">            LOGGER.fine(“new thread created”+t);</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">    static class LoggingUncaughtExceptionHandler implements UncaughtExceptionHandler&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class="line">            System.out.println(“error”);</span><br><span class="line">            LOGGER.log(Level.SEVERE,t+”terminated:”,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>programme</category>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>首页</title>
    <url>/2017/07/27/%E9%A6%96%E9%A1%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
</search>
